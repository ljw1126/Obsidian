{"internalDocumentIDStore":{"internalIdToId":["dc039849957310ec69c1cf88775147c2","a4f0df752e644510136309e8e2065ade","280a55cb47a9aa7947a3089fae949644","2eb2d18d5533d9fee2a95e4d8fe7732d","984c1b52a1e4a348d71e06ae1af76e5e","0921f066aa07966e3bbfcc9499b36f38","9009ee42f2d05bf3768455c3f2c7281b","c456cb171026e17f10769c6975793269","8b4fd28b0c87b6367b043b5953aa5367","78a4483414041f4000f82451cfa3cd1b","820b9dea304b06cf71068bc11a8486ec","dbd257ae16d44c8d4536931e3947e38d","62c7765e813a3aa825cd459737ec9f88","b1ac257cf783d0801e0458cebfcd62cf","90696bce1b2efd329bfd39efa3d7ab97","485c018c53d5bb8817757bebf48ecba1","781fc6eef919c68c43d9442f30929185","c7bcb297eb88d19640104306d31c1e6a","63edfc7e46510e78ab366102035522b6","ea192ae485b0fe9cc5ce7fb6507a4e72","b5dd7e43bdc112de3dd8b71df91f8aa4","6dedc5ab0aa727885ec51dae14131b24","b36d72facd0568e122323e7ee01d1d07","17de5b758025908c586c7e78eae6436c","230d347e717fcc2bd8f88d8be27c615b","5f81d58a12bbe25ea80fc3dbe9d6fdd8","532c9bb532e6991b4193a08168972611","c35863a93434be8a523a4e575dfa9992","83987152e332f1ea34e67bb329483d46","ae161ed1a029574975fc16d0abfe2e2d","6aac7b121dc7c2f68c2e1d83be48a5cb","234b7fc3a4936b769256c9380326a0fc","7dc0c6c0e4de0046d154ca8d61f0ba6c","53cc96bf262039586a88ab17ac076858","c5480db69876dbe696397144d9796e2f","8231cc476f6fbc72323236bc60d781ab","515ae74151efa1ff92687e7d52343ac5","68760701d145a45add658a5b60e81709","6d1fc0583ca584a225bd01072fcd1b16","4803ad84843e046af3b33d47d032359b","bf70ec7050d709f367edaf3c865b8597","163113acc2627c112602577a83b6edac","5883ef0265c795329291772ad145f25f","a7e82c4eb3e192f780bb2fbe19411782","a6fb16ab6210e4e160e6e4c54afbb948","a3e3a9298cc139f91ba0f4e801a8954d","edd334388e5b767324da496afca10cff","815f570fed7f3502fc6402c73d009860","6faffddc81ef57b2fa941ed3226a91b4","ef586c0a890322cc0d74e2410f35bbd1","78c4f8d9eab3431ad61ce0f242ab5415","8fa3ccb0db0015e5729678bf219423a0","cc49432675423864851bf22df8d3012e","49ff9486289f87cb0be0966e968f6b8d","a48169f8d45b497076fc671092c0a4b2","b5c9a556d8dbfcfe6a3b58bcf2fa86f6","ad3bde0ddbeba88edf74afebcabe8f72","3456f0d3010850b0e090133d07c76718","7862812dc01340fb2268e31c32332a93","e1a44fa3d221ff26146effd1fada3e62","755d007d5eea85cb2a3bbb8345fa97c4","0836c208ec6065a3b8b001fd6c46d904","9394eede642d233df07ba612ae4d1765","dc95b170c58a5910e62087acc07b3f99","94b4d16e6d81304783b6b01e1e08165b","f5fd9fdc058615ed967acf9c9b838dd3","6b7d2f8c17fb15fef149630a2d476e78","86ea582ff110d6ec650cbeb762dbbdbd","6ef08af3c4507048101e99c549d7b8e7","bb24e2b75d91cdcdabe91b918c2e0b38"]},"index":{"indexes":{"id":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{"8":{"w":"0836c208ec6065a3b8b001fd6c46d904","s":"836c208ec6065a3b8b001fd6c46d904","c":{},"d":[62],"e":true},"9":{"w":"0921f066aa07966e3bbfcc9499b36f38","s":"921f066aa07966e3bbfcc9499b36f38","c":{},"d":[],"e":true}},"d":[],"e":false},"1":{"w":"1","s":"1","c":{"6":{"w":"163113acc2627c112602577a83b6edac","s":"63113acc2627c112602577a83b6edac","c":{},"d":[42],"e":true},"7":{"w":"17de5b758025908c586c7e78eae6436c","s":"7de5b758025908c586c7e78eae6436c","c":{},"d":[24],"e":true}},"d":[],"e":false},"2":{"w":"2","s":"2","c":{"3":{"w":"23","s":"3","c":{"0":{"w":"230d347e717fcc2bd8f88d8be27c615b","s":"0d347e717fcc2bd8f88d8be27c615b","c":{},"d":[25],"e":true},"4":{"w":"234b7fc3a4936b769256c9380326a0fc","s":"4b7fc3a4936b769256c9380326a0fc","c":{},"d":[32],"e":true}},"d":[],"e":false},"8":{"w":"280a55cb47a9aa7947a3089fae949644","s":"80a55cb47a9aa7947a3089fae949644","c":{},"d":[],"e":true},"e":{"w":"2eb2d18d5533d9fee2a95e4d8fe7732d","s":"eb2d18d5533d9fee2a95e4d8fe7732d","c":{},"d":[],"e":true}},"d":[],"e":false},"3":{"w":"3456f0d3010850b0e090133d07c76718","s":"3456f0d3010850b0e090133d07c76718","c":{},"d":[58],"e":true},"4":{"w":"4","s":"4","c":{"8":{"w":"48","s":"8","c":{"0":{"w":"4803ad84843e046af3b33d47d032359b","s":"03ad84843e046af3b33d47d032359b","c":{},"d":[40],"e":true},"5":{"w":"485c018c53d5bb8817757bebf48ecba1","s":"5c018c53d5bb8817757bebf48ecba1","c":{},"d":[],"e":true}},"d":[],"e":false},"9":{"w":"49ff9486289f87cb0be0966e968f6b8d","s":"9ff9486289f87cb0be0966e968f6b8d","c":{},"d":[54],"e":true}},"d":[],"e":false},"5":{"w":"5","s":"5","c":{"1":{"w":"515ae74151efa1ff92687e7d52343ac5","s":"15ae74151efa1ff92687e7d52343ac5","c":{},"d":[37],"e":true},"3":{"w":"53","s":"3","c":{"2":{"w":"532c9bb532e6991b4193a08168972611","s":"2c9bb532e6991b4193a08168972611","c":{},"d":[27],"e":true},"c":{"w":"53cc96bf262039586a88ab17ac076858","s":"cc96bf262039586a88ab17ac076858","c":{},"d":[34],"e":true}},"d":[],"e":false},"8":{"w":"5883ef0265c795329291772ad145f25f","s":"883ef0265c795329291772ad145f25f","c":{},"d":[43],"e":true},"f":{"w":"5f81d58a12bbe25ea80fc3dbe9d6fdd8","s":"f81d58a12bbe25ea80fc3dbe9d6fdd8","c":{},"d":[26],"e":true}},"d":[],"e":false},"6":{"w":"6","s":"6","c":{"2":{"w":"62c7765e813a3aa825cd459737ec9f88","s":"2c7765e813a3aa825cd459737ec9f88","c":{},"d":[],"e":true},"3":{"w":"63edfc7e46510e78ab366102035522b6","s":"3edfc7e46510e78ab366102035522b6","c":{},"d":[],"e":true},"8":{"w":"68760701d145a45add658a5b60e81709","s":"8760701d145a45add658a5b60e81709","c":{},"d":[38],"e":true},"d":{"w":"6d","s":"d","c":{"1":{"w":"6d1fc0583ca584a225bd01072fcd1b16","s":"1fc0583ca584a225bd01072fcd1b16","c":{},"d":[39],"e":true},"e":{"w":"6dedc5ab0aa727885ec51dae14131b24","s":"edc5ab0aa727885ec51dae14131b24","c":{},"d":[22],"e":true}},"d":[],"e":false},"a":{"w":"6aac7b121dc7c2f68c2e1d83be48a5cb","s":"aac7b121dc7c2f68c2e1d83be48a5cb","c":{},"d":[31],"e":true},"f":{"w":"6faffddc81ef57b2fa941ed3226a91b4","s":"faffddc81ef57b2fa941ed3226a91b4","c":{},"d":[49],"e":true},"b":{"w":"6b7d2f8c17fb15fef149630a2d476e78","s":"b7d2f8c17fb15fef149630a2d476e78","c":{},"d":[67],"e":true},"e":{"w":"6ef08af3c4507048101e99c549d7b8e7","s":"ef08af3c4507048101e99c549d7b8e7","c":{},"d":[69],"e":true}},"d":[],"e":false},"7":{"w":"7","s":"7","c":{"5":{"w":"755d007d5eea85cb2a3bbb8345fa97c4","s":"55d007d5eea85cb2a3bbb8345fa97c4","c":{},"d":[61],"e":true},"8":{"w":"78","s":"8","c":{"1":{"w":"781fc6eef919c68c43d9442f30929185","s":"1fc6eef919c68c43d9442f30929185","c":{},"d":[],"e":true},"6":{"w":"7862812dc01340fb2268e31c32332a93","s":"62812dc01340fb2268e31c32332a93","c":{},"d":[59],"e":true},"a":{"w":"78a4483414041f4000f82451cfa3cd1b","s":"a4483414041f4000f82451cfa3cd1b","c":{},"d":[],"e":true},"c":{"w":"78c4f8d9eab3431ad61ce0f242ab5415","s":"c4f8d9eab3431ad61ce0f242ab5415","c":{},"d":[51],"e":true}},"d":[],"e":false},"d":{"w":"7dc0c6c0e4de0046d154ca8d61f0ba6c","s":"dc0c6c0e4de0046d154ca8d61f0ba6c","c":{},"d":[33],"e":true}},"d":[],"e":false},"8":{"w":"8","s":"8","c":{"1":{"w":"815f570fed7f3502fc6402c73d009860","s":"15f570fed7f3502fc6402c73d009860","c":{},"d":[48],"e":true},"2":{"w":"82","s":"2","c":{"0":{"w":"820b9dea304b06cf71068bc11a8486ec","s":"0b9dea304b06cf71068bc11a8486ec","c":{},"d":[],"e":true},"3":{"w":"8231cc476f6fbc72323236bc60d781ab","s":"31cc476f6fbc72323236bc60d781ab","c":{},"d":[36],"e":true}},"d":[],"e":false},"3":{"w":"83987152e332f1ea34e67bb329483d46","s":"3987152e332f1ea34e67bb329483d46","c":{},"d":[29],"e":true},"6":{"w":"86ea582ff110d6ec650cbeb762dbbdbd","s":"6ea582ff110d6ec650cbeb762dbbdbd","c":{},"d":[68],"e":true},"b":{"w":"8b4fd28b0c87b6367b043b5953aa5367","s":"b4fd28b0c87b6367b043b5953aa5367","c":{},"d":[],"e":true},"f":{"w":"8fa3ccb0db0015e5729678bf219423a0","s":"fa3ccb0db0015e5729678bf219423a0","c":{},"d":[52],"e":true}},"d":[],"e":false},"9":{"w":"9","s":"9","c":{"0":{"w":"90","s":"0","c":{"0":{"w":"9009ee42f2d05bf3768455c3f2c7281b","s":"09ee42f2d05bf3768455c3f2c7281b","c":{},"d":[],"e":true},"6":{"w":"90696bce1b2efd329bfd39efa3d7ab97","s":"696bce1b2efd329bfd39efa3d7ab97","c":{},"d":[],"e":true}},"d":[],"e":false},"3":{"w":"9394eede642d233df07ba612ae4d1765","s":"394eede642d233df07ba612ae4d1765","c":{},"d":[63],"e":true},"4":{"w":"94b4d16e6d81304783b6b01e1e08165b","s":"4b4d16e6d81304783b6b01e1e08165b","c":{},"d":[65],"e":true},"8":{"w":"984c1b52a1e4a348d71e06ae1af76e5e","s":"84c1b52a1e4a348d71e06ae1af76e5e","c":{},"d":[],"e":true}},"d":[],"e":false},"d":{"w":"d","s":"d","c":{"c":{"w":"dc","s":"c","c":{"0":{"w":"dc039849957310ec69c1cf88775147c2","s":"039849957310ec69c1cf88775147c2","c":{},"d":[],"e":true},"9":{"w":"dc95b170c58a5910e62087acc07b3f99","s":"95b170c58a5910e62087acc07b3f99","c":{},"d":[64],"e":true}},"d":[],"e":false},"b":{"w":"dbd257ae16d44c8d4536931e3947e38d","s":"bd257ae16d44c8d4536931e3947e38d","c":{},"d":[],"e":true}},"d":[],"e":false},"a":{"w":"a","s":"a","c":{"3":{"w":"a3e3a9298cc139f91ba0f4e801a8954d","s":"3e3a9298cc139f91ba0f4e801a8954d","c":{},"d":[46],"e":true},"4":{"w":"a4","s":"4","c":{"8":{"w":"a48169f8d45b497076fc671092c0a4b2","s":"8169f8d45b497076fc671092c0a4b2","c":{},"d":[55],"e":true},"f":{"w":"a4f0df752e644510136309e8e2065ade","s":"f0df752e644510136309e8e2065ade","c":{},"d":[2],"e":true}},"d":[],"e":false},"6":{"w":"a6fb16ab6210e4e160e6e4c54afbb948","s":"6fb16ab6210e4e160e6e4c54afbb948","c":{},"d":[45],"e":true},"7":{"w":"a7e82c4eb3e192f780bb2fbe19411782","s":"7e82c4eb3e192f780bb2fbe19411782","c":{},"d":[44],"e":true},"e":{"w":"ae161ed1a029574975fc16d0abfe2e2d","s":"e161ed1a029574975fc16d0abfe2e2d","c":{},"d":[30],"e":true},"d":{"w":"ad3bde0ddbeba88edf74afebcabe8f72","s":"d3bde0ddbeba88edf74afebcabe8f72","c":{},"d":[57],"e":true}},"d":[],"e":false},"c":{"w":"c","s":"c","c":{"3":{"w":"c35863a93434be8a523a4e575dfa9992","s":"35863a93434be8a523a4e575dfa9992","c":{},"d":[28],"e":true},"4":{"w":"c456cb171026e17f10769c6975793269","s":"456cb171026e17f10769c6975793269","c":{},"d":[],"e":true},"5":{"w":"c5480db69876dbe696397144d9796e2f","s":"5480db69876dbe696397144d9796e2f","c":{},"d":[35],"e":true},"7":{"w":"c7bcb297eb88d19640104306d31c1e6a","s":"7bcb297eb88d19640104306d31c1e6a","c":{},"d":[],"e":true},"c":{"w":"cc49432675423864851bf22df8d3012e","s":"c49432675423864851bf22df8d3012e","c":{},"d":[53],"e":true}},"d":[],"e":false},"b":{"w":"b","s":"b","c":{"1":{"w":"b1ac257cf783d0801e0458cebfcd62cf","s":"1ac257cf783d0801e0458cebfcd62cf","c":{},"d":[],"e":true},"3":{"w":"b36d72facd0568e122323e7ee01d1d07","s":"36d72facd0568e122323e7ee01d1d07","c":{},"d":[23],"e":true},"5":{"w":"b5","s":"5","c":{"d":{"w":"b5dd7e43bdc112de3dd8b71df91f8aa4","s":"dd7e43bdc112de3dd8b71df91f8aa4","c":{},"d":[],"e":true},"c":{"w":"b5c9a556d8dbfcfe6a3b58bcf2fa86f6","s":"c9a556d8dbfcfe6a3b58bcf2fa86f6","c":{},"d":[56],"e":true}},"d":[],"e":false},"f":{"w":"bf70ec7050d709f367edaf3c865b8597","s":"f70ec7050d709f367edaf3c865b8597","c":{},"d":[41],"e":true},"b":{"w":"bb24e2b75d91cdcdabe91b918c2e0b38","s":"b24e2b75d91cdcdabe91b918c2e0b38","c":{},"d":[70],"e":true}},"d":[],"e":false},"e":{"w":"e","s":"e","c":{"1":{"w":"e1a44fa3d221ff26146effd1fada3e62","s":"1a44fa3d221ff26146effd1fada3e62","c":{},"d":[60],"e":true},"a":{"w":"ea192ae485b0fe9cc5ce7fb6507a4e72","s":"a192ae485b0fe9cc5ce7fb6507a4e72","c":{},"d":[],"e":true},"d":{"w":"edd334388e5b767324da496afca10cff","s":"dd334388e5b767324da496afca10cff","c":{},"d":[47],"e":true},"f":{"w":"ef586c0a890322cc0d74e2410f35bbd1","s":"f586c0a890322cc0d74e2410f35bbd1","c":{},"d":[50],"e":true}},"d":[],"e":false},"f":{"w":"f5fd9fdc058615ed967acf9c9b838dd3","s":"f5fd9fdc058615ed967acf9c9b838dd3","c":{},"d":[66],"e":true}},"d":[],"e":false},"isArray":false},"title":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{"1":{"w":"01","s":"1","c":{},"d":[70],"e":true},"2":{"w":"02","s":"2","c":{},"d":[69],"e":true},"3":{"w":"03","s":"3","c":{},"d":[68],"e":true},"4":{"w":"04","s":"4","c":{},"d":[67],"e":true},"5":{"w":"05","s":"5","c":{},"d":[66],"e":true},"6":{"w":"06","s":"6","c":{},"d":[65],"e":true},"7":{"w":"07","s":"7","c":{},"d":[64],"e":true},"8":{"w":"08","s":"8","c":{},"d":[63],"e":true},"9":{"w":"09","s":"9","c":{},"d":[62],"e":true}},"d":[],"e":false},"1":{"w":"1","s":"1","c":{"0":{"w":"10","s":"0","c":{},"d":[61],"e":true},"1":{"w":"11","s":"1","c":{},"d":[59,60],"e":true},"2":{"w":"12","s":"2","c":{},"d":[54,55,56,57,58],"e":true},"3":{"w":"13","s":"3","c":{},"d":[52,53],"e":true},"4":{"w":"14","s":"4","c":{},"d":[51],"e":true},"5":{"w":"15","s":"5","c":{},"d":[50],"e":true},"6":{"w":"16","s":"6","c":{},"d":[47,48,49],"e":true},"7":{"w":"17","s":"7","c":{},"d":[46],"e":true},"8":{"w":"18","s":"8","c":{},"d":[45],"e":true},"9":{"w":"19","s":"9","c":{},"d":[44],"e":true}},"d":[],"e":false},"2":{"w":"2","s":"2","c":{"0":{"w":"20","s":"0","c":{},"d":[41,42,43],"e":true},"1":{"w":"21","s":"1","c":{},"d":[38,39,40],"e":true},"2":{"w":"22","s":"2","c":{},"d":[34,35,36,37],"e":true},"3":{"w":"23","s":"3","c":{},"d":[33],"e":true},"4":{"w":"24","s":"4","c":{},"d":[32],"e":true},"5":{"w":"25","s":"5","c":{},"d":[31],"e":true},"6":{"w":"26","s":"6","c":{},"d":[30],"e":true},"7":{"w":"27","s":"7","c":{},"d":[29],"e":true},"8":{"w":"28","s":"8","c":{},"d":[28],"e":true},"9":{"w":"29","s":"9","c":{},"d":[27],"e":true}},"d":[],"e":false},"3":{"w":"3","s":"3","c":{"0":{"w":"30","s":"0","c":{},"d":[26],"e":true},"1":{"w":"31","s":"1","c":{},"d":[25],"e":true},"2":{"w":"32","s":"2","c":{},"d":[24],"e":true},"3":{"w":"33","s":"3","c":{},"d":[23],"e":true},"4":{"w":"34","s":"4","c":{},"d":[22],"e":true},"5":{"w":"35","s":"5","c":{},"d":[],"e":true},"6":{"w":"36","s":"6","c":{},"d":[],"e":true},"7":{"w":"37","s":"7","c":{},"d":[],"e":true},"8":{"w":"38","s":"8","c":{},"d":[],"e":true},"9":{"w":"39","s":"9","c":{},"d":[],"e":true}},"d":[],"e":false},"4":{"w":"4","s":"4","c":{"0":{"w":"40","s":"0","c":{},"d":[],"e":true},"1":{"w":"41","s":"1","c":{},"d":[],"e":true},"2":{"w":"42","s":"2","c":{},"d":[],"e":true},"3":{"w":"43","s":"3","c":{},"d":[],"e":true},"4":{"w":"44","s":"4","c":{},"d":[],"e":true},"5":{"w":"45","s":"5","c":{},"d":[],"e":true}},"d":[],"e":false},"r":{"w":"readme","s":"readme","c":{},"d":[],"e":true},"k":{"w":"kanban","s":"kanban","c":{},"d":[2],"e":true},"d":{"w":"dashboard","s":"dashboard","c":{},"d":[2],"e":true}},"d":[],"e":false},"isArray":false},"path":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{"1":{"w":"01","s":"1","c":{},"d":[70],"e":true},"2":{"w":"02","s":"2","c":{},"d":[69],"e":true},"3":{"w":"03","s":"3","c":{},"d":[68],"e":true},"4":{"w":"04","s":"4","c":{},"d":[67],"e":true},"5":{"w":"05","s":"5","c":{},"d":[66],"e":true},"6":{"w":"06","s":"6","c":{},"d":[65],"e":true},"7":{"w":"07","s":"7","c":{},"d":[64],"e":true},"8":{"w":"08","s":"8","c":{},"d":[63],"e":true},"9":{"w":"09","s":"9","c":{},"d":[62],"e":true}},"d":[],"e":false},"1":{"w":"1","s":"1","c":{"0":{"w":"10","s":"0","c":{},"d":[61],"e":true},"1":{"w":"11","s":"1","c":{},"d":[59,60],"e":true},"2":{"w":"12","s":"2","c":{},"d":[54,55,56,57,58],"e":true},"3":{"w":"13","s":"3","c":{},"d":[52,53],"e":true},"4":{"w":"14","s":"4","c":{},"d":[51],"e":true},"5":{"w":"15","s":"5","c":{},"d":[50],"e":true},"6":{"w":"16","s":"6","c":{},"d":[47,48,49],"e":true},"7":{"w":"17","s":"7","c":{},"d":[46],"e":true},"8":{"w":"18","s":"8","c":{},"d":[45],"e":true},"9":{"w":"19","s":"9","c":{},"d":[44],"e":true}},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"2":{"w":"2","s":"2","c":{"0":{"w":"20","s":"0","c":{},"d":[41,42,43],"e":true},"1":{"w":"21","s":"1","c":{},"d":[38,39,40],"e":true},"2":{"w":"22","s":"2","c":{},"d":[34,35,36,37],"e":true},"3":{"w":"23","s":"3","c":{},"d":[33],"e":true},"4":{"w":"24","s":"4","c":{},"d":[32],"e":true},"5":{"w":"25","s":"5","c":{},"d":[31],"e":true},"6":{"w":"26","s":"6","c":{},"d":[30],"e":true},"7":{"w":"27","s":"7","c":{},"d":[29],"e":true},"8":{"w":"28","s":"8","c":{},"d":[28],"e":true},"9":{"w":"29","s":"9","c":{},"d":[27],"e":true}},"d":[],"e":false},"3":{"w":"3","s":"3","c":{"0":{"w":"30","s":"0","c":{},"d":[26],"e":true},"1":{"w":"31","s":"1","c":{},"d":[25],"e":true},"2":{"w":"32","s":"2","c":{},"d":[24],"e":true},"3":{"w":"33","s":"3","c":{},"d":[23],"e":true},"4":{"w":"34","s":"4","c":{},"d":[22],"e":true},"5":{"w":"35","s":"5","c":{},"d":[],"e":true},"6":{"w":"36","s":"6","c":{},"d":[],"e":true},"7":{"w":"37","s":"7","c":{},"d":[],"e":true},"8":{"w":"38","s":"8","c":{},"d":[],"e":true},"9":{"w":"39","s":"9","c":{},"d":[],"e":true}},"d":[],"e":false},"4":{"w":"4","s":"4","c":{"0":{"w":"40","s":"0","c":{},"d":[],"e":true},"1":{"w":"41","s":"1","c":{},"d":[],"e":true},"2":{"w":"42","s":"2","c":{},"d":[],"e":true},"3":{"w":"43","s":"3","c":{},"d":[],"e":true},"4":{"w":"44","s":"4","c":{},"d":[],"e":true},"5":{"w":"45","s":"5","c":{},"d":[],"e":true}},"d":[],"e":false},"r":{"w":"readme","s":"readme","c":{},"d":[],"e":true},"m":{"w":"md","s":"md","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"p":{"w":"project","s":"project","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"k":{"w":"kanban","s":"kanban","c":{},"d":[2],"e":true},"d":{"w":"dashboard","s":"dashboard","c":{},"d":[2],"e":true}},"d":[],"e":false},"isArray":false},"content":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{"0":{"w":"00","s":"0","c":{"0":{"w":"000","s":"0","c":{"l":{"w":"000log","s":"log","c":{"1":{"w":"000log100","s":"100","c":{},"d":[26],"e":true},"2":{"w":"000log200","s":"200","c":{},"d":[],"e":true}},"d":[],"e":false}},"d":[26,54,63,66],"e":true}},"d":[51,52,53,54,55,56,57,58,59,60,61,62,63,64],"e":true},"1":{"w":"01","s":"1","c":{},"d":[2,22,23,24,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"2":{"w":"02","s":"2","c":{},"d":[2,27,34,35,36,37,45,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"e":true},"3":{"w":"03","s":"3","c":{},"d":[2,26,44,62,66,67,68,70],"e":true},"4":{"w":"04","s":"4","c":{"8":{"w":"048","s":"8","c":{},"d":[44],"e":true}},"d":[2,25,30,67],"e":true},"5":{"w":"05","s":"5","c":{},"d":[2,66],"e":true},"6":{"w":"06","s":"6","c":{},"d":[2,65],"e":true},"7":{"w":"07","s":"7","c":{},"d":[2,25,31,32,33,41,42,43,64],"e":true},"8":{"w":"08","s":"8","c":{},"d":[2,23,24,47,48,49,63],"e":true},"9":{"w":"09","s":"9","c":{},"d":[2,34,35,36,37,62],"e":true},"l":{"w":"0l","s":"l","c":{},"d":[],"e":true}},"d":[22,23,24,25,26,27,28,29,30,31,32,34,36,37,39,42,44,45,46,48,50,51,53,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"1":{"w":"1","s":"1","c":{"0":{"w":"10","s":"0","c":{"0":{"w":"100","s":"0","c":{"1":{"w":"1001","s":"1","c":{},"d":[62],"e":true},"_":{"w":"100_000_001","s":"_000_001","c":{},"d":[],"e":true}},"d":[26,68],"e":true},"8":{"w":"10825","s":"825","c":{},"d":[33],"e":true},"_":{"w":"10_000","s":"_000","c":{"_":{"w":"10_000_001","s":"_001","c":{},"d":[],"e":true}},"d":[26],"e":true}},"d":[2,26,44,45,51,61,62,63,64,66],"e":true},"1":{"w":"11","s":"1","c":{"4":{"w":"11404","s":"404","c":{},"d":[],"e":true},"6":{"w":"116-140","s":"6-140","c":{},"d":[35],"e":true}},"d":[2,22,23,24,25,44,59,60,64,68],"e":true},"2":{"w":"12","s":"2","c":{},"d":[2,22,23,26,27,28,29,30,31,32,33,34,35,36,37,46,51,54,55,56,57,58,67,70],"e":true},"3":{"w":"13","s":"3","c":{},"d":[2,26,28,31,33,52,53,65,66,67,68,69],"e":true},"4":{"w":"14","s":"4","c":{"3":{"w":"1439","s":"39","c":{},"d":[68],"e":true},"5":{"w":"1450","s":"50","c":{"1":{"w":"14501","s":"1","c":{},"d":[23],"e":true},"2":{"w":"14502","s":"2","c":{},"d":[47],"e":true}},"d":[],"e":false},"8":{"w":"14888","s":"888","c":{},"d":[44],"e":true}},"d":[2,31,32,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"e":true},"5":{"w":"15","s":"5","c":{"6":{"w":"15686","s":"686","c":{},"d":[52],"e":true}},"d":[2,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,63,65],"e":true},"6":{"w":"16","s":"6","c":{"2":{"w":"16234","s":"234","c":{},"d":[38],"e":true},"g":{"w":"16gbyte","s":"gbyte","c":{},"d":[],"e":true}},"d":[2,26,27,31,45,46,47,48,49,63,64,69],"e":true},"7":{"w":"17","s":"7","c":{"1":{"w":"1715","s":"15","c":{},"d":[30],"e":true}},"d":[2,26,44,46,52,53,61],"e":true},"8":{"w":"18","s":"8","c":{"3":{"w":"183","s":"3","c":{"1":{"w":"18310","s":"10","c":{},"d":[32],"e":true},"5":{"w":"1835","s":"5","c":{"2":{"w":"18352","s":"2","c":{},"d":[50],"e":true},"3":{"w":"18353","s":"3","c":{},"d":[22],"e":true}},"d":[],"e":false}},"d":[],"e":false},"4":{"w":"184","s":"4","c":{"0":{"w":"1840","s":"0","c":{"5":{"w":"18405","s":"5","c":{},"d":[46],"e":true},"6":{"w":"18406","s":"6","c":{},"d":[64],"e":true}},"d":[],"e":false},"2":{"w":"18428","s":"28","c":{},"d":[41],"e":true}},"d":[],"e":false}},"d":[2,30,45,59,60,65,69],"e":true},"9":{"w":"19","s":"9","c":{"3":{"w":"1932","s":"32","c":{},"d":[24],"e":true}},"d":[2,29,44,47,48,49,59,60,62],"e":true},"-":{"w":"1-4","s":"-4","c":{},"d":[],"e":true}},"d":[22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,42,44,45,46,48,50,51,52,53,54,56,57,59,60,61,62,65,66,67,68,69,70],"e":true},"2":{"w":"2","s":"2","c":{"0":{"w":"20","s":"0","c":{"0":{"w":"200","s":"0","c":{},"d":[],"e":true},"1":{"w":"2019","s":"19","c":{},"d":[66],"e":true},"2":{"w":"202","s":"2","c":{"4":{"w":"2024","s":"4","c":{},"d":[2,26,27,28,29,30,31,32,33,70],"e":true},"5":{"w":"2025","s":"5","c":{"-":{"w":"2025-01-02","s":"-01-02","c":{},"d":[34],"e":true}},"d":[2,22,23,24,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true}},"d":[],"e":false}},"d":[2,22,32,41,42,43,44,54,55,56,57,58,69],"e":true},"1":{"w":"21","s":"1","c":{"1":{"w":"2110","s":"10","c":{},"d":[27],"e":true}},"d":[2,38,39,40,65],"e":true},"2":{"w":"22","s":"2","c":{},"d":[2,22,34,35,36,37,38,39,40,41,42,43,44,51,61],"e":true},"3":{"w":"23","s":"3","c":{},"d":[2,24,33,34],"e":true},"4":{"w":"24","s":"4","c":{},"d":[2,32,41,42,43],"e":true},"5":{"w":"25","s":"5","c":{},"d":[2,25,31,59,60],"e":true},"6":{"w":"26","s":"6","c":{},"d":[2,30,54,55,56,57,58,61],"e":true},"7":{"w":"27","s":"7","c":{},"d":[2,29,38,39,40,67],"e":true},"8":{"w":"28","s":"8","c":{"8":{"w":"2887","s":"87","c":{},"d":[],"e":true}},"d":[2,24,28,54,55,56,57,58,65,68],"e":true},"9":{"w":"29","s":"9","c":{"-":{"w":"29-30","s":"-30","c":{},"d":[],"e":true}},"d":[2,26,27,63,65,70],"e":true}},"d":[22,23,24,25,26,27,28,29,31,32,34,36,44,48,53,54,56,59,60,61,62,64,65,67,68],"e":true},"3":{"w":"3","s":"3","c":{"0":{"w":"30","s":"0","c":{"-":{"w":"30-50","s":"-50","c":{},"d":[],"e":true}},"d":[2,26,31,34,45,51,54,61,62,65,70],"e":true},"1":{"w":"31","s":"1","c":{"9":{"w":"3190","s":"90","c":{},"d":[59],"e":true}},"d":[2,24,25,26,27,28,29,30,31,32,33,46,70],"e":true},"2":{"w":"32","s":"2","c":{"b":{"w":"32bit","s":"bit","c":{},"d":[51],"e":true}},"d":[2,24,41,42,43,52,53,62],"e":true},"3":{"w":"33","s":"3","c":{},"d":[2,23,34,35,36,37],"e":true},"4":{"w":"34","s":"4","c":{},"d":[2,22,46],"e":true},"5":{"w":"35","s":"5","c":{},"d":[2,31,34,35,36,37,69],"e":true},"6":{"w":"36","s":"6","c":{"6":{"w":"3665","s":"65","c":{},"d":[],"e":true},"-":{"w":"36-41","s":"-41","c":{},"d":[35],"e":true},"c":{"w":"36c3","s":"c3","c":{},"d":[41],"e":true}},"d":[2,22,41,51,61,68],"e":true},"7":{"w":"37","s":"7","c":{},"d":[2,29,65],"e":true},"8":{"w":"38","s":"8","c":{},"d":[2,50,51,62,67,70],"e":true},"9":{"w":"39","s":"9","c":{},"d":[2,50,70],"e":true}},"d":[22,28,29,34,41,42,44,47,48,56,59,60,61,66,67],"e":true},"4":{"w":"4","s":"4","c":{"0":{"w":"40","s":"0","c":{},"d":[2,28,31,61,64,66],"e":true},"1":{"w":"41","s":"1","c":{},"d":[2],"e":true},"2":{"w":"42","s":"2","c":{"8":{"w":"428","s":"8","c":{"8":{"w":"42889","s":"89","c":{},"d":[31],"e":true},"9":{"w":"42891","s":"91","c":{},"d":[65],"e":true}},"d":[],"e":false}},"d":[2,52,53],"e":true},"3":{"w":"43","s":"3","c":{},"d":[2,28],"e":true},"4":{"w":"44","s":"4","c":{},"d":[2,26],"e":true},"5":{"w":"45","s":"5","c":{},"d":[2,59,60],"e":true},"6":{"w":"46","s":"6","c":{},"d":[65],"e":true},"7":{"w":"47","s":"7","c":{},"d":[23,27,31,32],"e":true},"8":{"w":"48","s":"8","c":{},"d":[63],"e":true},"9":{"w":"49","s":"9","c":{},"d":[27,66,68],"e":true},"b":{"w":"4byte","s":"byte","c":{},"d":[],"e":true}},"d":[22,29,34,36,39,41,42,44,46,48,56,59,60,61,67],"e":true},"5":{"w":"5","s":"5","c":{"0":{"w":"50","s":"0","c":{"0":{"w":"5000001","s":"00001","c":{},"d":[],"e":true},"-":{"w":"50-54","s":"-54","c":{},"d":[51],"e":true}},"d":[28,51],"e":true},"1":{"w":"51","s":"1","c":{},"d":[30,47,48,49],"e":true},"2":{"w":"52","s":"2","c":{},"d":[32,45],"e":true},"3":{"w":"53","s":"3","c":{},"d":[25],"e":true},"4":{"w":"54","s":"4","c":{"-":{"w":"54-55","s":"-55","c":{},"d":[26],"e":true}},"d":[38,39,40,50,52,53],"e":true},"5":{"w":"55","s":"5","c":{},"d":[28,33],"e":true},"6":{"w":"56","s":"6","c":{},"d":[33,50,54,55,56,57,58,66],"e":true},"7":{"w":"57","s":"7","c":{"6":{"w":"576","s":"6","c":{},"d":[44],"e":true}},"d":[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,62],"e":true},"8":{"w":"58","s":"8","c":{},"d":[33,38,39,40,45,65,67,68],"e":true},"9":{"w":"59","s":"9","c":{},"d":[29],"e":true},"_":{"w":"5_000_001","s":"_000_001","c":{},"d":[],"e":true}},"d":[22,26,28,44,56,62,67],"e":true},"6":{"w":"6","s":"6","c":{"0":{"w":"600","s":"00","c":{"5":{"w":"6005","s":"5","c":{"7":{"w":"60057","s":"7","c":{},"d":[62],"e":true},"8":{"w":"60058","s":"8","c":{},"d":[45],"e":true},"9":{"w":"60059","s":"9","c":{},"d":[61],"e":true}},"d":[],"e":false},"6":{"w":"6006","s":"6","c":{"0":{"w":"60060","s":"0","c":{},"d":[26],"e":true},"1":{"w":"60061","s":"1","c":{},"d":[54],"e":true},"2":{"w":"60062","s":"2","c":{},"d":[51],"e":true},"3":{"w":"60063","s":"3","c":{},"d":[34],"e":true}},"d":[],"e":false}},"d":[],"e":false},"1":{"w":"61","s":"1","c":{},"d":[],"e":true},"4":{"w":"64c3","s":"4c3","c":{},"d":[47],"e":true}},"d":[22,26,54,67],"e":true},"7":{"w":"7","s":"7","c":{"1":{"w":"71","s":"1","c":{},"d":[],"e":true},"f":{"w":"7f7f7f","s":"f7f7f","c":{},"d":[26],"e":true}},"d":[22,28,29,31,67],"e":true},"8":{"w":"8","s":"8","c":{"3":{"w":"83","s":"3","c":{},"d":[62],"e":true},"5":{"w":"85","s":"5","c":{},"d":[62],"e":true},"8":{"w":"88-94","s":"8-94","c":{},"d":[46],"e":true},"-":{"w":"8-10","s":"-10","c":{},"d":[35],"e":true}},"d":[22,28,47,51,62,67],"e":true},"9":{"w":"9","s":"9","c":{"0":{"w":"90","s":"0","c":{},"d":[61],"e":true}},"d":[28,67],"e":true},"n":{"w":"n","s":"n","c":{"o":{"w":"no","s":"o","c":{"t":{"w":"note","s":"te","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"n":{"w":"none","s":"ne","c":{},"d":[],"e":true},"d":{"w":"node","s":"de","c":{},"d":[],"e":true}},"d":[31,42,46,65],"e":true},"e":{"w":"ne","s":"e","c":{"t":{"w":"net","s":"t","c":{},"d":[22,23,24,27,30,32,33,38,41,44,46,47,50,52,59,64,68],"e":true},"w":{"w":"new","s":"w","c":{"b":{"w":"newboard","s":"board","c":{},"d":[36],"e":true}},"d":[22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,42,43,44,45,46,48,49,50,53,56,57,60,61,62,63,64,65,66,67,68,69,70],"e":true},"x":{"w":"next","s":"xt","c":{"2":{"w":"next2","s":"2","c":{},"d":[],"e":true},"3":{"w":"next3","s":"3","c":{},"d":[],"e":true},"5":{"w":"next5","s":"5","c":{},"d":[],"e":true},"i":{"w":"nextint","s":"int","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,40,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"t":{"w":"nexttoken","s":"token","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"l":{"w":"nextl","s":"l","c":{"i":{"w":"nextline","s":"ine","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"o":{"w":"nextlong","s":"ong","c":{},"d":[22,23,24,25,27,28,29,30,32,33,40,43,44,46,49,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[],"e":false},"s":{"w":"nexts","s":"s","c":{},"d":[36],"e":true},"d":{"w":"nextdir","s":"dir","c":{},"d":[60],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,34,36,39,40,42,43,44,46,48,49,50,51,53,57,60,63,64,66,67,68,69,70],"e":true},"z":{"w":"nezorf","s":"zorf","c":{},"d":[26],"e":true}},"d":[],"e":false},"u":{"w":"nu","s":"u","c":{"l":{"w":"null","s":"ll","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"m":{"w":"nums","s":"ms","c":{},"d":[34,44,64],"e":true}},"d":[],"e":false},"l":{"w":"nlogn","s":"logn","c":{},"d":[26,27,28,29,30,31,32,33,63,65],"e":true},"a":{"w":"name","s":"ame","c":{},"d":[33],"e":true},"m":{"w":"nm","s":"m","c":{},"d":[47,61],"e":true}},"d":[22,23,24,25,27,28,29,30,31,32,33,38,39,42,44,46,48,50,51,52,53,54,56,57,60,61,64,66,67,69,70],"e":true},"t":{"w":"t","s":"t","c":{"i":{"w":"ti","s":"i","c":{"t":{"w":"title","s":"tle","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"m":{"w":"time","s":"me","c":{},"d":[46,59,60,65],"e":true}},"d":[],"e":false},"r":{"w":"tr","s":"r","c":{"u":{"w":"true","s":"ue","c":{},"d":[2,34,36,39,41,42,45,48,54,56,57,60,61],"e":true},"y":{"w":"try","s":"y","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"i":{"w":"tri","s":"i","c":{"m":{"w":"trim","s":"m","c":{},"d":[63,68,69],"e":true},"a":{"w":"triangle","s":"angle","c":{},"d":[24],"e":true}},"d":[],"e":false}},"d":[],"e":false},"o":{"w":"to","s":"o","c":{"s":{"w":"tostring","s":"string","c":{},"d":[22,23,24,25,26,27,28,29,30,32,33,39,42,44,45,46,48,50,53,56,57,60,62,63,64,66,67,68,69,70],"e":true},"t":{"w":"total","s":"tal","c":{},"d":[],"e":true},"c":{"w":"tochararray","s":"chararray","c":{},"d":[45,63,68,69],"e":true}},"d":[],"e":true},"h":{"w":"th","s":"h","c":{"r":{"w":"thr","s":"r","c":{"o":{"w":"throw","s":"ow","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"e":{"w":"three","s":"ee","c":{},"d":[],"e":true}},"d":[],"e":false},"i":{"w":"this","s":"is","c":{},"d":[22,23,24,25,27,28,29,30,31,32,33,36,39,42,44,46,48,50,53,56,57,60,63,64,65,66,67,68,69,70],"e":true}},"d":[],"e":false},"e":{"w":"te","s":"e","c":{"x":{"w":"text","s":"xt","c":{},"d":[26,28,29,34,63,67],"e":true},"a":{"w":"teacher","s":"acher","c":{"s":{"w":"teachers","s":"s","c":{},"d":[42],"e":true}},"d":[42],"e":true},"m":{"w":"temp","s":"mp","c":{},"d":[61],"e":true}},"d":[],"e":false},"n":{"w":"tnorf","s":"norf","c":{},"d":[26],"e":true},"s":{"w":"tsorf","s":"sorf","c":{},"d":[26],"e":true},"a":{"w":"ta","s":"a","c":{"r":{"w":"target","s":"rget","c":{},"d":[29,67],"e":true},"i":{"w":"tail","s":"il","c":{"x":{"w":"tailx","s":"x","c":{},"d":[59,60],"e":true},"y":{"w":"taily","s":"y","c":{},"d":[59,60],"e":true}},"d":[],"e":false}},"d":[],"e":false}},"d":[23,25,41,42,62,63],"e":true},"r":{"w":"r","s":"r","c":{"e":{"w":"re","s":"e","c":{"a":{"w":"read","s":"ad","c":{"m":{"w":"readme","s":"me","c":{},"d":[],"e":true},"l":{"w":"readline","s":"line","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"y":{"w":"ready","s":"y","c":{},"d":[64],"e":true}},"d":[],"e":false},"t":{"w":"return","s":"turn","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,36,37,39,40,42,43,44,45,46,48,49,50,51,53,54,56,57,60,61,62,63,64,65,66,67,68,69,70],"e":true},"s":{"w":"result","s":"sult","c":{},"d":[22,23,24,25,26,27,28,29,30,32,33,34,36,37,39,40,42,43,44,46,48,49,50,53,56,57,60,63,64,66,67,68,69,70],"e":true},"v":{"w":"reverse","s":"verse","c":{"f":{"w":"reversefrom","s":"from","c":{},"d":[26],"e":true}},"d":[26],"e":true},"p":{"w":"rep","s":"p","c":{"l":{"w":"replaceall","s":"laceall","c":{},"d":[26],"e":true},"e":{"w":"repeat","s":"eat","c":{"e":{"w":"repeated","s":"ed","c":{},"d":[62],"e":true}},"d":[62],"e":true}},"d":[],"e":false},"c":{"w":"rec","s":"c","c":{},"d":[44,45,51,62],"e":true},"m":{"w":"rem","s":"m","c":{"o":{"w":"remove","s":"ove","c":{},"d":[60],"e":true},"a":{"w":"remain","s":"ain","c":{},"d":[62],"e":true}},"d":[],"e":false}},"d":[],"e":false},"u":{"w":"runtimeexception","s":"untimeexception","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"o":{"w":"ro","s":"o","c":{"b":{"w":"robot","s":"bot","c":{},"d":[34,36,37],"e":true},"w":{"w":"row","s":"w","c":{},"d":[25,34,36,61],"e":true},"t":{"w":"rotate","s":"tate","c":{},"d":[61],"e":true}},"d":[],"e":false},"i":{"w":"right","s":"ight","c":{},"d":[24,26,29],"e":true}},"d":[26,27,28,29,38,39,62],"e":true},"m":{"w":"m","s":"m","c":{"e":{"w":"metadata","s":"etadata","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"o":{"w":"mod","s":"od","c":{"i":{"w":"modified","s":"ified","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true}},"d":[64],"e":true},"a":{"w":"ma","s":"a","c":{"i":{"w":"main","s":"in","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,55,56,60,63,64,66,67,68,69,70],"e":true},"t":{"w":"math","s":"th","c":{},"d":[22,23,24,25,33,39,44,48,51,53,57,62,68],"e":true},"x":{"w":"max","s":"x","c":{"d":{"w":"maxdist","s":"dist","c":{},"d":[],"e":true},"_":{"w":"max_value","s":"_value","c":{},"d":[44,50,51,53],"e":true},"v":{"w":"maxvalue","s":"value","c":{},"d":[23],"e":true},"c":{"w":"maxcost","s":"cost","c":{},"d":[23],"e":true},"x":{"w":"maxx","s":"x","c":{},"d":[57],"e":true},"y":{"w":"maxy","s":"y","c":{},"d":[57],"e":true}},"d":[22,23,24,25,44,48,57],"e":true},"r":{"w":"mark","s":"rk","c":{},"d":[26],"e":true},"p":{"w":"map","s":"p","c":{"s":{"w":"maps","s":"s","c":{},"d":[34,36,37,46,59,60],"e":true}},"d":[59,60],"e":true}},"d":[],"e":false},"s":{"w":"ms","s":"s","c":{"t":{"w":"mst","s":"t","c":{},"d":[],"e":true}},"d":[62],"e":true},"i":{"w":"mi","s":"i","c":{"n":{"w":"min","s":"n","c":{"d":{"w":"mindi","s":"di","c":{"s":{"w":"mindist","s":"st","c":{},"d":[],"e":true},"f":{"w":"mindiff","s":"ff","c":{},"d":[53],"e":true}},"d":[],"e":false},"_":{"w":"min_value","s":"_value","c":{},"d":[44],"e":true},"x":{"w":"minx","s":"x","c":{},"d":[57],"e":true},"y":{"w":"miny","s":"y","c":{},"d":[57],"e":true}},"d":[44,51,53,57,62,68],"e":true},"d":{"w":"mid","s":"d","c":{},"d":[26,28,29,32],"e":true}},"d":[],"e":false},"u":{"w":"multi","s":"ulti","c":{},"d":[59],"e":true},"b":{"w":"mb","s":"b","c":{},"d":[62],"e":true}},"d":[25,48,50,52,53,61,66],"e":true},"c":{"w":"c","s":"c","c":{"r":{"w":"create","s":"reate","c":{"d":{"w":"created","s":"d","c":{"u":{"w":"createdummy","s":"ummy","c":{},"d":[42],"e":true}},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"w":{"w":"createwall","s":"wall","c":{},"d":[48],"e":true}},"d":[],"e":false},"o":{"w":"co","s":"o","c":{"n":{"w":"con","s":"n","c":{"t":{"w":"cont","s":"t","c":{"e":{"w":"conte","s":"e","c":{"n":{"w":"content","s":"nt","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"s":{"w":"contest","s":"st","c":{},"d":[],"e":true}},"d":[],"e":false},"'":{"w":"cont'd","s":"'d","c":{},"d":[35,36,37,39,40,42,43,48,49,53,55,56,57,58,60],"e":true},"i":{"w":"continue","s":"inue","c":{},"d":[26,27,36,39,42,46,48,50,51,61,68],"e":true},"a":{"w":"containskey","s":"ainskey","c":{},"d":[60],"e":true}},"d":[],"e":false},"v":{"w":"converttext","s":"verttext","c":{},"d":[45],"e":true}},"d":[],"e":false},"l":{"w":"col","s":"l","c":{"l":{"w":"collections","s":"lections","c":{},"d":[26,31,33,63,65],"e":true},"o":{"w":"color","s":"or","c":{},"d":[26],"e":true}},"d":[25,36,61],"e":true},"m":{"w":"com","s":"m","c":{"p":{"w":"comp","s":"p","c":{"a":{"w":"compar","s":"ar","c":{"a":{"w":"compara","s":"a","c":{"t":{"w":"comparator","s":"tor","c":{},"d":[65],"e":true},"b":{"w":"comparable","s":"ble","c":{},"d":[31,33,46,65],"e":true}},"d":[],"e":false},"i":{"w":"comparingint","s":"ingint","c":{},"d":[65],"e":true},"e":{"w":"compare","s":"e","c":{"t":{"w":"compareto","s":"to","c":{},"d":[26,31,33,46,65],"e":true}},"d":[],"e":true}},"d":[],"e":false},"r":{"w":"compress","s":"ress","c":{"e":{"w":"compressed","s":"ed","c":{},"d":[62],"e":true}},"d":[62],"e":true}},"d":[],"e":false},"b":{"w":"combination","s":"bination","c":{},"d":[53],"e":true},"m":{"w":"commandmap","s":"mandmap","c":{},"d":[60],"e":true}},"d":[],"e":false},"s":{"w":"cost","s":"st","c":{},"d":[],"e":true},"u":{"w":"cou","s":"u","c":{"n":{"w":"count","s":"nt","c":{"b":{"w":"countbyrange","s":"byrange","c":{},"d":[26],"e":true},"r":{"w":"country","s":"ry","c":{},"d":[39],"e":true}},"d":[27,45,48,53,54,56,57,62,66,68,70],"e":true},"r":{"w":"courses","s":"rses","c":{},"d":[26,31,34,45,51,54,61,62,65],"e":true}},"d":[],"e":false}},"d":[26,31,34,45,51,54,61,62,65],"e":true},"h":{"w":"ch","s":"h","c":{"1":{"w":"ch1","s":"1","c":{"1":{"w":"ch11","s":"1","c":{},"d":[2],"e":true},"2":{"w":"ch12","s":"2","c":{},"d":[2],"e":true},"3":{"w":"ch13","s":"3","c":{},"d":[2],"e":true},"4":{"w":"ch14","s":"4","c":{},"d":[2],"e":true},"5":{"w":"ch15","s":"5","c":{},"d":[2],"e":true},"6":{"w":"ch16","s":"6","c":{},"d":[2],"e":true},"7":{"w":"ch17","s":"7","c":{},"d":[2],"e":true},"8":{"w":"ch18","s":"8","c":{},"d":[2],"e":true}},"d":[],"e":false},"a":{"w":"cha","s":"a","c":{"t":{"w":"chat-gpt","s":"t-gpt","c":{},"d":[],"e":true},"r":{"w":"char","s":"r","c":{"a":{"w":"chara","s":"a","c":{"t":{"w":"charat","s":"t","c":{},"d":[45],"e":true},"c":{"w":"character","s":"cter","c":{},"d":[63],"e":true}},"d":[],"e":false}},"d":[45,63,68,69],"e":true}},"d":[],"e":false},"e":{"w":"check","s":"eck","c":{},"d":[45],"e":true},"i":{"w":"chicken","s":"icken","c":{"l":{"w":"chickenlist","s":"list","c":{},"d":[53],"e":true}},"d":[53],"e":true}},"d":[],"e":false},"l":{"w":"class","s":"lass","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,36,39,42,44,45,46,48,50,51,53,55,56,57,60,61,62,63,64,65,66,67,68,69,70],"e":true},"u":{"w":"cu","s":"u","c":{"r":{"w":"cur","s":"r","c":{},"d":[27,36,39,42,46,48,50,51],"e":true},"t":{"w":"cut","s":"t","c":{},"d":[],"e":true}},"d":[],"e":false},"a":{"w":"ca","s":"a","c":{"t":{"w":"cat","s":"t","c":{"c":{"w":"catch","s":"ch","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[],"e":true},"l":{"w":"calculate","s":"lculate","c":{},"d":[44,64],"e":true}},"d":[],"e":false},"c":{"w":"ccc","s":"cc","c":{},"d":[],"e":true},"n":{"w":"cnt","s":"nt","c":{},"d":[42],"e":true},"m":{"w":"cmd","s":"md","c":{},"d":[60],"e":true}},"d":[27,45,53,68],"e":true},"b":{"w":"b","s":"b","c":{"l":{"w":"bl","s":"l","c":{"o":{"w":"block","s":"ock","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"a":{"w":"blank","s":"ank","c":{"s":{"w":"blanks","s":"s","c":{},"d":[42,48],"e":true}},"d":[42,48],"e":true}},"d":[],"e":false},"o":{"w":"bo","s":"o","c":{"a":{"w":"board","s":"ard","c":{},"d":[2,36,56],"e":true},"o":{"w":"boolean","s":"olean","c":{},"d":[27,34,36,42,45,48,54,56,57,61],"e":true},"t":{"w":"bottom-up","s":"ttom-up","c":{},"d":[24],"e":true}},"d":[54,56,57],"e":true},"f":{"w":"bf","s":"f","c":{"s":{"w":"bfs","s":"s","c":{},"d":[2,34,38,39,41,47,50],"e":true}},"d":[56],"e":true},"u":{"w":"bu","s":"u","c":{"f":{"w":"buffered","s":"ffered","c":{"w":{"w":"bufferedwriter","s":"writer","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"r":{"w":"bufferedreader","s":"reader","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[],"e":false},"i":{"w":"build","s":"ild","c":{"_":{"w":"build_frame","s":"_frame","c":{},"d":[54,56],"e":true},"a":{"w":"buildable","s":"able","c":{"p":{"w":"buildablepole","s":"pole","c":{},"d":[54,56,57],"e":true},"b":{"w":"buildablebo","s":"bo","c":{},"d":[56,57],"e":true}},"d":[],"e":false},"p":{"w":"buildpole","s":"pole","c":{},"d":[56],"e":true},"b":{"w":"buildbo","s":"bo","c":{},"d":[56],"e":true}},"d":[],"e":false}},"d":[],"e":false},"w":{"w":"bw","s":"w","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"r":{"w":"br","s":"r","c":{"e":{"w":"break","s":"eak","c":{},"d":[28,34,36,39,45,46,51,60,61,65,67],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"i":{"w":"binarysearch","s":"inarysearch","c":{},"d":[26],"e":true},"a":{"w":"base","s":"ase","c":{},"d":[62],"e":true}},"d":[34,50,56],"e":true},"p":{"w":"p","s":"p","c":{"a":{"w":"par","s":"ar","c":{"a":{"w":"para","s":"a","c":{},"d":[],"e":true},"s":{"w":"parse","s":"se","c":{"i":{"w":"parseint","s":"int","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,40,43,44,46,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"l":{"w":"parselong","s":"long","c":{},"d":[22,23,24,25,27,28,29,30,32,33,40,43,44,46,49,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[],"e":false},"e":{"w":"parent","s":"ent","c":{"h":{"w":"parentheses","s":"heses","c":{},"d":[45],"e":true}},"d":[],"e":true}},"d":[],"e":false},"r":{"w":"pr","s":"r","c":{"o":{"w":"pro","s":"o","c":{"b":{"w":"problem","s":"blem","c":{},"d":[22,23,24,27,30,32,33,38,41,44,46,47,50,52,59,64,68],"e":true},"g":{"w":"programmers","s":"grammers","c":{},"d":[26,31,34,45,51,54,61,62,65],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,56,60,63,64,66,67,68,69,70],"e":true},"i":{"w":"pri","s":"i","c":{"v":{"w":"private","s":"vate","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,36,39,42,44,45,46,48,50,51,53,54,56,57,60,61,62,63,64,65,66,67,68,69,70],"e":true},"o":{"w":"priorityqueue","s":"orityqueue","c":{},"d":[30,46],"e":true}},"d":[],"e":false},"e":{"w":"pre","s":"e","c":{"v":{"w":"prev","s":"v","c":{"t":{"w":"prevtime","s":"time","c":{},"d":[65],"e":true}},"d":[27,68],"e":true}},"d":[62],"e":true}},"d":[],"e":false},"u":{"w":"pu","s":"u","c":{"b":{"w":"public","s":"blic","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,36,39,40,42,43,44,45,46,48,49,50,51,53,55,56,57,60,61,62,63,64,65,66,67,68,69,70],"e":true},"t":{"w":"put","s":"t","c":{},"d":[60],"e":true},"s":{"w":"pushkey","s":"shkey","c":{},"d":[61],"e":true}},"d":[],"e":false},"o":{"w":"po","s":"o","c":{"l":{"w":"pol","s":"l","c":{"l":{"w":"poll","s":"l","c":{"k":{"w":"pollkey","s":"key","c":{},"d":[61],"e":true}},"d":[30,36,39,42,46,50,60],"e":true},"e":{"w":"pole","s":"e","c":{},"d":[54,56,57],"e":true}},"d":[],"e":false},"i":{"w":"pointer","s":"inter","c":{},"d":[51],"e":true},"s":{"w":"post","s":"st","c":{},"d":[62],"e":true}},"d":[],"e":false},"l":{"w":"pla","s":"la","c":{"n":{"w":"plant","s":"nt","c":{"s":{"w":"plants","s":"s","c":{},"d":[],"e":true}},"d":[],"e":true},"y":{"w":"players","s":"yers","c":{},"d":[31],"e":true}},"d":[],"e":false},"q":{"w":"pq","s":"q","c":{},"d":[30],"e":true},"n":{"w":"png","s":"ng","c":{},"d":[34],"e":true}},"d":[23,45],"e":true},"k":{"w":"k","s":"k","c":{"1":{"w":"k1ka5cb7","s":"1ka5cb7","c":{},"d":[63],"e":true},"a":{"w":"ka","s":"a","c":{"n":{"w":"kanban","s":"nban","c":{"-":{"w":"kanban-plugin","s":"-plugin","c":{},"d":[2],"e":true}},"d":[2],"e":true},"k":{"w":"kakao","s":"kao","c":{},"d":[26],"e":true}},"d":[],"e":false},"r":{"w":"kr","s":"r","c":{},"d":[26,31,34,45,51,54,61,62,65],"e":true},"o":{"w":"ko","s":"o","c":{},"d":[33],"e":true},"e":{"w":"key","s":"ey","c":{},"d":[61],"e":true}},"d":[46,50,60,65,67],"e":true},"d":{"w":"d","s":"d","c":{"a":{"w":"da","s":"a","c":{"s":{"w":"dashboard","s":"shboard","c":{},"d":[2],"e":true},"t":{"w":"data","s":"ta","c":{},"d":[22,27,28,29,30],"e":true},"y":{"w":"day","s":"y","c":{},"d":[23],"e":true}},"d":[],"e":false},"f":{"w":"dfs","s":"fs","c":{},"d":[2,44,47,48],"e":true},"e":{"w":"de","s":"e","c":{"q":{"w":"deque","s":"que","c":{},"d":[36,39,42,50,60],"e":true},"s":{"w":"destroy","s":"stroy","c":{"p":{"w":"destroypole","s":"pole","c":{},"d":[56],"e":true},"b":{"w":"destroybo","s":"bo","c":{},"d":[56,57],"e":true}},"d":[],"e":false}},"d":[],"e":false},"i":{"w":"di","s":"i","c":{"s":{"w":"dist","s":"st","c":{"a":{"w":"distance","s":"ance","c":{},"d":[53],"e":true}},"d":[34,36,37,50,51],"e":true},"r":{"w":"dir","s":"r","c":{},"d":[36,39,42,46,48,60],"e":true},"f":{"w":"diff","s":"ff","c":{},"d":[27,39,51,53,65],"e":true}},"d":[],"e":false},"x":{"w":"dx","s":"x","c":{"1":{"w":"dx1","s":"1","c":{},"d":[36],"e":true},"2":{"w":"dx2","s":"2","c":{},"d":[36],"e":true}},"d":[39,42,46,48,61],"e":true},"y":{"w":"dy","s":"y","c":{"1":{"w":"dy1","s":"1","c":{},"d":[36],"e":true},"2":{"w":"dy2","s":"2","c":{},"d":[36],"e":true}},"d":[39,42,46,48,61],"e":true},"p":{"w":"dp","s":"p","c":{},"d":[22,23,24,25],"e":true},"o":{"w":"double","s":"ouble","c":{},"d":[31],"e":true}},"d":[27,59,60],"e":true},"-":{"w":"-","s":"-","c":{"1":{"w":"-1","s":"1","c":{"5":{"w":"-15","s":"5","c":{},"d":[28],"e":true}},"d":[28,29,31,34,36,39,42,46,48,50,51,53,54,60,65],"e":true},"4":{"w":"-4","s":"4","c":{"0":{"w":"-40","s":"0","c":{},"d":[61],"e":true}},"d":[28],"e":true},"6":{"w":"-6","s":"6","c":{},"d":[28],"e":true},"8":{"w":"-8","s":"8","c":{},"d":[51],"e":true},"-":{"w":"--","s":"-","c":{"-":{"w":"---","s":"-","c":{"-":{"w":"-----","s":"--","c":{"-":{"w":"------------------------------","s":"-------------------------","c":{},"d":[],"e":true}},"d":[22],"e":true}},"d":[2,22],"e":true},"c":{"w":"--count","s":"count","c":{},"d":[45],"e":true}},"d":[],"e":true}},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,41,44,45,46,47,50,51,52,53,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"x":{"w":"x","s":"x","c":{"1":{"w":"x1","s":"1","c":{},"d":[34,36,37],"e":true},"2":{"w":"x2","s":"2","c":{},"d":[34,36,37],"e":true},"c":{"w":"xcm","s":"cm","c":{},"d":[52],"e":true}},"d":[2,29,34,36,39,41,42,46,48,50,52,53,54,56,57,59,60,61],"e":true},"s":{"w":"s","s":"s","c":{"e":{"w":"se","s":"e","c":{"t":{"w":"set","s":"t","c":{"t":{"w":"settings","s":"tings","c":{},"d":[2],"e":true},"l":{"w":"setlength","s":"length","c":{},"d":[26,62],"e":true}},"d":[34,36],"e":true},"l":{"w":"selected","s":"lected","c":{},"d":[44,53],"e":true}},"d":[],"e":false},"h":{"w":"sh","s":"h","c":{"o":{"w":"show-checkboxes","s":"ow-checkboxes","c":{},"d":[2],"e":true},"i":{"w":"shif","s":"if","c":{"t":{"w":"shift","s":"t","c":{},"d":[61],"e":true}},"d":[61],"e":true}},"d":[],"e":false},"w":{"w":"sw","s":"w","c":{"a":{"w":"swap","s":"ap","c":{},"d":[],"e":true}},"d":[66],"e":true},"t":{"w":"st","s":"t","c":{"a":{"w":"sta","s":"a","c":{"t":{"w":"static","s":"tic","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,36,39,42,44,46,48,50,53,56,57,60,63,64,65,66,67,68,69,70],"e":true},"r":{"w":"start","s":"rt","c":{"s":{"w":"startswith","s":"swith","c":{},"d":[26,62],"e":true},"x":{"w":"startx","s":"x","c":{},"d":[39],"e":true},"y":{"w":"starty","s":"y","c":{},"d":[39],"e":true}},"d":[36],"e":true},"g":{"w":"stage","s":"ge","c":{"s":{"w":"stages","s":"s","c":{},"d":[31],"e":true}},"d":[31],"e":true}},"d":[],"e":false},"r":{"w":"string","s":"ring","c":{"b":{"w":"stringbuilder","s":"builder","c":{},"d":[22,23,24,25,26,27,28,29,30,32,33,39,42,44,45,46,48,50,53,56,60,62,63,64,66,67,68,69,70],"e":true},"t":{"w":"stringtokenizer","s":"tokenizer","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[22,23,24,25,26,27,28,29,30,32,33,39,42,43,44,45,46,48,49,50,53,56,57,60,62,63,64,66,67,68,69,70],"e":true},"o":{"w":"stop","s":"op","c":{"e":{"w":"stoped","s":"ed","c":{},"d":[31],"e":true}},"d":[31],"e":true},"u":{"w":"student","s":"udent","c":{"s":{"w":"students","s":"s","c":{},"d":[33],"e":true}},"d":[33],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"b":{"w":"sb","s":"b","c":{},"d":[22,23,24,25,26,27,28,29,30,32,33,39,42,44,45,46,48,50,53,56,57,60,62,63,64,66,67,68,69,70],"e":true},"i":{"w":"size","s":"ize","c":{},"d":[26,30,31,39,42,48,53,65],"e":true},"y":{"w":"system","s":"ystem","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"o":{"w":"so","s":"o","c":{"r":{"w":"sort","s":"rt","c":{},"d":[26,27,28,29,31,32,33,51,63,65,67,70],"e":true},"l":{"w":"solution","s":"lution","c":{},"d":[26,31,36,45,51,61,62,65],"e":true},"u":{"w":"source","s":"urce","c":{},"d":[59],"e":true}},"d":[],"e":false},"c":{"w":"sch","s":"ch","c":{"e":{"w":"schedule","s":"edule","c":{},"d":[23],"e":true},"o":{"w":"school","s":"ool","c":{},"d":[26,31,34,42,45,51,54,61,62,65],"e":true}},"d":[],"e":false},"a":{"w":"sa","s":"a","c":{"c":{"w":"sachs","s":"chs","c":{},"d":[],"e":true},"f":{"w":"safety","s":"fety","c":{},"d":[48],"e":true}},"d":[],"e":false},"u":{"w":"su","s":"u","c":{"m":{"w":"sum","s":"m","c":{},"d":[30,38,39,63],"e":true},"r":{"w":"survive","s":"rvive","c":{},"d":[42],"e":true},"b":{"w":"sub","s":"b","c":{"s":{"w":"substring","s":"string","c":{},"d":[45,62,64],"e":true},"l":{"w":"sublist","s":"list","c":{},"d":[65],"e":true}},"d":[65],"e":true}},"d":[],"e":false},"p":{"w":"spread","s":"pread","c":{},"d":[48],"e":true}},"d":[31,41,42,46,62,63,68,69],"e":true},"l":{"w":"l","s":"l","c":{"i":{"w":"li","s":"i","c":{"s":{"w":"list","s":"st","c":{"-":{"w":"list-collapse","s":"-collapse","c":{},"d":[2],"e":true}},"d":[26,31,33,36,38,39,42,48,50,53,63,65],"e":true},"n":{"w":"linkedlist","s":"nkedlist","c":{},"d":[26],"e":true}},"d":[],"e":false},"o":{"w":"lo","s":"o","c":{"n":{"w":"long","s":"ng","c":{},"d":[22,23,24,25,27,28,29,30,32,33,40,43,44,46,49,50,53,57,60,63,64,65,66,67,68,69,70],"e":true},"c":{"w":"loc","s":"c","c":{"a":{"w":"local","s":"al","c":{},"d":[],"e":true},"k":{"w":"lock","s":"k","c":{},"d":[61],"e":true}},"d":[],"e":false},"g":{"w":"log","s":"g","c":{"n":{"w":"logn","s":"n","c":{},"d":[27,28,29],"e":true}},"d":[],"e":true},"w":{"w":"lowerbou","s":"werbou","c":{"d":{"w":"lowerboud","s":"d","c":{},"d":[29],"e":true},"n":{"w":"lowerbound","s":"nd","c":{},"d":[29],"e":true}},"d":[],"e":false},"o":{"w":"loop1","s":"op1","c":{},"d":[61],"e":true}},"d":[],"e":false},"e":{"w":"le","s":"e","c":{"n":{"w":"len","s":"n","c":{"g":{"w":"length","s":"gth","c":{},"d":[26,28,31,36,45,51,61,62,64,65,69],"e":true}},"d":[26,51,62,64],"e":true},"f":{"w":"left","s":"ft","c":{"u":{"w":"leftup","s":"up","c":{},"d":[25],"e":true},"d":{"w":"leftdown","s":"down","c":{},"d":[25],"e":true}},"d":[24,25,26,29],"e":true},"a":{"w":"learn","s":"arn","c":{},"d":[26,31,34,45,51,54,61,62,65],"e":true},"s":{"w":"lessons","s":"ssons","c":{},"d":[26,31,34,45,51,54,61,62,65],"e":true}},"d":[],"e":false},"a":{"w":"lang","s":"ang","c":{},"d":[31],"e":true},"u":{"w":"lucky","s":"ucky","c":{},"d":[64],"e":true}},"d":[26,27,28,29,38,39,59,60,62],"e":true},"f":{"w":"f","s":"f","c":{"a":{"w":"fa","s":"a","c":{"l":{"w":"false","s":"lse","c":{},"d":[2,34,36,41,42,45,54,56,57,61],"e":true},"i":{"w":"failrate","s":"ilrate","c":{},"d":[31],"e":true},"c":{"w":"facebook","s":"cebook","c":{},"d":[63,69],"e":true}},"d":[],"e":false},"o":{"w":"fo","s":"o","c":{"r":{"w":"for","s":"r","c":{"w":{"w":"forward","s":"ward","c":{},"d":[26],"e":true}},"d":[22,23,24,25,26,27,28,29,30,31,32,33,34,36,39,42,44,45,46,48,50,51,53,56,57,60,61,62,63,65,66,67,68,69,70],"e":true},"n":{"w":"font","s":"nt","c":{},"d":[26],"e":true},"o":{"w":"food","s":"od","c":{"_":{"w":"food_times","s":"_times","c":{},"d":[65],"e":true},"s":{"w":"foods","s":"s","c":{},"d":[65],"e":true}},"d":[65],"e":true}},"d":[],"e":false},"l":{"w":"fl","s":"l","c":{"u":{"w":"flush","s":"ush","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"i":{"w":"flipkart","s":"ipkart","c":{},"d":[25],"e":true}},"d":[],"e":false},"r":{"w":"fr","s":"r","c":{"o":{"w":"fro","s":"o","c":{"m":{"w":"from","s":"m","c":{},"d":[62],"e":true},"d":{"w":"frodo","s":"do","c":{},"d":[26],"e":true},"n":{"w":"front","s":"nt","c":{},"d":[26],"e":true},"s":{"w":"frost","s":"st","c":{},"d":[26],"e":true},"z":{"w":"frozen","s":"zen","c":{},"d":[26],"e":true}},"d":[],"e":false},"a":{"w":"frame","s":"ame","c":{},"d":[26],"e":true}},"d":[],"e":false},"i":{"w":"fi","s":"i","c":{"n":{"w":"fin","s":"n","c":{"a":{"w":"final","s":"al","c":{},"d":[31,33,36,39,42,46,48,53,56,65],"e":true},"d":{"w":"find","s":"d","c":{"p":{"w":"findparent","s":"parent","c":{},"d":[],"e":true},"e":{"w":"findexit","s":"exit","c":{},"d":[],"e":true},"n":{"w":"findnexts","s":"nexts","c":{},"d":[36],"e":true}},"d":[],"e":true}},"d":[],"e":false},"l":{"w":"fill","s":"ll","c":{},"d":[36,50],"e":true},"e":{"w":"fields","s":"elds","c":{},"d":[48],"e":true}},"d":[],"e":false},"u":{"w":"function","s":"unction","c":{},"d":[],"e":true},"f":{"w":"ffff00","s":"fff00","c":{},"d":[],"e":true},"e":{"w":"fear","s":"ear","c":{},"d":[70],"e":true}},"d":[65,70],"e":true},"h":{"w":"h","s":"h","c":{"i":{"w":"hide-card-count","s":"ide-card-count","c":{},"d":[2],"e":true},"t":{"w":"https","s":"ttps","c":{},"d":[22,23,24,26,27,30,31,32,33,34,38,41,44,45,46,47,50,51,52,54,59,61,62,64,65,68],"e":true},"l":{"w":"hl","s":"l","c":{},"d":[26,31,35,46,51,54,65],"e":true},"a":{"w":"ha","s":"a","c":{"s":{"w":"has","s":"s","c":{"m":{"w":"hasmoreelements","s":"moreelements","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"h":{"w":"hash","s":"h","c":{"c":{"w":"hashcode","s":"code","c":{},"d":[34],"e":true},"s":{"w":"hashset","s":"set","c":{},"d":[36],"e":true},"m":{"w":"hashmap","s":"map","c":{},"d":[60],"e":true}},"d":[],"e":false}},"d":[],"e":false},"l":{"w":"half","s":"lf","c":{},"d":[62,64],"e":true}},"d":[],"e":false},"o":{"w":"house","s":"ouse","c":{"l":{"w":"houselist","s":"list","c":{},"d":[53],"e":true}},"d":[32,53],"e":true}},"d":[52,53],"e":true},"w":{"w":"w","s":"w","c":{"w":{"w":"www","s":"ww","c":{},"d":[22,23,24,27,30,32,33,38,41,44,46,47,50,52,59,64,68],"e":true},"h":{"w":"while","s":"hile","c":{},"d":[22,23,24,25,26,27,28,29,30,32,33,36,39,42,44,46,48,50,53,57,60,62,63,64,66,67,68,69,70],"e":true},"r":{"w":"write","s":"rite","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"a":{"w":"wanted","s":"anted","c":{},"d":[],"e":true},"o":{"w":"word","s":"ord","c":{"s":{"w":"words","s":"s","c":{},"d":[26],"e":true}},"d":[26],"e":true},"e":{"w":"weak","s":"eak","c":{},"d":[51],"e":true}},"d":[26,45,65],"e":true},"a":{"w":"a","s":"a","c":{"c":{"w":"ac","s":"c","c":{"m":{"w":"acm","s":"m","c":{"i":{"w":"acmicpc","s":"icpc","c":{},"d":[22,23,24,27,30,32,33,38,41,44,46,47,50,52,59,64,68],"e":true},"-":{"w":"acm-icpc","s":"-icpc","c":{},"d":[],"e":true}},"d":[],"e":false},"k":{"w":"ackermann","s":"kermann","c":{},"d":[],"e":true}},"d":[],"e":false},"r":{"w":"ar","s":"r","c":{"g":{"w":"args","s":"gs","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,56,60,63,64,66,67,68,69,70],"e":true},"r":{"w":"arr","s":"r","c":{"a":{"w":"array","s":"ay","c":{"d":{"w":"arraydeque","s":"deque","c":{},"d":[36,39,42,50,60],"e":true},"l":{"w":"arraylist","s":"list","c":{},"d":[26,31,33,36,39,42,48,50,53,63,65],"e":true},"s":{"w":"arrays","s":"s","c":{},"d":[27,28,29,32,36,50,51,56,67,70],"e":true}},"d":[],"e":false}},"d":[67,69],"e":true},"e":{"w":"area","s":"ea","c":{},"d":[65],"e":true}},"d":[],"e":false},"d":{"w":"ad","s":"d","c":{"d":{"w":"add","s":"d","c":{"i":{"w":"addijjjkklss20","s":"ijjjkklss20","c":{},"d":[63],"e":true}},"d":[26,30,31,33,34,36,37,39,42,46,48,50,53,60,63,65],"e":true},"j":{"w":"adj","s":"j","c":{},"d":[50],"e":true}},"d":[],"e":false},"n":{"w":"answer","s":"nswer","c":{},"d":[26,31,36,51,56,61,62,65],"e":true},"p":{"w":"append","s":"ppend","c":{},"d":[22,23,24,25,26,27,28,29,30,32,33,39,42,44,45,46,48,50,53,56,60,62,63,64,66,67,68,69,70],"e":true},"b":{"w":"ab","s":"b","c":{"s":{"w":"abs","s":"s","c":{},"d":[39,53],"e":true},"c":{"w":"abckk13","s":"ckk13","c":{},"d":[63],"e":true}},"d":[],"e":false},"m":{"w":"am","s":"m","c":{"o":{"w":"amortized","s":"ortized","c":{},"d":[],"e":true},"a":{"w":"amazon","s":"azon","c":{},"d":[28],"e":true}},"d":[],"e":false},"v":{"w":"avg","s":"vg","c":{},"d":[39],"e":true},"j":{"w":"ajkdlsi412k4jsj9d","s":"jkdlsi412k4jsj9d","c":{},"d":[63],"e":true},"l":{"w":"alphabet","s":"lphabet","c":{},"d":[63],"e":true}},"d":[26,50,56,63,65,67],"e":true},"o":{"w":"o","s":"o","c":{"u":{"w":"out","s":"ut","c":{"p":{"w":"output","s":"put","c":{"s":{"w":"outputstreamwriter","s":"streamwriter","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,56,57,60,63,64,66,67,68,69,70],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"f":{"w":"of","s":"f","c":{},"d":[],"e":true},"a":{"w":"oa","s":"a","c":{"k":{"w":"oakak","s":"kak","c":{},"d":[26],"e":true},"a":{"w":"oaaaa","s":"aaa","c":{},"d":[26],"e":true}},"d":[],"e":false},"d":{"w":"odorf","s":"dorf","c":{},"d":[26],"e":true},"z":{"w":"ozzzz","s":"zzzz","c":{},"d":[26],"e":true},"p":{"w":"op","s":"p","c":{"e":{"w":"operator","s":"erator","c":{},"d":[44],"e":true}},"d":[44],"e":true}},"d":[22,23,24,25,26,27,28,29,30,31,32,33,34,36,38,41,42,44,46,47,50,51,52,54,61,63,64,65,66,67,68,69,70],"e":true},"v":{"w":"v","s":"v","c":{"1":{"w":"v1","s":"1","c":{},"d":[30,44,64],"e":true},"2":{"w":"v2","s":"2","c":{},"d":[30,44,64],"e":true},"o":{"w":"void","s":"oid","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,51,53,56,57,60,61,63,64,66,67,68,69,70],"e":true},"i":{"w":"vi","s":"i","c":{"s":{"w":"visited","s":"sited","c":{},"d":[34,36,48,51],"e":true},"r":{"w":"virus","s":"rus","c":{"e":{"w":"viruses","s":"es","c":{},"d":[48],"e":true}},"d":[46,48],"e":true}},"d":[],"e":false},"a":{"w":"value","s":"alue","c":{"o":{"w":"valueof","s":"of","c":{},"d":[63,64],"e":true}},"d":[44],"e":true}},"d":[34,36,38,41,42,45,46,47,48,50,53,63,66,69],"e":true},"e":{"w":"e","s":"e","c":{"d":{"w":"edge","s":"dge","c":{"s":{"w":"edges","s":"s","c":{},"d":[],"e":true}},"d":[],"e":true},"l":{"w":"el","s":"l","c":{"s":{"w":"else","s":"se","c":{},"d":[23,24,26,27,28,29,31,33,42,44,45,48,50,53,56,57,62,63,65,69],"e":true},"o":{"w":"elog","s":"og","c":{"e":{"w":"eloge","s":"e","c":{},"d":[],"e":true},"v":{"w":"elogv","s":"v","c":{},"d":[],"e":true}},"d":[],"e":false}},"d":[],"e":false},"x":{"w":"ex","s":"x","c":{"i":{"w":"exit","s":"it","c":{"s":{"w":"exits","s":"s","c":{},"d":[],"e":true}},"d":[],"e":true},"e":{"w":"execute","s":"ecute","c":{},"d":[56],"e":true}},"d":[],"e":false},"m":{"w":"emarf","s":"marf","c":{},"d":[26],"e":true},"n":{"w":"eng","s":"ng","c":{},"d":[33],"e":true},"q":{"w":"equals","s":"quals","c":{},"d":[34,42,45,60],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,34,38,39,41,42,43,44,46,47,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true},"j":{"w":"j","s":"j","c":{"a":{"w":"java","s":"ava","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,39,42,44,45,46,48,50,51,53,54,55,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"-":{"w":"j--","s":"--","c":{},"d":[22],"e":true}},"d":[22,24,25,36,39,42,46,48,53,56,57,61],"e":true},"i":{"w":"i","s":"i","c":{"2":{"w":"i2","s":"2","c":{},"d":[],"e":true},"3":{"w":"i3","s":"3","c":{},"d":[],"e":true},"5":{"w":"i5","s":"5","c":{},"d":[],"e":true},"n":{"w":"in","s":"n","c":{"d":{"w":"indegree","s":"degree","c":{},"d":[],"e":true},"p":{"w":"input","s":"put","c":{"p":{"w":"inputprocessor","s":"processor","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,56,57,60,63,64,66,67,68,69,70],"e":true},"s":{"w":"inputstreamreader","s":"streamreader","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,56,60,63,64,66,67,68,69,70],"e":true},"t":{"w":"int","s":"t","c":{"e":{"w":"integer","s":"eger","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,40,43,44,46,49,50,51,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[22,23,24,25,26,27,28,29,30,31,32,33,34,36,38,39,40,42,43,44,45,46,48,49,50,51,53,54,56,57,60,61,62,63,64,65,66,67,68,69,70],"e":true},"v":{"w":"inv","s":"v","c":{"e":{"w":"inverse","s":"erse","c":{},"d":[],"e":true},"a":{"w":"invalid","s":"alid","c":{},"d":[56,57],"e":true}},"d":[],"e":false},"f":{"w":"inf","s":"f","c":{},"d":[],"e":true}},"d":[22,23,24,25,27,28,29,30,32,33,39,42,44,46,48,50,53,57,60,63,64,66,67,68,69,70],"e":true},"m":{"w":"imp","s":"mp","c":{"o":{"w":"impo","s":"o","c":{"s":{"w":"impossible","s":"ssible","c":{},"d":[],"e":true},"r":{"w":"import","s":"rt","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,35,39,42,44,45,46,48,50,51,53,55,60,62,63,64,65,66,67,68,69,70],"e":true}},"d":[],"e":false},"l":{"w":"implements","s":"lements","c":{},"d":[31,33,46,65],"e":true}},"d":[],"e":false},"o":{"w":"io","s":"o","c":{"e":{"w":"ioexception","s":"exception","c":{},"d":[22,23,24,25,27,28,29,30,32,33,39,42,43,44,46,48,49,50,53,57,60,63,64,66,67,68,69,70],"e":true}},"d":[22,23,24,25,26,27,28,29,30,32,33,39,42,44,45,46,48,50,53,55,60,62,63,64,65,66,67,68,69,70],"e":true},"f":{"w":"if","s":"f","c":{},"d":[22,23,24,25,26,27,28,29,31,33,34,36,37,39,42,44,45,46,48,50,51,53,56,57,60,61,62,63,65,67,68,69,70],"e":true},"d":{"w":"idx","s":"dx","c":{},"d":[26,42,44,45,48,53,56,59,65],"e":true},"s":{"w":"is","s":"s","c":{"e":{"w":"isempty","s":"empty","c":{},"d":[26,36,39,42,45,46,50],"e":true},"p":{"w":"ispossible","s":"possible","c":{},"d":[27,34,36],"e":true},"h":{"w":"ishosizontal","s":"hosizontal","c":{},"d":[34,36],"e":true},"v":{"w":"isvertical","s":"vertical","c":{},"d":[34,36],"e":true},"f":{"w":"isfinish","s":"finish","c":{},"d":[36],"e":true},"a":{"w":"isalphabetic","s":"alphabetic","c":{},"d":[63],"e":true}},"d":[],"e":false},"-":{"w":"i--","s":"--","c":{},"d":[22,23],"e":true},"x":{"w":"ix","s":"x","c":{},"d":[60],"e":true}},"d":[22,23,24,25,26,27,28,29,30,31,32,33,34,36,39,42,44,45,46,48,50,51,53,56,57,60,61,65,66,67,69,70],"e":true},"u":{"w":"u","s":"u","c":{"t":{"w":"util","s":"til","c":{},"d":[22,23,24,25,26,27,28,29,30,31,32,33,35,39,42,44,46,48,50,51,53,55,60,62,63,64,65,66,67,68,69,70],"e":true},"n":{"w":"un","s":"n","c":{"i":{"w":"uni","s":"i","c":{"o":{"w":"union","s":"on","c":{"-":{"w":"union-find","s":"-find","c":{},"d":[],"e":true}},"d":[38,39],"e":true},"v":{"w":"university","s":"versity","c":{},"d":[],"e":true}},"d":[],"e":false},"l":{"w":"unlock","s":"lock","c":{},"d":[61],"e":true}},"d":[],"e":false},"l":{"w":"ulm","s":"lm","c":{},"d":[],"e":true},"s":{"w":"us","s":"s","c":{"a":{"w":"usaco","s":"aco","c":{},"d":[],"e":true},"e":{"w":"used","s":"ed","c":{},"d":[51],"e":true}},"d":[],"e":false},"g":{"w":"ugl","s":"gl","c":{"e":{"w":"ugle","s":"e","c":{},"d":[],"e":true},"y":{"w":"ugly","s":"y","c":{},"d":[],"e":true}},"d":[],"e":false},"p":{"w":"upperbound","s":"pperbound","c":{},"d":[29],"e":true}},"d":[34,39,45,51,61],"e":true},"q":{"w":"qu","s":"qu","c":{"e":{"w":"que","s":"e","c":{"u":{"w":"queue","s":"ue","c":{},"d":[30,42,46],"e":true},"r":{"w":"quer","s":"r","c":{"i":{"w":"queries","s":"ies","c":{},"d":[26],"e":true},"y":{"w":"query","s":"y","c":{},"d":[26],"e":true}},"d":[],"e":false},"s":{"w":"question","s":"stion","c":{},"d":[26],"e":true}},"d":[36,39,46,50,60],"e":true},"r":{"w":"quries","s":"ries","c":{},"d":[26],"e":true}},"d":[],"e":false},"y":{"w":"y","s":"y","c":{"1":{"w":"y1","s":"1","c":{},"d":[34,36,37],"e":true},"2":{"w":"y2","s":"2","c":{},"d":[34,36,37],"e":true},"e":{"w":"yes","s":"es","c":{},"d":[42],"e":true}},"d":[34,36,39,42,46,48,53,54,56,57,59,60,61],"e":true},"z":{"w":"z","s":"z","c":{"o":{"w":"zoho","s":"oho","c":{},"d":[29],"e":true}},"d":[26],"e":true},"g":{"w":"g","s":"g","c":{"e":{"w":"get","s":"et","c":{},"d":[26,31,42,48,50,53,65],"e":true},"i":{"w":"gi","s":"i","c":{},"d":[],"e":true},"r":{"w":"gr","s":"r","c":{"a":{"w":"grade","s":"ade","c":{},"d":[],"e":true},"o":{"w":"group","s":"oup","c":{"n":{"w":"groupno","s":"no","c":{},"d":[38,39],"e":true},"s":{"w":"groups","s":"s","c":{},"d":[39],"e":true}},"d":[],"e":false}},"d":[],"e":false},"o":{"w":"go","s":"o","c":{"l":{"w":"goldman","s":"ldman","c":{},"d":[],"e":true},"o":{"w":"google","s":"ogle","c":{},"d":[],"e":true}},"d":[],"e":false}},"d":[],"e":true},"_":{"w":"_","s":"_","c":{"a":{"w":"_a","s":"a","c":{},"d":[],"e":true},"b":{"w":"_b","s":"b","c":{},"d":[],"e":true},"d":{"w":"_dist","s":"dist","c":{},"d":[],"e":true},"n":{"w":"_n","s":"n","c":{},"d":[51],"e":true},"k":{"w":"_key","s":"key","c":{},"d":[61],"e":true},"l":{"w":"_lock","s":"lock","c":{},"d":[61],"e":true}},"d":[],"e":false},"'":{"w":"'","s":"'","c":{"0":{"w":"'0'","s":"0'","c":{},"d":[63,68,69],"e":true},"2":{"w":"'2'","s":"2'","c":{},"d":[68],"e":true}},"d":[45,70],"e":true}},"d":[],"e":false},"isArray":false},"embeddingModel":{"type":"Radix","node":{"w":"","s":"","c":{"0":{"w":"0","s":"0","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true},"e":{"w":"embed-multilingual-light-v3","s":"embed-multilingual-light-v3","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true}},"d":[],"e":false},"isArray":false},"created_at":{"type":"AVL","node":{"root":{"k":1735875660535,"v":[19],"l":{"k":1735875660518,"v":[1],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":null,"h":1},"r":{"k":1735875660549,"v":[55,56,57,58],"l":{"k":1735875660541,"v":[33,34],"l":{"k":1735875660537,"v":[25,26],"l":{"k":1735875660536,"v":[23,24],"l":null,"r":null,"h":0},"r":{"k":1735875660539,"v":[29,30],"l":{"k":1735875660538,"v":[27,28],"l":null,"r":null,"h":0},"r":{"k":1735875660540,"v":[31,32],"l":null,"r":null,"h":0},"h":1},"h":2},"r":{"k":1735875660545,"v":[44,45],"l":{"k":1735875660543,"v":[37,38,39,40],"l":{"k":1735875660542,"v":[35,36],"l":null,"r":null,"h":0},"r":{"k":1735875660544,"v":[41,42,43],"l":null,"r":null,"h":0},"h":1},"r":{"k":1735875660547,"v":[49,50,51],"l":{"k":1735875660546,"v":[46,47,48],"l":null,"r":null,"h":0},"r":{"k":1735875660548,"v":[52,53,54],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"r":{"k":1735875660553,"v":[64],"l":{"k":1735875660551,"v":[60,61],"l":{"k":1735875660550,"v":[59],"l":null,"r":null,"h":0},"r":{"k":1735875660552,"v":[62,63],"l":null,"r":null,"h":0},"h":1},"r":{"k":1735875660853,"v":[68],"l":{"k":1735875660851,"v":[66],"l":{"k":1735875660850,"v":[65],"l":null,"r":null,"h":0},"r":{"k":1735875660852,"v":[67],"l":null,"r":null,"h":0},"h":1},"r":{"k":1735875660854,"v":[69],"l":null,"r":{"k":1735875660855,"v":[70],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"h":4},"h":5}},"isArray":false},"ctime":{"type":"AVL","node":{"root":{"k":1735697065046,"v":[13],"l":{"k":1735627420522,"v":[28],"l":{"k":1735616258786,"v":[2],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":{"k":1735621667549,"v":[32],"l":{"k":1735620958896,"v":[33],"l":{"k":1735616310157,"v":[70],"l":null,"r":null,"h":0},"r":null,"h":1},"r":{"k":1735625091752,"v":[30],"l":{"k":1735623340904,"v":[31],"l":null,"r":null,"h":0},"r":{"k":1735625955495,"v":[29],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"r":{"k":1735628609785,"v":[26],"l":{"k":1735627769037,"v":[27],"l":null,"r":null,"h":0},"r":null,"h":2},"h":4},"r":{"k":1735714632485,"v":[46],"l":{"k":1735697535581,"v":[23],"l":{"k":1735697311596,"v":[24],"l":null,"r":null,"h":0},"r":{"k":1735714479219,"v":[20],"l":{"k":1735697540141,"v":[22],"l":null,"r":null,"h":0},"r":{"k":1735714628696,"v":[47,48,49],"l":null,"r":null,"h":1},"h":2},"h":3},"r":{"k":1735794019049,"v":[62],"l":{"k":1735793908666,"v":[65],"l":{"k":1735714647765,"v":[38,39,40],"l":{"k":1735714640509,"v":[44],"l":{"k":1735714636919,"v":[45],"l":null,"r":null,"h":0},"r":{"k":1735714644214,"v":[41,42,43],"l":null,"r":null,"h":0},"h":1},"r":{"k":1735791380171,"v":[69],"l":{"k":1735714653012,"v":[34,35,36,37],"l":null,"r":null,"h":0},"r":{"k":1735793343392,"v":[66],"l":null,"r":null,"h":0},"h":1},"h":2},"r":{"k":1735794011359,"v":[64],"l":{"k":1735793918844,"v":[67],"l":{"k":1735793916686,"v":[68],"l":null,"r":null,"h":0},"r":null,"h":1},"r":{"k":1735794015962,"v":[63],"l":null,"r":null,"h":0},"h":2},"h":3},"r":{"k":1735794025749,"v":[59,60],"l":{"k":1735794022227,"v":[61],"l":null,"r":null,"h":0},"r":{"k":1735794032355,"v":[52,53],"l":{"k":1735794028811,"v":[54,55,56,57,58],"l":null,"r":null,"h":0},"r":{"k":1735794036137,"v":[51],"l":null,"r":null,"h":0},"h":1},"h":2},"h":4},"h":5},"h":6}},"isArray":false},"mtime":{"type":"AVL","node":{"root":{"k":1735697273079,"v":[12],"l":{"k":1735628567838,"v":[27],"l":{"k":1735625931582,"v":[30],"l":{"k":1735625267385,"v":[1],"l":{"k":0,"v":[],"l":null,"r":null,"h":0},"r":{"k":1735625272996,"v":[32],"l":null,"r":{"k":1735625276702,"v":[33],"l":null,"r":null,"h":0},"h":1},"h":2},"r":{"k":1735627079511,"v":[29],"l":null,"r":{"k":1735627855984,"v":[28],"l":null,"r":null,"h":0},"h":1},"h":3},"r":{"k":1735634653849,"v":[26],"l":null,"r":null,"h":1},"h":4},"r":{"k":1735736597522,"v":[44],"l":{"k":1735699628835,"v":[23],"l":{"k":1735698208027,"v":[24],"l":null,"r":null,"h":0},"r":{"k":1735714598239,"v":[21],"l":{"k":1735702582359,"v":[22],"l":null,"r":null,"h":0},"r":{"k":1735715991619,"v":[47,48,49],"l":null,"r":{"k":1735716871955,"v":[46],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"r":{"k":1735814718226,"v":[59,60],"l":{"k":1735787375865,"v":[34,35,36,37],"l":{"k":1735739934088,"v":[38,39,40],"l":{"k":1735738327318,"v":[41,42,43],"l":null,"r":null,"h":0},"r":{"k":1735782778984,"v":[45],"l":null,"r":null,"h":0},"h":1},"r":{"k":1735803616412,"v":[64],"l":{"k":1735793800446,"v":[66],"l":{"k":1735791515138,"v":[69],"l":null,"r":null,"h":0},"r":{"k":1735800397329,"v":[65],"l":null,"r":null,"h":0},"h":1},"r":{"k":1735806986404,"v":[61],"l":{"k":1735804109360,"v":[63],"l":null,"r":null,"h":0},"r":{"k":1735808082787,"v":[52,53],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"r":{"k":1735867952775,"v":[62],"l":{"k":1735825130515,"v":[51],"l":{"k":1735818986940,"v":[54,55,56,57,58],"l":null,"r":null,"h":0},"r":null,"h":1},"r":{"k":1735874821570,"v":[67],"l":{"k":1735872568537,"v":[68],"l":null,"r":null,"h":0},"r":{"k":1735875505797,"v":[2],"l":null,"r":{"k":1735875569790,"v":[70],"l":null,"r":null,"h":0},"h":1},"h":2},"h":3},"h":4},"h":5},"h":6}},"isArray":false},"tags":{"type":"Radix","node":{"w":"","s":"","c":{},"d":[],"e":false},"isArray":true},"extension":{"type":"Radix","node":{"w":"","s":"","c":{"m":{"w":"md","s":"md","c":{},"d":[2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"e":true}},"d":[],"e":false},"isArray":false}},"vectorIndexes":{"embedding":{"size":384,"vectors":{"a4f0df752e644510136309e8e2065ade":[0.999723452351399,[0.01428985595703125,-0.0089569091796875,-0.024627685546875,0.042449951171875,0.09356689453125,-0.10943603515625,-0.038360595703125,0.03155517578125,0.0013875961303710938,0.09075927734375,-0.0084075927734375,0.0148468017578125,0.01556396484375,0.0018796920776367188,0.0193328857421875,-0.0184173583984375,-0.0178680419921875,0.0286102294921875,0.049285888671875,-0.04437255859375,0.06707763671875,0.053131103515625,0.0276641845703125,-0.0127410888671875,0.01023101806640625,0.0088653564453125,-0.036651611328125,0.0653076171875,0.03485107421875,0.0025386810302734375,-0.0018281936645507812,-0.03594970703125,-0.095947265625,0.0018682479858398438,0.00946807861328125,0.053741455078125,0.03594970703125,-0.0048828125,0.01340484619140625,-0.060150146484375,0.0133514404296875,0.0190887451171875,0.04052734375,0.09637451171875,-0.049224853515625,-0.0489501953125,0.01525115966796875,-0.033203125,-0.11627197265625,0.016510009765625,0.0256805419921875,-0.01415252685546875,-0.0019426345825195312,-0.0706787109375,0.00583648681640625,0.02105712890625,0.00504302978515625,0.1126708984375,-0.035125732421875,0.0267333984375,0.06549072265625,-0.039215087890625,-0.0311279296875,-0.049713134765625,0.0037021636962890625,-0.0926513671875,0.053192138671875,-0.0294647216796875,0.0709228515625,-0.03973388671875,0.028411865234375,-0.07354736328125,-0.037567138671875,-0.01158905029296875,-0.0176239013671875,-0.005977630615234375,0.0748291015625,0.0187835693359375,0.056182861328125,-0.0224761962890625,-0.032958984375,-0.022613525390625,-0.0802001953125,-0.026702880859375,-0.03070068359375,0.0205078125,0.006214141845703125,-0.04754638671875,-0.09527587890625,0.1180419921875,-0.030487060546875,0.032867431640625,-0.0117950439453125,0.044342041015625,0.0269775390625,0.034332275390625,0.052947998046875,0.035797119140625,-0.0278778076171875,0.032470703125,-0.0276336669921875,-0.09490966796875,-0.033172607421875,-0.0765380859375,-0.08392333984375,0.056732177734375,0.0025005340576171875,0.0184783935546875,0.032257080078125,0.03558349609375,-0.0220947265625,0.02972412109375,-0.0115509033203125,0.0203857421875,0.007015228271484375,0.026702880859375,0.08563232421875,-0.0758056640625,0.03302001953125,-0.07110595703125,-0.024139404296875,0.015350341796875,-0.021270751953125,-0.01490020751953125,0.0213470458984375,-0.030181884765625,0.004833221435546875,0.04266357421875,-0.111083984375,0.02691650390625,0.0231170654296875,0.0157470703125,-0.050323486328125,0.03240966796875,0.05731201171875,0.032257080078125,0.006587982177734375,0.10113525390625,-0.025238037109375,-0.01995849609375,0.08306884765625,0.0400390625,-0.006500244140625,0.047119140625,-0.036773681640625,0.0141143798828125,0.049346923828125,-0.139892578125,0.0224456787109375,-0.00004488229751586914,0.07763671875,0.0291290283203125,0.025115966796875,0.04571533203125,-0.032745361328125,-0.10272216796875,0.08203125,0.06219482421875,-0.0289306640625,0.049560546875,-0.0516357421875,0.0266876220703125,-0.140380859375,-0.19873046875,0.05499267578125,-0.09759521484375,0.055908203125,0.007190704345703125,-0.00661468505859375,-0.027008056640625,0.0245361328125,0.1387939453125,-0.0292816162109375,0.021759033203125,-0.01708984375,0.08367919921875,-0.01218414306640625,-0.00839996337890625,-0.00765228271484375,-0.0026264190673828125,0.0594482421875,0.060028076171875,-0.054595947265625,-0.041961669921875,-0.0758056640625,0.08587646484375,-0.02447509765625,-0.09063720703125,-0.040008544921875,0.011962890625,-0.11151123046875,0.04998779296875,-0.048614501953125,-0.10919189453125,-0.039642333984375,0.034942626953125,-0.033172607421875,-0.021697998046875,0.00939178466796875,-0.0007014274597167969,-0.04119873046875,-0.061981201171875,0.013671875,0.02581787109375,-0.01233673095703125,-0.0225677490234375,0.056304931640625,0.0236053466796875,-0.056396484375,-0.00917816162109375,-0.037841796875,0.00664520263671875,0.0007085800170898438,0.033172607421875,-0.059326171875,0.0074615478515625,-0.040130615234375,-0.0261383056640625,-0.0248565673828125,0.12005615234375,0.054656982421875,-0.00861358642578125,-0.138427734375,-0.088134765625,0.002048492431640625,0.02288818359375,-0.02069091796875,-0.09454345703125,-0.051239013671875,-0.0188751220703125,0.07568359375,-0.00543975830078125,0.052642822265625,0.07098388671875,0.01186370849609375,0.10540771484375,0.0224456787109375,-0.05413818359375,0.01001739501953125,-0.0855712890625,-0.0206756591796875,0.04425048828125,0.10748291015625,-0.048828125,-0.03741455078125,-0.052490234375,-0.033721923828125,0.023345947265625,-0.00876617431640625,0.0276641845703125,0.005672454833984375,-0.050048828125,-0.1048583984375,-0.038116455078125,-0.0457763671875,0.06341552734375,0.0171051025390625,0.0272216796875,-0.0182952880859375,-0.038330078125,0.0214080810546875,-0.0208587646484375,0.057708740234375,-0.01654052734375,-0.0251617431640625,-0.04522705078125,-0.051300048828125,0.042266845703125,0.040435791015625,0.01480865478515625,0.03558349609375,-0.006389617919921875,-0.0279541015625,0.0154876708984375,0.0216064453125,-0.03399658203125,0.0960693359375,0.0679931640625,0.01751708984375,0.0767822265625,-0.01071929931640625,-0.004375457763671875,0.10052490234375,0.1011962890625,0.0232391357421875,-0.0027408599853515625,-0.0155181884765625,0.050567626953125,0.07958984375,-0.003910064697265625,-0.08154296875,0.01082611083984375,-0.04656982421875,-0.0034313201904296875,0.10809326171875,0.0430908203125,0.016632080078125,0.007717132568359375,-0.05145263671875,0.023345947265625,0.053192138671875,0.01532745361328125,-0.03167724609375,0.01161956787109375,-0.040863037109375,-0.049713134765625,0.06390380859375,-0.054107666015625,0.006114959716796875,0.0038394927978515625,0.00012969970703125,0.028594970703125,-0.0135650634765625,0.02783203125,-0.00010067224502563477,0.047515869140625,0.033233642578125,0.0271453857421875,-0.067626953125,0.012451171875,-0.023223876953125,0.00984954833984375,0.031829833984375,-0.0244140625,-0.006740570068359375,0.0220794677734375,-0.079833984375,0.059173583984375,-0.046478271484375,0.1185302734375,0.0350341796875,-0.005504608154296875,0.0200653076171875,0.00527191162109375,-0.032257080078125,-0.0828857421875,-0.019989013671875,-0.035125732421875,-0.00519561767578125,0.00527191162109375,0.06982421875,-0.0418701171875,-0.03289794921875,0.05535888671875,0.00710296630859375,-0.0243682861328125,-0.0894775390625,0.0526123046875,-0.11602783203125,-0.038543701171875,-0.10333251953125,-0.1090087890625,0.041412353515625,-0.0113677978515625,0.049713134765625,-0.045928955078125,-0.016998291015625,-0.08709716796875,-0.00946807861328125,-0.024139404296875,0.0286102294921875,-0.055999755859375,0.0245361328125,0.07696533203125,-0.0159759521484375,-0.08050537109375,0.00830078125,0.038543701171875,-0.032318115234375,0.032073974609375,0.05426025390625,0.006465911865234375,0.050750732421875,0.0014028549194335938,-0.00505828857421875,-0.03192138671875,0.0963134765625,-0.01434326171875,0.0333251953125,0.04766845703125,0.056610107421875,-0.034454345703125,-0.0011110305786132812,-0.021331787109375]],"6dedc5ab0aa727885ec51dae14131b24":[1.0002815851196223,[0.0113677978515625,0.0225830078125,-0.04132080078125,0.0328369140625,0.09869384765625,-0.06390380859375,-0.048065185546875,0.08349609375,-0.07122802734375,0.026275634765625,0.03851318359375,-0.00798797607421875,0.0614013671875,-0.04296875,0.0232696533203125,-0.004245758056640625,0.076171875,0.0193023681640625,-0.00530242919921875,-0.0172271728515625,0.0062713623046875,0.0731201171875,-0.041168212890625,-0.0196990966796875,0.0758056640625,0.015167236328125,-0.0318603515625,0.13623046875,-0.0018892288208007812,0.02618408203125,-0.02947998046875,-0.035247802734375,0.0003693103790283203,-0.06915283203125,0.03515625,0.0684814453125,-0.003536224365234375,0.05670166015625,0.046875,-0.11346435546875,0.040679931640625,-0.052490234375,0.072509765625,0.0516357421875,0.069580078125,0.054168701171875,-0.0428466796875,-0.05596923828125,-0.024444580078125,0.046630859375,-0.031890869140625,-0.018798828125,0.0174407958984375,-0.0933837890625,-0.051025390625,-0.01224517822265625,0.044921875,-0.06005859375,-0.0709228515625,0.01126861572265625,0.00894927978515625,-0.007419586181640625,-0.00466156005859375,-0.02490234375,0.1043701171875,-0.1142578125,0.02313232421875,-0.062225341796875,0.0831298828125,-0.037109375,-0.0193939208984375,0.0154266357421875,-0.032501220703125,-0.03271484375,-0.02020263671875,0.0189208984375,0.10504150390625,-0.01380157470703125,0.05218505859375,0.007160186767578125,0.0130767822265625,-0.07568359375,0.0087890625,-0.0198516845703125,-0.068359375,0.0093231201171875,0.045379638671875,-0.0302886962890625,-0.0753173828125,-0.01081085205078125,0.0828857421875,0.0028972625732421875,-0.036224365234375,-0.0201568603515625,-0.032745361328125,-0.0170135498046875,-0.0654296875,0.053436279296875,0.041595458984375,0.07269287109375,-0.0374755859375,-0.06500244140625,0.046722412109375,-0.07098388671875,-0.0296630859375,0.0158233642578125,-0.046295166015625,-0.09161376953125,0.022064208984375,0.005580902099609375,0.013824462890625,0.08563232421875,0.00386810302734375,-0.008880615234375,0.0144195556640625,-0.00563812255859375,0.041168212890625,-0.021026611328125,0.02056884765625,-0.087158203125,0.02191162109375,-0.0186614990234375,-0.08941650390625,0.043670654296875,-0.031646728515625,0.053497314453125,0.0321044921875,0.056884765625,-0.08319091796875,0.010711669921875,0.07073974609375,0.020599365234375,-0.03216552734375,0.04425048828125,0.0877685546875,0.062744140625,0.0150299072265625,0.139404296875,-0.04400634765625,-0.08111572265625,-0.0244140625,0.055206298828125,-0.04815673828125,0.0030612945556640625,-0.01537322998046875,0.075439453125,0.04339599609375,-0.08648681640625,0.034576416015625,-0.09197998046875,0.051116943359375,-0.09954833984375,0.10491943359375,0.050262451171875,-0.05548095703125,0.0024089813232421875,0.03704833984375,0.018035888671875,-0.030364990234375,0.156005859375,-0.03912353515625,0.0260467529296875,-0.0933837890625,-0.1568603515625,0.011566162109375,-0.056884765625,0.025604248046875,-0.03338623046875,-0.039825439453125,-0.062408447265625,0.0147705078125,0.059967041015625,-0.042816162109375,0.055206298828125,-0.071044921875,0.039093017578125,-0.03167724609375,-0.0362548828125,0.02459716796875,-0.041412353515625,-0.0213470458984375,0.09228515625,-0.07855224609375,0.01544952392578125,-0.03228759765625,-0.0022830963134765625,-0.0718994140625,-0.059478759765625,0.005702972412109375,0.031494140625,-0.05657958984375,0.04486083984375,0.04937744140625,-0.0489501953125,-0.03924560546875,0.0171051025390625,-0.08251953125,-0.02154541015625,0.004917144775390625,-0.0242462158203125,0.04876708984375,0.00582122802734375,0.04547119140625,0.09814453125,0.0161895751953125,-0.055328369140625,0.0155181884765625,0.049224853515625,-0.0606689453125,-0.03851318359375,0.031585693359375,0.0108795166015625,0.01009368896484375,-0.01152801513671875,0.004093170166015625,-0.019866943359375,-0.0704345703125,-0.0028362274169921875,-0.012542724609375,0.056060791015625,0.00641632080078125,-0.008453369140625,-0.08856201171875,-0.0684814453125,-0.038909912109375,-0.022613525390625,-0.006229400634765625,-0.09515380859375,-0.06298828125,0.0380859375,0.06719970703125,0.0780029296875,-0.00044536590576171875,0.01358795166015625,-0.0178070068359375,0.006378173828125,0.027587890625,0.00836944580078125,-0.06304931640625,-0.0830078125,-0.0306396484375,-0.0192718505859375,-0.0138092041015625,-0.0094451904296875,-0.006008148193359375,0.0204315185546875,-0.00931549072265625,0.061126708984375,-0.0477294921875,0.038818359375,-0.058746337890625,-0.036407470703125,-0.04010009765625,-0.107666015625,-0.0660400390625,0.053863525390625,-0.0169677734375,0.03472900390625,-0.0238800048828125,-0.037445068359375,-0.0115203857421875,0.07025146484375,0.036834716796875,-0.02349853515625,-0.02105712890625,-0.058624267578125,-0.05279541015625,0.02532958984375,0.08929443359375,0.007740020751953125,0.007732391357421875,0.0828857421875,0.06268310546875,-0.04278564453125,-0.0240020751953125,-0.053802490234375,0.090576171875,0.04339599609375,-0.0120086669921875,-0.03924560546875,0.0345458984375,-0.0457763671875,0.07049560546875,0.06268310546875,0.040924072265625,0.061859130859375,0.00995635986328125,0.0877685546875,0.061065673828125,-0.005352020263671875,-0.1307373046875,0.0728759765625,0.025238037109375,0.03070068359375,0.0777587890625,-0.023712158203125,0.0200653076171875,0.0235443115234375,-0.00182342529296875,0.0302276611328125,0.031097412109375,0.0169525146484375,-0.00833892822265625,0.03143310546875,-0.00353240966796875,-0.01395416259765625,-0.01081085205078125,0.0038623809814453125,-0.052825927734375,0.04888916015625,-0.0987548828125,-0.0347900390625,-0.0877685546875,0.037353515625,0.04656982421875,-0.00966644287109375,0.0455322265625,0.0462646484375,0.00792694091796875,0.053863525390625,-0.058502197265625,0.0298919677734375,0.0012865066528320312,0.039794921875,-0.009033203125,-0.040283203125,-0.0556640625,0.09674072265625,-0.00005632638931274414,0.1573486328125,0.0255889892578125,0.0260162353515625,-0.0111236572265625,-0.043121337890625,0.00439453125,-0.069091796875,-0.034820556640625,-0.09161376953125,-0.0606689453125,-0.07330322265625,0.0445556640625,-0.0015573501586914062,-0.075439453125,0.05657958984375,0.045501708984375,-0.0167694091796875,-0.041748046875,-0.0178070068359375,-0.020263671875,-0.0191497802734375,0.032867431640625,-0.0858154296875,0.078857421875,0.028961181640625,0.0310211181640625,0.0030517578125,-0.0229034423828125,0.007480621337890625,-0.0219879150390625,0.0290679931640625,0.0287017822265625,-0.0904541015625,0.0382080078125,0.014892578125,-0.0357666015625,-0.0231170654296875,0.0380859375,0.049957275390625,-0.003383636474609375,0.0010223388671875,-0.0281982421875,-0.053802490234375,0.057403564453125,-0.005535125732421875,0.0044708251953125,-0.0160064697265625,0.017333984375,-0.04083251953125,0.0552978515625,0.0726318359375,0.064697265625,-0.0404052734375,0.034423828125,0.015655517578125]],"b36d72facd0568e122323e7ee01d1d07":[0.9998103248346981,[0.017242431640625,0.0311737060546875,0.039947509765625,0.08685302734375,0.079833984375,-0.047027587890625,-0.057342529296875,0.051727294921875,0.0491943359375,0.060791015625,-0.04986572265625,0.026031494140625,0.0672607421875,-0.054412841796875,0.030975341796875,0.040557861328125,0.0599365234375,-0.051513671875,-0.0205841064453125,-0.002838134765625,-0.0250701904296875,-0.019775390625,-0.086669921875,0.025054931640625,0.0193328857421875,0.01073455810546875,-0.0736083984375,0.11669921875,-0.0175933837890625,-0.04071044921875,-0.061126708984375,-0.05462646484375,-0.055816650390625,-0.0848388671875,0.03717041015625,0.0745849609375,0.0269927978515625,0.01107025146484375,-0.0017442703247070312,-0.1348876953125,-0.01178741455078125,-0.07684326171875,0.013031005859375,0.077392578125,0.05133056640625,0.031982421875,-0.003124237060546875,0.07696533203125,0.0219879150390625,0.06475830078125,-0.043914794921875,-0.01654052734375,0.07073974609375,-0.0699462890625,-0.045440673828125,-0.01262664794921875,0.0228729248046875,-0.055877685546875,-0.0819091796875,0.00942230224609375,0.0667724609375,0.058929443359375,-0.023956298828125,0.033538818359375,0.07550048828125,-0.085205078125,-0.007549285888671875,0.0128021240234375,0.09930419921875,-0.0269317626953125,0.0161285400390625,-0.07708740234375,-0.0273590087890625,-0.038360595703125,-0.01372528076171875,0.041748046875,0.055572509765625,-0.055419921875,0.057281494140625,-0.0096435546875,-0.0284576416015625,-0.0645751953125,-0.03131103515625,-0.0022792816162109375,-0.08203125,-0.017974853515625,0.0279998779296875,-0.0290069580078125,-0.060150146484375,0.04986572265625,0.031768798828125,0.0255279541015625,0.0158538818359375,0.034942626953125,-0.01192474365234375,0.0269775390625,-0.049560546875,0.012969970703125,-0.004718780517578125,0.07476806640625,-0.0220794677734375,-0.091552734375,0.01215362548828125,-0.042755126953125,-0.0003209114074707031,-0.04254150390625,-0.01073455810546875,-0.004169464111328125,0.1002197265625,-0.00360870361328125,-0.07952880859375,0.04608154296875,0.041839599609375,-0.060302734375,-0.0038471221923828125,0.00818634033203125,0.02130126953125,-0.09197998046875,0.058929443359375,-0.058349609375,0.0850830078125,0.03533935546875,-0.038604736328125,0.056396484375,-0.0167694091796875,0.07708740234375,0.060333251953125,0.0020236968994140625,-0.12890625,0.07305908203125,0.009307861328125,-0.004261016845703125,-0.022979736328125,-0.0294189453125,0.10089111328125,0.053802490234375,0.001636505126953125,0.10760498046875,-0.0426025390625,-0.09912109375,0.047515869140625,-0.034698486328125,-0.032470703125,-0.0144500732421875,-0.0009222030639648438,0.048309326171875,0.03619384765625,-0.10443115234375,0.02294921875,-0.1549072265625,0.0159454345703125,0.0303802490234375,0.1439208984375,0.094482421875,-0.04412841796875,-0.00220489501953125,0.0791015625,0.009613037109375,-0.07330322265625,0.06707763671875,-0.0177459716796875,-0.028717041015625,-0.08880615234375,-0.07421875,0.0782470703125,-0.06463623046875,0.0931396484375,0.00951385498046875,-0.029693603515625,-0.0016393661499023438,0.023162841796875,0.0772705078125,-0.0599365234375,0.04705810546875,0.02459716796875,0.0311279296875,-0.0872802734375,-0.0322265625,0.0250091552734375,0.011810302734375,-0.0955810546875,-0.0236358642578125,-0.006046295166015625,-0.0017681121826171875,-0.067626953125,-0.020050048828125,-0.07891845703125,-0.031982421875,0.038909912109375,-0.0189666748046875,-0.06903076171875,0.0270233154296875,0.0872802734375,-0.05859375,-0.02911376953125,-0.037628173828125,-0.054107666015625,-0.0257110595703125,0.06134033203125,-0.05059814453125,0.0595703125,0.022247314453125,0.00707244873046875,0.1041259765625,0.038970947265625,0.003810882568359375,0.041290283203125,0.0028972625732421875,-0.033935546875,-0.0306549072265625,0.03839111328125,0.01287841796875,0.06378173828125,-0.013946533203125,0.048675537109375,-0.0067596435546875,-0.00839996337890625,0.042266845703125,-0.06719970703125,0.0823974609375,0.041473388671875,0.00372314453125,-0.070068359375,-0.06402587890625,-0.1231689453125,0.06256103515625,-0.03790283203125,-0.1546630859375,-0.07781982421875,0.01340484619140625,0.037109375,0.0302734375,0.044036865234375,-0.0181884765625,0.048065185546875,-0.00014126300811767578,0.038909912109375,0.093994140625,0.01343536376953125,-0.053985595703125,0.01430511474609375,-0.03265380859375,0.0340576171875,-0.024566650390625,-0.017852783203125,-0.040130615234375,-0.0290069580078125,0.006755828857421875,-0.01204681396484375,0.012298583984375,-0.0142059326171875,-0.0787353515625,-0.07568359375,-0.022186279296875,-0.07330322265625,0.02801513671875,-0.0239105224609375,-0.0012807846069335938,-0.051605224609375,-0.051422119140625,0.041595458984375,0.060272216796875,0.0809326171875,-0.050018310546875,0.037567138671875,-0.09124755859375,-0.0771484375,-0.05859375,-0.019317626953125,0.006561279296875,-0.004581451416015625,-0.0001773834228515625,0.012237548828125,-0.037353515625,-0.053924560546875,-0.03863525390625,0.04681396484375,0.05316162109375,-0.034393310546875,0.005008697509765625,-0.0207366943359375,-0.07666015625,0.046783447265625,0.07952880859375,0.005908966064453125,0.00588226318359375,-0.005001068115234375,0.03802490234375,0.03643798828125,0.04132080078125,-0.067138671875,0.0338134765625,0.07196044921875,0.00872802734375,0.08294677734375,-0.0168914794921875,0.005702972412109375,0.0250244140625,-0.017486572265625,-0.01971435546875,0.09356689453125,0.009124755859375,0.004199981689453125,0.01354217529296875,-0.037811279296875,-0.0316162109375,0.0284271240234375,-0.01082611083984375,-0.058319091796875,0.0228271484375,-0.051025390625,-0.048858642578125,0.000514984130859375,0.055908203125,0.0347900390625,0.07244873046875,0.04437255859375,0.037200927734375,-0.00917816162109375,0.043548583984375,-0.0261688232421875,-0.031524658203125,0.02398681640625,-0.05047607421875,-0.01026153564453125,-0.04852294921875,-0.1055908203125,0.0272064208984375,0.0235595703125,-0.012939453125,-0.03717041015625,-0.034637451171875,-0.04913330078125,0.01039886474609375,0.054534912109375,-0.023345947265625,-0.02178955078125,-0.00525665283203125,-0.0288238525390625,-0.0241546630859375,0.0859375,0.037261962890625,0.03851318359375,0.0278472900390625,-0.01107025146484375,-0.022247314453125,-0.05010986328125,-0.006572723388671875,-0.045654296875,0.0092620849609375,0.07855224609375,-0.0828857421875,0.059967041015625,0.0301513671875,0.03253173828125,0.0025482177734375,-0.0025768280029296875,-0.040130615234375,-0.0853271484375,0.0212249755859375,0.06256103515625,-0.08551025390625,-0.027618408203125,-0.053253173828125,0.01885986328125,-0.0122528076171875,0.01270294189453125,0.05523681640625,0.0198211669921875,-0.034332275390625,-0.0006237030029296875,0.0567626953125,0.063232421875,0.01396942138671875,-0.01654052734375,0.00982666015625,0.00467681884765625,0.01482391357421875,-0.03839111328125,0.0438232421875,0.12744140625,0.0189971923828125,0.004436492919921875,0.0237579345703125]],"17de5b758025908c586c7e78eae6436c":[0.9998386167211143,[0.033355712890625,0.030181884765625,0.0201416015625,0.084716796875,0.0672607421875,-0.029022216796875,0.02703857421875,0.0251922607421875,0.0285186767578125,0.07183837890625,-0.005367279052734375,-0.060211181640625,0.01617431640625,0.0706787109375,0.02606201171875,0.003086090087890625,0.036285400390625,-0.0279693603515625,-0.07958984375,-0.051849365234375,-0.00518798828125,0.00850677490234375,-0.0282440185546875,-0.024444580078125,0.0408935546875,0.06475830078125,0.0151214599609375,0.11151123046875,0.044158935546875,0.0391845703125,0.057769775390625,-0.07720947265625,0.006786346435546875,-0.01134490966796875,-0.015350341796875,0.0738525390625,0.0687255859375,-0.0165863037109375,-0.08477783203125,-0.0731201171875,0.05975341796875,-0.0058441162109375,0.09832763671875,0.04888916015625,-0.0162506103515625,0.00022602081298828125,0.0180206298828125,0.0345458984375,-0.051055908203125,0.0279998779296875,-0.02667236328125,-0.044403076171875,0.049530029296875,-0.05999755859375,-0.048980712890625,0.037261962890625,0.056396484375,-0.0192413330078125,0.017242431640625,0.11614990234375,0.061279296875,0.0131072998046875,-0.0218505859375,0.066650390625,0.053619384765625,-0.1585693359375,-0.046966552734375,-0.0401611328125,0.070556640625,-0.062286376953125,0.05657958984375,-0.0653076171875,0.04168701171875,-0.0207672119140625,0.02099609375,0.01467132568359375,0.043792724609375,-0.06683349609375,0.022430419921875,-0.046112060546875,-0.0019779205322265625,-0.04150390625,0.03277587890625,-0.021697998046875,-0.049346923828125,-0.04559326171875,0.0195465087890625,-0.0184326171875,-0.0980224609375,-0.0178070068359375,0.01983642578125,0.0293426513671875,0.00200653076171875,0.0275421142578125,-0.02191162109375,0.01218414306640625,-0.048187255859375,-0.0714111328125,0.0249481201171875,0.06561279296875,-0.016265869140625,-0.08453369140625,0.0218048095703125,0.0005078315734863281,-0.049102783203125,-0.033172607421875,0.0005507469177246094,0.0003864765167236328,-0.0185546875,0.05767822265625,-0.052947998046875,0.01428985595703125,0.00943756103515625,-0.008880615234375,0.00289154052734375,-0.0034847259521484375,-0.01023101806640625,-0.0128021240234375,-0.007476806640625,0.004673004150390625,0.00688934326171875,-0.038909912109375,-0.071533203125,0.0357666015625,-0.050048828125,0.076416015625,-0.0067138671875,0.0172576904296875,0.003078460693359375,-0.01171112060546875,0.048248291015625,0.0023059844970703125,-0.0194854736328125,0.13134765625,0.06439208984375,0.01439666748046875,-0.00533294677734375,0.0875244140625,-0.06121826171875,-0.08123779296875,0.004428863525390625,-0.06793212890625,-0.05462646484375,-0.045745849609375,-0.023681640625,0.039215087890625,-0.045013427734375,-0.047271728515625,0.0110321044921875,-0.01641845703125,0.020111083984375,0.0240325927734375,0.0228271484375,0.050567626953125,-0.06719970703125,-0.0665283203125,0.0264434814453125,-0.034332275390625,-0.1326904296875,0.085205078125,-0.07281494140625,0.09027099609375,-0.06671142578125,-0.1531982421875,0.0731201171875,-0.0653076171875,0.0015230178833007812,-0.003459930419921875,0.057342529296875,-0.021240234375,-0.006114959716796875,0.055572509765625,0.032012939453125,-0.041412353515625,0.00505828857421875,0.05694580078125,-0.06805419921875,0.0004115104675292969,0.031768798828125,-0.047637939453125,0.04241943359375,0.08306884765625,-0.06549072265625,-0.001209259033203125,0.018646240234375,0.037445068359375,0.0439453125,-0.0017042160034179688,0.00786590576171875,0.09930419921875,-0.106689453125,0.0304107666015625,0.04364013671875,-0.0269012451171875,-0.00537109375,0.05078125,-0.01165008544921875,-0.0152130126953125,0.07135009765625,-0.0214996337890625,0.0241241455078125,-0.025970458984375,0.01224517822265625,-0.01291656494140625,0.0184783935546875,0.0712890625,0.0264434814453125,0.0028934478759765625,-0.0166015625,-0.0479736328125,0.03228759765625,0.059844970703125,-0.04144287109375,-0.00939178466796875,0.001953125,0.0225677490234375,-0.080810546875,-0.054443359375,-0.0599365234375,0.11541748046875,0.0276031494140625,-0.0517578125,0.006565093994140625,-0.0601806640625,-0.051971435546875,0.0093536376953125,0.02880859375,-0.06671142578125,-0.0648193359375,0.0001385211944580078,0.10443115234375,0.031005859375,-0.00713348388671875,-0.00716400146484375,0.0692138671875,-0.01496124267578125,0.05743408203125,0.043853759765625,-0.0718994140625,0.006786346435546875,0.053558349609375,-0.060089111328125,-0.042877197265625,-0.04107666015625,0.01206207275390625,0.028564453125,-0.025390625,0.08978271484375,-0.001209259033203125,-0.01513671875,-0.0293121337890625,-0.09222412109375,-0.057403564453125,-0.09814453125,-0.04254150390625,0.0211029052734375,-0.001071929931640625,0.0413818359375,-0.0687255859375,-0.0269622802734375,-0.00359344482421875,0.10064697265625,0.042022705078125,0.04376220703125,-0.0082244873046875,-0.104248046875,0.007110595703125,-0.01275634765625,0.05364990234375,0.021881103515625,0.0156707763671875,0.06414794921875,0.01085662841796875,-0.0233917236328125,0.0013151168823242188,-0.09326171875,0.11773681640625,0.07305908203125,-0.039276123046875,-0.031463623046875,0.018035888671875,-0.025604248046875,0.1392822265625,-0.03204345703125,-0.02044677734375,-0.00112152099609375,0.01128387451171875,0.01520538330078125,0.0950927734375,0.0100555419921875,-0.1055908203125,-0.05914306640625,-0.033294677734375,-0.0026836395263671875,0.036590576171875,-0.00974273681640625,-0.00731658935546875,-0.0345458984375,0.0237274169921875,0.0736083984375,0.07073974609375,0.0002770423889160156,-0.007419586181640625,0.027374267578125,-0.052520751953125,-0.0009832382202148438,-0.03033447265625,0.00005179643630981445,-0.04449462890625,-0.041473388671875,-0.0234222412109375,-0.0457763671875,0.005374908447265625,-0.000804901123046875,-0.045440673828125,0.0191802978515625,0.05364990234375,0.0855712890625,-0.0948486328125,-0.0115966796875,-0.0061798095703125,-0.0302734375,0.051116943359375,-0.10101318359375,-0.045257568359375,-0.1270751953125,-0.058349609375,0.12939453125,0.0193939208984375,-0.04034423828125,-0.0469970703125,0.061279296875,-0.0595703125,-0.011688232421875,0.050018310546875,-0.09893798828125,0.01096343994140625,-0.06719970703125,-0.045867919921875,0.057403564453125,0.0306854248046875,0.018646240234375,0.016754150390625,-0.0166778564453125,0.002899169921875,-0.08111572265625,-0.08294677734375,-0.0025806427001953125,-0.015960693359375,-0.060821533203125,0.0239410400390625,-0.05914306640625,-0.01122283935546875,-0.00531005859375,-0.024322509765625,-0.0263519287109375,-0.0257415771484375,0.03717041015625,-0.0245819091796875,-0.04254150390625,0.0565185546875,-0.03173828125,-0.00702667236328125,-0.062408447265625,-0.08123779296875,-0.05694580078125,0.10369873046875,0.037261962890625,0.04046630859375,0.051422119140625,0.053985595703125,0.078369140625,0.01444244384765625,0.039215087890625,0.0210418701171875,-0.0201416015625,-0.0146484375,0.08990478515625,0.1116943359375,0.00939178466796875,0.023193359375,0.0298614501953125,0.08892822265625,-0.0290679931640625]],"230d347e717fcc2bd8f88d8be27c615b":[1.0000307177473464,[0.017120361328125,-0.008636474609375,0.01947021484375,0.1346435546875,0.0599365234375,-0.045379638671875,-0.028045654296875,0.07269287109375,-0.0135040283203125,0.09881591796875,0.0074920654296875,-0.022064208984375,0.07427978515625,0.0306243896484375,0.0892333984375,-0.01520538330078125,0.059417724609375,-0.0180206298828125,-0.022125244140625,-0.043487548828125,0.031005859375,-0.0241851806640625,-0.059600830078125,0.011016845703125,0.01108551025390625,0.070068359375,-0.067626953125,0.0765380859375,-0.006954193115234375,-0.0095672607421875,0.003711700439453125,-0.1181640625,-0.0264434814453125,0.0003581047058105469,0.12091064453125,0.0631103515625,0.034027099609375,-0.01227569580078125,-0.032867431640625,-0.07830810546875,0.050018310546875,-0.06170654296875,0.04541015625,0.0246124267578125,0.0245513916015625,0.005748748779296875,0.050018310546875,0.03436279296875,-0.0782470703125,0.0170135498046875,-0.11328125,-0.069091796875,0.09271240234375,-0.05084228515625,-0.006839752197265625,0.01560211181640625,0.034149169921875,-0.0318603515625,-0.08172607421875,0.07501220703125,0.12127685546875,0.057373046875,-0.04296875,0.055938720703125,0.1043701171875,-0.1256103515625,-0.0279083251953125,0.0235595703125,0.07135009765625,-0.0931396484375,-0.0306243896484375,-0.04327392578125,-0.0216217041015625,-0.00917816162109375,0.0258026123046875,0.019256591796875,0.0281524658203125,-0.07781982421875,0.04034423828125,-0.003948211669921875,-0.0726318359375,-0.05950927734375,0.012786865234375,-0.050811767578125,-0.048248291015625,0.016845703125,-0.004642486572265625,0.0035400390625,-0.00024509429931640625,-0.017608642578125,0.039031982421875,0.0555419921875,-0.02490234375,-0.009918212890625,-0.0687255859375,-0.015472412109375,-0.0469970703125,-0.0273590087890625,-0.020660400390625,0.039031982421875,-0.01348114013671875,-0.12744140625,-0.0199432373046875,-0.0102691650390625,-0.0115509033203125,-0.00942230224609375,0.0220947265625,-0.01409912109375,-0.0274658203125,0.02850341796875,-0.05535888671875,0.01189422607421875,-0.020477294921875,0.016082763671875,-0.0022792816162109375,0.01152801513671875,0.0027618408203125,-0.10955810546875,0.0400390625,-0.0052032470703125,-0.01031494140625,0.043731689453125,-0.058746337890625,0.031402587890625,-0.0217742919921875,0.1229248046875,0.0650634765625,0.06805419921875,-0.11102294921875,0.01080322265625,0.05950927734375,0.060302734375,-0.01264190673828125,0.052947998046875,0.0531005859375,0.00177001953125,0.0265655517578125,0.0677490234375,-0.09539794921875,-0.080078125,-0.034881591796875,0.027252197265625,-0.034149169921875,-0.025726318359375,-0.047027587890625,0.08868408203125,0.041595458984375,-0.11236572265625,-0.0263214111328125,-0.0270538330078125,-0.0028362274169921875,0.02685546875,0.043426513671875,0.06787109375,-0.033843994140625,-0.06207275390625,0.0745849609375,0.05059814453125,-0.1220703125,0.08929443359375,-0.069091796875,0.065673828125,-0.056549072265625,-0.1112060546875,0.0855712890625,0.01508331298828125,0.01385498046875,0.060760498046875,0.038421630859375,0.0438232421875,0.010162353515625,0.08380126953125,-0.0186920166015625,-0.0034465789794921875,0.05255126953125,0.0174407958984375,-0.0545654296875,-0.022491455078125,0.049102783203125,-0.00804901123046875,-0.0263214111328125,0.004734039306640625,-0.09814453125,-0.04681396484375,-0.0233917236328125,0.01537322998046875,-0.0628662109375,0.00554656982421875,-0.0139617919921875,-0.04656982421875,-0.11126708984375,0.08392333984375,0.0175018310546875,-0.046142578125,-0.08001708984375,0.029693603515625,-0.08013916015625,-0.0289459228515625,0.0063323974609375,-0.08416748046875,0.0509033203125,-0.01116180419921875,0.02996826171875,0.065185546875,0.07080078125,0.04278564453125,-0.03302001953125,0.006580352783203125,-0.06988525390625,-0.01537322998046875,-0.0011234283447265625,-0.01103973388671875,-0.032928466796875,-0.020233154296875,-0.002887725830078125,0.045501708984375,-0.045989990234375,0.051055908203125,-0.042572021484375,0.1365966796875,0.0250091552734375,-0.0245819091796875,-0.033966064453125,-0.0626220703125,-0.0826416015625,-0.01515960693359375,-0.0038051605224609375,-0.11376953125,-0.10430908203125,0.006298065185546875,0.058135986328125,0.04608154296875,-0.035247802734375,0.00531005859375,0.041259765625,0.0689697265625,0.051116943359375,0.054962158203125,-0.07427978515625,-0.04974365234375,0.046234130859375,-0.052886962890625,0.035064697265625,0.0014371871948242188,-0.0621337890625,-0.0302886962890625,-0.04644775390625,0.0302581787109375,-0.0081329345703125,0.00250244140625,-0.0128173828125,-0.083740234375,0.0138397216796875,-0.035491943359375,-0.039306640625,0.041656494140625,-0.054595947265625,0.040130615234375,-0.03131103515625,-0.06427001953125,0.0372314453125,0.060791015625,-0.0193634033203125,0.001255035400390625,0.031097412109375,-0.0693359375,-0.0853271484375,-0.08251953125,0.0357666015625,0.039031982421875,0.047271728515625,0.07196044921875,-0.00543212890625,0.0718994140625,0.00983428955078125,-0.036712646484375,0.10528564453125,0.06787109375,0.053863525390625,-0.004261016845703125,0.0075836181640625,-0.0046844482421875,0.106201171875,0.0555419921875,-0.00783538818359375,0.04180908203125,-0.01140594482421875,0.0643310546875,0.0211944580078125,-0.01195526123046875,-0.08343505859375,-0.062286376953125,-0.019195556640625,0.002544403076171875,0.052642822265625,-0.01433563232421875,0.01910400390625,0.0311431884765625,0.00321197509765625,0.039764404296875,0.04705810546875,0.006053924560546875,0.01470184326171875,0.002788543701171875,-0.07379150390625,-0.03619384765625,0.01088714599609375,0.0765380859375,0.0246734619140625,0.0025386810302734375,-0.0022335052490234375,-0.037750244140625,0.042694091796875,0.04541015625,0.021636962890625,0.02374267578125,0.013275146484375,-0.005092620849609375,-0.0631103515625,-0.01328277587890625,-0.06927490234375,-0.01520538330078125,0.03607177734375,-0.034027099609375,0.04302978515625,-0.048980712890625,-0.051605224609375,0.09747314453125,-0.0330810546875,-0.03277587890625,-0.006908416748046875,0.049224853515625,-0.0311737060546875,0.037841796875,0.0379638671875,-0.035430908203125,-0.0325927734375,-0.052276611328125,-0.043243408203125,-0.0261383056640625,0.08892822265625,0.0088958740234375,0.0156707763671875,0.04315185546875,-0.0145721435546875,-0.06475830078125,-0.113037109375,0.043487548828125,-0.055877685546875,-0.006092071533203125,-0.0217742919921875,-0.0635986328125,0.021453857421875,-0.00823211669921875,-0.0310821533203125,0.008636474609375,-0.0246124267578125,-0.01548004150390625,-0.0258636474609375,0.009552001953125,0.054046630859375,-0.044342041015625,-0.031463623046875,-0.0802001953125,-0.06451416015625,-0.04241943359375,0.01641845703125,0.016815185546875,0.07281494140625,-0.007678985595703125,0.0167694091796875,0.044342041015625,0.0212249755859375,-0.03033447265625,0.038848876953125,-0.00696563720703125,-0.00176239013671875,0.0184783935546875,0.05963134765625,0.0312042236328125,0.013885498046875,0.05535888671875,0.059783935546875,-0.048126220703125]],"5f81d58a12bbe25ea80fc3dbe9d6fdd8":[0.9999161524904315,[0.0236358642578125,-0.02752685546875,0.0604248046875,0.0261383056640625,0.059906005859375,-0.062408447265625,-0.06756591796875,-0.001361846923828125,-0.0018987655639648438,0.126220703125,-0.035736083984375,-0.02679443359375,0.01180267333984375,-0.0019969940185546875,0.0386962890625,0.038848876953125,0.047637939453125,0.01355743408203125,-0.0232391357421875,-0.06475830078125,-0.01045989990234375,0.037750244140625,-0.0794677734375,0.054656982421875,0.050201416015625,0.0299530029296875,-0.0252685546875,0.12109375,0.044525146484375,-0.0516357421875,0.02630615234375,-0.056915283203125,0.0004630088806152344,-0.041290283203125,0.026519775390625,0.03204345703125,0.026336669921875,0.057647705078125,-0.021697998046875,-0.14599609375,0.063720703125,-0.040802001953125,0.01226043701171875,0.07061767578125,0.01493072509765625,0.032989501953125,0.08160400390625,0.054168701171875,-0.055908203125,0.03570556640625,-0.048675537109375,-0.0293121337890625,0.044525146484375,-0.11572265625,0.0007033348083496094,-0.0164337158203125,0.030914306640625,-0.035491943359375,0.044525146484375,-0.042388916015625,0.11773681640625,0.004791259765625,-0.0369873046875,0.044647216796875,0.09783935546875,-0.1094970703125,-0.04669189453125,-0.044647216796875,0.055267333984375,-0.01465606689453125,0.002349853515625,0.045654296875,-0.0443115234375,0.00930023193359375,0.0232086181640625,0.0305023193359375,0.06982421875,-0.10028076171875,0.019195556640625,-0.048675537109375,-0.042022705078125,-0.027740478515625,-0.09954833984375,0.00556182861328125,0.0303192138671875,0.0054931640625,-0.035308837890625,-0.03692626953125,-0.0178985595703125,0.0196685791015625,-0.0008535385131835938,0.1002197265625,-0.048797607421875,0.011871337890625,-0.059173583984375,0.033843994140625,-0.07464599609375,0.0109100341796875,0.0521240234375,0.1124267578125,-0.005138397216796875,-0.061431884765625,0.01219940185546875,-0.06494140625,0.0001760721206665039,0.0478515625,-0.03466796875,-0.012939453125,0.07220458984375,0.10003662109375,-0.1341552734375,-0.010040283203125,-0.0011873245239257812,0.01468658447265625,0.032745361328125,0.030059814453125,0.024749755859375,-0.06378173828125,0.07281494140625,-0.0703125,0.04827880859375,0.072998046875,-0.044525146484375,-0.0780029296875,-0.062103271484375,0.050445556640625,0.062103271484375,0.026336669921875,-0.0712890625,0.0379638671875,-0.0384521484375,-0.001918792724609375,-0.0675048828125,0.050537109375,0.07794189453125,-0.0386962890625,0.067138671875,0.0775146484375,-0.060577392578125,-0.033447265625,0.0122222900390625,0.0208892822265625,-0.03814697265625,-0.036712646484375,-0.03924560546875,0.06109619140625,0.00373077392578125,-0.039886474609375,-0.03460693359375,-0.037200927734375,0.0289764404296875,0.031158447265625,0.07879638671875,0.10211181640625,-0.074951171875,0.013397216796875,0.09820556640625,0.01552581787109375,-0.0638427734375,0.0970458984375,-0.06915283203125,0.0095977783203125,-0.0633544921875,-0.10369873046875,0.057403564453125,0.007328033447265625,0.07427978515625,0.02239990234375,-0.0191802978515625,-0.00031447410583496094,-0.01354217529296875,0.11163330078125,0.042572021484375,0.009765625,-0.0007185935974121094,0.045257568359375,-0.1298828125,-0.034393310546875,0.0533447265625,-0.0041046142578125,-0.08197021484375,-0.01934814453125,-0.057342529296875,-0.037628173828125,-0.03466796875,0.0197906494140625,0.008544921875,0.048187255859375,0.037261962890625,0.0277099609375,-0.026092529296875,-0.0123748779296875,0.01215362548828125,-0.05291748046875,-0.046478271484375,0.02484130859375,-0.00518035888671875,-0.02630615234375,0.0201568603515625,-0.09375,0.003627777099609375,-0.07391357421875,0.03936767578125,0.0863037109375,0.046356201171875,-0.0423583984375,-0.01151275634765625,0.0092010498046875,-0.01462554931640625,0.01885986328125,-0.0006833076477050781,0.0496826171875,-0.0232696533203125,0.0260162353515625,0.0367431640625,-0.03240966796875,-0.0284576416015625,-0.00649261474609375,-0.08099365234375,0.0792236328125,0.015380859375,0.00445556640625,-0.08856201171875,-0.069580078125,-0.0748291015625,0.0487060546875,-0.00461578369140625,-0.107177734375,-0.01535797119140625,-0.0010986328125,0.08026123046875,0.0129852294921875,0.0197296142578125,0.036102294921875,0.03857421875,0.00658416748046875,0.06744384765625,-0.022613525390625,-0.06671142578125,-0.051544189453125,0.05584716796875,0.0254974365234375,0.05474853515625,-0.041168212890625,0.0226898193359375,-0.019012451171875,-0.0273590087890625,0.040374755859375,0.0065155029296875,0.06561279296875,-0.0197601318359375,-0.09552001953125,-0.04559326171875,-0.036712646484375,-0.01206207275390625,0.0009784698486328125,0.02215576171875,0.1160888671875,-0.076904296875,-0.04815673828125,0.035797119140625,0.0278167724609375,0.10955810546875,-0.00008505582809448242,0.01251983642578125,-0.0325927734375,-0.0687255859375,-0.04443359375,0.0477294921875,0.0158233642578125,0.0589599609375,-0.022186279296875,-0.0234527587890625,0.006488800048828125,-0.031646728515625,-0.020599365234375,0.1080322265625,0.1063232421875,0.0867919921875,0.0207672119140625,-0.006145477294921875,-0.05316162109375,0.037628173828125,0.02496337890625,0.01084136962890625,-0.00013327598571777344,-0.0697021484375,0.07635498046875,0.059478759765625,0.01023101806640625,-0.09130859375,0.05999755859375,0.0085296630859375,-0.01076507568359375,0.007350921630859375,-0.0273590087890625,0.0187530517578125,0.005950927734375,-0.004528045654296875,-0.0248260498046875,0.0794677734375,-0.0362548828125,-0.01739501953125,0.0304412841796875,-0.0797119140625,0.0006113052368164062,-0.001598358154296875,0.00029349327087402344,-0.06439208984375,-0.01873779296875,0.0264739990234375,-0.0894775390625,-0.072998046875,0.04205322265625,0.0511474609375,0.007476806640625,-0.0158843994140625,-0.013153076171875,-0.08966064453125,0.0124664306640625,-0.006145477294921875,0.004528045654296875,0.034210205078125,-0.11981201171875,-0.040496826171875,-0.02313232421875,-0.03717041015625,0.1251220703125,0.00600433349609375,-0.028778076171875,-0.034820556640625,0.08038330078125,-0.026885986328125,-0.044921875,-0.0830078125,-0.0247955322265625,-0.0869140625,0.00626373291015625,0.0270843505859375,0.0275726318359375,-0.0122222900390625,-0.0008792877197265625,-0.048828125,0.06610107421875,-0.027496337890625,-0.0234832763671875,-0.10882568359375,0.04620361328125,-0.04644775390625,0.02423095703125,-0.0736083984375,-0.0941162109375,-0.0292205810546875,0.0010175704956054688,0.004825592041015625,0.015106201171875,0.0025844573974609375,0.0223541259765625,-0.0230560302734375,-0.04486083984375,0.0185699462890625,-0.05023193359375,-0.01084136962890625,0.04669189453125,-0.037841796875,-0.0295867919921875,-0.0062103271484375,-0.00270843505859375,0.016448974609375,0.05010986328125,0.04107666015625,0.0242919921875,0.04949951171875,-0.063232421875,0.0004227161407470703,-0.01152801513671875,-0.00366973876953125,0.03143310546875,0.015594482421875,0.0289764404296875,0.08258056640625,0.0289459228515625,0.0264129638671875,-0.0059661865234375]],"532c9bb532e6991b4193a08168972611":[0.9998012127788657,[0.005481719970703125,-0.0010824203491210938,0.0391845703125,0.01580810546875,0.056610107421875,-0.044677734375,-0.0472412109375,0.02801513671875,0.03448486328125,0.05999755859375,-0.04571533203125,-0.040191650390625,0.03106689453125,0.0022220611572265625,0.047454833984375,-0.07464599609375,0.002040863037109375,-0.0289306640625,-0.0203094482421875,0.0013790130615234375,0.09185791015625,-0.01227569580078125,-0.017669677734375,0.00244140625,0.038848876953125,0.0165557861328125,-0.036346435546875,0.10101318359375,0.00534820556640625,0.006923675537109375,-0.01544189453125,-0.0526123046875,-0.08880615234375,-0.03765869140625,0.061126708984375,0.055633544921875,0.06402587890625,-0.0217132568359375,0.02215576171875,-0.08465576171875,0.05426025390625,-0.027191162109375,0.042022705078125,0.0537109375,-0.00936126708984375,-0.0262603759765625,0.028839111328125,0.0257110595703125,-0.051422119140625,-0.0246734619140625,-0.046295166015625,0.0304718017578125,0.0948486328125,-0.04705810546875,-0.009002685546875,0.055267333984375,-0.007568359375,-0.0102691650390625,-0.04962158203125,0.048980712890625,0.0665283203125,0.045806884765625,-0.07244873046875,0.04669189453125,0.06353759765625,-0.08587646484375,-0.0028934478759765625,-0.056671142578125,0.06500244140625,-0.02520751953125,0.0172119140625,-0.01433563232421875,0.0182952880859375,-0.0021038055419921875,0.03802490234375,-0.052581787109375,0.051025390625,-0.03973388671875,0.03118896484375,-0.0249481201171875,0.03814697265625,-0.00858306884765625,0.03179931640625,0.0267791748046875,-0.06884765625,-0.0239105224609375,0.0024509429931640625,-0.0200042724609375,-0.0244140625,0.061279296875,-0.0009813308715820312,0.04510498046875,-0.00015270709991455078,0.01568603515625,0.055267333984375,0.044830322265625,0.0267333984375,-0.0113677978515625,-0.004627227783203125,0.0499267578125,-0.0276031494140625,0.00287628173828125,0.007129669189453125,-0.0927734375,-0.059234619140625,-0.005786895751953125,0.02880859375,0.0074310302734375,0.035614013671875,0.045013427734375,-0.09503173828125,-0.0860595703125,-0.059051513671875,-0.016937255859375,-0.00180816650390625,0.0287628173828125,0.09381103515625,-0.06048583984375,-0.0252532958984375,0.0029659271240234375,-0.0665283203125,0.0179290771484375,-0.04168701171875,-0.05194091796875,-0.036407470703125,0.0131072998046875,0.03912353515625,0.01947021484375,-0.1077880859375,0.07318115234375,0.023773193359375,0.00644683837890625,-0.039337158203125,0.05401611328125,0.1156005859375,-0.05584716796875,-0.052337646484375,0.099853515625,-0.07696533203125,-0.08038330078125,0.0273284912109375,-0.005573272705078125,0.0023956298828125,0.05975341796875,-0.02197265625,0.1356201171875,0.00446319580078125,-0.1361083984375,0.0025348663330078125,-0.1005859375,0.04248046875,0.051239013671875,0.027008056640625,0.04052734375,0.0107421875,-0.04583740234375,0.006378173828125,0.024688720703125,-0.1009521484375,0.067626953125,-0.09088134765625,0.0396728515625,-0.063232421875,-0.0560302734375,0.11480712890625,-0.0154571533203125,0.020904541015625,0.0479736328125,0.0018033981323242188,0.00872039794921875,0.07916259765625,0.09814453125,0.0220184326171875,-0.0018758773803710938,0.004543304443359375,0.035430908203125,-0.029022216796875,-0.003108978271484375,0.028656005859375,0.0650634765625,-0.015960693359375,0.0081634521484375,-0.118896484375,-0.036712646484375,-0.01114654541015625,0.03546142578125,0.044769287109375,-0.05078125,-0.04815673828125,-0.0013475418090820312,-0.033172607421875,0.0711669921875,0.0235443115234375,-0.11944580078125,-0.0005846023559570312,0.005619049072265625,-0.0234527587890625,-0.08880615234375,-0.08123779296875,-0.03155517578125,0.022491455078125,0.005001068115234375,-0.06475830078125,0.08770751953125,0.045257568359375,0.0099334716796875,0.05877685546875,-0.02825927734375,-0.043701171875,-0.043853759765625,-0.009033203125,-0.00995635986328125,0.0228729248046875,0.034088134765625,0.051422119140625,0.0072784423828125,-0.06707763671875,0.049163818359375,-0.01476287841796875,0.022247314453125,-0.019683837890625,0.007434844970703125,-0.0255584716796875,-0.06146240234375,-0.074951171875,0.019500732421875,-0.0058135986328125,-0.130615234375,-0.10552978515625,0.004650115966796875,0.04278564453125,0.07061767578125,0.034027099609375,0.01020050048828125,0.101318359375,0.058074951171875,0.045135498046875,0.0289306640625,0.04522705078125,-0.027923583984375,0.0657958984375,0.04833984375,0.04998779296875,0.037567138671875,0.0156402587890625,-0.048797607421875,0.01397705078125,-0.06500244140625,0.0443115234375,-0.0292205810546875,-0.07952880859375,-0.11395263671875,0.034515380859375,-0.03814697265625,0.01551055908203125,0.05462646484375,-0.01291656494140625,0.007579803466796875,0.00974273681640625,-0.042694091796875,-0.01495361328125,0.06494140625,0.0223388671875,-0.0021190643310546875,-0.019073486328125,-0.018585205078125,-0.06475830078125,-0.039886474609375,0.1044921875,0.02532958984375,0.02783203125,0.033782958984375,-0.00928497314453125,-0.01995849609375,0.01081085205078125,-0.09783935546875,0.1146240234375,0.0977783203125,0.0555419921875,0.080322265625,-0.00063323974609375,-0.04205322265625,0.154296875,0.08294677734375,0.022918701171875,-0.0005936622619628906,0.03759765625,0.0251617431640625,0.07720947265625,0.03839111328125,-0.0970458984375,-0.036407470703125,-0.025299072265625,-0.10894775390625,0.0648193359375,-0.027740478515625,0.10687255859375,0.01213836669921875,-0.0119781494140625,-0.0347900390625,0.07403564453125,0.01491546630859375,-0.021575927734375,-0.01495361328125,-0.0556640625,0.040069580078125,0.062408447265625,0.0024204254150390625,-0.05517578125,0.03173828125,-0.04071044921875,-0.039093017578125,-0.07012939453125,0.00319671630859375,-0.00859832763671875,0.06219482421875,0.045684814453125,0.035247802734375,-0.12646484375,-0.0244903564453125,-0.019805908203125,0.03936767578125,0.04962158203125,-0.06768798828125,-0.0399169921875,-0.056976318359375,-0.061676025390625,0.0787353515625,-0.0178985595703125,-0.051666259765625,-0.0025539398193359375,0.05303955078125,-0.057708740234375,-0.043304443359375,0.0249176025390625,0.0084991455078125,0.0005240440368652344,-0.0294036865234375,0.0017852783203125,-0.0179595947265625,0.09814453125,0.017303466796875,0.01538848876953125,0.032196044921875,-0.028533935546875,-0.0927734375,-0.14208984375,-0.0036869049072265625,-0.04486083984375,0.0055694580078125,-0.034881591796875,-0.0537109375,0.03662109375,0.00559234619140625,-0.01146697998046875,-0.042083740234375,-0.006183624267578125,-0.0538330078125,-0.0306396484375,-0.039825439453125,-0.0679931640625,-0.046844482421875,-0.07830810546875,-0.086669921875,-0.06591796875,-0.007312774658203125,0.0806884765625,0.07452392578125,0.040740966796875,0.00812530517578125,0.0168609619140625,-0.01551055908203125,0.03955078125,-0.010833740234375,0.019927978515625,-0.048553466796875,0.01042938232421875,0.0054779052734375,-0.0202178955078125,0.028564453125,0.0026302337646484375,0.01457977294921875,0.035736083984375,-0.0312347412109375]],"c35863a93434be8a523a4e575dfa9992":[0.9999485458966381,[-0.01220703125,-0.016143798828125,0.0523681640625,0.08062744140625,0.034088134765625,-0.044097900390625,-0.0226898193359375,0.02569580078125,0.0101165771484375,0.129638671875,0.0218353271484375,0.00656890869140625,0.00894927978515625,0.0274200439453125,-0.0018053054809570312,0.0015802383422851562,0.0054779052734375,-0.002132415771484375,-0.0207672119140625,-0.034027099609375,0.047607421875,-0.00044226646423339844,-0.07330322265625,0.029327392578125,0.06103515625,0.0638427734375,-0.04315185546875,0.127197265625,-0.00799560546875,0.03802490234375,0.01739501953125,-0.043365478515625,-0.0640869140625,-0.034881591796875,0.0662841796875,0.072509765625,0.0753173828125,0.1348876953125,-0.0005459785461425781,-0.083740234375,-0.014862060546875,-0.0570068359375,-0.0128631591796875,0.0909423828125,-0.005588531494140625,0.0206146240234375,0.058135986328125,0.052764892578125,-0.045562744140625,0.0287322998046875,-0.0299835205078125,-0.04425048828125,0.036224365234375,-0.12939453125,0.06500244140625,0.0084075927734375,0.00807952880859375,-0.0174102783203125,-0.03277587890625,-0.033966064453125,0.09820556640625,0.036651611328125,-0.0706787109375,0.060546875,0.12200927734375,-0.0950927734375,-0.048095703125,0.02996826171875,0.0298309326171875,-0.0556640625,0.04339599609375,-0.00531005859375,-0.0045623779296875,0.007160186767578125,0.00571441650390625,0.0433349609375,0.1058349609375,-0.04315185546875,0.030548095703125,-0.064697265625,0.0253448486328125,-0.056488037109375,-0.043792724609375,0.019561767578125,-0.00887298583984375,0.017822265625,-0.044036865234375,0.0162506103515625,-0.00949859619140625,-0.01496124267578125,-0.0511474609375,0.053619384765625,-0.0321044921875,-0.0254669189453125,-0.005046844482421875,-0.01471710205078125,-0.030029296875,0.051055908203125,0.050201416015625,0.1080322265625,-0.05401611328125,-0.06640625,-0.00029087066650390625,0.00004559755325317383,-0.0164031982421875,0.032745361328125,0.0129852294921875,-0.04901123046875,0.0163421630859375,0.04205322265625,-0.127685546875,-0.0007314682006835938,0.019805908203125,0.039825439453125,0.0194854736328125,0.0369873046875,0.08489990234375,-0.07965087890625,0.06854248046875,-0.031280517578125,0.052215576171875,0.0292816162109375,-0.055328369140625,0.0178070068359375,-0.05950927734375,0.055908203125,0.020477294921875,0.04290771484375,-0.0404052734375,0.034088134765625,-0.01291656494140625,0.0100860595703125,-0.10137939453125,0.0233612060546875,-0.004150390625,-0.053009033203125,-0.0198974609375,0.10662841796875,-0.03424072265625,-0.04498291015625,-0.017486572265625,0.0516357421875,-0.00986480712890625,-0.032470703125,-0.0038928985595703125,0.08319091796875,-0.0201263427734375,-0.09002685546875,-0.016082763671875,0.0039825439453125,-0.046661376953125,0.0245819091796875,0.0236968994140625,0.104736328125,-0.08087158203125,-0.038909912109375,0.07452392578125,0.045440673828125,-0.1151123046875,0.045166015625,-0.07659912109375,0.0758056640625,-0.05950927734375,-0.119140625,0.0201263427734375,-0.04486083984375,0.0211029052734375,0.03826904296875,-0.02459716796875,0.00522613525390625,0.0892333984375,0.050384521484375,-0.00823974609375,-0.04583740234375,0.02191162109375,0.020904541015625,-0.0302276611328125,-0.0137939453125,0.001789093017578125,-0.0235443115234375,-0.060028076171875,-0.076416015625,-0.09735107421875,-0.037139892578125,-0.0028018951416015625,0.006053924560546875,-0.0189666748046875,-0.006816864013671875,-0.01654052734375,-0.0022125244140625,-0.05670166015625,0.00830078125,-0.03948974609375,-0.0501708984375,-0.047698974609375,0.048126220703125,-0.006977081298828125,-0.0271453857421875,0.024749755859375,-0.097412109375,0.054443359375,-0.0009198188781738281,-0.0006031990051269531,0.09320068359375,0.028045654296875,0.039642333984375,-0.01361083984375,0.002826690673828125,-0.0640869140625,-0.00970458984375,0.030548095703125,0.052947998046875,0.006237030029296875,0.118896484375,-0.0097503662109375,-0.007266998291015625,-0.021575927734375,0.0267181396484375,-0.0333251953125,0.0767822265625,0.02789306640625,-0.0100860595703125,0.0028591156005859375,-0.0310516357421875,-0.06463623046875,0.0321044921875,0.04034423828125,-0.1337890625,-0.0291900634765625,0.010528564453125,0.1572265625,0.0272979736328125,0.07147216796875,-0.0010833740234375,0.0303497314453125,0.03985595703125,0.057464599609375,0.0025463104248046875,-0.0316162109375,-0.07763671875,0.0164794921875,0.062744140625,0.016326904296875,0.00498199462890625,0.0113372802734375,-0.052642822265625,-0.04620361328125,0.0858154296875,0.03424072265625,-0.0230560302734375,-0.032867431640625,-0.085693359375,-0.0731201171875,-0.02301025390625,-0.0472412109375,0.0016450881958007812,-0.038299560546875,0.117919921875,-0.11431884765625,-0.055816650390625,0.0168304443359375,0.012054443359375,0.09344482421875,-0.04266357421875,-0.045379638671875,-0.046722412109375,-0.037689208984375,-0.0175323486328125,0.021209716796875,0.06787109375,0.04107666015625,0.03240966796875,-0.021453857421875,0.0212554931640625,-0.07208251953125,-0.036407470703125,0.12060546875,0.0792236328125,0.037353515625,-0.04119873046875,-0.02691650390625,-0.03839111328125,0.104248046875,0.006961822509765625,0.053314208984375,-0.00041103363037109375,-0.01496124267578125,0.0704345703125,0.0528564453125,0.0030498504638671875,-0.092529296875,-0.017578125,-0.0699462890625,-0.011077880859375,0.08099365234375,0.028106689453125,-0.0030193328857421875,0.01160430908203125,0.0006070137023925781,-0.0185394287109375,0.09014892578125,0.00919342041015625,-0.01172637939453125,0.01229095458984375,-0.09161376953125,0.041015625,0.052215576171875,0.063720703125,0.0102386474609375,0.0114593505859375,0.0186920166015625,-0.0472412109375,-0.04547119140625,0.038299560546875,0.031005859375,0.0430908203125,0.021026611328125,0.006259918212890625,-0.05108642578125,0.0112762451171875,-0.0281829833984375,0.003253936767578125,0.00656890869140625,-0.076171875,-0.0276031494140625,-0.07501220703125,-0.0816650390625,0.07745361328125,-0.0273590087890625,-0.062286376953125,-0.0633544921875,0.07794189453125,-0.01242828369140625,-0.056396484375,-0.01041412353515625,-0.0352783203125,-0.03955078125,0.0114593505859375,-0.0027751922607421875,0.04827880859375,0.04205322265625,-0.0341796875,0.03887939453125,-0.00844573974609375,0.01288604736328125,-0.08734130859375,-0.12298583984375,-0.021820068359375,-0.0270233154296875,0.0158233642578125,-0.04278564453125,-0.0716552734375,-0.0158538818359375,0.03564453125,0.049774169921875,-0.0650634765625,0.00042724609375,0.04571533203125,-0.0888671875,-0.01488494873046875,0.05059814453125,-0.03155517578125,-0.033966064453125,-0.068359375,-0.08038330078125,-0.043548583984375,0.021942138671875,-0.053253173828125,-0.00927734375,0.0226287841796875,0.0246429443359375,-0.07122802734375,0.03460693359375,-0.0206146240234375,0.055816650390625,-0.05908203125,-0.0136566162109375,0.0246124267578125,0.056884765625,0.01166534423828125,0.02349853515625,0.017120361328125,0.0272064208984375,-0.026458740234375]],"83987152e332f1ea34e67bb329483d46":[0.9998494974900125,[0.05029296875,-0.028411865234375,0.035614013671875,0.055328369140625,0.1044921875,-0.0140533447265625,-0.05548095703125,0.0033435821533203125,-0.005153656005859375,0.130126953125,-0.0015535354614257812,0.04791259765625,0.036407470703125,0.052825927734375,0.061126708984375,-0.032958984375,-0.0137176513671875,-0.02850341796875,-0.08563232421875,-0.0526123046875,0.01206207275390625,0.06787109375,-0.03411865234375,0.05059814453125,0.05523681640625,0.06982421875,-0.0158233642578125,0.09075927734375,0.00978851318359375,-0.051025390625,0.018402099609375,-0.074951171875,-0.0673828125,0.0012388229370117188,0.036651611328125,0.043121337890625,0.07318115234375,0.055389404296875,0.040924072265625,-0.043548583984375,0.025909423828125,-0.0155487060546875,0.00013017654418945312,-0.041412353515625,-0.037109375,0.055145263671875,0.0192413330078125,0.002513885498046875,-0.051239013671875,-0.03094482421875,0.05322265625,-0.033782958984375,0.09521484375,-0.09393310546875,-0.01629638671875,0.03277587890625,-0.005146026611328125,0.0170745849609375,-0.03656005859375,0.055328369140625,0.08856201171875,0.0198516845703125,-0.01403045654296875,0.01873779296875,0.091796875,-0.0667724609375,-0.050872802734375,-0.044097900390625,0.049468994140625,-0.04693603515625,0.0179901123046875,0.007568359375,0.00705718994140625,-0.015625,0.00344085693359375,0.0758056640625,0.05517578125,-0.05621337890625,-0.0029468536376953125,-0.0310516357421875,0.0023632049560546875,0.00514984130859375,-0.08544921875,-0.0102996826171875,0.00754547119140625,0.01094818115234375,0.022064208984375,0.00389862060546875,-0.06036376953125,-0.01861572265625,0.0079345703125,0.04736328125,-0.0244903564453125,-0.0247802734375,-0.0284576416015625,0.00043320655822753906,-0.0189361572265625,0.0025272369384765625,0.022308349609375,0.117919921875,-0.0550537109375,-0.0732421875,0.015167236328125,-0.0246429443359375,-0.038970947265625,0.054473876953125,-0.00420379638671875,-0.035980224609375,0.01551055908203125,0.0121002197265625,-0.0980224609375,-0.0457763671875,-0.0072479248046875,0.030059814453125,0.08935546875,-0.0247039794921875,0.07830810546875,-0.0711669921875,0.041473388671875,0.029083251953125,-0.0019254684448242188,-0.0204315185546875,-0.08447265625,0.007251739501953125,-0.10498046875,0.10272216796875,-0.055145263671875,-0.024810791015625,-0.043243408203125,-0.01788330078125,0.0021266937255859375,-0.055450439453125,-0.032867431640625,0.056243896484375,0.03863525390625,0.0435791015625,0.0016841888427734375,0.11016845703125,-0.06842041015625,-0.067626953125,-0.022186279296875,0.04840087890625,-0.01166534423828125,-0.052886962890625,-0.0158843994140625,0.11444091796875,0.0210723876953125,-0.0340576171875,-0.040130615234375,-0.046630859375,0.0140838623046875,0.0701904296875,0.0284271240234375,0.08349609375,-0.025299072265625,-0.056243896484375,0.051666259765625,0.0859375,-0.10479736328125,-0.023040771484375,-0.104248046875,0.06182861328125,-0.09466552734375,-0.08038330078125,0.05059814453125,-0.0208740234375,0.051239013671875,-0.00559234619140625,0.0243377685546875,-0.039825439453125,0.056854248046875,0.06561279296875,-0.007701873779296875,-0.00832366943359375,-0.0044403076171875,0.05908203125,-0.04095458984375,-0.0033092498779296875,0.056915283203125,0.078369140625,-0.02850341796875,-0.0584716796875,-0.096435546875,-0.02392578125,0.01212310791015625,0.0274810791015625,0.0189361572265625,-0.00890350341796875,-0.001766204833984375,-0.0187530517578125,-0.00429534912109375,0.031768798828125,0.018463134765625,-0.046875,-0.01398468017578125,0.055450439453125,-0.00876617431640625,-0.00537872314453125,-0.01244354248046875,-0.1025390625,0.05419921875,-0.03289794921875,0.0302886962890625,0.063232421875,0.058502197265625,0.00502777099609375,-0.02630615234375,0.00666046142578125,0.00472259521484375,0.0236663818359375,-0.0435791015625,-0.002346038818359375,-0.052398681640625,0.008026123046875,-0.0177154541015625,-0.01508331298828125,-0.057891845703125,0.0191497802734375,-0.064697265625,0.12005615234375,-0.0242462158203125,0.0024433135986328125,-0.061981201171875,-0.0310516357421875,-0.048309326171875,0.0102386474609375,0.03741455078125,-0.1217041015625,-0.06121826171875,0.006237030029296875,0.1575927734375,0.04656982421875,0.042083740234375,0.022125244140625,0.056304931640625,0.03912353515625,0.00765228271484375,-0.0325927734375,-0.05865478515625,-0.0127410888671875,0.025726318359375,-0.00531005859375,0.031768798828125,-0.042572021484375,-0.0204315185546875,-0.100341796875,-0.0086517333984375,0.040771484375,0.0238037109375,-0.0036258697509765625,-0.026641845703125,-0.0732421875,0.02734375,-0.10736083984375,0.008575439453125,-0.01506805419921875,0.01079559326171875,0.09881591796875,-0.0526123046875,-0.09735107421875,0.045654296875,0.066650390625,0.11444091796875,-0.00988006591796875,-0.0043792724609375,0.0285491943359375,-0.058990478515625,-0.01151275634765625,0.04541015625,0.0190277099609375,0.07440185546875,0.0177459716796875,0.01678466796875,0.008056640625,-0.0221710205078125,-0.015228271484375,0.09918212890625,0.0784912109375,0.01654052734375,-0.002811431884765625,0.006809234619140625,-0.10528564453125,0.11444091796875,-0.01457977294921875,-0.059539794921875,0.024017333984375,-0.0222015380859375,0.07318115234375,0.04119873046875,0.052703857421875,-0.118896484375,-0.0517578125,-0.0241546630859375,-0.0863037109375,0.03033447265625,0.0205841064453125,0.0264129638671875,0.033294677734375,0.01224517822265625,0.047210693359375,0.117919921875,0.039642333984375,0.028228759765625,-0.0013551712036132812,-0.04644775390625,0.0029392242431640625,-0.0577392578125,0.013519287109375,-0.0888671875,0.03363037109375,0.0206146240234375,-0.08709716796875,-0.08612060546875,0.0321044921875,0.003742218017578125,0.0027866363525390625,0.0224609375,0.0794677734375,-0.01165771484375,-0.01739501953125,-0.0235595703125,0.028167724609375,0.004222869873046875,-0.0074462890625,-0.032440185546875,-0.08685302734375,-0.05389404296875,0.10504150390625,0.0017576217651367188,-0.06024169921875,-0.07025146484375,0.054473876953125,-0.009918212890625,-0.01593017578125,-0.10040283203125,-0.07293701171875,-0.002834320068359375,0.0039005279541015625,0.061981201171875,-0.056427001953125,0.0034618377685546875,0.0166168212890625,-0.03155517578125,0.023468017578125,0.000049114227294921875,-0.00524139404296875,-0.10504150390625,0.0035877227783203125,-0.0684814453125,0.0201416015625,-0.06695556640625,-0.129150390625,0.04486083984375,0.0273895263671875,-0.02679443359375,-0.0577392578125,-0.0238037109375,0.0216064453125,-0.0231170654296875,-0.0238494873046875,0.03533935546875,-0.063720703125,-0.0290069580078125,-0.0673828125,-0.027679443359375,0.034423828125,0.042510986328125,0.016448974609375,0.00656890869140625,0.002826690673828125,0.048309326171875,0.01532745361328125,0.00461578369140625,0.031707763671875,0.0013742446899414062,-0.0193023681640625,-0.004802703857421875,0.119873046875,0.003185272216796875,0.07623291015625,0.038604736328125,0.052947998046875,0.03704833984375,-0.0836181640625]],"ae161ed1a029574975fc16d0abfe2e2d":[0.9998978480975778,[0.06671142578125,0.0570068359375,0.0406494140625,0.0682373046875,0.058349609375,-0.020904541015625,-0.031005859375,0.038177490234375,0.047149658203125,0.06292724609375,0.035064697265625,-0.0037326812744140625,0.0386962890625,0.00510406494140625,0.039825439453125,-0.045440673828125,-0.06109619140625,0.005649566650390625,-0.01788330078125,-0.01904296875,0.0029888153076171875,0.0321044921875,-0.026885986328125,-0.0094451904296875,0.057281494140625,0.03924560546875,-0.060089111328125,0.10009765625,-0.004055023193359375,0.004589080810546875,-0.021697998046875,-0.041015625,-0.06304931640625,-0.049224853515625,0.07550048828125,0.0635986328125,-0.039825439453125,0.017578125,0.006214141845703125,-0.0634765625,0.042877197265625,-0.019927978515625,0.0458984375,-0.00859832763671875,-0.0352783203125,0.0760498046875,0.06390380859375,0.0032215118408203125,-0.050689697265625,0.0166168212890625,0.022735595703125,-0.037445068359375,0.05810546875,0.00614166259765625,-0.025909423828125,-0.007720947265625,0.01361083984375,-0.02972412109375,-0.0194244384765625,0.020538330078125,0.093017578125,0.0041351318359375,-0.031890869140625,0.10491943359375,-0.0132598876953125,-0.066162109375,-0.05340576171875,0.044647216796875,-0.001453399658203125,-0.02093505859375,0.029449462890625,-0.01479339599609375,-0.052825927734375,-0.04620361328125,-0.029205322265625,0.04107666015625,0.11444091796875,-0.0286102294921875,0.060943603515625,-0.02935791015625,0.00955963134765625,-0.10369873046875,-0.026641845703125,-0.026519775390625,-0.06524658203125,-0.047149658203125,0.044281005859375,-0.024658203125,-0.08099365234375,0.04998779296875,-0.0268402099609375,0.05853271484375,-0.0290069580078125,-0.0310211181640625,-0.00740814208984375,0.01134490966796875,-0.028472900390625,0.009552001953125,0.048828125,0.07659912109375,-0.04425048828125,-0.026641845703125,0.0177154541015625,-0.0182952880859375,-0.049560546875,0.0455322265625,-0.031646728515625,0.0007672309875488281,-0.01448822021484375,0.0268707275390625,-0.035125732421875,-0.0155029296875,-0.0770263671875,-0.0112152099609375,-0.061920166015625,0.0150909423828125,0.033416748046875,-0.065185546875,0.02655029296875,-0.0077667236328125,-0.042388916015625,0.03192138671875,-0.05426025390625,0.024322509765625,-0.11090087890625,0.1602783203125,0.04217529296875,0.0177001953125,-0.0771484375,-0.00406646728515625,0.0294952392578125,0.01158905029296875,0.003070831298828125,0.029998779296875,0.05694580078125,-0.0455322265625,-0.0030059814453125,0.09881591796875,-0.0606689453125,-0.06719970703125,0.00946807861328125,0.051239013671875,-0.020233154296875,-0.0806884765625,-0.056854248046875,0.162353515625,-0.01131439208984375,-0.054534912109375,0.030731201171875,-0.046356201171875,0.008056640625,-0.0019245147705078125,0.0091400146484375,0.044036865234375,-0.007305145263671875,-0.0204925537109375,0.09356689453125,0.022064208984375,-0.07342529296875,0.048675537109375,-0.079833984375,0.035919189453125,-0.1304931640625,-0.09637451171875,0.12939453125,-0.0418701171875,0.000035881996154785156,-0.00777435302734375,0.09637451171875,-0.0188140869140625,0.03851318359375,0.036834716796875,-0.01165008544921875,-0.06585693359375,0.0031337738037109375,0.01560211181640625,-0.1007080078125,-0.006237030029296875,-0.0184326171875,-0.01396942138671875,0.001125335693359375,-0.0165863037109375,-0.05889892578125,-0.0275726318359375,-0.023162841796875,0.0654296875,0.02166748046875,0.01490020751953125,-0.076904296875,-0.0192108154296875,-0.047332763671875,0.08392333984375,0.003513336181640625,-0.04559326171875,0.0071258544921875,0.0255889892578125,0.0006799697875976562,-0.0748291015625,0.044189453125,-0.035125732421875,0.1295166015625,-0.054443359375,-0.0236663818359375,0.0819091796875,0.00800323486328125,0.061859130859375,-0.014862060546875,0.08270263671875,-0.07763671875,0.0167999267578125,0.0110931396484375,0.0504150390625,0.0009169578552246094,-0.028564453125,0.01085662841796875,-0.00589752197265625,0.04046630859375,0.05169677734375,-0.059722900390625,0.1466064453125,0.05267333984375,0.00785064697265625,-0.03509521484375,-0.03204345703125,-0.068115234375,-0.01525115966796875,0.02142333984375,-0.055267333984375,-0.04046630859375,-0.019287109375,-0.0029144287109375,-0.0020847320556640625,-0.007572174072265625,0.0400390625,0.06805419921875,0.07794189453125,0.054779052734375,0.01532745361328125,-0.028228759765625,-0.0265045166015625,-0.0258026123046875,0.09515380859375,0.01263427734375,0.0316162109375,-0.035400390625,-0.0195159912109375,-0.0199127197265625,0.0299072265625,-0.023162841796875,-0.04638671875,-0.023223876953125,-0.058807373046875,-0.0014705657958984375,-0.08966064453125,-0.015960693359375,-0.01995849609375,-0.0697021484375,0.04156494140625,-0.005535125732421875,-0.040252685546875,0.029815673828125,0.138671875,0.06488037109375,-0.08026123046875,-0.0601806640625,-0.046173095703125,-0.0204620361328125,-0.0218048095703125,0.11065673828125,-0.02197265625,0.0489501953125,0.0731201171875,-0.028106689453125,0.01485443115234375,-0.02227783203125,-0.057373046875,0.080078125,0.095458984375,-0.04742431640625,0.020416259765625,-0.019073486328125,-0.062103271484375,0.13232421875,0.03179931640625,0.042572021484375,-0.051361083984375,0.02679443359375,0.0343017578125,0.10601806640625,0.0308685302734375,-0.09857177734375,-0.04107666015625,-0.087646484375,-0.004974365234375,0.1131591796875,0.0024127960205078125,0.017120361328125,0.034881591796875,0.0142974853515625,0.051055908203125,0.037811279296875,0.0233917236328125,0.0026950836181640625,-0.01074981689453125,-0.0908203125,0.01265716552734375,0.001552581787109375,0.0147857666015625,0.023712158203125,-0.00547027587890625,-0.002105712890625,-0.0228118896484375,0.00264739990234375,0.0005908012390136719,0.00749969482421875,-0.038116455078125,0.07440185546875,0.027801513671875,-0.0352783203125,-0.0016946792602539062,-0.041900634765625,-0.06964111328125,0.0134124755859375,-0.0882568359375,-0.0298919677734375,-0.039215087890625,-0.05804443359375,0.11865234375,0.0278472900390625,-0.06146240234375,-0.096923828125,0.0098876953125,-0.042694091796875,0.02655029296875,-0.04241943359375,-0.1103515625,-0.0054473876953125,-0.0750732421875,-0.0077056884765625,-0.03369140625,0.06597900390625,-0.0155487060546875,0.06085205078125,0.0184173583984375,-0.019927978515625,-0.07415771484375,-0.059967041015625,0.06756591796875,-0.01242828369140625,-0.039337158203125,-0.047821044921875,-0.11627197265625,-0.0272979736328125,0.00908660888671875,-0.0290679931640625,-0.0262298583984375,-0.0455322265625,0.064453125,0.00334930419921875,-0.1177978515625,0.01538848876953125,-0.00896453857421875,-0.039581298828125,-0.10107421875,-0.0278472900390625,-0.0164794921875,0.0275421142578125,0.04681396484375,0.044189453125,0.0143280029296875,0.025360107421875,-0.034149169921875,0.03582763671875,0.0621337890625,0.053680419921875,0.018890380859375,0.028045654296875,0.0364990234375,0.039398193359375,0.039306640625,0.0321044921875,0.049102783203125,0.043121337890625,-0.0221405029296875]],"6aac7b121dc7c2f68c2e1d83be48a5cb":[1.000369677173091,[-0.015869140625,0.01009368896484375,0.06341552734375,0.03662109375,0.04168701171875,-0.01099395751953125,-0.032440185546875,0.0193023681640625,0.05145263671875,0.1490478515625,0.0269622802734375,-0.04302978515625,-0.005512237548828125,0.006103515625,0.0311126708984375,-0.033660888671875,0.08514404296875,-0.0130462646484375,-0.0253143310546875,-0.031982421875,0.001987457275390625,-0.031707763671875,-0.005397796630859375,0.059051513671875,0.0283966064453125,0.06365966796875,0.03680419921875,0.08343505859375,-0.09100341796875,-0.058685302734375,0.05096435546875,0.00804901123046875,-0.029937744140625,-0.0293426513671875,0.07830810546875,0.0296173095703125,0.002552032470703125,0.039093017578125,0.029510498046875,-0.10693359375,0.08441162109375,-0.0164794921875,0.0177459716796875,0.0034198760986328125,0.050567626953125,0.004138946533203125,0.014862060546875,0.00806427001953125,-0.09613037109375,0.04962158203125,0.011688232421875,-0.01934814453125,0.1043701171875,0.003536224365234375,0.0377197265625,-0.030731201171875,0.04937744140625,-0.02874755859375,-0.0462646484375,0.0293426513671875,0.0677490234375,0.042327880859375,-0.0313720703125,0.06329345703125,0.09716796875,-0.00659942626953125,-0.10040283203125,0.021087646484375,0.0279083251953125,-0.09161376953125,0.0153350830078125,0.0092010498046875,-0.060577392578125,0.0160980224609375,-0.005023956298828125,0.06591796875,0.094970703125,-0.01129913330078125,-0.07513427734375,-0.003143310546875,-0.032501220703125,-0.0728759765625,-0.0260772705078125,0.01032257080078125,-0.0271453857421875,0.00843048095703125,-0.0007658004760742188,0.040802001953125,-0.038543701171875,-0.01064300537109375,0.1300048828125,0.03118896484375,-0.04254150390625,-0.037750244140625,-0.09881591796875,0.038543701171875,0.0284271240234375,-0.03460693359375,0.1004638671875,0.11810302734375,-0.033416748046875,-0.045928955078125,0.045501708984375,-0.018402099609375,-0.002101898193359375,0.0880126953125,0.0010852813720703125,-0.01163482666015625,-0.021820068359375,0.037872314453125,-0.021575927734375,-0.00012290477752685547,-0.0064849853515625,0.0234222412109375,0.01611328125,0.024444580078125,0.02020263671875,-0.1707763671875,0.05096435546875,-0.056640625,0.01436614990234375,0.0087432861328125,-0.0517578125,-0.035491943359375,-0.0465087890625,0.1031494140625,0.047027587890625,0.09161376953125,-0.0875244140625,-0.0276641845703125,0.010772705078125,-0.053314208984375,-0.06561279296875,0.0160980224609375,0.139404296875,-0.001461029052734375,0.01715087890625,0.172119140625,-0.0880126953125,0.0136260986328125,0.030120849609375,-0.0182647705078125,0.03863525390625,0.006389617919921875,-0.02325439453125,0.0450439453125,0.045135498046875,-0.07666015625,0.03668212890625,-0.056793212890625,-0.0031719207763671875,-0.03173828125,-0.007419586181640625,0.07196044921875,-0.01435089111328125,0.0175018310546875,0.0562744140625,0.04827880859375,-0.0175933837890625,-0.0117034912109375,-0.048370361328125,-0.005290985107421875,-0.1297607421875,-0.1492919921875,0.044708251953125,-0.0908203125,0.0233154296875,0.004688262939453125,0.002704620361328125,-0.003383636474609375,0.1038818359375,0.05340576171875,-0.013763427734375,-0.04534912109375,-0.0011768341064453125,0.05963134765625,-0.0294952392578125,0.00435638427734375,0.05633544921875,0.0361328125,-0.03411865234375,0.0131683349609375,-0.0235748291015625,-0.04931640625,0.037078857421875,0.074462890625,-0.0159912109375,-0.01074981689453125,0.012664794921875,-0.04937744140625,-0.056182861328125,-0.0171966552734375,0.03643798828125,0.0239715576171875,0.028839111328125,-0.025115966796875,-0.0159454345703125,-0.053009033203125,0.046539306640625,-0.05511474609375,0.055206298828125,-0.06781005859375,0.0135040283203125,0.021392822265625,0.008453369140625,0.0265350341796875,-0.0137786865234375,0.035888671875,-0.08642578125,-0.035491943359375,-0.03546142578125,-0.002338409423828125,-0.0163726806640625,0.0226593017578125,0.03216552734375,-0.01262664794921875,-0.032867431640625,-0.039215087890625,-0.0170135498046875,0.1258544921875,0.07867431640625,-0.027923583984375,-0.06884765625,-0.041046142578125,0.00731658935546875,0.0285797119140625,0.04522705078125,-0.05322265625,0.052093505859375,0.018280029296875,0.0999755859375,-0.043304443359375,-0.003208160400390625,-0.018524169921875,0.0249176025390625,0.007843017578125,0.04620361328125,0.01165771484375,-0.0823974609375,-0.0572509765625,-0.007495880126953125,-0.01953125,0.043426513671875,-0.04901123046875,0.0159149169921875,-0.04693603515625,0.04296875,0.053466796875,-0.02593994140625,-0.007801055908203125,-0.01366424560546875,-0.1014404296875,-0.06427001953125,-0.1572265625,-0.081298828125,-0.04052734375,-0.00014734268188476562,-0.03314208984375,-0.05035400390625,-0.06463623046875,0.032623291015625,0.04376220703125,0.0244140625,-0.0246124267578125,0.023773193359375,-0.1314697265625,-0.030517578125,-0.01198577880859375,-0.0015058517456054688,0.047088623046875,-0.0224151611328125,0.0382080078125,0.07806396484375,0.0020313262939453125,0.018402099609375,-0.00830078125,0.0287017822265625,0.038726806640625,-0.0230255126953125,0.023162841796875,-0.048583984375,-0.044281005859375,0.12432861328125,0.052459716796875,0.023406982421875,0.0263824462890625,-0.082275390625,0.09906005859375,0.0010766983032226562,0.00463104248046875,-0.045623779296875,0.012176513671875,-0.03448486328125,0.01194000244140625,0.041717529296875,0.001522064208984375,0.044464111328125,0.058013916015625,0.03948974609375,0.0214385986328125,0.046875,-0.07012939453125,0.0306243896484375,-0.0246429443359375,-0.037109375,-0.057891845703125,0.022308349609375,-0.0139312744140625,-0.04510498046875,0.0231781005859375,-0.0283355712890625,-0.0279388427734375,0.0271453857421875,-0.0352783203125,0.021514892578125,0.0792236328125,0.0031890869140625,0.05206298828125,-0.01971435546875,-0.048797607421875,-0.041412353515625,-0.042266845703125,0.0380859375,-0.005523681640625,0.0237274169921875,-0.07958984375,-0.07440185546875,0.055267333984375,0.0107269287109375,-0.0016012191772460938,0.0007901191711425781,0.0333251953125,-0.0943603515625,-0.04339599609375,-0.0060577392578125,-0.07525634765625,-0.01132965087890625,-0.1197509765625,-0.04107666015625,0.020294189453125,0.05096435546875,0.044525146484375,-0.0265045166015625,-0.03314208984375,-0.00010013580322265625,-0.02484130859375,-0.057159423828125,0.0025882720947265625,-0.053497314453125,-0.0504150390625,-0.01190948486328125,-0.103515625,0.0367431640625,-0.002315521240234375,-0.09674072265625,-0.05755615234375,-0.041961669921875,-0.030029296875,-0.0233306884765625,0.0182647705078125,0.06463623046875,-0.0203094482421875,0.01496124267578125,-0.050323486328125,-0.08709716796875,-0.0016298294067382812,-0.0242462158203125,0.0224609375,0.0255126953125,-0.058441162109375,-0.01104736328125,0.027313232421875,0.01483154296875,-0.00616455078125,0.006153106689453125,0.01317596435546875,-0.046417236328125,0.036376953125,0.037109375,0.0562744140625,0.06353759765625,0.109619140625,0.08660888671875,-0.024566650390625]],"234b7fc3a4936b769256c9380326a0fc":[0.9998393271468603,[0.0321044921875,0.050323486328125,0.0263519287109375,0.0704345703125,0.05517578125,-0.0285186767578125,-0.06689453125,0.01788330078125,0.0386962890625,0.0941162109375,0.006633758544921875,-0.0312347412109375,0.040863037109375,-0.0006818771362304688,-0.004596710205078125,-0.0333251953125,0.0155181884765625,0.004657745361328125,0.01198577880859375,-0.03363037109375,-0.00019299983978271484,0.0294342041015625,-0.06976318359375,-0.01348114013671875,0.07574462890625,0.047393798828125,-0.05609130859375,0.10107421875,0.0604248046875,0.00012183189392089844,-0.01366424560546875,-0.0236968994140625,-0.0171051025390625,-0.0189666748046875,0.090087890625,0.05535888671875,0.0153961181640625,-0.01047515869140625,-0.012603759765625,-0.10638427734375,0.027679443359375,-0.04840087890625,0.06451416015625,0.030792236328125,-0.029571533203125,0.061248779296875,0.054290771484375,0.0811767578125,-0.0711669921875,0.0222015380859375,-0.0963134765625,-0.00965118408203125,0.07220458984375,-0.0792236328125,0.01184844970703125,0.075439453125,0.027099609375,-0.007266998291015625,-0.029510498046875,0.029571533203125,0.11529541015625,-0.013763427734375,-0.07989501953125,0.0227508544921875,0.10369873046875,-0.0899658203125,-0.0562744140625,-0.03570556640625,0.061737060546875,-0.04443359375,0.0004334449768066406,0.05206298828125,-0.0013103485107421875,-0.01165008544921875,-0.038848876953125,-0.0024433135986328125,0.126708984375,-0.11328125,0.01161956787109375,-0.017822265625,0.01416015625,0.01323699951171875,-0.03155517578125,-0.001373291015625,-0.047821044921875,0.09228515625,-0.00921630859375,0.0270233154296875,-0.05792236328125,0.03460693359375,0.040008544921875,0.0611572265625,-0.00809478759765625,-0.003509521484375,0.005832672119140625,0.0197296142578125,-0.0159149169921875,-0.023773193359375,0.04986572265625,0.062744140625,-0.04364013671875,-0.072021484375,0.02386474609375,-0.02532958984375,-0.06964111328125,0.03936767578125,0.0145111083984375,-0.0531005859375,0.038787841796875,-0.034332275390625,-0.09326171875,-0.032806396484375,-0.048187255859375,-0.006927490234375,-0.0406494140625,0.005126953125,0.037445068359375,-0.09259033203125,0.003940582275390625,-0.060028076171875,-0.043609619140625,-0.007511138916015625,-0.0133819580078125,0.0093994140625,-0.07000732421875,0.07708740234375,0.05413818359375,0.0278167724609375,-0.07659912109375,0.064208984375,0.05975341796875,-0.0087890625,-0.058868408203125,0.07952880859375,-0.014923095703125,-0.062164306640625,0.034210205078125,0.09039306640625,-0.08636474609375,-0.08636474609375,0.03314208984375,-0.004459381103515625,0.002666473388671875,0.0136260986328125,-0.047515869140625,0.11859130859375,0.008148193359375,-0.07080078125,-0.004302978515625,-0.0024967193603515625,-0.016632080078125,0.052978515625,-0.0028247833251953125,0.06890869140625,-0.086181640625,-0.032806396484375,0.02703857421875,-0.0205841064453125,-0.10546875,0.10687255859375,-0.09716796875,0.09100341796875,-0.08612060546875,-0.10321044921875,0.0789794921875,0.068115234375,0.04248046875,0.056304931640625,0.04876708984375,0.00206756591796875,0.0004143714904785156,0.1282958984375,-0.0022983551025390625,0.0139007568359375,-0.01412200927734375,0.036102294921875,-0.088134765625,0.041473388671875,0.0455322265625,0.0704345703125,-0.039703369140625,-0.02191162109375,-0.035797119140625,-0.00917816162109375,0.04632568359375,0.0196990966796875,-0.0401611328125,-0.0082244873046875,-0.0077056884765625,-0.0167999267578125,-0.06939697265625,0.059967041015625,0.0394287109375,-0.051727294921875,0.0218048095703125,0.0677490234375,-0.041595458984375,-0.07470703125,0.016082763671875,-0.04632568359375,0.0156707763671875,-0.00415802001953125,0.0192413330078125,0.061309814453125,0.04620361328125,0.0126495361328125,0.054046630859375,0.0309600830078125,-0.0179290771484375,0.03515625,-0.008453369140625,0.0186309814453125,0.01432037353515625,0.0280914306640625,-0.0199737548828125,-0.01454925537109375,-0.0234222412109375,0.048980712890625,-0.05413818359375,0.09088134765625,0.019989013671875,-0.04296875,-0.036102294921875,-0.10943603515625,-0.0894775390625,-0.0287017822265625,0.025238037109375,-0.133544921875,-0.06427001953125,0.0020160675048828125,0.08392333984375,0.05364990234375,0.07391357421875,-0.0085906982421875,0.048614501953125,0.059844970703125,0.037139892578125,-0.0295257568359375,-0.028594970703125,-0.105712890625,0.06903076171875,0.0543212890625,0.0540771484375,-0.0016956329345703125,-0.03057861328125,-0.10162353515625,-0.004993438720703125,-0.0204315185546875,0.014373779296875,0.0576171875,-0.0826416015625,-0.06597900390625,-0.0374755859375,-0.09661865234375,-0.017364501953125,0.0274810791015625,-0.033203125,0.05413818359375,-0.07708740234375,-0.06842041015625,0.006549835205078125,0.0044708251953125,0.080322265625,-0.048828125,-0.006351470947265625,-0.016998291015625,-0.01453399658203125,-0.08209228515625,0.00482940673828125,0.08203125,-0.000041544437408447266,0.0850830078125,-0.0030384063720703125,-0.00677490234375,0.01502227783203125,-0.00771331787109375,0.10064697265625,0.09320068359375,-0.004528045654296875,0.038543701171875,0.024383544921875,-0.01543426513671875,0.10784912109375,0.0299224853515625,-0.024871826171875,-0.00867462158203125,-0.0087127685546875,-0.02252197265625,0.0865478515625,0.037689208984375,-0.10833740234375,-0.0005855560302734375,-0.0019464492797851562,-0.040771484375,0.10443115234375,-0.03851318359375,0.01763916015625,0.016937255859375,0.01123046875,-0.031402587890625,0.046295166015625,-0.0430908203125,0.0396728515625,0.045318603515625,0.011138916015625,-0.0018377304077148438,0.035430908203125,-0.038818359375,-0.0195770263671875,0.01309967041015625,-0.00778961181640625,-0.073974609375,-0.037506103515625,0.06353759765625,0.04449462890625,0.0576171875,0.0797119140625,-0.001422882080078125,-0.0887451171875,0.008209228515625,-0.0202789306640625,0.0322265625,-0.0214385986328125,-0.0400390625,-0.0309600830078125,-0.011566162109375,-0.038848876953125,0.075927734375,-0.0255889892578125,-0.049591064453125,-0.02203369140625,0.0168304443359375,-0.07568359375,-0.0333251953125,-0.0250701904296875,-0.11676025390625,-0.049102783203125,-0.054962158203125,-0.00370025634765625,0.01299285888671875,0.06298828125,-0.0205535888671875,-0.0188446044921875,0.052398681640625,0.0035915374755859375,-0.051361083984375,-0.1397705078125,0.04315185546875,-0.05108642578125,0.004665374755859375,0.01392364501953125,-0.0748291015625,-0.004673004150390625,0.0013036727905273438,-0.035552978515625,-0.040374755859375,0.03179931640625,0.0021343231201171875,0.003971099853515625,-0.015350341796875,0.0117645263671875,-0.0159759521484375,-0.05169677734375,-0.1136474609375,-0.006313323974609375,-0.03955078125,0.0169677734375,0.0086822509765625,0.051971435546875,0.04632568359375,0.036224365234375,-0.00408935546875,-0.00019598007202148438,0.026702880859375,-0.006755828857421875,-0.05181884765625,0.007259368896484375,0.030517578125,-0.0225372314453125,0.0193328857421875,-0.01422882080078125,0.03125,0.033905029296875,-0.015045166015625]],"7dc0c6c0e4de0046d154ca8d61f0ba6c":[0.9998240166525195,[0.011749267578125,-0.026336669921875,0.04632568359375,0.10687255859375,0.09503173828125,-0.0211639404296875,-0.0239105224609375,0.063232421875,0.069091796875,0.049102783203125,0.05126953125,0.0165557861328125,0.0406494140625,0.021728515625,0.07366943359375,-0.0160064697265625,0.0474853515625,0.032073974609375,-0.0279083251953125,-0.029937744140625,0.045166015625,-0.01325225830078125,-0.05535888671875,0.03375244140625,0.03955078125,0.003910064697265625,0.0026988983154296875,0.043731689453125,-0.04046630859375,0.00122833251953125,-0.0088958740234375,-0.029205322265625,-0.033599853515625,-0.033416748046875,0.028167724609375,0.08331298828125,0.032958984375,0.032623291015625,0.0056304931640625,-0.15234375,0.061737060546875,-0.0268402099609375,0.0897216796875,0.0557861328125,-0.04705810546875,0.050628662109375,0.059814453125,0.04931640625,-0.07537841796875,0.060546875,-0.028839111328125,-0.0032806396484375,0.08990478515625,-0.08270263671875,0.00542449951171875,0.003387451171875,-0.01479339599609375,-0.051055908203125,-0.037933349609375,-0.01727294921875,0.172607421875,0.032806396484375,-0.03363037109375,0.069580078125,0.080078125,-0.111572265625,-0.035491943359375,-0.0298309326171875,-0.005859375,-0.0577392578125,0.033538818359375,-0.0202484130859375,-0.050506591796875,0.022430419921875,-0.0176849365234375,0.0074462890625,0.10498046875,-0.091552734375,0.07757568359375,-0.048919677734375,-0.0185546875,-0.035675048828125,-0.03582763671875,0.01190948486328125,-0.04425048828125,-0.004703521728515625,-0.033477783203125,-0.0129852294921875,0.003368377685546875,0.0199432373046875,0.0246124267578125,0.0577392578125,-0.047637939453125,-0.030426025390625,-0.02130126953125,0.01161956787109375,-0.02978515625,0.0128021240234375,0.048370361328125,0.061614990234375,-0.0252685546875,-0.07958984375,-0.0025081634521484375,-0.0980224609375,-0.0360107421875,0.032196044921875,0.0096893310546875,-0.021820068359375,0.0024242401123046875,0.0157928466796875,-0.1064453125,0.0333251953125,-0.001285552978515625,-0.01690673828125,-0.0511474609375,-0.006679534912109375,0.05633544921875,-0.084716796875,0.032806396484375,-0.06524658203125,-0.0070343017578125,-0.020477294921875,-0.006214141845703125,0.04229736328125,-0.035186767578125,0.1546630859375,0.0634765625,0.0009002685546875,-0.021881103515625,0.039947509765625,0.03564453125,-0.01384735107421875,-0.05120849609375,0.0531005859375,0.038299560546875,-0.00878143310546875,-0.0007538795471191406,0.060211181640625,-0.0906982421875,-0.0638427734375,0.032470703125,-0.032928466796875,0.013580322265625,0.002323150634765625,-0.03485107421875,0.08807373046875,-0.03546142578125,-0.1114501953125,0.033782958984375,-0.05645751953125,-0.004718780517578125,0.0689697265625,0.006427764892578125,0.07855224609375,-0.0298919677734375,-0.01560211181640625,0.06219482421875,0.0182342529296875,-0.059783935546875,0.039154052734375,-0.0712890625,0.051513671875,-0.07537841796875,-0.10986328125,0.0616455078125,-0.0291900634765625,0.00627899169921875,0.0173797607421875,0.0677490234375,-0.01457977294921875,-0.049163818359375,0.07476806640625,-0.06585693359375,-0.0219879150390625,0.002689361572265625,-0.0019054412841796875,-0.0673828125,0.06494140625,0.053375244140625,0.04150390625,-0.01666259765625,0.046630859375,-0.08734130859375,0.00521087646484375,0.00018227100372314453,0.08453369140625,0.03143310546875,-0.0218048095703125,0.03607177734375,-0.0195159912109375,-0.049560546875,0.02984619140625,0.050140380859375,-0.07977294921875,-0.037384033203125,0.0550537109375,-0.06634521484375,-0.02557373046875,0.033538818359375,-0.059783935546875,0.0037899017333984375,0.044281005859375,-0.00371551513671875,0.032623291015625,0.056427001953125,0.052490234375,-0.1005859375,-0.02203369140625,0.01526641845703125,-0.0165557861328125,0.0292510986328125,0.032989501953125,-0.0245513916015625,0.057952880859375,0.0250701904296875,-0.030487060546875,-0.0156707763671875,-0.01336669921875,-0.080810546875,0.11077880859375,0.03271484375,-0.03564453125,-0.02606201171875,-0.09552001953125,-0.118896484375,0.033843994140625,0.07049560546875,-0.12841796875,-0.0272216796875,-0.01560211181640625,0.02935791015625,0.031463623046875,0.02886962890625,-0.0645751953125,0.0263519287109375,0.0494384765625,0.04534912109375,-0.007965087890625,-0.0716552734375,-0.0312347412109375,0.013580322265625,0.003955841064453125,0.0109710693359375,-0.03076171875,-0.052764892578125,-0.02606201171875,-0.01067352294921875,0.046630859375,0.019683837890625,-0.011505126953125,-0.0208740234375,-0.097412109375,0.040252685546875,-0.05645751953125,-0.037567138671875,0.061187744140625,0.006557464599609375,0.0300750732421875,-0.051422119140625,-0.08447265625,0.05657958984375,0.061981201171875,0.060333251953125,-0.0158233642578125,-0.0145721435546875,-0.01296234130859375,-0.0535888671875,-0.0009074211120605469,0.0089111328125,0.017333984375,0.036834716796875,0.041351318359375,0.04083251953125,0.0011835098266601562,0.0289306640625,-0.0303192138671875,0.061431884765625,0.046417236328125,0.043731689453125,0.01435089111328125,0.00542449951171875,-0.0240325927734375,0.1075439453125,0.037109375,-0.01338958740234375,0.03369140625,-0.03369140625,0.08001708984375,-0.006488800048828125,0.007396697998046875,-0.0626220703125,-0.037750244140625,-0.0223236083984375,-0.01116180419921875,0.0849609375,-0.02886962890625,0.022247314453125,0.0197296142578125,-0.0232696533203125,0.020751953125,0.0811767578125,-0.0374755859375,0.042205810546875,0.00843048095703125,-0.07049560546875,-0.0303497314453125,0.034454345703125,0.0162811279296875,-0.004467010498046875,0.01058197021484375,-0.09295654296875,0.0037097930908203125,-0.0300750732421875,0.038604736328125,0.040771484375,0.05279541015625,0.03314208984375,0.0091705322265625,-0.05126953125,-0.0033054351806640625,-0.045440673828125,-0.02655029296875,-0.00043845176696777344,-0.01605224609375,-0.04205322265625,-0.0318603515625,-0.059478759765625,0.057769775390625,0.047607421875,-0.0848388671875,-0.045135498046875,0.0251617431640625,-0.08807373046875,-0.0307159423828125,-0.042449951171875,-0.12744140625,-0.087890625,-0.032989501953125,0.0210723876953125,-0.04998779296875,0.0748291015625,0.05810546875,-0.028411865234375,-0.0035266876220703125,-0.03790283203125,-0.0830078125,-0.1578369140625,0.0175018310546875,-0.0259552001953125,0.045074462890625,0.030487060546875,-0.09002685546875,0.01397705078125,-0.002765655517578125,-0.01183319091796875,-0.036376953125,-0.09820556640625,0.06298828125,-0.01800537109375,-0.00829315185546875,0.0557861328125,-0.095703125,-0.053466796875,-0.1019287109375,-0.035919189453125,-0.0343017578125,0.0268402099609375,0.0131988525390625,0.051605224609375,0.0290985107421875,0.05914306640625,0.03839111328125,-0.0026416778564453125,-0.0097503662109375,0.0189361572265625,-0.045501708984375,-0.01052093505859375,0.0604248046875,0.06268310546875,0.051605224609375,0.01091766357421875,0.08026123046875,0.11273193359375,0.01229095458984375]],"53cc96bf262039586a88ab17ac076858":[1.0001375577253517,[-0.01229095458984375,-0.0249786376953125,-0.004062652587890625,0.03704833984375,0.108642578125,-0.014373779296875,-0.013458251953125,0.019317626953125,0.01428985595703125,0.06854248046875,-0.0279388427734375,-0.004398345947265625,0.00708770751953125,0.006397247314453125,0.04229736328125,-0.042083740234375,0.0222625732421875,0.044097900390625,-0.047088623046875,0.01366424560546875,-0.0238800048828125,0.00820159912109375,-0.04364013671875,0.02142333984375,0.07452392578125,0.044219970703125,-0.0714111328125,0.06732177734375,0.07586669921875,0.0187530517578125,0.06829833984375,-0.0477294921875,-0.0167999267578125,-0.00360107421875,0.1544189453125,0.0172119140625,-0.0238189697265625,-0.05120849609375,0.0116119384765625,-0.11309814453125,0.048065185546875,-0.039459228515625,0.024322509765625,0.043304443359375,0.0012264251708984375,0.0159454345703125,0.00777435302734375,0.029022216796875,-0.0418701171875,-0.0772705078125,-0.0105743408203125,-0.06597900390625,0.061798095703125,-0.07354736328125,-0.051055908203125,-0.007106781005859375,0.06622314453125,0.007495880126953125,-0.01390838623046875,0.04632568359375,0.0823974609375,0.01360321044921875,-0.03515625,0.07684326171875,0.09234619140625,-0.11041259765625,-0.016387939453125,-0.05010986328125,0.08978271484375,-0.07354736328125,-0.00496673583984375,-0.0792236328125,-0.0667724609375,0.0219879150390625,-0.0242156982421875,0.0305328369140625,0.0762939453125,0.037811279296875,0.04345703125,-0.0478515625,-0.0266571044921875,-0.059814453125,-0.013763427734375,-0.0543212890625,-0.00609588623046875,0.051422119140625,-0.027252197265625,-0.038055419921875,-0.0207061767578125,0.069091796875,0.0255279541015625,0.06622314453125,-0.11663818359375,-0.03497314453125,-0.0053558349609375,-0.0038433074951171875,-0.052337646484375,-0.000034868717193603516,0.043182373046875,0.036712646484375,-0.058502197265625,-0.08477783203125,0.01244354248046875,-0.066650390625,-0.044769287109375,0.04248046875,0.035186767578125,0.0215911865234375,-0.0305938720703125,0.06402587890625,-0.03704833984375,0.0012178421020507812,0.0174407958984375,-0.0017805099487304688,0.027801513671875,0.00933837890625,0.07861328125,-0.06390380859375,-0.0165863037109375,-0.0506591796875,0.0234222412109375,0.055419921875,-0.07818603515625,0.00543212890625,-0.07623291015625,0.051422119140625,-0.00909423828125,0.043670654296875,-0.0882568359375,0.05316162109375,-0.03009033203125,0.0316162109375,-0.01515960693359375,0.05865478515625,0.0550537109375,0.0147857666015625,0.06829833984375,0.1214599609375,-0.043243408203125,-0.06097412109375,0.0621337890625,0.0046539306640625,-0.0404052734375,-0.011016845703125,-0.050506591796875,0.011474609375,0.05218505859375,-0.1029052734375,-0.064208984375,-0.05792236328125,0.01407623291015625,-0.0190887451171875,0.0174560546875,0.0775146484375,-0.049407958984375,-0.029876708984375,0.03656005859375,0.061309814453125,-0.0692138671875,0.11590576171875,-0.05322265625,0.0628662109375,-0.09576416015625,-0.09600830078125,0.07110595703125,-0.0899658203125,0.0107421875,0.038543701171875,-0.0031986236572265625,0.043975830078125,0.033050537109375,0.07928466796875,0.0115814208984375,-0.042083740234375,0.007526397705078125,0.040374755859375,-0.06488037109375,-0.046417236328125,-0.003566741943359375,0.0762939453125,-0.05206298828125,-0.0030975341796875,-0.0809326171875,0.01108551025390625,0.0128631591796875,0.034271240234375,-0.0233306884765625,0.0130462646484375,-0.02410888671875,0.0094757080078125,-0.04058837890625,0.066162109375,0.017181396484375,-0.10675048828125,-0.061431884765625,0.041259765625,-0.0195770263671875,0.033447265625,0.03900146484375,-0.0310211181640625,0.0168914794921875,-0.07452392578125,0.031890869140625,0.139404296875,0.034423828125,0.0252685546875,0.01424407958984375,0.0107574462890625,-0.024383544921875,-0.004878997802734375,0.0216064453125,0.0802001953125,-0.02996826171875,0.0236968994140625,0.0030727386474609375,-0.03668212890625,-0.05596923828125,-0.0204315185546875,-0.0411376953125,0.125,-0.04296875,-0.051666259765625,-0.04962158203125,-0.0550537109375,-0.059722900390625,0.0411376953125,0.027099609375,-0.12359619140625,0.023162841796875,-0.0128173828125,0.0679931640625,0.022613525390625,-0.033843994140625,0.06085205078125,0.054840087890625,0.0108642578125,0.10198974609375,0.07672119140625,-0.0027370452880859375,-0.083251953125,-0.02349853515625,-0.0269775390625,0.0294952392578125,0.017059326171875,-0.0362548828125,-0.01959228515625,0.02001953125,0.095947265625,0.01219940185546875,-0.0272216796875,0.032440185546875,-0.012908935546875,-0.062255859375,-0.045806884765625,0.01442718505859375,0.006099700927734375,-0.018218994140625,0.04852294921875,-0.025665283203125,-0.06390380859375,0.03314208984375,-0.0120849609375,0.05596923828125,0.0184326171875,0.0211029052734375,-0.07220458984375,-0.05242919921875,0.0440673828125,0.034942626953125,0.0272674560546875,0.0235443115234375,0.036651611328125,-0.07806396484375,-0.022705078125,-0.03466796875,-0.023895263671875,0.10333251953125,0.06103515625,-0.01666259765625,-0.0537109375,-0.0496826171875,-0.086181640625,0.1075439453125,0.036041259765625,-0.0173797607421875,-0.006984710693359375,-0.0814208984375,0.10479736328125,0.09375,-0.021820068359375,-0.08685302734375,0.040374755859375,-0.01849365234375,-0.0457763671875,0.0828857421875,0.00028443336486816406,0.05120849609375,0.059844970703125,-0.00795745849609375,-0.006038665771484375,0.083984375,-0.0165863037109375,0.057769775390625,-0.031982421875,-0.05615234375,-0.053955078125,0.046630859375,0.0102691650390625,-0.0038776397705078125,0.06707763671875,-0.031951904296875,-0.01439666748046875,-0.0151519775390625,0.033538818359375,0.049224853515625,0.038818359375,0.058990478515625,0.062042236328125,-0.07830810546875,-0.04974365234375,-0.00809478759765625,-0.0278778076171875,0.0849609375,-0.0278167724609375,-0.058624267578125,-0.040802001953125,-0.09136962890625,0.08050537109375,0.005512237548828125,0.052947998046875,0.026275634765625,0.0330810546875,-0.05462646484375,-0.003772735595703125,0.01325225830078125,-0.045196533203125,0.0204620361328125,0.07537841796875,-0.01360321044921875,-0.02032470703125,-0.034881591796875,0.0031986236572265625,-0.04376220703125,0.0015096664428710938,-0.0236968994140625,-0.10552978515625,-0.1419677734375,0.027313232421875,-0.01009368896484375,0.03704833984375,-0.033416748046875,-0.08233642578125,0.003635406494140625,-0.02587890625,-0.06817626953125,0.011322021484375,-0.0008807182312011719,-0.045623779296875,-0.0643310546875,-0.0631103515625,0.0270233154296875,0.0030193328857421875,0.052276611328125,-0.031280517578125,-0.06365966796875,-0.01276397705078125,0.00811767578125,0.04742431640625,0.03765869140625,-0.04376220703125,-0.0011396408081054688,-0.05865478515625,0.0270233154296875,-0.026214599609375,-0.034423828125,-0.04010009765625,0.0361328125,-0.02239990234375,0.036651611328125,0.040252685546875,0.0689697265625,-0.01849365234375,0.06964111328125,-0.0271453857421875]],"c5480db69876dbe696397144d9796e2f":[0.999796834184822,[-0.008819580078125,0.024810791015625,0.003017425537109375,-0.032135009765625,-0.0147705078125,-0.0127716064453125,-0.0413818359375,0.09661865234375,-0.0196380615234375,0.010498046875,-0.0222320556640625,0.03985595703125,0.0362548828125,-0.0222625732421875,0.05816650390625,0.01000213623046875,0.038421630859375,0.057281494140625,0.055694580078125,-0.016082763671875,-0.014801025390625,0.061065673828125,-0.08209228515625,-0.03594970703125,0.1021728515625,0.0740966796875,-0.058929443359375,0.112060546875,0.0305938720703125,0.00482177734375,0.01385498046875,0.0009479522705078125,-0.0560302734375,-0.006378173828125,0.0760498046875,0.01324462890625,0.03857421875,0.01088714599609375,0.01490020751953125,-0.060089111328125,0.005077362060546875,-0.006999969482421875,0.07373046875,0.0582275390625,0.04638671875,-0.059600830078125,0.037933349609375,-0.016357421875,-0.0217132568359375,0.0003924369812011719,0.03936767578125,-0.0178375244140625,0.023162841796875,-0.127685546875,0.020904541015625,-0.020782470703125,0.04364013671875,0.0026302337646484375,0.0006136894226074219,-0.021636962890625,0.060028076171875,0.08428955078125,-0.0782470703125,0.03424072265625,0.060089111328125,-0.09674072265625,0.0207672119140625,-0.049285888671875,0.0762939453125,-0.017333984375,0.034942626953125,-0.0210418701171875,0.036468505859375,0.002288818359375,0.039825439453125,-0.0200958251953125,0.0165863037109375,-0.0408935546875,0.01555633544921875,-0.043609619140625,-0.07763671875,-0.01244354248046875,-0.0297088623046875,-0.024505615234375,-0.0318603515625,0.0513916015625,0.00717926025390625,-0.0303497314453125,-0.0374755859375,0.11444091796875,0.0259857177734375,0.0273590087890625,-0.0263671875,-0.01169586181640625,-0.0287017822265625,0.025238037109375,0.005214691162109375,-0.0020923614501953125,0.03033447265625,0.01342010498046875,-0.07598876953125,-0.050628662109375,0.0007309913635253906,-0.0672607421875,-0.0147247314453125,0.006114959716796875,-0.007686614990234375,-0.034332275390625,0.00022935867309570312,0.08331298828125,-0.033294677734375,0.02081298828125,-0.078125,-0.0233612060546875,0.037567138671875,0.021514892578125,0.1170654296875,-0.078125,-0.0015878677368164062,-0.029266357421875,0.01522064208984375,0.01019287109375,0.0305328369140625,0.024932861328125,-0.031402587890625,0.03692626953125,0.0733642578125,0.0235595703125,-0.11553955078125,0.0171661376953125,-0.0095367431640625,-0.00830841064453125,-0.10205078125,0.050811767578125,0.0633544921875,-0.025115966796875,0.0098419189453125,0.0775146484375,0.007724761962890625,-0.03814697265625,0.06317138671875,-0.036102294921875,-0.044219970703125,-0.007671356201171875,-0.05010986328125,0.07049560546875,0.0655517578125,-0.074951171875,-0.00443267822265625,-0.05291748046875,0.034820556640625,-0.01168060302734375,-0.0069122314453125,0.1480712890625,-0.061309814453125,-0.0010509490966796875,0.04290771484375,-0.00540924072265625,-0.0265655517578125,0.07464599609375,-0.04095458984375,0.01605224609375,-0.067626953125,-0.0538330078125,0.08135986328125,-0.02960205078125,0.05047607421875,0.0274505615234375,0.0052947998046875,0.025543212890625,-0.01134490966796875,0.1435546875,0.01282501220703125,0.0297393798828125,0.020416259765625,0.109619140625,-0.00815582275390625,0.0104217529296875,0.01432037353515625,0.05908203125,-0.095458984375,0.0230560302734375,-0.09320068359375,0.032257080078125,-0.02276611328125,0.06866455078125,0.0307464599609375,-0.0255584716796875,-0.022857666015625,0.0034732818603515625,-0.042877197265625,0.074462890625,-0.0226898193359375,0.015533447265625,-0.1036376953125,0.03076171875,-0.03277587890625,-0.08447265625,0.00688934326171875,-0.03363037109375,0.048309326171875,-0.03826904296875,0.0179901123046875,0.09796142578125,0.0018434524536132812,0.0477294921875,-0.075439453125,-0.00916290283203125,0.021087646484375,-0.07867431640625,-0.0278472900390625,0.10980224609375,-0.031280517578125,-0.035675048828125,-0.041290283203125,-0.018280029296875,-0.059906005859375,-0.0277862548828125,-0.006053924560546875,0.0262603759765625,-0.01407623291015625,-0.01152801513671875,-0.151611328125,-0.0396728515625,-0.1014404296875,0.040924072265625,0.0224609375,-0.1480712890625,-0.0458984375,-0.03582763671875,0.060516357421875,-0.01015472412109375,0.037078857421875,0.029388427734375,0.03314208984375,-0.05877685546875,0.18798828125,0.018310546875,0.0377197265625,-0.05218505859375,0.021881103515625,-0.0579833984375,0.0782470703125,-0.0316162109375,-0.01438140869140625,-0.05389404296875,-0.03607177734375,0.0987548828125,-0.0027332305908203125,-0.04327392578125,-0.11285400390625,-0.015716552734375,-0.04302978515625,-0.070556640625,-0.059173583984375,-0.032440185546875,-0.031951904296875,0.00223541259765625,-0.040557861328125,-0.051910400390625,0.0236358642578125,0.06903076171875,0.10400390625,0.033111572265625,0.0163116455078125,-0.029541015625,-0.05706787109375,0.018585205078125,0.0018854141235351562,-0.031524658203125,0.036376953125,0.005100250244140625,-0.01873779296875,-0.02386474609375,0.038421630859375,-0.031585693359375,0.005596160888671875,0.07586669921875,-0.032684326171875,0.053619384765625,-0.0753173828125,-0.01580810546875,0.1405029296875,0.0693359375,0.0167388916015625,0.03814697265625,-0.01313018798828125,0.00479888916015625,0.0172119140625,-0.02734375,-0.08367919921875,0.0164947509765625,-0.016387939453125,-0.033660888671875,0.10797119140625,0.031829833984375,0.0220184326171875,-0.0538330078125,-0.07696533203125,-0.03594970703125,0.01177215576171875,-0.06365966796875,-0.003498077392578125,-0.028350830078125,-0.1376953125,-0.1114501953125,0.060028076171875,-0.072265625,-0.007171630859375,0.03167724609375,-0.008392333984375,-0.0023899078369140625,-0.020599365234375,0.09100341796875,0.025909423828125,0.1015625,0.0457763671875,0.00013840198516845703,-0.06695556640625,-0.0299072265625,-0.02349853515625,-0.01001739501953125,0.06182861328125,0.0295867919921875,-0.037109375,-0.00873565673828125,-0.07696533203125,0.0234527587890625,-0.0269622802734375,0.021087646484375,0.0294036865234375,-0.0141448974609375,-0.032989501953125,-0.0203094482421875,0.049285888671875,-0.050079345703125,0.056365966796875,0.04241943359375,0.04217529296875,0.0909423828125,0.0222015380859375,-0.01096343994140625,0.00872802734375,0.055999755859375,0.0004649162292480469,-0.0826416015625,-0.1170654296875,-0.006351470947265625,-0.0218963623046875,0.037506103515625,-0.013427734375,-0.0682373046875,-0.00756072998046875,-0.041900634765625,0.03668212890625,0.06591796875,0.018310546875,-0.00506591796875,-0.02276611328125,-0.06854248046875,-0.0103759765625,0.004154205322265625,-0.024139404296875,0.0280609130859375,-0.075927734375,0.005153656005859375,0.0596923828125,0.004611968994140625,0.023406982421875,-0.037384033203125,-0.003231048583984375,-0.00743865966796875,0.0156707763671875,-0.06268310546875,-0.0626220703125,-0.059234619140625,0.00852203369140625,-0.0226593017578125,0.032470703125,0.07562255859375,0.03118896484375,0.00823211669921875,-0.01238250732421875,-0.03765869140625]],"8231cc476f6fbc72323236bc60d781ab":[0.999747330281514,[0.01506805419921875,-0.0302886962890625,0.018341064453125,0.1556396484375,0.116943359375,-0.046600341796875,-0.00003236532211303711,0.001644134521484375,0.036376953125,0.06671142578125,0.0059356689453125,-0.0116119384765625,0.0234375,0.0166778564453125,0.0892333984375,-0.0227203369140625,0.04034423828125,-0.035064697265625,-0.05865478515625,-0.0277252197265625,0.0273284912109375,0.0059356689453125,0.0413818359375,-0.032684326171875,0.057098388671875,0.086181640625,-0.075927734375,0.10162353515625,-0.01134490966796875,-0.024871826171875,0.049652099609375,-0.08056640625,0.0281524658203125,-0.03997802734375,0.06280517578125,0.0435791015625,-0.01953125,-0.0201263427734375,-0.04150390625,-0.055694580078125,0.0107269287109375,-0.07135009765625,0.0010986328125,0.0235137939453125,-0.01200103759765625,0.0234222412109375,0.024749755859375,0.039642333984375,-0.0938720703125,0.0109100341796875,-0.0242767333984375,-0.0154571533203125,0.032440185546875,-0.09393310546875,0.016387939453125,0.00016188621520996094,0.01511383056640625,-0.04290771484375,-0.04248046875,0.09112548828125,0.05523681640625,0.07757568359375,-0.0158233642578125,0.071044921875,0.060150146484375,-0.07135009765625,0.01485443115234375,-0.019287109375,0.0218963623046875,-0.0777587890625,0.01477813720703125,0.0048675537109375,-0.01428985595703125,0.01209259033203125,-0.004848480224609375,-0.00795745849609375,0.09930419921875,-0.01416778564453125,0.02410888671875,-0.04949951171875,-0.0458984375,0.03070068359375,0.05303955078125,-0.03485107421875,-0.0889892578125,0.020111083984375,-0.0057373046875,-0.00909423828125,0.0401611328125,0.031402587890625,0.0187530517578125,0.031646728515625,-0.10626220703125,0.0008463859558105469,-0.0614013671875,0.042999267578125,-0.11602783203125,-0.0307769775390625,0.06402587890625,0.026947021484375,-0.09735107421875,-0.0248260498046875,-0.009796142578125,-0.08441162109375,-0.0712890625,0.0208282470703125,0.04132080078125,0.0253448486328125,-0.055084228515625,0.04443359375,-0.01071929931640625,0.0007119178771972656,0.016571044921875,0.02947998046875,-0.044952392578125,-0.00768280029296875,0.06884765625,-0.05987548828125,-0.00641632080078125,-0.016326904296875,0.0204620361328125,0.03765869140625,-0.08843994140625,-0.00399017333984375,-0.09222412109375,0.09771728515625,0.02069091796875,0.05609130859375,-0.045562744140625,0.00902557373046875,-0.0179595947265625,0.0283203125,0.00244903564453125,0.052032470703125,0.117919921875,-0.036163330078125,0.02008056640625,0.130859375,-0.058868408203125,-0.0838623046875,0.020263671875,-0.02459716796875,-0.0012302398681640625,-0.0225067138671875,-0.038116455078125,0.040313720703125,0.05474853515625,-0.10711669921875,-0.08538818359375,-0.08599853515625,0.0196075439453125,0.0219879150390625,0.04986572265625,0.129150390625,0.0197906494140625,-0.00933837890625,0.04901123046875,0.0228271484375,-0.1097412109375,0.0924072265625,-0.03076171875,0.05560302734375,-0.07672119140625,-0.10601806640625,0.0082550048828125,-0.0278778076171875,0.06005859375,0.0238494873046875,0.07086181640625,0.0282135009765625,-0.0119171142578125,0.06298828125,0.015777587890625,-0.0584716796875,0.06585693359375,-0.019256591796875,-0.00812530517578125,-0.021331787109375,-0.01678466796875,0.0787353515625,-0.015777587890625,0.03350830078125,-0.05877685546875,0.032501220703125,-0.00830078125,0.04443359375,-0.0257720947265625,-0.01052093505859375,-0.0645751953125,0.017333984375,-0.034515380859375,0.06109619140625,-0.00881195068359375,-0.0924072265625,-0.03631591796875,0.085693359375,-0.0031147003173828125,-0.006824493408203125,0.036590576171875,-0.0262908935546875,-0.0107269287109375,-0.0928955078125,0.007717132568359375,0.07220458984375,0.0650634765625,0.0814208984375,0.005748748779296875,-0.019134521484375,-0.0217437744140625,0.032440185546875,0.010894775390625,0.0572509765625,-0.054412841796875,0.0447998046875,-0.004673004150390625,-0.0364990234375,-0.0635986328125,0.02386474609375,-0.06768798828125,0.06903076171875,0.0128326416015625,-0.0352783203125,0.0299072265625,-0.0260162353515625,-0.04266357421875,-0.029754638671875,0.06854248046875,-0.1494140625,-0.01318359375,-0.040313720703125,0.0623779296875,-0.010498046875,-0.0061798095703125,0.0192413330078125,0.028167724609375,-0.0261993408203125,0.0011463165283203125,0.019317626953125,0.016754150390625,-0.07794189453125,0.0224761962890625,-0.035125732421875,0.031829833984375,0.06610107421875,0.0055389404296875,0.0501708984375,-0.029449462890625,0.0921630859375,-0.016448974609375,-0.036895751953125,-0.0031757354736328125,-0.0253753662109375,-0.06494140625,-0.0648193359375,-0.041290283203125,0.0367431640625,0.0017271041870117188,0.053466796875,-0.0303802490234375,-0.046112060546875,0.029449462890625,-0.081298828125,0.08001708984375,-0.033905029296875,0.049835205078125,-0.062286376953125,-0.0771484375,0.04052734375,0.045684814453125,0.061126708984375,0.0262908935546875,0.03125,-0.0316162109375,0.036865234375,-0.0198974609375,-0.0268402099609375,0.058746337890625,0.041778564453125,-0.029266357421875,-0.0640869140625,-0.036346435546875,-0.0262908935546875,0.128173828125,0.03692626953125,0.019866943359375,-0.00283050537109375,-0.0574951171875,0.04302978515625,-0.0008339881896972656,0.038665771484375,-0.1312255859375,-0.004619598388671875,0.0158233642578125,-0.0345458984375,0.02880859375,0.06005859375,0.0237579345703125,0.058563232421875,-0.0303955078125,0.024688720703125,0.01123809814453125,-0.020721435546875,-0.0160369873046875,-0.027252197265625,-0.1103515625,-0.05267333984375,0.0221405029296875,-0.039581298828125,0.001804351806640625,0.057464599609375,0.00020420551300048828,0.0226898193359375,0.0166015625,0.0577392578125,0.027984619140625,0.07818603515625,0.057525634765625,-0.042236328125,-0.07843017578125,-0.0005216598510742188,-0.01947021484375,-0.023223876953125,0.0576171875,0.0051727294921875,-0.05767822265625,-0.0010480880737304688,-0.03973388671875,0.1319580078125,0.005023956298828125,0.0021953582763671875,-0.0253753662109375,0.0623779296875,-0.0606689453125,-0.0113677978515625,0.034820556640625,-0.0614013671875,0.0118255615234375,0.06640625,-0.02130126953125,-0.0428466796875,-0.048980712890625,0.003448486328125,0.00850677490234375,-0.00817108154296875,0.0035190582275390625,-0.1422119140625,-0.070556640625,0.0474853515625,-0.025115966796875,0.02886962890625,-0.00554656982421875,-0.08404541015625,0.01082611083984375,-0.052947998046875,-0.059417724609375,0.031494140625,-0.03399658203125,-0.07904052734375,0.0019359588623046875,-0.0780029296875,0.0208587646484375,-0.05450439453125,0.06396484375,-0.08245849609375,0.01195526123046875,-0.035247802734375,0.0021762847900390625,0.040313720703125,0.09429931640625,-0.0540771484375,-0.008209228515625,-0.002986907958984375,0.0019683837890625,-0.00164794921875,0.01256561279296875,-0.06365966796875,-0.002227783203125,-0.023895263671875,0.0055084228515625,0.01922607421875,0.047576904296875,0.06231689453125,0.095458984375,-0.09991455078125]],"515ae74151efa1ff92687e7d52343ac5":[1.0001714984514989,[-0.0180816650390625,0.027252197265625,0.003765106201171875,0.0374755859375,0.12078857421875,0.01526641845703125,0.01255035400390625,0.032470703125,0.0218505859375,0.023162841796875,-0.010589599609375,0.0148468017578125,0.0299224853515625,-0.0199432373046875,0.070068359375,-0.01360321044921875,0.01557159423828125,0.002628326416015625,-0.01032257080078125,-0.03533935546875,0.00872802734375,0.0285186767578125,-0.03466796875,-0.06640625,0.0946044921875,0.05035400390625,-0.1082763671875,0.07720947265625,0.03997802734375,0.01212310791015625,0.0020084381103515625,-0.047760009765625,0.0127716064453125,0.001392364501953125,0.06646728515625,0.00960540771484375,-0.0044097900390625,-0.0270843505859375,-0.01409912109375,-0.105224609375,0.033050537109375,-0.040313720703125,0.044677734375,0.0076751708984375,-0.018157958984375,-0.042816162109375,-0.006893157958984375,0.0153045654296875,-0.027069091796875,-0.051300048828125,0.03265380859375,-0.04473876953125,0.038116455078125,-0.08502197265625,-0.01326751708984375,-0.079345703125,0.0037994384765625,-0.0228118896484375,-0.01983642578125,0.0634765625,0.029052734375,0.080322265625,-0.035980224609375,0.01201629638671875,0.0755615234375,-0.054046630859375,0.045745849609375,-0.06610107421875,0.033935546875,-0.08270263671875,0.01023101806640625,-0.0156707763671875,-0.0005674362182617188,-0.01202392578125,-0.02471923828125,-0.03363037109375,0.07708740234375,0.0104827880859375,0.037139892578125,-0.039581298828125,-0.043914794921875,0.00007671117782592773,-0.00959014892578125,-0.0267181396484375,-0.0753173828125,0.06494140625,0.0101165771484375,-0.0299835205078125,0.040924072265625,0.05535888671875,0.0543212890625,0.027496337890625,-0.10516357421875,-0.0173187255859375,-0.04962158203125,0.0511474609375,-0.04443359375,-0.01544952392578125,0.0310821533203125,-0.042022705078125,-0.043914794921875,-0.07269287109375,0.0014286041259765625,-0.06622314453125,-0.02630615234375,0.060516357421875,-0.0048370361328125,-0.0245208740234375,-0.07208251953125,0.09832763671875,-0.004833221435546875,0.060272216796875,0.032501220703125,0.007511138916015625,-0.0018186569213867188,0.01068878173828125,0.12030029296875,-0.054840087890625,-0.005756378173828125,-0.0256500244140625,0.03729248046875,0.035552978515625,-0.07781982421875,-0.0219268798828125,-0.0287322998046875,0.04522705078125,0.0594482421875,0.053253173828125,-0.0902099609375,0.016204833984375,0.0217437744140625,0.01055908203125,-0.053924560546875,0.10302734375,0.06842041015625,0.01214599609375,0.0193634033203125,0.086669921875,-0.056549072265625,-0.0869140625,0.058013916015625,-0.02142333984375,-0.02093505859375,-0.0128936767578125,-0.038848876953125,0.0352783203125,0.1260986328125,-0.041748046875,-0.0297698974609375,-0.05462646484375,0.05224609375,-0.0211944580078125,0.0362548828125,0.1134033203125,0.01163482666015625,-0.048095703125,0.0178680419921875,0.006504058837890625,-0.06793212890625,0.10198974609375,-0.0283355712890625,0.041107177734375,-0.06549072265625,-0.08905029296875,0.033843994140625,-0.09881591796875,0.0726318359375,0.042266845703125,0.0310516357421875,0.00893402099609375,-0.05450439453125,0.076171875,0.054412841796875,-0.0267333984375,0.059326171875,0.050628662109375,-0.027069091796875,-0.0302276611328125,0.060150146484375,0.0716552734375,-0.040313720703125,0.070068359375,-0.12164306640625,0.050445556640625,-0.01039886474609375,0.04522705078125,0.031494140625,-0.0066375732421875,-0.03240966796875,0.01515960693359375,0.030670166015625,0.052459716796875,-0.03973388671875,-0.052581787109375,-0.08526611328125,0.1182861328125,-0.032501220703125,-0.00452423095703125,0.046539306640625,-0.0012006759643554688,0.0017309188842773438,-0.087890625,-0.0012388229370117188,0.1033935546875,0.0623779296875,0.00783538818359375,-0.03118896484375,0.00890350341796875,0.0165557861328125,-0.04461669921875,-0.0224609375,0.08758544921875,-0.03729248046875,-0.0333251953125,-0.08355712890625,0.0138397216796875,-0.0638427734375,0.0241546630859375,-0.0242156982421875,0.114501953125,0.018035888671875,-0.0218048095703125,-0.047515869140625,-0.08587646484375,-0.0261688232421875,0.028106689453125,0.0789794921875,-0.1431884765625,-0.05120849609375,-0.04608154296875,0.0187225341796875,0.00034236907958984375,-0.0228729248046875,0.054412841796875,0.005184173583984375,-0.06317138671875,0.07720947265625,0.03228759765625,0.042510986328125,-0.0748291015625,0.02825927734375,-0.08172607421875,0.05889892578125,-0.0018701553344726562,-0.0015697479248046875,-0.02923583984375,-0.06805419921875,0.06781005859375,-0.01018524169921875,-0.023284912109375,-0.052703857421875,-0.0027751922607421875,-0.058837890625,-0.09613037109375,-0.0155029296875,-0.03729248046875,-0.0022068023681640625,0.006855010986328125,-0.036285400390625,-0.05712890625,-0.019287109375,-0.01271820068359375,0.09161376953125,0.0170440673828125,-0.002513885498046875,-0.050811767578125,-0.0994873046875,0.053924560546875,0.033782958984375,-0.005126953125,-0.007053375244140625,0.046783447265625,-0.0104827880859375,-0.033966064453125,0.01207733154296875,-0.04736328125,0.057037353515625,0.07122802734375,-0.03759765625,0.04998779296875,-0.023193359375,-0.050811767578125,0.0859375,0.08062744140625,0.020416259765625,0.0025348663330078125,-0.00710296630859375,0.044158935546875,0.01531982421875,0.0010929107666015625,-0.10601806640625,-0.01548004150390625,-0.0158538818359375,-0.057861328125,0.129638671875,0.03936767578125,0.06134033203125,0.017730712890625,-0.0909423828125,0.0322265625,-0.01461029052734375,-0.058441162109375,-0.0015630722045898438,-0.0311279296875,-0.1427001953125,-0.055755615234375,0.0740966796875,-0.04412841796875,0.0157012939453125,0.07177734375,0.048309326171875,0.001827239990234375,-0.0443115234375,0.06390380859375,0.0399169921875,0.083251953125,0.0704345703125,-0.017913818359375,-0.06817626953125,-0.03948974609375,-0.0020503997802734375,-0.0205841064453125,0.0704345703125,0.0024871826171875,-0.05194091796875,-0.031646728515625,-0.05499267578125,0.08502197265625,-0.0200958251953125,-0.0073394775390625,-0.0003612041473388672,0.004123687744140625,0.01497650146484375,0.01085662841796875,0.0063934326171875,-0.06671142578125,0.0740966796875,0.04638671875,0.0518798828125,0.000008761882781982422,-0.03375244140625,-0.025787353515625,-0.048492431640625,0.0193023681640625,0.023468017578125,-0.1324462890625,-0.07940673828125,0.007232666015625,-0.025665283203125,0.043914794921875,-0.0179595947265625,-0.04241943359375,0.0164642333984375,-0.055328369140625,-0.0007557868957519531,0.050079345703125,-0.0290985107421875,-0.11834716796875,0.0243072509765625,-0.033355712890625,-0.0005211830139160156,-0.0115203857421875,0.0645751953125,-0.035064697265625,-0.031982421875,-0.0216827392578125,0.033050537109375,0.0008783340454101562,0.07818603515625,-0.056793212890625,0.004505157470703125,-0.03167724609375,0.01276397705078125,-0.0197296142578125,-0.01003265380859375,-0.09564208984375,0.04876708984375,-0.0439453125,-0.0277862548828125,0.03985595703125,0.05999755859375,0.02679443359375,0.07391357421875,-0.05462646484375]],"68760701d145a45add658a5b60e81709":[1.0002577118642035,[0.0469970703125,0.018402099609375,0.00222015380859375,0.045989990234375,0.091064453125,0.00029921531677246094,-0.0185699462890625,0.11187744140625,0.0128936767578125,0.056304931640625,0.0723876953125,0.040435791015625,-0.0855712890625,0.0306243896484375,0.01453399658203125,0.00795745849609375,0.033966064453125,-0.008636474609375,0.0419921875,-0.021209716796875,-0.0821533203125,0.053924560546875,-0.1649169921875,0.03125,0.0716552734375,0.004726409912109375,-0.07861328125,0.1669921875,-0.01287078857421875,0.00897979736328125,-0.0648193359375,-0.0753173828125,-0.08099365234375,-0.0574951171875,-0.004070281982421875,0.022674560546875,0.06005859375,-0.00154876708984375,0.0048675537109375,-0.11175537109375,-0.01312255859375,0.042236328125,0.040496826171875,0.0031719207763671875,-0.040618896484375,0.029266357421875,0.01052093505859375,0.031036376953125,-0.0281982421875,-0.0233306884765625,0.037200927734375,-0.0014467239379882812,0.0250244140625,-0.0792236328125,-0.0096435546875,-0.003021240234375,0.0423583984375,-0.04888916015625,-0.06634521484375,0.0489501953125,0.023040771484375,0.05810546875,-0.035675048828125,0.04388427734375,0.0211029052734375,-0.189208984375,-0.00319671630859375,-0.0731201171875,0.08587646484375,-0.005115509033203125,-0.054351806640625,-0.0019178390502929688,-0.051544189453125,-0.0102691650390625,0.0201873779296875,0.019134521484375,0.045928955078125,-0.034423828125,0.01192474365234375,0.0103607177734375,-0.01416778564453125,-0.042144775390625,0.03204345703125,-0.05169677734375,-0.039031982421875,-0.0216827392578125,-0.0206451416015625,-0.00435638427734375,0.018035888671875,0.065673828125,0.0333251953125,0.00847625732421875,-0.0274658203125,-0.0278167724609375,0.047760009765625,0.035888671875,0.0116119384765625,0.04925537109375,0.024871826171875,0.06781005859375,-0.010345458984375,-0.053375244140625,0.05828857421875,-0.05419921875,-0.049652099609375,0.07928466796875,-0.00399017333984375,-0.061553955078125,-0.01522064208984375,0.09783935546875,-0.053375244140625,0.005401611328125,-0.10400390625,0.00707244873046875,0.03338623046875,0.041595458984375,0.140625,-0.0758056640625,-0.0249176025390625,-0.06207275390625,-0.0038166046142578125,0.0361328125,-0.08538818359375,0.022369384765625,-0.0091094970703125,0.03448486328125,0.0039215087890625,-0.01204681396484375,-0.01373291015625,0.0013132095336914062,0.0843505859375,0.049346923828125,-0.04461669921875,0.0753173828125,0.0751953125,0.022552490234375,0.0149383544921875,0.10675048828125,0.0035552978515625,-0.0770263671875,0.034149169921875,0.0240325927734375,-0.0838623046875,0.0018024444580078125,-0.041656494140625,0.0634765625,0.04205322265625,-0.027374267578125,-0.0058441162109375,-0.101318359375,-0.0036449432373046875,-0.004180908203125,0.02288818359375,0.10296630859375,-0.055145263671875,-0.00565338134765625,0.051361083984375,0.017791748046875,-0.019622802734375,0.06707763671875,-0.045318603515625,-0.00048661231994628906,-0.1031494140625,-0.0904541015625,0.13916015625,-0.12359619140625,-0.01003265380859375,0.06768798828125,0.036224365234375,-0.031768798828125,-0.0265045166015625,0.1279296875,0.0032253265380859375,0.017547607421875,0.036407470703125,0.09454345703125,0.05523681640625,-0.007785797119140625,0.0853271484375,0.020721435546875,-0.11749267578125,-0.05950927734375,-0.06903076171875,-0.0469970703125,0.0287017822265625,0.022125244140625,-0.0051116943359375,-0.016632080078125,-0.025543212890625,-0.006317138671875,-0.016510009765625,0.10260009765625,-0.055755615234375,-0.06146240234375,-0.0033702850341796875,0.0606689453125,-0.007110595703125,-0.00978851318359375,0.061065673828125,0.0169525146484375,0.0008420944213867188,-0.043548583984375,-0.026824951171875,0.08563232421875,-0.014892578125,0.04486083984375,0.0218963623046875,-0.002079010009765625,-0.038543701171875,0.0010747909545898438,0.035308837890625,0.055938720703125,0.02972412109375,-0.0281219482421875,0.05828857421875,-0.0447998046875,-0.06536865234375,0.0050201416015625,-0.0751953125,0.07666015625,-0.0152435302734375,-0.0238800048828125,-0.0498046875,-0.054229736328125,-0.064453125,-0.0195465087890625,0.04779052734375,-0.1055908203125,-0.0211944580078125,-0.01071929931640625,0.056182861328125,-0.014495849609375,0.01519012451171875,-0.00867462158203125,0.005474090576171875,0.00439453125,0.08184814453125,-0.046966552734375,-0.060150146484375,-0.06573486328125,-0.02655029296875,0.0233001708984375,0.11553955078125,0.002025604248046875,-0.11553955078125,-0.0272216796875,0.0289154052734375,0.02508544921875,0.015960693359375,-0.027374267578125,-0.08892822265625,-0.0178985595703125,-0.1016845703125,-0.11187744140625,-0.0150146484375,-0.035369873046875,-0.032440185546875,0.030731201171875,0.005962371826171875,-0.04656982421875,-0.069091796875,0.06573486328125,0.09722900390625,-0.006458282470703125,0.001224517822265625,-0.0411376953125,-0.025390625,-0.06689453125,-0.00650787353515625,-0.0181732177734375,0.051055908203125,-0.0284271240234375,0.0194854736328125,-0.0281219482421875,-0.01363372802734375,-0.033111572265625,0.01007843017578125,0.04931640625,-0.04644775390625,0.03857421875,0.0013427734375,-0.1295166015625,0.03314208984375,0.0172271728515625,0.0128631591796875,-0.0174407958984375,0.0037670135498046875,0.055938720703125,0.035186767578125,0.038421630859375,-0.036834716796875,0.0665283203125,-0.031280517578125,-0.0276641845703125,0.07183837890625,-0.0109710693359375,0.0216064453125,-0.0102691650390625,-0.07928466796875,0.001049041748046875,0.08172607421875,-0.0159912109375,0.0021228790283203125,-0.005771636962890625,-0.0078277587890625,0.0260009765625,0.1221923828125,-0.042266845703125,-0.005397796630859375,0.005443572998046875,-0.0268096923828125,-0.01416778564453125,0.016632080078125,0.04901123046875,0.05157470703125,0.08880615234375,0.067138671875,0.001598358154296875,-0.056793212890625,-0.00377655029296875,-0.04107666015625,0.006549835205078125,0.01276397705078125,-0.0302276611328125,-0.01177215576171875,-0.0149078369140625,-0.04791259765625,0.0286407470703125,-0.0286102294921875,-0.0138397216796875,0.056854248046875,0.0109100341796875,-0.03363037109375,-0.093994140625,-0.061676025390625,-0.02777099609375,-0.066650390625,-0.027374267578125,0.0457763671875,0.02685546875,0.07025146484375,-0.0262298583984375,0.0035495758056640625,0.032440185546875,0.0200958251953125,-0.0440673828125,-0.07061767578125,-0.033294677734375,-0.04833984375,0.02276611328125,-0.02215576171875,-0.07281494140625,0.07293701171875,-0.03826904296875,0.056365966796875,0.038787841796875,0.0703125,0.038848876953125,-0.0229949951171875,0.0015106201171875,0.016845703125,-0.0188140869140625,-0.0259246826171875,-0.0237274169921875,-0.039337158203125,-0.055145263671875,0.06927490234375,-0.043426513671875,0.061065673828125,0.0037136077880859375,-0.0069427490234375,0.0183563232421875,0.017120361328125,-0.004718780517578125,-0.00968170166015625,-0.044708251953125,0.0170135498046875,0.031829833984375,0.0157623291015625,0.037567138671875,0.00931549072265625,-0.006114959716796875,0.06207275390625,0.0187530517578125]],"6d1fc0583ca584a225bd01072fcd1b16":[0.9998519664331396,[0.004741668701171875,-0.0225677490234375,0.023101806640625,0.1004638671875,0.049346923828125,-0.027679443359375,0.0237274169921875,0.07647705078125,-0.0087738037109375,0.0772705078125,0.040191650390625,0.014129638671875,-0.0016021728515625,0.0005006790161132812,0.1051025390625,0.03619384765625,0.0065460205078125,0.00986480712890625,-0.00978851318359375,-0.024627685546875,0.0263519287109375,0.034332275390625,-0.06951904296875,0.01898193359375,0.056976318359375,0.03167724609375,-0.045928955078125,0.113037109375,-0.004688262939453125,0.0011281967163085938,-0.0792236328125,-0.058258056640625,-0.005077362060546875,-0.00737762451171875,0.0513916015625,0.0657958984375,0.05206298828125,-0.005741119384765625,-0.0134429931640625,-0.125,0.0594482421875,-0.03839111328125,0.03448486328125,0.0272216796875,-0.03594970703125,0.0026912689208984375,0.0443115234375,0.04559326171875,-0.05621337890625,0.0256500244140625,-0.0278778076171875,-0.01226043701171875,0.07330322265625,-0.07757568359375,-0.028167724609375,0.0196533203125,0.01543426513671875,-0.059783935546875,-0.10101318359375,0.06536865234375,0.09625244140625,0.061798095703125,-0.0400390625,0.0433349609375,0.034912109375,-0.1573486328125,-0.0209503173828125,-0.052764892578125,0.05670166015625,-0.0157318115234375,0.020751953125,-0.00605010986328125,-0.061737060546875,-0.0217742919921875,0.0277252197265625,0.013916015625,0.046539306640625,-0.06512451171875,0.07806396484375,-0.01410675048828125,-0.08416748046875,-0.042022705078125,-0.00650787353515625,-0.0172271728515625,-0.06951904296875,0.0176544189453125,0.0038909912109375,-0.011871337890625,0.05474853515625,0.040191650390625,0.0247344970703125,0.035369873046875,-0.0166015625,-0.00795745849609375,-0.0570068359375,0.072998046875,-0.00881195068359375,0.004245758056640625,0.09332275390625,0.031829833984375,-0.0131378173828125,-0.09405517578125,-0.01039886474609375,-0.035980224609375,-0.07110595703125,0.031951904296875,0.01116180419921875,-0.0810546875,-0.055694580078125,0.060821533203125,-0.10577392578125,0.00595855712890625,-0.0188751220703125,0.035247802734375,-0.0046539306640625,-0.04736328125,0.041015625,-0.09283447265625,0.00414276123046875,-0.01438140869140625,0.00899505615234375,0.00984954833984375,-0.07861328125,0.01076507568359375,-0.08251953125,0.06585693359375,0.0897216796875,0.055999755859375,-0.046112060546875,-0.026580810546875,0.01082611083984375,0.043609619140625,-0.024810791015625,0.09490966796875,0.067138671875,-0.0174102783203125,0.0152130126953125,0.0335693359375,-0.040618896484375,-0.0770263671875,0.04241943359375,-0.035980224609375,-0.0169219970703125,0.0202484130859375,-0.0357666015625,0.0859375,-0.0204925537109375,-0.08880615234375,0.0156402587890625,-0.054443359375,0.006378173828125,0.07257080078125,0.033599853515625,0.06695556640625,-0.0017528533935546875,-0.0290679931640625,0.049468994140625,0.02288818359375,-0.08978271484375,0.0985107421875,-0.04290771484375,0.07843017578125,-0.08197021484375,-0.080078125,0.061065673828125,-0.0254058837890625,0.06256103515625,-0.003570556640625,0.03607177734375,0.00868988037109375,-0.0270538330078125,0.10711669921875,-0.006862640380859375,-0.004680633544921875,-0.028656005859375,0.09014892578125,-0.036773681640625,0.007381439208984375,0.053619384765625,0.052490234375,-0.040313720703125,0.01556396484375,-0.056793212890625,-0.016998291015625,0.0163421630859375,0.0557861328125,-0.0058746337890625,-0.0035495758056640625,0.0789794921875,-0.00864410400390625,-0.056640625,0.0633544921875,-0.01470947265625,-0.08563232421875,-0.07781982421875,0.0882568359375,-0.05230712890625,-0.023040771484375,0.0780029296875,-0.023468017578125,-0.007518768310546875,-0.06805419921875,0.016387939453125,0.053375244140625,0.054656982421875,0.055999755859375,-0.044403076171875,0.0046844482421875,-0.0297393798828125,0.05029296875,-0.00757598876953125,0.029754638671875,-0.01617431640625,0.00705718994140625,0.0262451171875,0.01580810546875,-0.0217132568359375,-0.0022411346435546875,-0.05804443359375,0.1273193359375,0.046600341796875,-0.04840087890625,-0.058135986328125,-0.034942626953125,-0.103759765625,-0.040740966796875,0.058319091796875,-0.142333984375,-0.08380126953125,-0.02154541015625,0.0880126953125,0.0809326171875,-0.0178375244140625,-0.0335693359375,-0.0150146484375,0.035858154296875,0.058441162109375,0.0230712890625,-0.017242431640625,-0.04608154296875,0.061065673828125,-0.034027099609375,0.102783203125,-0.0168914794921875,-0.08819580078125,-0.01192474365234375,-0.06829833984375,0.06591796875,0.04144287109375,0.01248931884765625,-0.086669921875,-0.08184814453125,-0.0256500244140625,-0.08685302734375,-0.09027099609375,0.0322265625,-0.03155517578125,0.028717041015625,-0.060455322265625,-0.04266357421875,-0.0179443359375,0.057220458984375,0.0672607421875,-0.015045166015625,-0.004032135009765625,-0.0445556640625,-0.048919677734375,-0.043853759765625,-0.0181121826171875,-0.00254058837890625,0.05584716796875,0.028045654296875,0.0266876220703125,0.027496337890625,0.06414794921875,-0.0292205810546875,0.0247039794921875,0.03240966796875,0.0391845703125,0.01480865478515625,0.0288848876953125,-0.04052734375,0.09521484375,0.06610107421875,-0.00850677490234375,0.00214385986328125,-0.0278167724609375,0.036590576171875,-0.0175018310546875,0.018524169921875,-0.137451171875,-0.024139404296875,-0.0272674560546875,-0.02789306640625,0.0517578125,0.0006394386291503906,0.06549072265625,0.053955078125,-0.0155029296875,0.020538330078125,0.056640625,-0.037628173828125,0.04937744140625,-0.005977630615234375,-0.0093536376953125,0.0027256011962890625,-0.0153350830078125,-0.01145172119140625,0.0186309814453125,0.060150146484375,-0.04669189453125,-0.02752685546875,0.0198516845703125,0.1048583984375,0.02484130859375,0.0296783447265625,0.0116729736328125,0.016815185546875,-0.08575439453125,-0.0005211830139160156,-0.0692138671875,-0.0288848876953125,0.01250457763671875,0.017120361328125,0.0222015380859375,-0.049591064453125,-0.04541015625,0.059906005859375,0.01181793212890625,-0.054962158203125,-0.0380859375,0.021453857421875,-0.05743408203125,-0.03717041015625,0.01490020751953125,-0.0487060546875,-0.049713134765625,0.00901031494140625,0.02764892578125,0.0259857177734375,0.106201171875,0.006229400634765625,-0.0205535888671875,0.060272216796875,0.0296630859375,-0.10260009765625,-0.1256103515625,0.0232391357421875,-0.0185699462890625,0.036346435546875,-0.0287322998046875,-0.10723876953125,0.038055419921875,-0.052703857421875,0.0251922607421875,0.0277862548828125,-0.0445556640625,-0.0307464599609375,-0.017364501953125,-0.040283203125,0.03955078125,-0.09747314453125,-0.0281829833984375,-0.11737060546875,-0.01201629638671875,-0.033905029296875,0.052947998046875,-0.0176544189453125,0.031341552734375,0.034088134765625,0.033477783203125,0.04541015625,0.0330810546875,-0.0203857421875,-0.043548583984375,-0.060943603515625,0.002986907958984375,0.04888916015625,0.031402587890625,0.01163482666015625,-0.055694580078125,0.06610107421875,0.0211181640625,-0.036163330078125]],"4803ad84843e046af3b33d47d032359b":[0.999791515643115,[0.0209808349609375,0.03839111328125,0.03350830078125,0.040771484375,0.044677734375,-0.0202484130859375,-0.0843505859375,0.1004638671875,0.052337646484375,0.032440185546875,0.0031871795654296875,0.01739501953125,0.0279998779296875,0.0227508544921875,0.05596923828125,0.03973388671875,0.02630615234375,0.01113128662109375,0.0009479522705078125,-0.006359100341796875,-0.0582275390625,0.097900390625,-0.11260986328125,-0.0240325927734375,0.10125732421875,0.062286376953125,-0.08612060546875,0.155517578125,0.015625,0.005268096923828125,-0.036224365234375,-0.02044677734375,-0.0251922607421875,0.022369384765625,0.0426025390625,0.0322265625,0.05377197265625,-0.0086669921875,0.0037097930908203125,-0.10943603515625,-0.0168609619140625,0.00372314453125,0.0299530029296875,-0.0107269287109375,0.035736083984375,-0.019805908203125,-0.017547607421875,0.0465087890625,-0.0031566619873046875,-0.07183837890625,-0.003009796142578125,0.024017333984375,0.0355224609375,-0.09368896484375,0.02734375,-0.01212310791015625,0.0364990234375,-0.0662841796875,-0.07574462890625,0.0159912109375,0.06451416015625,0.06646728515625,-0.0153350830078125,0.026580810546875,0.03948974609375,-0.092041015625,-0.0169830322265625,-0.011749267578125,0.046539306640625,-0.0124969482421875,0.018035888671875,0.0003235340118408203,-0.0294036865234375,-0.0355224609375,0.048187255859375,0.005008697509765625,0.055511474609375,-0.0743408203125,-0.01837158203125,0.005496978759765625,-0.0701904296875,-0.0625,0.001861572265625,-0.0039005279541015625,-0.08209228515625,0.05291748046875,0.0099334716796875,-0.05511474609375,0.01861572265625,0.09490966796875,0.031463623046875,0.07586669921875,0.019927978515625,-0.01108551025390625,-0.0080108642578125,0.0665283203125,0.0011587142944335938,0.0000966191291809082,0.04595947265625,0.0085601806640625,-0.0086669921875,-0.07086181640625,0.0151214599609375,-0.06085205078125,-0.05279541015625,0.0293426513671875,-0.0286102294921875,-0.0589599609375,-0.0156707763671875,0.0364990234375,-0.056396484375,0.03424072265625,-0.080810546875,0.050262451171875,0.025604248046875,-0.006313323974609375,0.07611083984375,-0.10791015625,-0.0260467529296875,-0.11053466796875,0.0215606689453125,0.048187255859375,-0.06793212890625,-0.0189208984375,-0.0274658203125,0.045013427734375,0.0310821533203125,0.053497314453125,-0.052276611328125,-0.0166168212890625,0.055419921875,0.007373809814453125,-0.05029296875,0.05902099609375,0.08721923828125,-0.024383544921875,0.0092926025390625,0.10150146484375,-0.035797119140625,-0.085205078125,0.00021278858184814453,-0.0179443359375,-0.0970458984375,-0.0082550048828125,-0.06201171875,0.0814208984375,0.02105712890625,-0.047332763671875,-0.0035839080810546875,-0.12493896484375,0.0018911361694335938,-0.00041556358337402344,0.01861572265625,0.11712646484375,-0.0208282470703125,-0.0273284912109375,0.03790283203125,0.018524169921875,-0.066162109375,0.09686279296875,-0.057281494140625,-0.01235198974609375,-0.09210205078125,-0.04095458984375,0.033782958984375,-0.0845947265625,0.0267181396484375,0.03704833984375,0.01238250732421875,0.0232696533203125,-0.06829833984375,0.10986328125,-0.005054473876953125,0.0280609130859375,0.01024627685546875,0.057373046875,-0.006023406982421875,-0.007724761962890625,0.041717529296875,0.0592041015625,-0.09576416015625,-0.007110595703125,-0.09344482421875,0.0102996826171875,0.0299072265625,0.062347412109375,-0.011688232421875,0.00800323486328125,-0.0206298828125,-0.044677734375,-0.0275115966796875,0.10772705078125,-0.049407958984375,0.0214385986328125,-0.07354736328125,0.0950927734375,-0.0285186767578125,-0.0272674560546875,0.0711669921875,0.02886962890625,0.0193634033203125,-0.05157470703125,-0.01171112060546875,0.0875244140625,0.0161895751953125,0.02325439453125,-0.048126220703125,-0.0265350341796875,0.0075531005859375,0.02105712890625,-0.01157379150390625,0.03338623046875,-0.01541900634765625,-0.0024585723876953125,-0.0272674560546875,-0.00356292724609375,-0.1077880859375,0.0185089111328125,-0.0011615753173828125,0.056427001953125,0.039154052734375,-0.01192474365234375,-0.1348876953125,-0.0260009765625,-0.11517333984375,0.0298919677734375,0.046844482421875,-0.160400390625,-0.0010747909545898438,-0.0240325927734375,0.06488037109375,-0.0163421630859375,0.0477294921875,0.0126495361328125,-0.007740020751953125,-0.04443359375,0.033355712890625,-0.022735595703125,-0.01297760009765625,-0.06396484375,0.04620361328125,-0.053070068359375,0.05572509765625,0.0022106170654296875,-0.0552978515625,-0.03253173828125,0.0005826950073242188,0.07830810546875,0.00627899169921875,-0.037750244140625,-0.1304931640625,-0.0567626953125,-0.0714111328125,-0.079345703125,-0.0260772705078125,-0.0721435546875,-0.006137847900390625,0.051300048828125,-0.0276947021484375,-0.060394287109375,-0.036163330078125,0.04315185546875,0.1649169921875,0.03082275390625,0.05853271484375,-0.0187835693359375,-0.035400390625,-0.0207977294921875,-0.048004150390625,-0.033905029296875,0.04644775390625,0.0224609375,0.003025054931640625,0.0211181640625,0.01084136962890625,-0.01422119140625,0.0038318634033203125,0.0322265625,-0.057159423828125,0.049285888671875,-0.007770538330078125,-0.1236572265625,0.08343505859375,0.0721435546875,0.00899505615234375,0.049407958984375,-0.021575927734375,0.0067291259765625,0.0133819580078125,-0.061187744140625,-0.079345703125,0.0040283203125,0.002994537353515625,-0.037261962890625,0.08306884765625,0.04791259765625,0.0303802490234375,-0.01049041748046875,-0.054931640625,-0.01239013671875,0.02069091796875,-0.052215576171875,0.03717041015625,-0.009552001953125,-0.0662841796875,-0.040618896484375,0.034912109375,-0.06256103515625,0.0396728515625,0.0108795166015625,0.0230865478515625,-0.048248291015625,-0.0023593902587890625,0.1024169921875,0.05816650390625,0.1119384765625,-0.001972198486328125,0.0095977783203125,-0.0191497802734375,-0.0014791488647460938,-0.059112548828125,0.006488800048828125,0.056915283203125,0.01105499267578125,-0.01690673828125,-0.005645751953125,-0.056884765625,0.0472412109375,-0.06182861328125,-0.0235443115234375,0.0521240234375,0.05633544921875,-0.0018625259399414062,-0.01103973388671875,-0.0223388671875,-0.050567626953125,-0.006031036376953125,0.04052734375,0.06402587890625,0.0792236328125,0.0311126708984375,0.054412841796875,-0.01250457763671875,0.05950927734375,0.00319671630859375,-0.10137939453125,-0.08807373046875,-0.02508544921875,-0.048065185546875,0.0195465087890625,0.012542724609375,-0.06304931640625,0.002048492431640625,-0.07952880859375,0.03375244140625,0.07855224609375,-0.006298065185546875,-0.0543212890625,0.041839599609375,-0.062164306640625,0.044097900390625,-0.07550048828125,0.005710601806640625,0.018402099609375,-0.029693603515625,-0.04132080078125,0.07861328125,-0.004596710205078125,-0.0008149147033691406,0.006107330322265625,0.0487060546875,0.0258331298828125,0.0287017822265625,-0.04486083984375,-0.03173828125,-0.036712646484375,-0.0018100738525390625,-0.00623321533203125,0.06268310546875,0.057037353515625,0.03973388671875,0.021575927734375,0.022674560546875,-0.0194549560546875]],"bf70ec7050d709f367edaf3c865b8597":[0.9997952262892432,[0.05535888671875,0.004150390625,0.0333251953125,0.042083740234375,0.12890625,-0.02490234375,-0.09722900390625,0.04449462890625,0.07647705078125,0.037353515625,-0.00844573974609375,0.0004940032958984375,0.0863037109375,-0.04052734375,0.0171661376953125,0.0229949951171875,0.029266357421875,0.0022830963134765625,-0.07763671875,-0.0197296142578125,0.042388916015625,-0.0665283203125,-0.0914306640625,0.0229034423828125,0.041046142578125,0.002460479736328125,-0.059967041015625,0.0421142578125,0.043731689453125,0.007396697998046875,0.025970458984375,-0.019378662109375,-0.0787353515625,-0.1502685546875,0.00994873046875,0.0089111328125,0.054840087890625,-0.003383636474609375,0.0037136077880859375,-0.078369140625,0.033935546875,0.000492095947265625,0.08636474609375,0.07464599609375,0.0279998779296875,0.023529052734375,-0.0021724700927734375,0.039520263671875,-0.06402587890625,0.004512786865234375,-0.02178955078125,-0.05853271484375,0.0684814453125,-0.091064453125,0.019256591796875,-0.014190673828125,0.0034084320068359375,-0.0262603759765625,-0.02972412109375,0.033447265625,0.0804443359375,0.0204010009765625,-0.0943603515625,0.057098388671875,0.08837890625,-0.04241943359375,-0.044525146484375,0.0189056396484375,0.060150146484375,-0.10888671875,-0.051605224609375,0.0013875961303710938,-0.005062103271484375,-0.036895751953125,-0.0182647705078125,0.032928466796875,0.06683349609375,-0.00839996337890625,0.01029205322265625,-0.01078033447265625,0.00904083251953125,-0.0472412109375,-0.014007568359375,-0.0286102294921875,-0.0040435791015625,-0.001369476318359375,-0.0247802734375,-0.042999267578125,-0.032623291015625,0.01806640625,0.03704833984375,0.031494140625,0.0135650634765625,-0.0989990234375,0.025665283203125,0.0404052734375,0.029052734375,0.005077362060546875,0.002155303955078125,0.031280517578125,-0.0791015625,-0.054840087890625,-0.0265960693359375,-0.07147216796875,-0.018768310546875,0.0943603515625,0.047760009765625,0.00638580322265625,0.0799560546875,0.0024509429931640625,-0.08245849609375,0.02294921875,-0.006649017333984375,0.0186614990234375,-0.01175689697265625,0.083984375,0.10040283203125,-0.04779052734375,0.0154266357421875,-0.03021240234375,-0.05810546875,0.02423095703125,-0.038787841796875,0.01132965087890625,0.0021572113037109375,0.03607177734375,0.061004638671875,0.040618896484375,-0.038360595703125,0.0953369140625,0.07421875,0.01059722900390625,-0.04022216796875,0.0738525390625,0.1336669921875,0.0184478759765625,-0.0276031494140625,0.1463623046875,-0.06842041015625,0.01306915283203125,0.0218048095703125,0.026824951171875,-0.03326416015625,-0.0341796875,0.02294921875,0.0308380126953125,0.0120086669921875,-0.09429931640625,-0.046234130859375,-0.081787109375,0.052825927734375,-0.006023406982421875,0.07940673828125,0.095703125,-0.066650390625,-0.06317138671875,0.04736328125,-0.027984619140625,0.0596923828125,0.10650634765625,-0.11468505859375,-0.01248931884765625,-0.0758056640625,-0.093017578125,0.0186767578125,-0.1246337890625,0.0103607177734375,0.0958251953125,0.0361328125,-0.016632080078125,0.01453399658203125,0.0780029296875,-0.044891357421875,0.033294677734375,0.019866943359375,0.0369873046875,-0.041473388671875,0.0118560791015625,-0.01462554931640625,0.05047607421875,0.0088958740234375,0.0192413330078125,-0.09100341796875,-0.022979736328125,-0.0108489990234375,0.0450439453125,0.00027108192443847656,-0.104248046875,0.068603515625,-0.003696441650390625,-0.050872802734375,0.03436279296875,-0.01267242431640625,-0.036895751953125,0.04498291015625,0.0304718017578125,-0.0484619140625,-0.00492095947265625,0.07666015625,-0.06549072265625,-0.052520751953125,-0.07171630859375,0.0209808349609375,0.114990234375,-0.032012939453125,0.11883544921875,-0.0254669189453125,-0.031494140625,-0.01439666748046875,-0.05963134765625,-0.01383209228515625,0.029205322265625,0.03436279296875,0.0050811767578125,-0.028594970703125,0.0092926025390625,-0.040130615234375,0.04180908203125,0.0032939910888671875,0.12939453125,0.0168304443359375,-0.04339599609375,-0.09698486328125,-0.05133056640625,-0.033538818359375,-0.01059722900390625,0.13427734375,-0.0882568359375,0.006542205810546875,0.005115509033203125,0.039093017578125,-0.003780364990234375,0.0190887451171875,-0.069580078125,0.06829833984375,-0.041595458984375,0.057647705078125,-0.0269317626953125,-0.1026611328125,-0.031036376953125,-0.0457763671875,0.052459716796875,0.08349609375,-0.009521484375,-0.03179931640625,-0.06732177734375,0.0244293212890625,0.07501220703125,-0.032867431640625,-0.00012069940567016602,-0.022247314453125,-0.01500701904296875,-0.03802490234375,-0.080078125,-0.002719879150390625,0.04052734375,0.04052734375,0.042083740234375,-0.0240936279296875,-0.01502227783203125,-0.016204833984375,0.053314208984375,0.0706787109375,-0.044769287109375,0.0577392578125,-0.04705810546875,-0.07073974609375,0.021270751953125,-0.059417724609375,0.011016845703125,0.0222930908203125,-0.0123138427734375,-0.0411376953125,-0.005828857421875,-0.0836181640625,-0.042724609375,0.091064453125,0.02960205078125,0.01184844970703125,-0.0128173828125,0.0396728515625,-0.029022216796875,0.10723876953125,0.06427001953125,0.02484130859375,-0.027801513671875,0.018646240234375,0.072998046875,0.041015625,0.0132293701171875,-0.088134765625,-0.00745391845703125,0.0103302001953125,0.0233917236328125,0.05255126953125,-0.011260986328125,0.019805908203125,-0.030242919921875,-0.0665283203125,-0.025146484375,0.0589599609375,-0.07269287109375,0.0010004043579101562,-0.0098724365234375,-0.056365966796875,-0.033111572265625,0.0253753662109375,0.0369873046875,-0.00909423828125,0.07489013671875,0.00859832763671875,-0.0020542144775390625,-0.017730712890625,0.04718017578125,0.0288238525390625,0.03448486328125,0.0596923828125,0.0211639404296875,-0.12127685546875,0.01611328125,-0.0340576171875,0.0064544677734375,0.01207733154296875,-0.052459716796875,0.03228759765625,-0.0004622936248779297,-0.07366943359375,0.0556640625,-0.0187225341796875,-0.040435791015625,-0.0002474784851074219,-0.0032939910888671875,-0.033355712890625,-0.06134033203125,-0.07061767578125,-0.0595703125,-0.03924560546875,-0.032073974609375,0.04315185546875,-0.010467529296875,0.0224609375,-0.0125885009765625,-0.0033206939697265625,-0.034759521484375,-0.056427001953125,-0.0197296142578125,-0.05535888671875,0.0287933349609375,-0.0250244140625,-0.02093505859375,0.012451171875,-0.09405517578125,0.08465576171875,-0.006618499755859375,-0.03533935546875,0.022308349609375,-0.05535888671875,-0.03863525390625,0.0029449462890625,0.0178680419921875,0.032684326171875,-0.035797119140625,0.046173095703125,-0.0171966552734375,-0.08660888671875,-0.05242919921875,0.0080108642578125,0.01288604736328125,0.031829833984375,0.0465087890625,0.05230712890625,-0.0106201171875,0.0081024169921875,-0.0178680419921875,-0.024810791015625,-0.0574951171875,0.017730712890625,-0.0157012939453125,-0.038909912109375,0.0192718505859375,0.12200927734375,-0.02520751953125,0.0882568359375,-0.01374053955078125]],"163113acc2627c112602577a83b6edac":[1.0000340064677202,[-0.0167388916015625,0.04595947265625,0.0181121826171875,0.04962158203125,0.04150390625,-0.05023193359375,-0.041473388671875,0.0682373046875,0.04486083984375,0.08233642578125,-0.0007305145263671875,0.0394287109375,0.0906982421875,-0.0173187255859375,0.061004638671875,0.0416259765625,0.047271728515625,-0.0059051513671875,-0.03839111328125,-0.036376953125,0.07220458984375,-0.01357269287109375,-0.0584716796875,0.0372314453125,0.0229949951171875,0.01275634765625,0.017608642578125,0.0262451171875,0.0082855224609375,-0.01506805419921875,-0.0296783447265625,0.026763916015625,0.007904052734375,-0.06134033203125,0.060455322265625,0.05438232421875,0.058135986328125,0.0165557861328125,-0.045013427734375,-0.08197021484375,0.05499267578125,-0.029815673828125,0.07373046875,0.032470703125,-0.004123687744140625,0.0031566619873046875,0.043670654296875,0.06878662109375,-0.06781005859375,0.0174560546875,-0.0265655517578125,-0.038726806640625,0.09503173828125,-0.08270263671875,0.0221099853515625,0.005344390869140625,0.03765869140625,-0.0002658367156982422,-0.049530029296875,0.01374053955078125,0.1561279296875,0.053375244140625,-0.042388916015625,0.094970703125,0.09466552734375,-0.049957275390625,-0.046539306640625,-0.07257080078125,0.031707763671875,0.01218414306640625,0.019287109375,0.0003879070281982422,-0.0011720657348632812,-0.0537109375,-0.044586181640625,0.01187896728515625,0.0802001953125,-0.1116943359375,0.037139892578125,-0.10107421875,0.02899169921875,-0.059356689453125,-0.030303955078125,0.0177154541015625,-0.07257080078125,-0.01303863525390625,-0.0513916015625,-0.02288818359375,0.0123443603515625,-0.01052093505859375,0.01032257080078125,0.005985260009765625,-0.06048583984375,-0.050537109375,-0.1256103515625,0.043792724609375,-0.0253143310546875,0.0085906982421875,0.06866455078125,0.062408447265625,-0.048919677734375,-0.07061767578125,-0.005573272705078125,-0.06256103515625,-0.05865478515625,0.053863525390625,0.00577545166015625,-0.03228759765625,0.032440185546875,0.0259552001953125,-0.04315185546875,0.0230560302734375,0.01500701904296875,0.0159454345703125,-0.020294189453125,-0.0088653564453125,-0.03546142578125,-0.10247802734375,0.01442718505859375,-0.0745849609375,-0.007122039794921875,0.029571533203125,-0.05596923828125,0.017333984375,-0.06854248046875,0.11566162109375,0.10150146484375,0.0345458984375,-0.06378173828125,0.0665283203125,-0.0027103424072265625,0.0113983154296875,-0.036224365234375,0.07037353515625,0.11181640625,-0.0003528594970703125,-0.0021820068359375,0.0615234375,-0.038970947265625,-0.0218353271484375,0.036651611328125,-0.02325439453125,-0.0289154052734375,0.0258331298828125,-0.01245880126953125,0.00682830810546875,-0.01390838623046875,-0.09979248046875,-0.036407470703125,-0.09979248046875,0.059295654296875,0.09625244140625,0.018402099609375,0.06085205078125,-0.031890869140625,-0.005558013916015625,0.037200927734375,0.025543212890625,-0.026824951171875,0.1162109375,-0.052337646484375,0.0132904052734375,-0.057952880859375,-0.07330322265625,0.038970947265625,-0.042236328125,0.05303955078125,0.0119476318359375,0.04754638671875,-0.0108489990234375,-0.051544189453125,0.06854248046875,-0.07232666015625,-0.003170013427734375,-0.021484375,0.05859375,-0.0309295654296875,-0.012664794921875,0.0220489501953125,0.047607421875,0.00554656982421875,0.040863037109375,-0.09100341796875,0.0223236083984375,-0.00507354736328125,0.0621337890625,0.02117919921875,-0.033935546875,0.0753173828125,-0.0202789306640625,-0.07427978515625,0.043243408203125,0.062164306640625,-0.0638427734375,-0.0249786376953125,0.0294952392578125,-0.05902099609375,0.01441192626953125,0.0189208984375,-0.047515869140625,-0.004619598388671875,0.00949859619140625,0.061981201171875,0.051422119140625,0.029754638671875,0.10430908203125,-0.07244873046875,0.00946807861328125,-0.016082763671875,-0.02813720703125,-0.05035400390625,0.0186767578125,0.01247406005859375,-0.0004367828369140625,-0.0022525787353515625,-0.01380157470703125,-0.0221710205078125,0.01548004150390625,-0.10345458984375,0.1649169921875,0.097412109375,-0.007904052734375,-0.09893798828125,0.006557464599609375,-0.086181640625,-0.0166778564453125,0.066162109375,-0.114990234375,-0.05010986328125,-0.0298309326171875,0.0579833984375,0.01251983642578125,0.021728515625,-0.029296875,0.01241302490234375,0.0005240440368652344,0.037567138671875,0.038604736328125,-0.058258056640625,-0.03790283203125,0.0301666259765625,-0.03155517578125,0.035400390625,-0.0309295654296875,-0.076416015625,-0.0787353515625,-0.02398681640625,0.07330322265625,-0.010650634765625,-0.005268096923828125,0.0232391357421875,-0.07958984375,-0.01068878173828125,-0.03192138671875,-0.07177734375,0.0262451171875,-0.00547027587890625,0.006572723388671875,-0.09405517578125,-0.00238037109375,0.04937744140625,0.06494140625,0.032470703125,-0.01263427734375,0.035980224609375,-0.027191162109375,-0.0645751953125,-0.017730712890625,-0.0462646484375,0.04364013671875,0.044647216796875,0.03741455078125,0.008819580078125,0.052520751953125,0.06658935546875,-0.026580810546875,0.0670166015625,0.057159423828125,0.0611572265625,-0.027557373046875,-0.03997802734375,0.0036487579345703125,0.08050537109375,0.10498046875,-0.006267547607421875,0.0007891654968261719,-0.032562255859375,0.07159423828125,0.027740478515625,-0.0108489990234375,-0.09033203125,-0.060028076171875,-0.0162506103515625,-0.00980377197265625,0.1317138671875,-0.05926513671875,0.029205322265625,0.0772705078125,-0.0352783203125,0.031951904296875,0.002216339111328125,-0.07086181640625,0.03094482421875,0.012115478515625,-0.06036376953125,-0.04315185546875,-0.0235748291015625,-0.0345458984375,0.0302276611328125,0.03570556640625,-0.059600830078125,-0.00913238525390625,-0.029693603515625,0.06756591796875,0.054962158203125,0.09344482421875,0.0004343986511230469,0.0216217041015625,-0.08123779296875,-0.0133819580078125,-0.048095703125,-0.004077911376953125,-0.0166778564453125,0.0286102294921875,-0.0179290771484375,-0.021575927734375,-0.0875244140625,0.033966064453125,0.045989990234375,-0.046234130859375,-0.029815673828125,-0.04571533203125,-0.0418701171875,-0.0149383544921875,0.0330810546875,-0.10479736328125,-0.0264892578125,-0.031402587890625,0.08056640625,0.025177001953125,0.0673828125,0.05438232421875,0.004833221435546875,0.0169830322265625,0.01416015625,-0.0899658203125,-0.1378173828125,0.041656494140625,-0.00962066650390625,-0.022186279296875,-0.005527496337890625,-0.086669921875,0.052001953125,-0.0247650146484375,-0.07879638671875,-0.033294677734375,-0.0631103515625,-0.01383209228515625,-0.025360107421875,-0.018768310546875,0.01519775390625,-0.045867919921875,-0.0008687973022460938,-0.060272216796875,-0.057281494140625,-0.05560302734375,0.027740478515625,-0.0019683837890625,0.0287322998046875,0.0609130859375,0.08905029296875,0.059112548828125,-0.042236328125,-0.072509765625,-0.0011663436889648438,-0.053375244140625,-0.0301666259765625,0.0270233154296875,-0.0087127685546875,0.0267333984375,0.024200439453125,0.02313232421875,0.06591796875,-0.033447265625]],"5883ef0265c795329291772ad145f25f":[1.00011496015857,[0.0167236328125,0.0260009765625,0.07904052734375,0.01904296875,0.0615234375,-0.026214599609375,-0.072021484375,0.0288543701171875,0.04644775390625,0.0235748291015625,-0.0352783203125,0.020660400390625,0.09185791015625,-0.028594970703125,0.0256195068359375,0.09637451171875,0.0293731689453125,-0.0028324127197265625,-0.037200927734375,0.02459716796875,0.0264739990234375,0.030731201171875,-0.07769775390625,-0.0180511474609375,0.06048583984375,0.049835205078125,-0.051483154296875,0.12744140625,0.042724609375,-0.039581298828125,-0.0045166015625,-0.043609619140625,-0.031524658203125,-0.0673828125,0.062286376953125,0.028411865234375,0.06048583984375,0.002803802490234375,0.0163421630859375,-0.09429931640625,0.04443359375,-0.0024852752685546875,0.029022216796875,0.031707763671875,0.0270843505859375,-0.039093017578125,0.006317138671875,0.060302734375,-0.0265350341796875,-0.018585205078125,-0.02093505859375,0.00983428955078125,0.03485107421875,-0.1270751953125,0.05157470703125,0.042205810546875,0.0195465087890625,-0.0043792724609375,-0.0051727294921875,-0.006694793701171875,0.099853515625,0.050750732421875,-0.045684814453125,0.0860595703125,0.08880615234375,-0.03271484375,-0.08551025390625,-0.0111083984375,-0.01055145263671875,-0.00693511962890625,-0.01154327392578125,-0.0297088623046875,0.052947998046875,-0.031494140625,0.0209808349609375,-0.021209716796875,0.049774169921875,-0.0770263671875,-0.05267333984375,-0.0587158203125,-0.045318603515625,-0.051849365234375,-0.0478515625,0.01080322265625,-0.086181640625,0.042755126953125,0.017425537109375,0.0011997222900390625,-0.006977081298828125,0.037322998046875,0.040679931640625,0.09307861328125,0.0306243896484375,-0.02496337890625,-0.06292724609375,0.0732421875,0.01047515869140625,-0.0291900634765625,0.0721435546875,0.039764404296875,-0.062225341796875,-0.021331787109375,-0.00724029541015625,-0.02691650390625,0.00553131103515625,0.062744140625,-0.053680419921875,-0.07940673828125,0.05670166015625,-0.01358795166015625,-0.04742431640625,-0.008392333984375,-0.043548583984375,0.040496826171875,-0.01904296875,0.0252532958984375,0.038604736328125,-0.095458984375,0.033203125,-0.1212158203125,0.057769775390625,0.035675048828125,-0.06463623046875,-0.045684814453125,-0.056732177734375,0.040985107421875,0.0308990478515625,0.0181427001953125,-0.04217529296875,-0.01140594482421875,0.0885009765625,-0.0237884521484375,-0.014984130859375,0.038360595703125,0.08465576171875,-0.054412841796875,0.00748443603515625,0.1104736328125,-0.0631103515625,-0.043609619140625,-0.0243072509765625,0.0275421142578125,-0.09967041015625,0.00031447410583496094,0.004261016845703125,0.04864501953125,0.0274200439453125,-0.058013916015625,0.01094818115234375,-0.14404296875,0.0017766952514648438,-0.0289154052734375,0.053436279296875,0.058258056640625,-0.04150390625,-0.0615234375,0.044281005859375,0.0233612060546875,-0.043243408203125,0.1641845703125,-0.1282958984375,0.0206298828125,-0.0799560546875,0.01293182373046875,0.0665283203125,-0.05462646484375,0.06475830078125,0.07440185546875,0.00403594970703125,-0.0018472671508789062,-0.0462646484375,0.11041259765625,-0.0489501953125,0.022613525390625,0.04278564453125,0.018402099609375,-0.00336456298828125,-0.0144805908203125,-0.01157379150390625,0.09039306640625,-0.054046630859375,0.0675048828125,-0.06927490234375,0.04327392578125,0.033447265625,0.086181640625,-0.0027103424072265625,-0.01348876953125,0.046295166015625,-0.0288543701171875,-0.09210205078125,0.0836181640625,-0.06329345703125,0.0396728515625,-0.0196075439453125,0.069580078125,-0.0304107666015625,-0.00792694091796875,0.0271759033203125,0.0083770751953125,0.0232696533203125,-0.037109375,0.00016188621520996094,0.06298828125,0.041656494140625,0.085693359375,-0.052001953125,-0.03155517578125,-0.05084228515625,0.005466461181640625,-0.036407470703125,0.031494140625,-0.028411865234375,-0.004581451416015625,-0.047454833984375,0.01119232177734375,-0.0989990234375,0.0080108642578125,-0.00820159912109375,0.0791015625,0.087158203125,-0.0164031982421875,-0.1461181640625,0.009246826171875,-0.0706787109375,0.024658203125,0.04193115234375,-0.14208984375,-0.074462890625,-0.0301971435546875,0.07208251953125,-0.005512237548828125,0.039154052734375,0.057220458984375,-0.0149688720703125,-0.040740966796875,0.08123779296875,-0.0006971359252929688,-0.06903076171875,-0.0304107666015625,0.01493072509765625,0.0141754150390625,0.042205810546875,-0.024139404296875,-0.0280303955078125,-0.0496826171875,0.01383209228515625,0.1107177734375,0.0184478759765625,-0.0233612060546875,-0.06256103515625,-0.08087158203125,-0.09735107421875,-0.0255126953125,-0.058074951171875,-0.0572509765625,0.01348876953125,0.0243988037109375,-0.09466552734375,-0.0333251953125,-0.0171356201171875,0.04266357421875,0.10955810546875,0.01357269287109375,0.0338134765625,-0.04302978515625,-0.0751953125,0.0078887939453125,-0.040252685546875,0.01001739501953125,0.045928955078125,-0.0092620849609375,-0.01555633544921875,0.0267181396484375,0.0122222900390625,0.0186614990234375,0.0665283203125,0.006687164306640625,0.00432586669921875,0.0303802490234375,0.08050537109375,-0.0711669921875,0.10198974609375,0.047576904296875,0.01555633544921875,0.03314208984375,-0.08673095703125,-0.0231475830078125,-0.0196990966796875,-0.055908203125,-0.09442138671875,-0.0042724609375,-0.0209197998046875,-0.0265350341796875,0.058746337890625,-0.01377105712890625,0.0208740234375,-0.00791168212890625,0.01050567626953125,-0.018585205078125,0.04132080078125,-0.084228515625,0.034271240234375,0.0108184814453125,-0.046417236328125,-0.08087158203125,-0.004550933837890625,-0.030181884765625,-0.02130126953125,0.0279083251953125,0.004581451416015625,-0.0304107666015625,-0.0027217864990234375,0.07757568359375,0.021575927734375,0.04119873046875,0.00722503662109375,0.015655517578125,-0.04180908203125,-0.013946533203125,-0.060394287109375,0.025665283203125,0.02557373046875,-0.0367431640625,0.006023406982421875,0.0172119140625,-0.041351318359375,0.0537109375,-0.00724029541015625,-0.0206298828125,-0.0304412841796875,-0.0026950836181640625,0.00559234619140625,-0.0208740234375,0.0190582275390625,-0.042144775390625,-0.04547119140625,0.0267486572265625,0.08160400390625,0.0307769775390625,0.002899169921875,0.035400390625,-0.0134124755859375,0.0662841796875,-0.057464599609375,-0.0906982421875,-0.1080322265625,0.00337982177734375,0.00638580322265625,-0.0206298828125,0.004146575927734375,-0.040618896484375,-0.0080413818359375,-0.06829833984375,-0.0338134765625,0.0740966796875,-0.1038818359375,-0.00861358642578125,0.0352783203125,-0.0399169921875,0.005596160888671875,-0.106201171875,-0.00791168212890625,-0.0177001953125,-0.032623291015625,-0.012420654296875,0.07464599609375,0.05218505859375,-0.0128326416015625,0.0205841064453125,0.00989532470703125,0.036712646484375,-0.02618408203125,-0.039154052734375,0.027801513671875,-0.045196533203125,-0.015716552734375,-0.035614013671875,0.059295654296875,0.09112548828125,0.08050537109375,0.013458251953125,0.0350341796875,-0.00984954833984375]],"a7e82c4eb3e192f780bb2fbe19411782":[1.0000656457958144,[-0.020721435546875,-0.01384735107421875,0.0066680908203125,0.110107421875,0.066162109375,-0.060516357421875,-0.070556640625,0.08404541015625,0.0267333984375,0.09307861328125,0.0229034423828125,0.002162933349609375,0.04901123046875,0.0213623046875,0.01537322998046875,-0.0282745361328125,0.039703369140625,-0.007221221923828125,-0.0302734375,-0.057159423828125,0.04388427734375,0.010284423828125,-0.06671142578125,-0.0196075439453125,0.033599853515625,0.029510498046875,-0.01116180419921875,0.0670166015625,0.04522705078125,0.04058837890625,-0.0338134765625,-0.033416748046875,-0.10968017578125,-0.01100921630859375,0.0196380615234375,0.0791015625,0.0125274658203125,-0.0202789306640625,-0.023956298828125,-0.035247802734375,0.047119140625,-0.0850830078125,0.04034423828125,0.0188140869140625,-0.0374755859375,-0.004974365234375,-0.00467681884765625,0.04510498046875,-0.0117340087890625,0.00927734375,-0.06719970703125,-0.0531005859375,0.11029052734375,-0.09759521484375,-0.0345458984375,0.0154571533203125,0.0199737548828125,-0.043609619140625,-0.039398193359375,0.04937744140625,0.11444091796875,0.033660888671875,-0.051788330078125,0.06182861328125,0.10760498046875,-0.08563232421875,-0.02215576171875,-0.044586181640625,0.03240966796875,-0.08575439453125,-0.0232086181640625,-0.0447998046875,-0.0211639404296875,-0.0335693359375,-0.0008816719055175781,0.036529541015625,0.049530029296875,-0.0419921875,0.0135345458984375,-0.0576171875,-0.0384521484375,-0.05975341796875,-0.023468017578125,0.017608642578125,-0.06561279296875,-0.0304718017578125,0.00597381591796875,-0.0137176513671875,-0.036285400390625,0.016510009765625,0.0297698974609375,0.037445068359375,-0.036834716796875,0.0022602081298828125,-0.03582763671875,-0.0091400146484375,0.0082550048828125,-0.0062103271484375,0.03668212890625,0.060791015625,0.00943756103515625,-0.09722900390625,-0.045440673828125,-0.039794921875,-0.0284881591796875,0.0225830078125,0.0133209228515625,-0.089599609375,0.0283660888671875,0.0215911865234375,-0.08612060546875,0.0214385986328125,0.0014009475708007812,0.038970947265625,0.00992584228515625,0.006259918212890625,0.0156402587890625,-0.1397705078125,0.03753662109375,-0.0096435546875,0.0221099853515625,0.07470703125,-0.06011962890625,-0.0009670257568359375,-0.083740234375,0.105712890625,0.076904296875,0.04388427734375,-0.09521484375,0.056243896484375,0.057464599609375,0.09942626953125,0.01342010498046875,0.05889892578125,-0.030548095703125,0.0183258056640625,0.027130126953125,0.04583740234375,-0.0188446044921875,-0.08697509765625,0.0002715587615966797,0.031768798828125,-0.013763427734375,-0.033355712890625,-0.0276641845703125,0.10797119140625,-0.00432586669921875,-0.1141357421875,-0.0347900390625,-0.0615234375,-0.048828125,0.055389404296875,0.050872802734375,0.0709228515625,-0.033966064453125,-0.09979248046875,0.08892822265625,0.014129638671875,-0.07635498046875,0.063232421875,-0.07171630859375,0.08148193359375,-0.09820556640625,-0.101806640625,0.0025730133056640625,-0.0411376953125,0.0296630859375,0.06622314453125,0.0113525390625,-0.009552001953125,-0.0201873779296875,0.06329345703125,-0.0240631103515625,-0.00794219970703125,-0.0171051025390625,0.0440673828125,-0.09759521484375,-0.02630615234375,0.05950927734375,0.00910186767578125,-0.0186920166015625,0.047943115234375,-0.103759765625,0.0313720703125,0.0202484130859375,0.05743408203125,-0.0028209686279296875,-0.04071044921875,0.040313720703125,-0.0189056396484375,-0.11370849609375,0.048980712890625,0.0576171875,-0.0926513671875,-0.0592041015625,0.07366943359375,-0.0435791015625,-0.0238189697265625,0.044342041015625,-0.05804443359375,0.0712890625,-0.0166015625,0.050994873046875,0.04522705078125,0.07403564453125,0.06854248046875,-0.0235595703125,0.0187530517578125,-0.0094757080078125,0.05438232421875,0.0261993408203125,0.045257568359375,0.02215576171875,-0.00592803955078125,-0.01123046875,-0.019012451171875,-0.00494384765625,-0.0011491775512695312,-0.03216552734375,0.12457275390625,0.03631591796875,0.0131988525390625,-0.0830078125,-0.04705810546875,-0.07940673828125,0.00904083251953125,0.0019664764404296875,-0.1361083984375,-0.06842041015625,0.02294921875,0.06689453125,0.03759765625,0.008453369140625,-0.01300048828125,0.0015773773193359375,0.060943603515625,0.08648681640625,0.039947509765625,0.0175933837890625,-0.006420135498046875,0.001270294189453125,-0.0270233154296875,0.0014066696166992188,-0.03607177734375,-0.00859832763671875,0.0089111328125,-0.0615234375,0.038970947265625,0.0093994140625,0.035491943359375,-0.07373046875,-0.04803466796875,-0.002101898193359375,-0.058013916015625,-0.09539794921875,0.006916046142578125,0.00540924072265625,0.0018138885498046875,-0.0838623046875,-0.05853271484375,0.01324462890625,0.08734130859375,0.077392578125,-0.005268096923828125,0.0218353271484375,-0.040374755859375,-0.059295654296875,-0.0129241943359375,0.029327392578125,-0.0009732246398925781,0.043731689453125,0.0196075439453125,0.0035343170166015625,0.03204345703125,-0.043243408203125,0.0261993408203125,0.09503173828125,0.047393798828125,0.0013952255249023438,0.03118896484375,0.01214599609375,-0.066650390625,0.12445068359375,0.005218505859375,-0.03692626953125,0.0273284912109375,0.04266357421875,-0.01666259765625,0.06622314453125,-0.01183319091796875,-0.09228515625,-0.04150390625,-0.03851318359375,-0.01058197021484375,0.12286376953125,-0.01465606689453125,0.052581787109375,0.03955078125,0.05078125,-0.0186614990234375,0.11114501953125,0.0278778076171875,0.02215576171875,0.043670654296875,0.03900146484375,-0.043365478515625,-0.0167388916015625,-0.00543212890625,-0.03265380859375,0.044189453125,-0.06573486328125,-0.045257568359375,0.0012598037719726562,0.0697021484375,-0.018585205078125,0.01129150390625,0.01715087890625,0.0738525390625,-0.08062744140625,0.026397705078125,-0.055755615234375,0.0011949539184570312,0.021820068359375,-0.025146484375,-0.0107269287109375,-0.08270263671875,-0.058441162109375,0.05010986328125,-0.00013649463653564453,-0.0213623046875,-0.05596923828125,0.01751708984375,-0.048431396484375,-0.033203125,-0.023345947265625,-0.035400390625,-0.0108795166015625,0.0623779296875,-0.0253448486328125,0.00432586669921875,0.0667724609375,0.0265960693359375,0.0022945404052734375,-0.0263824462890625,-0.004833221435546875,-0.036407470703125,-0.11962890625,0.0247039794921875,-0.05999755859375,0.0070648193359375,-0.0238494873046875,-0.09808349609375,-0.0291595458984375,-0.045806884765625,-0.0080718994140625,0.00612640380859375,-0.061737060546875,-0.034423828125,-0.035247802734375,-0.0361328125,0.047943115234375,-0.11383056640625,0.00757598876953125,-0.07879638671875,-0.06671142578125,-0.02587890625,0.05517578125,-0.0010395050048828125,0.0273895263671875,0.053009033203125,0.06207275390625,0.038360595703125,0.06939697265625,0.0038318634033203125,0.038055419921875,-0.0184173583984375,-0.00765228271484375,0.08294677734375,0.03863525390625,0.07757568359375,0.05572509765625,0.0269775390625,0.042388916015625,-0.0201263427734375]],"a6fb16ab6210e4e160e6e4c54afbb948":[0.9997669267060901,[-0.00672149658203125,0.0012025833129882812,-0.01018524169921875,0.0771484375,0.081298828125,0.00850677490234375,-0.0094146728515625,0.052215576171875,0.0322265625,0.0545654296875,0.0148468017578125,-0.001983642578125,0.10394287109375,0.0060882568359375,0.003650665283203125,0.07965087890625,0.0450439453125,-0.015228271484375,-0.01392364501953125,0.0450439453125,0.045257568359375,-0.00978851318359375,-0.0657958984375,0.015594482421875,0.027801513671875,0.021148681640625,-0.0189971923828125,0.1285400390625,0.031982421875,-0.0023651123046875,0.019744873046875,-0.053863525390625,0.0023441314697265625,0.0160675048828125,0.04296875,0.046600341796875,0.055419921875,0.050811767578125,-0.058074951171875,-0.130126953125,0.002155303955078125,-0.03704833984375,0.0770263671875,-0.007801055908203125,-0.039215087890625,0.0313720703125,0.05792236328125,-0.004428863525390625,-0.0699462890625,0.0259246826171875,-0.0218963623046875,-0.007259368896484375,0.03472900390625,-0.09820556640625,0.01904296875,-0.016448974609375,0.00970458984375,-0.041290283203125,-0.037628173828125,-0.064453125,0.09576416015625,0.0213165283203125,-0.1121826171875,0.060272216796875,0.138916015625,-0.0947265625,-0.0413818359375,0.006023406982421875,0.0245361328125,-0.06097412109375,0.0596923828125,-0.0297393798828125,0.029083251953125,0.004665374755859375,0.0028667449951171875,-0.028656005859375,0.048675537109375,-0.135498046875,0.0419921875,-0.039031982421875,-0.036590576171875,-0.05560302734375,-0.09259033203125,-0.02532958984375,0.00229644775390625,0.039093017578125,0.0379638671875,-0.0219268798828125,-0.0013875961303710938,0.01540374755859375,0.026885986328125,0.0831298828125,-0.02874755859375,-0.049713134765625,-0.046844482421875,0.004154205322265625,0.01139068603515625,-0.01157379150390625,0.09576416015625,0.076171875,-0.0038814544677734375,-0.1529541015625,-0.006259918212890625,-0.0352783203125,-0.04327392578125,-0.00855255126953125,-0.118408203125,-0.0012760162353515625,0.0170440673828125,0.071044921875,-0.0557861328125,-0.0450439453125,-0.00408935546875,0.0123138427734375,-0.008544921875,-0.03662109375,0.01467132568359375,-0.047271728515625,-0.0203857421875,-0.06463623046875,-0.04986572265625,0.05511474609375,0.0011386871337890625,-0.021759033203125,-0.08709716796875,0.056610107421875,0.054473876953125,0.00940704345703125,-0.047760009765625,0.005619049072265625,-0.040679931640625,-0.01552581787109375,-0.048187255859375,0.09918212890625,0.060516357421875,-0.060699462890625,0.028228759765625,0.06964111328125,-0.0372314453125,-0.03826904296875,0.0168914794921875,-0.033416748046875,-0.0213470458984375,0.028350830078125,-0.0277099609375,0.0596923828125,0.023773193359375,-0.08447265625,-0.03338623046875,-0.09698486328125,0.0345458984375,0.08026123046875,0.0200958251953125,0.04937744140625,-0.04205322265625,-0.0197601318359375,0.012603759765625,0.0875244140625,-0.05535888671875,0.1259765625,-0.0251922607421875,0.08294677734375,-0.045745849609375,-0.15771484375,0.058868408203125,0.0260467529296875,0.057861328125,0.0223846435546875,0.00920867919921875,0.0062713623046875,-0.042266845703125,0.1317138671875,-0.006938934326171875,0.017333984375,-0.013916015625,0.004150390625,-0.0079803466796875,0.0141448974609375,0.07025146484375,-0.01171112060546875,0.005710601806640625,-0.0217437744140625,-0.061492919921875,-0.0732421875,-0.027587890625,0.06597900390625,0.0028972625732421875,-0.0135955810546875,0.056488037109375,0.0369873046875,-0.03375244140625,0.075927734375,-0.003162384033203125,-0.0546875,-0.06182861328125,0.039794921875,-0.01299285888671875,-0.024993896484375,-0.0176849365234375,-0.05877685546875,0.09295654296875,0.002475738525390625,0.013275146484375,0.03448486328125,0.061065673828125,0.03717041015625,-0.0304107666015625,-0.00775909423828125,-0.018463134765625,-0.0104217529296875,-0.03851318359375,-0.0007386207580566406,-0.063232421875,0.0450439453125,0.0188140869140625,-0.06964111328125,-0.0115203857421875,0.00672149658203125,-0.0625,0.0706787109375,0.005275726318359375,-0.0221405029296875,-0.10882568359375,-0.00485992431640625,-0.09832763671875,0.0323486328125,0.026641845703125,-0.0977783203125,-0.0400390625,-0.0465087890625,0.0860595703125,0.034759521484375,0.013702392578125,-0.043243408203125,0.0287017822265625,-0.00323486328125,0.0911865234375,-0.01300048828125,-0.01088714599609375,0.0223541259765625,0.10894775390625,-0.020843505859375,0.0628662109375,-0.01047515869140625,0.0088043212890625,-0.07049560546875,-0.005859375,0.059173583984375,-0.00531005859375,-0.0212249755859375,-0.08416748046875,-0.0828857421875,-0.015106201171875,-0.03778076171875,0.0032978057861328125,0.01983642578125,-0.051055908203125,0.0518798828125,-0.09490966796875,-0.06915283203125,0.07122802734375,0.05718994140625,0.11212158203125,0.05877685546875,0.0247039794921875,-0.030364990234375,-0.039886474609375,-0.03509521484375,0.03436279296875,0.061309814453125,0.023101806640625,0.01715087890625,0.019317626953125,0.007465362548828125,0.050750732421875,-0.000049948692321777344,0.06915283203125,0.0391845703125,0.050811767578125,0.0083465576171875,-0.0196380615234375,-0.04315185546875,0.057708740234375,0.0291595458984375,-0.037445068359375,0.00833892822265625,-0.019805908203125,0.040008544921875,0.062103271484375,-0.03778076171875,-0.0943603515625,-0.0250396728515625,-0.031280517578125,-0.039642333984375,0.1319580078125,-0.05340576171875,0.037628173828125,0.011260986328125,-0.015045166015625,-0.007659912109375,0.11322021484375,-0.05657958984375,-0.004497528076171875,0.01506805419921875,-0.005970001220703125,-0.05841064453125,-0.0323486328125,0.00445556640625,0.001430511474609375,0.0238494873046875,-0.009002685546875,-0.049072265625,0.00414276123046875,0.0584716796875,0.057098388671875,0.018280029296875,0.036529541015625,0.0161895751953125,-0.087158203125,0.005481719970703125,-0.01568603515625,0.064697265625,-0.023101806640625,-0.020294189453125,-0.06365966796875,-0.055877685546875,-0.07196044921875,0.1124267578125,0.0156707763671875,-0.045501708984375,-0.0190887451171875,-0.017913818359375,-0.05010986328125,-0.053802490234375,0.006488800048828125,-0.023193359375,-0.04241943359375,-0.0191650390625,0.00533294677734375,0.0189666748046875,0.01314544677734375,-0.01904296875,0.02618408203125,0.004108428955078125,-0.0212860107421875,-0.03472900390625,-0.097900390625,0.035552978515625,-0.0283355712890625,0.0517578125,-0.00809478759765625,-0.1287841796875,0.03302001953125,-0.00335693359375,0.01372528076171875,-0.05517578125,-0.042083740234375,0.051483154296875,-0.006725311279296875,-0.07147216796875,0.026641845703125,-0.0574951171875,-0.00609588623046875,-0.036712646484375,-0.064208984375,-0.0816650390625,-0.014190673828125,0.052276611328125,0.039093017578125,-0.013671875,0.07220458984375,0.05206298828125,0.058197021484375,-0.037322998046875,-0.042999267578125,0.018768310546875,-0.057525634765625,0.036102294921875,0.05010986328125,0.1065673828125,0.041168212890625,0.040740966796875,0.026580810546875,-0.0194549560546875]],"a3e3a9298cc139f91ba0f4e801a8954d":[0.9997987664251377,[0.0865478515625,-0.0256195068359375,-0.048736572265625,0.050567626953125,0.1416015625,0.003265380859375,0.0037384033203125,0.059051513671875,0.0306396484375,0.020538330078125,-0.0245208740234375,-0.01186370849609375,0.035552978515625,-0.042938232421875,0.026275634765625,0.0208587646484375,0.0299530029296875,0.0212860107421875,-0.07037353515625,-0.035247802734375,0.052520751953125,-0.07891845703125,-0.045318603515625,0.025909423828125,0.0021820068359375,0.01416778564453125,-0.03277587890625,0.11077880859375,0.07110595703125,-0.0504150390625,-0.03631591796875,-0.08154296875,-0.051055908203125,-0.02532958984375,0.03778076171875,0.08203125,0.002681732177734375,0.01413726806640625,0.045745849609375,-0.1263427734375,0.0882568359375,-0.041900634765625,0.08807373046875,0.03424072265625,-0.0287933349609375,0.0057525634765625,0.046142578125,-0.002838134765625,-0.08660888671875,0.07550048828125,-0.015625,0.005893707275390625,0.095458984375,-0.068359375,-0.0190277099609375,-0.01348114013671875,0.000530242919921875,-0.035400390625,-0.03485107421875,0.033935546875,0.052581787109375,-0.01190185546875,-0.00771331787109375,0.05859375,0.03509521484375,-0.1279296875,0.0014543533325195312,-0.040863037109375,0.059051513671875,0.005340576171875,0.01560211181640625,-0.00830078125,-0.03759765625,-0.072509765625,0.003936767578125,-0.03448486328125,0.07244873046875,-0.045928955078125,0.046112060546875,-0.056884765625,0.021636962890625,-0.036895751953125,-0.00940704345703125,-0.038482666015625,-0.0938720703125,-0.0023708343505859375,-0.00901031494140625,0.035675048828125,-0.032623291015625,-0.01125335693359375,0.07281494140625,0.0247344970703125,-0.08013916015625,0.01462554931640625,0.03570556640625,-0.02960205078125,-0.05706787109375,0.031829833984375,0.09063720703125,0.076904296875,0.0250091552734375,-0.0284423828125,0.0011234283447265625,-0.0162811279296875,0.0099029541015625,0.0721435546875,-0.006305694580078125,-0.055694580078125,-0.05224609375,0.0293426513671875,-0.09222412109375,0.032012939453125,-0.00852203369140625,-0.0206146240234375,-0.0164947509765625,-0.044647216796875,0.06671142578125,-0.049346923828125,0.0333251953125,-0.07208251953125,-0.0281982421875,0.0248260498046875,-0.06396484375,-0.0073089599609375,-0.08465576171875,0.07763671875,0.05889892578125,0.045806884765625,0.01995849609375,0.0247802734375,0.03839111328125,0.0193023681640625,-0.068359375,0.01268768310546875,0.045928955078125,0.0188140869140625,0.016082763671875,0.090087890625,-0.06927490234375,-0.1448974609375,-0.0157928466796875,0.0261688232421875,-0.060699462890625,0.007350921630859375,0.0012922286987304688,0.050872802734375,0.016845703125,-0.04443359375,0.0157928466796875,-0.01143646240234375,0.01470184326171875,0.06951904296875,0.057861328125,-0.013458251953125,-0.0005993843078613281,-0.032501220703125,-0.0213623046875,0.0299530029296875,-0.08514404296875,0.11187744140625,-0.06817626953125,0.05670166015625,-0.07861328125,-0.07568359375,0.0477294921875,-0.04107666015625,0.032928466796875,0.07659912109375,-0.0855712890625,-0.09527587890625,0.09710693359375,0.12200927734375,0.0141143798828125,0.042327880859375,-0.0266265869140625,0.0675048828125,-0.11541748046875,-0.02166748046875,0.002529144287109375,0.01020050048828125,-0.056304931640625,0.007110595703125,-0.05377197265625,-0.006404876708984375,0.039459228515625,0.07550048828125,0.0208892822265625,0.01276397705078125,0.02166748046875,-0.01898193359375,-0.07080078125,0.03662109375,-0.01824951171875,-0.047607421875,-0.08685302734375,0.0345458984375,-0.0207672119140625,-0.01837158203125,0.036102294921875,-0.058349609375,0.042083740234375,-0.036529541015625,0.0049896240234375,0.10992431640625,0.055877685546875,0.01242828369140625,0.004535675048828125,-0.02618408203125,-0.072509765625,-0.07293701171875,-0.038970947265625,-0.0156402587890625,-0.02703857421875,0.03936767578125,0.02349853515625,0.0205078125,-0.024383544921875,0.0129852294921875,-0.100341796875,0.1319580078125,0.04486083984375,0.016265869140625,-0.07501220703125,-0.0902099609375,-0.045135498046875,-0.0369873046875,0.0024261474609375,-0.11334228515625,-0.0144195556640625,0.06005859375,0.0675048828125,0.0528564453125,0.0030384063720703125,-0.0009293556213378906,0.03399658203125,0.03424072265625,0.11553955078125,-0.06365966796875,-0.045989990234375,-0.058197021484375,-0.0255126953125,-0.0221405029296875,-0.00872039794921875,0.04266357421875,-0.024169921875,-0.0335693359375,-0.0911865234375,0.026763916015625,-0.004852294921875,-0.025360107421875,-0.051971435546875,-0.047698974609375,-0.051116943359375,-0.1038818359375,-0.049652099609375,0.06890869140625,-0.01448822021484375,-0.004199981689453125,-0.042144775390625,0.041717529296875,0.039703369140625,0.0452880859375,0.0299835205078125,0.0098114013671875,-0.00815582275390625,-0.020355224609375,-0.059814453125,-0.0286407470703125,0.043609619140625,0.0467529296875,0.0258636474609375,0.05523681640625,-0.01251220703125,0.00803375244140625,-0.032440185546875,-0.06524658203125,0.0440673828125,0.0021305084228515625,-0.0380859375,0.00738525390625,0.0596923828125,0.00948333740234375,0.1383056640625,-0.048248291015625,0.0413818359375,0.00750732421875,-0.0306549072265625,0.039764404296875,0.06097412109375,0.06585693359375,-0.10614013671875,0.006622314453125,-0.0904541015625,-0.0277252197265625,0.033416748046875,0.0005259513854980469,0.021331787109375,0.0557861328125,0.06768798828125,-0.01306915283203125,-0.0102081298828125,-0.018524169921875,0.0029506683349609375,0.0032291412353515625,0.031951904296875,-0.03466796875,0.049224853515625,-0.03692626953125,-0.01210784912109375,0.005306243896484375,-0.02117919921875,-0.0031147003173828125,-0.0031147003173828125,0.03997802734375,0.005207061767578125,-0.0287933349609375,0.09381103515625,0.088134765625,-0.03790283203125,-0.0297393798828125,-0.0178070068359375,-0.029693603515625,0.044677734375,-0.02789306640625,-0.0232696533203125,-0.056854248046875,-0.0250701904296875,0.068603515625,0.020477294921875,-0.0782470703125,-0.00775909423828125,0.0014314651489257812,-0.0155029296875,-0.0343017578125,-0.0266876220703125,-0.1107177734375,-0.043426513671875,-0.048614501953125,0.002178192138671875,-0.051666259765625,0.061981201171875,0.041778564453125,-0.03753662109375,0.031707763671875,0.0058135986328125,-0.048126220703125,-0.09600830078125,-0.01447296142578125,-0.038604736328125,0.06561279296875,0.03961181640625,-0.10107421875,0.0550537109375,-0.049346923828125,-0.0355224609375,-0.0255889892578125,-0.01447296142578125,-0.0399169921875,-0.01245880126953125,-0.0201416015625,0.0234222412109375,-0.040283203125,0.039825439453125,-0.0511474609375,0.032440185546875,-0.0399169921875,0.040618896484375,0.01824951171875,0.08544921875,-0.0031585693359375,0.076416015625,0.059051513671875,-0.0096282958984375,0.0027141571044921875,0.00910186767578125,0.0194091796875,0.03265380859375,0.1279296875,0.06787109375,0.05328369140625,0.072265625,-0.00672149658203125,0.045989990234375,-0.051361083984375]],"edd334388e5b767324da496afca10cff":[0.9998548221008775,[0.02252197265625,-0.02850341796875,-0.0252532958984375,-0.016357421875,0.1065673828125,-0.0274505615234375,-0.0848388671875,0.08282470703125,0.0215911865234375,0.03192138671875,-0.05426025390625,-0.0198211669921875,0.0209197998046875,-0.049896240234375,0.022613525390625,0.046600341796875,0.0014705657958984375,-0.03271484375,-0.056427001953125,-0.0279998779296875,0.02880859375,-0.06036376953125,-0.034942626953125,-0.0236053466796875,0.02618408203125,-0.0229339599609375,-0.043243408203125,0.05194091796875,0.1109619140625,0.009063720703125,0.0157318115234375,-0.05487060546875,-0.1307373046875,-0.06719970703125,-0.0304718017578125,0.0413818359375,-0.0037860870361328125,-0.0953369140625,0.032958984375,-0.09295654296875,-0.0090484619140625,-0.00856781005859375,0.051239013671875,0.0303497314453125,-0.028045654296875,0.0221099853515625,0.05731201171875,-0.024566650390625,-0.005950927734375,0.01450347900390625,-0.00948333740234375,0.0364990234375,0.07708740234375,-0.01377105712890625,0.0222320556640625,-0.034820556640625,-0.0214691162109375,-0.050445556640625,0.0128631591796875,0.04669189453125,0.0204315185546875,0.031585693359375,-0.10107421875,-0.0088958740234375,0.09625244140625,-0.11236572265625,-0.0127105712890625,0.04736328125,0.10772705078125,-0.11187744140625,-0.0214996337890625,-0.00325775146484375,0.0020313262939453125,-0.04315185546875,0.0272064208984375,0.01171112060546875,0.056427001953125,-0.00771331787109375,0.023956298828125,0.047271728515625,-0.0082244873046875,-0.0450439453125,-0.0305023193359375,0.01007080078125,0.004886627197265625,0.0277557373046875,-0.0102996826171875,0.0035400390625,-0.0243988037109375,0.03900146484375,0.0064697265625,0.062225341796875,-0.0103607177734375,-0.0335693359375,0.0986328125,-0.004962921142578125,0.046783447265625,-0.0039520263671875,0.05487060546875,0.12060546875,-0.00960540771484375,-0.031280517578125,0.05621337890625,-0.07269287109375,-0.00896453857421875,0.11114501953125,0.0151214599609375,-0.054168701171875,0.00647735595703125,0.023590087890625,-0.08905029296875,0.0278167724609375,-0.06884765625,0.0156402587890625,0.08563232421875,0.036712646484375,0.125732421875,-0.0308837890625,0.0238494873046875,-0.009765625,-0.027862548828125,0.0179290771484375,-0.002750396728515625,0.059356689453125,-0.01727294921875,-0.01132965087890625,0.05328369140625,0.03271484375,-0.01531982421875,0.09014892578125,0.032440185546875,0.0193939208984375,-0.07037353515625,0.005573272705078125,0.061248779296875,0.03369140625,-0.004924774169921875,0.141357421875,-0.03594970703125,-0.049072265625,0.00849151611328125,0.0474853515625,-0.08465576171875,-0.0149078369140625,-0.0122222900390625,0.049407958984375,0.00991058349609375,-0.055419921875,0.0240325927734375,-0.00811004638671875,-0.060638427734375,-0.02984619140625,0.06756591796875,0.09576416015625,-0.055999755859375,-0.003185272216796875,0.00958251953125,-0.0110321044921875,0.0031585693359375,0.09051513671875,-0.04278564453125,0.048736572265625,-0.0799560546875,-0.1036376953125,0.01554107666015625,-0.12237548828125,-0.00110626220703125,0.0845947265625,-0.035308837890625,-0.054901123046875,0.06304931640625,0.1024169921875,-0.007419586181640625,0.0033721923828125,0.01016998291015625,0.053863525390625,-0.07952880859375,-0.024749755859375,0.01128387451171875,-0.011138916015625,-0.04248046875,-0.030242919921875,-0.06304931640625,-0.03558349609375,0.010894775390625,0.06976318359375,0.0288238525390625,-0.07452392578125,-0.0312347412109375,0.038970947265625,0.0005345344543457031,0.0853271484375,-0.0638427734375,-0.0155792236328125,-0.0124969482421875,0.0024623870849609375,-0.0190277099609375,-0.0201416015625,0.0706787109375,-0.04010009765625,0.03955078125,-0.13427734375,-0.046356201171875,0.12384033203125,-0.041961669921875,0.04949951171875,0.0390625,-0.0301513671875,-0.058319091796875,-0.0167694091796875,-0.024688720703125,0.051666259765625,-0.0007643699645996094,0.0267486572265625,-0.00047898292541503906,0.044036865234375,-0.0780029296875,0.00716400146484375,-0.0222015380859375,0.1014404296875,-0.044525146484375,-0.03863525390625,-0.060791015625,-0.101806640625,-0.01024627685546875,0.035858154296875,0.035003662109375,-0.1031494140625,0.0162506103515625,0.045166015625,0.0081634521484375,0.000827789306640625,0.0211181640625,0.000789642333984375,0.0693359375,-0.0308990478515625,0.06817626953125,-0.042144775390625,-0.0927734375,-0.06365966796875,-0.0231170654296875,-0.0202484130859375,0.06884765625,0.007595062255859375,-0.04345703125,-0.041259765625,-0.0144500732421875,0.090087890625,-0.04669189453125,-0.02142333984375,-0.06719970703125,-0.057647705078125,-0.07171630859375,-0.1441650390625,-0.04827880859375,0.042022705078125,0.04217529296875,0.0231781005859375,-0.01557159423828125,-0.0076446533203125,-0.0164337158203125,0.0118408203125,0.0224151611328125,-0.0232696533203125,0.0033416748046875,-0.10980224609375,-0.07623291015625,0.046539306640625,0.029510498046875,0.0194091796875,-0.005146026611328125,0.0006203651428222656,0.00921630859375,-0.0784912109375,-0.0311126708984375,-0.0509033203125,0.015899658203125,0.030548095703125,-0.031829833984375,0.033966064453125,0.055206298828125,-0.0134124755859375,0.1650390625,0.06378173828125,-0.0005884170532226562,-0.046478271484375,-0.008514404296875,-0.004390716552734375,0.0843505859375,0.031494140625,-0.048614501953125,0.045745849609375,-0.047760009765625,-0.0117950439453125,0.047271728515625,0.0010395050048828125,0.009063720703125,0.0089569091796875,0.0250091552734375,-0.03729248046875,0.0276031494140625,-0.0159912109375,-0.041473388671875,-0.01338958740234375,-0.038177490234375,-0.0374755859375,0.063720703125,0.0682373046875,-0.006404876708984375,0.015777587890625,-0.00498199462890625,0.0135498046875,-0.0301513671875,0.09051513671875,0.019744873046875,0.00307464599609375,0.08392333984375,0.0236968994140625,-0.109130859375,0.0426025390625,-0.058013916015625,0.00696563720703125,0.002658843994140625,-0.07000732421875,0.025604248046875,-0.028106689453125,-0.050201416015625,0.0931396484375,-0.02886962890625,0.0206298828125,0.07391357421875,0.02410888671875,-0.016143798828125,-0.0546875,-0.03753662109375,-0.11834716796875,-0.02740478515625,-0.0802001953125,-0.0036792755126953125,0.048065185546875,0.05145263671875,0.00960540771484375,-0.00357818603515625,-0.001918792724609375,-0.035888671875,-0.0877685546875,-0.07220458984375,-0.0138702392578125,-0.029998779296875,0.06292724609375,0.043914794921875,-0.07391357421875,0.036346435546875,-0.02020263671875,-0.007511138916015625,-0.061767578125,0.0362548828125,-0.062744140625,0.0275421142578125,0.057861328125,0.031036376953125,-0.024658203125,-0.0167999267578125,0.040802001953125,-0.08038330078125,-0.0222320556640625,0.016571044921875,0.05682373046875,0.031890869140625,0.08251953125,0.040985107421875,0.0250091552734375,0.0234375,-0.00011771917343139648,0.003467559814453125,-0.052581787109375,0.049713134765625,0.040679931640625,-0.019927978515625,0.0174407958984375,0.0848388671875,-0.03643798828125,0.06732177734375,0.0102386474609375]],"815f570fed7f3502fc6402c73d009860":[1.0003396715978843,[0.0236663818359375,-0.00539398193359375,-0.043487548828125,0.0238494873046875,0.10028076171875,-0.03521728515625,-0.0176849365234375,0.09832763671875,0.0119476318359375,0.0263214111328125,-0.0233612060546875,0.01251983642578125,0.0262451171875,0.0022029876708984375,0.11663818359375,0.05401611328125,0.03533935546875,-0.006622314453125,-0.0271759033203125,-0.045257568359375,0.0020351409912109375,0.006977081298828125,-0.0037059783935546875,0.055511474609375,0.048095703125,0.05718994140625,-0.0143280029296875,0.0206756591796875,0.03997802734375,-0.0269775390625,-0.035491943359375,-0.082763671875,-0.0740966796875,-0.05859375,0.052154541015625,0.07159423828125,0.0009675025939941406,0.0004515647888183594,0.0277557373046875,-0.11553955078125,0.053009033203125,-0.0694580078125,0.04681396484375,-0.002689361572265625,-0.03021240234375,-0.033447265625,0.09295654296875,0.002208709716796875,-0.042510986328125,0.06329345703125,-0.033294677734375,0.046234130859375,0.06744384765625,-0.08575439453125,0.03497314453125,-0.037261962890625,-0.002643585205078125,-0.04022216796875,0.004917144775390625,0.0243988037109375,0.10174560546875,0.035430908203125,-0.0384521484375,0.067626953125,0.08782958984375,-0.1275634765625,0.06365966796875,-0.057403564453125,0.038970947265625,-0.00830078125,-0.038238525390625,-0.00018215179443359375,-0.01910400390625,-0.034423828125,0.0104217529296875,-0.021697998046875,0.03009033203125,-0.07415771484375,0.0531005859375,-0.03302001953125,-0.0311431884765625,-0.07708740234375,-0.0731201171875,0.0185394287109375,-0.06060791015625,-0.0117950439453125,-0.0161590576171875,0.022918701171875,0.020538330078125,-0.045501708984375,0.007289886474609375,-0.00362396240234375,-0.033416748046875,-0.00959014892578125,0.008270263671875,0.0207061767578125,-0.059051513671875,0.005298614501953125,0.11529541015625,0.06915283203125,0.000782012939453125,-0.06048583984375,0.033172607421875,-0.0865478515625,-0.026641845703125,0.07574462890625,-0.0028743743896484375,-0.07122802734375,0.0174713134765625,0.05816650390625,-0.045501708984375,0.06463623046875,-0.002674102783203125,0.02423095703125,0.044158935546875,-0.027374267578125,0.0175933837890625,-0.071533203125,0.0221099853515625,-0.044403076171875,-0.01800537109375,-0.0352783203125,-0.05352783203125,-0.0517578125,-0.0672607421875,0.03631591796875,0.135498046875,0.0787353515625,0.0195159912109375,-0.0285186767578125,-0.057861328125,-0.016204833984375,-0.1151123046875,0.033935546875,0.03350830078125,0.046875,0.028411865234375,0.0831298828125,-0.06256103515625,-0.09893798828125,-0.0291595458984375,0.01399993896484375,-0.0088043212890625,0.0248260498046875,-0.0187530517578125,-0.0164794921875,0.029296875,-0.068359375,0.040496826171875,-0.00489044189453125,0.0185394287109375,0.0784912109375,0.08184814453125,0.07879638671875,0.0751953125,-0.053466796875,0.0120849609375,0.032440185546875,-0.024078369140625,0.0958251953125,-0.050140380859375,0.058929443359375,-0.05810546875,-0.05181884765625,-0.00713348388671875,0.00994873046875,0.08843994140625,0.05718994140625,-0.0307464599609375,-0.0235595703125,0.05938720703125,0.0845947265625,0.01788330078125,-0.0014171600341796875,-0.016326904296875,0.056549072265625,-0.11865234375,0.00807952880859375,0.0253753662109375,0.0133056640625,-0.07659912109375,-0.0194244384765625,-0.06878662109375,-0.005153656005859375,-0.01461029052734375,0.11187744140625,0.04486083984375,-0.0136260986328125,0.07684326171875,-0.0009136199951171875,-0.041900634765625,0.050140380859375,0.01763916015625,-0.051910400390625,-0.057525634765625,0.04583740234375,-0.053009033203125,-0.0618896484375,0.05938720703125,-0.095703125,0.07574462890625,-0.057220458984375,0.032379150390625,0.059326171875,0.03289794921875,0.058837890625,-0.06060791015625,-0.04534912109375,-0.05523681640625,-0.05865478515625,-0.037261962890625,0.01413726806640625,-0.032135009765625,0.041168212890625,-0.01114654541015625,-0.01467132568359375,-0.04119873046875,0.0274505615234375,-0.07733154296875,0.09490966796875,-0.00370025634765625,-0.00677490234375,-0.06488037109375,-0.00797271728515625,-0.048858642578125,-0.013336181640625,0.021514892578125,-0.121826171875,-0.0369873046875,0.001251220703125,0.100830078125,0.058929443359375,-0.002651214599609375,-0.00899505615234375,0.00197601318359375,-0.0129852294921875,0.027252197265625,-0.02520751953125,-0.05804443359375,-0.0855712890625,0.04046630859375,-0.043365478515625,0.044403076171875,-0.0251617431640625,-0.0185089111328125,-0.02679443359375,-0.10601806640625,0.0958251953125,0.0249176025390625,-0.01213836669921875,-0.02978515625,-0.0867919921875,-0.0259552001953125,-0.03851318359375,-0.08953857421875,0.0714111328125,0.01076507568359375,-0.001110076904296875,-0.045867919921875,0.01568603515625,0.052734375,-0.038604736328125,0.021026611328125,-0.0282745361328125,0.002902984619140625,-0.0308074951171875,-0.143310546875,-0.0367431640625,0.030517578125,0.07366943359375,0.00751495361328125,0.02947998046875,0.00669097900390625,0.0150146484375,0.04620361328125,-0.01229095458984375,0.039093017578125,0.00577545166015625,0.01214599609375,0.0290985107421875,0.00919342041015625,-0.036163330078125,0.1671142578125,0.0243682861328125,0.00852203369140625,0.0275726318359375,-0.07196044921875,0.036102294921875,0.05889892578125,-0.00380706787109375,-0.07470703125,0.037506103515625,-0.09661865234375,-0.11175537109375,0.053131103515625,0.012908935546875,0.00888824462890625,0.045379638671875,0.037628173828125,0.06317138671875,0.00653076171875,-0.059783935546875,-0.0234832763671875,0.03570556640625,0.026123046875,0.0151824951171875,0.0167388916015625,-0.014739990234375,0.016754150390625,0.040374755859375,-0.0150604248046875,-0.050445556640625,-0.019622802734375,0.047607421875,-0.009765625,-0.01288604736328125,0.048614501953125,-0.0157470703125,-0.04730224609375,-0.036956787109375,-0.05926513671875,-0.03570556640625,-0.006214141845703125,0.0294189453125,-0.0238494873046875,0.01611328125,-0.038787841796875,0.1082763671875,-0.0223846435546875,-0.030120849609375,-0.00012946128845214844,0.0265045166015625,-0.035186767578125,-0.042327880859375,0.057037353515625,-0.121337890625,-0.018768310546875,-0.01546478271484375,0.0166473388671875,0.0222625732421875,0.0511474609375,0.051361083984375,0.005008697509765625,0.0631103515625,0.037353515625,-0.08349609375,-0.09619140625,-0.029083251953125,-0.07391357421875,0.05865478515625,-0.058319091796875,-0.077392578125,0.0352783203125,-0.03436279296875,-0.01355743408203125,-0.062469482421875,-0.020263671875,-0.050262451171875,0.0232391357421875,-0.049560546875,-0.0196380615234375,-0.07275390625,0.0248565673828125,-0.0193023681640625,-0.03326416015625,-0.006259918212890625,0.002147674560546875,0.031402587890625,0.058837890625,0.045654296875,0.06475830078125,0.12274169921875,-0.051544189453125,-0.027557373046875,0.0003788471221923828,-0.035614013671875,0.039093017578125,0.10247802734375,-0.0117034912109375,0.019744873046875,0.0362548828125,0.0157623291015625,0.05279541015625,0.01380157470703125]],"6faffddc81ef57b2fa941ed3226a91b4":[1.0002255616810982,[0.004238128662109375,0.050201416015625,0.072265625,0.0198974609375,0.039764404296875,-0.00275421142578125,-0.0782470703125,0.06024169921875,0.06768798828125,-0.01282501220703125,-0.05328369140625,0.01474761962890625,0.06768798828125,0.00540924072265625,0.01125335693359375,0.0740966796875,0.0430908203125,-0.017669677734375,-0.062255859375,0.0200653076171875,-0.0121612548828125,0.064453125,-0.045013427734375,-0.042022705078125,0.04510498046875,0.004108428955078125,-0.06732177734375,0.127197265625,0.059295654296875,-0.02593994140625,0.0218963623046875,-0.0762939453125,-0.0301513671875,-0.042449951171875,0.0443115234375,0.04034423828125,0.0137481689453125,-0.039154052734375,0.0201416015625,-0.1112060546875,-0.007781982421875,-0.0264129638671875,0.049468994140625,0.00969696044921875,0.007045745849609375,0.0212554931640625,0.05242919921875,0.01348876953125,-0.019317626953125,0.0009126663208007812,-0.0258941650390625,0.056427001953125,0.03472900390625,-0.10968017578125,0.02081298828125,-0.0281219482421875,0.00827789306640625,-0.002685546875,0.00302886962890625,-0.01361846923828125,0.065185546875,0.062744140625,-0.052215576171875,0.05853271484375,0.0982666015625,-0.0771484375,-0.01265716552734375,0.02301025390625,-0.00917816162109375,-0.0452880859375,0.0164947509765625,-0.039398193359375,0.032470703125,-0.03118896484375,0.038330078125,-0.026214599609375,0.036407470703125,-0.0447998046875,-0.0124359130859375,-0.0277557373046875,-0.058990478515625,-0.07000732421875,-0.05206298828125,0.040374755859375,-0.08013916015625,0.03436279296875,0.03448486328125,0.0264129638671875,-0.01290130615234375,0.04937744140625,-0.0108489990234375,0.10736083984375,0.010498046875,-0.00836944580078125,-0.006237030029296875,0.0443115234375,0.007595062255859375,-0.0280609130859375,0.0826416015625,0.09259033203125,-0.04791259765625,-0.0287933349609375,0.0202484130859375,-0.0809326171875,0.0268707275390625,0.0611572265625,-0.033172607421875,-0.098876953125,0.035919189453125,-0.0458984375,-0.0416259765625,0.04339599609375,-0.040130615234375,0.08355712890625,0.04376220703125,0.01007843017578125,0.036712646484375,-0.1553955078125,0.058197021484375,-0.09869384765625,0.07891845703125,0.03607177734375,-0.0008373260498046875,-0.04608154296875,-0.08416748046875,0.030731201171875,0.06268310546875,0.02142333984375,-0.01383209228515625,-0.02215576171875,0.044708251953125,-0.01776123046875,-0.027557373046875,0.00826263427734375,0.0748291015625,-0.023468017578125,0.01496124267578125,0.10400390625,-0.050018310546875,-0.051849365234375,-0.0023555755615234375,-0.00943756103515625,-0.09307861328125,0.0072021484375,-0.0057373046875,0.0684814453125,0.01739501953125,-0.08050537109375,0.03497314453125,-0.1578369140625,-0.0380859375,-0.013031005859375,0.037322998046875,0.09637451171875,-0.0217132568359375,-0.08074951171875,0.04248046875,0.03057861328125,-0.0130462646484375,0.09283447265625,-0.08734130859375,0.047088623046875,-0.0946044921875,-0.02044677734375,0.0223846435546875,-0.0097808837890625,0.030670166015625,0.048980712890625,-0.0174407958984375,-0.0009984970092773438,-0.02972412109375,0.1187744140625,-0.0181732177734375,-0.017059326171875,0.0241241455078125,0.04693603515625,-0.046142578125,-0.0093536376953125,-0.0006074905395507812,0.09259033203125,-0.057586669921875,-0.007282257080078125,-0.07550048828125,0.0323486328125,-0.0210418701171875,0.083251953125,0.04443359375,-0.00353240966796875,-0.003963470458984375,0.02142333984375,-0.0157012939453125,0.0845947265625,-0.07122802734375,0.050689697265625,-0.05743408203125,0.0390625,-0.00475311279296875,-0.004787445068359375,0.037567138671875,0.0016984939575195312,0.060455322265625,-0.05267333984375,0.006603240966796875,0.07330322265625,0.053680419921875,0.058013916015625,-0.0679931640625,-0.053619384765625,-0.0650634765625,0.039703369140625,-0.022674560546875,0.055267333984375,-0.004360198974609375,0.00243377685546875,-0.029083251953125,-0.00962066650390625,-0.11358642578125,-0.03863525390625,0.021728515625,0.0467529296875,0.0031566619873046875,-0.017425537109375,-0.11981201171875,-0.0032367706298828125,-0.06439208984375,0.07806396484375,0.025726318359375,-0.09295654296875,-0.06561279296875,-0.025421142578125,0.07891845703125,-0.034210205078125,0.03533935546875,0.043548583984375,-0.006450653076171875,-0.0634765625,0.044769287109375,-0.00452423095703125,-0.06036376953125,-0.04168701171875,0.0716552734375,-0.0154876708984375,0.0143585205078125,-0.0462646484375,-0.0224456787109375,-0.03790283203125,0.005580902099609375,0.10394287109375,0.022979736328125,0.023712158203125,-0.07305908203125,-0.09454345703125,-0.050079345703125,-0.034942626953125,-0.057830810546875,-0.055084228515625,0.044097900390625,0.044830322265625,-0.09320068359375,-0.05413818359375,0.0047454833984375,-0.00574493408203125,0.103515625,0.021484375,0.0310211181640625,-0.03741455078125,-0.1387939453125,0.0177154541015625,-0.0295562744140625,0.0379638671875,0.06024169921875,-0.006137847900390625,-0.0020847320556640625,-0.0045166015625,0.04315185546875,0.0012693405151367188,0.0230712890625,0.044677734375,-0.00774383544921875,0.06280517578125,0.04229736328125,-0.069580078125,0.10467529296875,0.018798828125,0.0003097057342529297,0.0213165283203125,-0.09466552734375,-0.0372314453125,0.007808685302734375,-0.062255859375,-0.0714111328125,0.0277099609375,-0.036895751953125,-0.06390380859375,0.07183837890625,0.0011568069458007812,-0.006252288818359375,0.0201873779296875,0.004558563232421875,-0.00724029541015625,0.0195465087890625,-0.06561279296875,0.036834716796875,-0.0055084228515625,-0.083740234375,-0.0484619140625,0.04949951171875,-0.006072998046875,0.0203857421875,0.031982421875,0.01593017578125,-0.0115203857421875,-0.0153961181640625,0.0767822265625,-0.0267181396484375,0.046295166015625,0.0296630859375,-0.048309326171875,-0.036956787109375,0.013824462890625,-0.06610107421875,-0.00022590160369873047,0.0059967041015625,-0.0200347900390625,0.004909515380859375,0.03515625,-0.042510986328125,0.08782958984375,-0.0127410888671875,0.0343017578125,-0.01861572265625,0.050018310546875,-0.0034046173095703125,-0.00817108154296875,0.01934814453125,-0.061248779296875,-0.042510986328125,0.019317626953125,0.033843994140625,0.059783935546875,0.0093536376953125,0.0816650390625,-0.034332275390625,0.07965087890625,-0.0221099853515625,-0.10809326171875,-0.114013671875,-0.006195068359375,-0.01082611083984375,0.00443267822265625,0.01004791259765625,-0.06982421875,-0.011962890625,-0.0911865234375,0.006031036376953125,0.060455322265625,-0.08001708984375,-0.005126953125,0.06951904296875,-0.037261962890625,0.0011434555053710938,-0.1348876953125,-0.0286102294921875,-0.007198333740234375,-0.0643310546875,-0.034088134765625,0.030181884765625,0.042572021484375,-0.025177001953125,-0.03204345703125,0.009490966796875,0.047210693359375,-0.0159912109375,-0.0228118896484375,0.0073394775390625,-0.03515625,-0.01422882080078125,0.02154541015625,0.08612060546875,0.09759521484375,0.07427978515625,0.05816650390625,0.05596923828125,0.00592803955078125]],"ef586c0a890322cc0d74e2410f35bbd1":[0.9999839868600731,[0.04522705078125,-0.0460205078125,0.01169586181640625,0.0867919921875,0.092529296875,-0.028564453125,-0.0297393798828125,0.00980377197265625,0.01355743408203125,0.10003662109375,0.040435791015625,-0.01082611083984375,-0.06097412109375,0.0157470703125,-0.02392578125,-0.0172119140625,0.035980224609375,0.00742340087890625,-0.033782958984375,0.002948760986328125,0.0687255859375,0.003299713134765625,-0.1109619140625,0.05157470703125,-0.007480621337890625,0.006824493408203125,-0.09869384765625,0.143310546875,-0.00862884521484375,-0.0072479248046875,-0.0308380126953125,-0.050872802734375,-0.044036865234375,-0.010040283203125,0.0186004638671875,0.074462890625,0.06097412109375,-0.03802490234375,0.05548095703125,-0.08380126953125,0.036773681640625,-0.036712646484375,0.07208251953125,0.06036376953125,-0.0071868896484375,0.01230621337890625,0.054107666015625,0.043304443359375,-0.04046630859375,0.0816650390625,-0.029327392578125,-0.0161590576171875,0.05828857421875,-0.12066650390625,0.0548095703125,-0.00013625621795654297,0.05609130859375,0.005279541015625,0.009063720703125,0.028717041015625,0.08514404296875,0.049835205078125,-0.044403076171875,0.0989990234375,0.07000732421875,-0.092529296875,0.0015058517456054688,-0.0312042236328125,0.037200927734375,-0.0675048828125,0.003021240234375,0.0005102157592773438,0.01268768310546875,-0.047821044921875,0.0278167724609375,0.006481170654296875,-0.0163421630859375,-0.034515380859375,0.0009107589721679688,-0.05218505859375,0.0279083251953125,-0.0965576171875,0.0266571044921875,-0.006435394287109375,0.0011873245239257812,-0.016387939453125,-0.004817962646484375,0.021026611328125,-0.049224853515625,-0.00659942626953125,0.034698486328125,0.059600830078125,0.0012197494506835938,0.0469970703125,-0.0347900390625,0.032867431640625,-0.018951416015625,0.053070068359375,0.0904541015625,0.04754638671875,-0.031890869140625,0.01178741455078125,0.0079803466796875,-0.04443359375,-0.07794189453125,0.0711669921875,0.06396484375,-0.04595947265625,-0.056121826171875,-0.00030493736267089844,-0.09393310546875,-0.002216339111328125,-0.04840087890625,0.0211029052734375,-0.0882568359375,0.0953369140625,0.06695556640625,-0.03009033203125,-0.03424072265625,0.0156402587890625,-0.0634765625,0.03472900390625,-0.05035400390625,0.0156707763671875,-0.0325927734375,0.06866455078125,0.0202484130859375,0.025360107421875,-0.06280517578125,0.007167816162109375,0.010406494140625,0.046600341796875,-0.006000518798828125,0.024993896484375,0.082275390625,-0.05462646484375,0.021087646484375,0.1082763671875,0.01430511474609375,-0.031890869140625,-0.03216552734375,-0.007404327392578125,-0.05224609375,-0.010589599609375,-0.0290069580078125,0.07354736328125,-0.0836181640625,-0.10791015625,0.0214385986328125,-0.0157470703125,-0.0007681846618652344,0.017120361328125,-0.130126953125,0.042938232421875,-0.11053466796875,-0.018157958984375,0.041168212890625,0.0226898193359375,-0.0859375,0.10675048828125,-0.1007080078125,0.06512451171875,-0.054718017578125,-0.14990234375,0.04559326171875,0.007045745849609375,0.01145172119140625,0.056549072265625,0.03277587890625,-0.01141357421875,0.054595947265625,0.05291748046875,-0.03662109375,-0.050567626953125,-0.01030731201171875,0.0401611328125,-0.035308837890625,-0.018402099609375,-0.00859832763671875,-0.003948211669921875,0.057220458984375,0.018768310546875,-0.07391357421875,-0.034393310546875,0.0126953125,0.082763671875,-0.036376953125,-0.049896240234375,-0.0338134765625,0.0011606216430664062,-0.0290374755859375,0.059844970703125,-0.05242919921875,-0.0257568359375,-0.01296234130859375,0.035186767578125,-0.01035308837890625,-0.0015869140625,-0.011932373046875,-0.0291748046875,0.060150146484375,-0.09429931640625,0.0018825531005859375,0.08392333984375,0.045562744140625,0.0145721435546875,0.024139404296875,0.00853729248046875,-0.058929443359375,0.049713134765625,0.086669921875,0.026092529296875,0.021728515625,0.04571533203125,-0.01424407958984375,-0.053009033203125,-0.100341796875,0.0211181640625,-0.045135498046875,0.07684326171875,0.019775390625,-0.05291748046875,-0.01995849609375,-0.059478759765625,-0.08624267578125,-0.0113067626953125,-0.0251312255859375,-0.11187744140625,-0.06109619140625,0.00827789306640625,0.0760498046875,0.000011324882507324219,0.0257415771484375,-0.007720947265625,0.06707763671875,0.024627685546875,0.0953369140625,-0.0262298583984375,-0.057525634765625,-0.0712890625,-0.0155029296875,0.05401611328125,0.0198822021484375,-0.02984619140625,-0.05572509765625,-0.043304443359375,0.02593994140625,0.02508544921875,-0.038330078125,-0.04278564453125,0.00711822509765625,-0.041717529296875,-0.10711669921875,-0.0733642578125,-0.01313018798828125,0.007350921630859375,-0.0229644775390625,0.035308837890625,-0.092529296875,-0.00342559814453125,-0.028289794921875,0.041900634765625,0.03289794921875,-0.0165557861328125,-0.00305938720703125,-0.111083984375,-0.052886962890625,-0.044677734375,0.1058349609375,0.007083892822265625,0.0259857177734375,0.03338623046875,0.019195556640625,-0.0419921875,-0.007343292236328125,-0.0714111328125,0.1103515625,0.06884765625,0.032867431640625,-0.0323486328125,0.005001068115234375,-0.0103912353515625,0.08416748046875,-0.059783935546875,-0.01568603515625,0.03082275390625,-0.0083465576171875,0.0034942626953125,0.02935791015625,0.05694580078125,-0.08441162109375,0.0216522216796875,-0.09112548828125,-0.01678466796875,0.0183563232421875,-0.03240966796875,-0.001800537109375,0.02899169921875,0.0643310546875,0.0034084320068359375,0.0867919921875,-0.01233673095703125,-0.006999969482421875,-0.02496337890625,-0.0281982421875,0.00817108154296875,0.07928466796875,-0.0560302734375,0.036529541015625,0.013885498046875,0.01271820068359375,-0.032257080078125,-0.0243988037109375,0.1082763671875,-0.01264190673828125,0.044891357421875,0.034393310546875,-0.03582763671875,-0.052825927734375,0.00896453857421875,0.0438232421875,0.005817413330078125,0.04034423828125,-0.013153076171875,0.0099334716796875,-0.016082763671875,-0.0024242401123046875,0.10992431640625,-0.043853759765625,-0.0904541015625,-0.00795745849609375,0.048797607421875,-0.022613525390625,-0.0300750732421875,-0.07232666015625,-0.06939697265625,-0.0171356201171875,-0.0227203369140625,0.09527587890625,-0.04052734375,-0.00038909912109375,0.0007929801940917969,0.052703857421875,-0.0022945404052734375,-0.011932373046875,-0.0404052734375,-0.12139892578125,0.078857421875,-0.06494140625,-0.0279693603515625,-0.0192413330078125,-0.05950927734375,0.032379150390625,0.023040771484375,0.022430419921875,-0.052825927734375,0.033782958984375,0.01251983642578125,0.04327392578125,0.04473876953125,0.0205230712890625,-0.0281982421875,-0.00982666015625,-0.117431640625,-0.051422119140625,0.026123046875,0.050262451171875,-0.0252227783203125,0.058624267578125,0.064208984375,0.0489501953125,0.0158538818359375,-0.00875091552734375,-0.00846099853515625,0.022308349609375,-0.07147216796875,0.058380126953125,0.0296478271484375,0.07928466796875,0.060516357421875,0.0147552490234375,0.007663726806640625,0.054901123046875,-0.0950927734375]],"78c4f8d9eab3431ad61ce0f242ab5415":[1.0003335416219166,[0.0189971923828125,-0.06634521484375,-0.01153564453125,0.06561279296875,0.0975341796875,-0.04583740234375,-0.0594482421875,-0.00836181640625,0.025604248046875,0.1263427734375,-0.04547119140625,0.01100921630859375,-0.0145416259765625,0.08349609375,0.0224151611328125,-0.0286102294921875,0.07879638671875,-0.0257110595703125,-0.090087890625,-0.0295867919921875,0.02593994140625,-0.051788330078125,-0.068115234375,0.01297760009765625,0.0089874267578125,-0.0142822265625,-0.0556640625,0.06640625,0.0015106201171875,-0.0128936767578125,0.0718994140625,-0.038848876953125,-0.0704345703125,-0.002162933349609375,-0.029327392578125,0.05804443359375,0.027801513671875,0.052825927734375,-0.01953125,-0.1602783203125,0.00853729248046875,-0.044403076171875,0.06805419921875,0.12152099609375,-0.03656005859375,0.0176544189453125,0.0222320556640625,0.0697021484375,-0.0076141357421875,0.0036334991455078125,-0.01534271240234375,-0.025787353515625,-0.002384185791015625,-0.057037353515625,0.00417327880859375,-0.034149169921875,0.07208251953125,0.035919189453125,0.01554107666015625,0.07623291015625,0.0831298828125,0.0789794921875,-0.0281829833984375,0.06005859375,0.10052490234375,-0.050872802734375,-0.054931640625,-0.01088714599609375,0.02197265625,-0.10113525390625,-0.01094818115234375,0.0031871795654296875,0.0274658203125,0.001804351806640625,0.0014162063598632812,0.0186309814453125,0.0914306640625,-0.05120849609375,-0.0167999267578125,-0.0341796875,-0.022247314453125,-0.0692138671875,-0.05859375,0.05072021484375,-0.0382080078125,0.07177734375,0.0399169921875,-0.08575439453125,-0.04937744140625,-0.0328369140625,0.034454345703125,0.05682373046875,-0.0294189453125,0.00988006591796875,-0.0321044921875,0.033966064453125,-0.01343536376953125,-0.0257415771484375,0.0535888671875,0.00446319580078125,-0.057525634765625,-0.04864501953125,0.032745361328125,-0.041046142578125,-0.040283203125,0.0282135009765625,0.044281005859375,0.0228271484375,0.0295257568359375,0.052398681640625,-0.10595703125,0.041778564453125,-0.024444580078125,-0.01329803466796875,0.05169677734375,0.00724029541015625,0.029296875,-0.036407470703125,0.049407958984375,-0.0145721435546875,0.004108428955078125,0.01715087890625,-0.057342529296875,-0.0222625732421875,-0.060394287109375,0.04583740234375,0.1090087890625,0.05474853515625,-0.108642578125,0.09466552734375,0.042022705078125,-0.0208587646484375,-0.049468994140625,0.060272216796875,0.10809326171875,-0.04718017578125,0.05120849609375,0.07904052734375,-0.0791015625,-0.033203125,-0.0198822021484375,0.01227569580078125,0.04107666015625,0.0355224609375,-0.0772705078125,0.02685546875,-0.0217437744140625,-0.1046142578125,0.05621337890625,-0.05078125,-0.02630615234375,0.054107666015625,0.009918212890625,0.04278564453125,-0.023590087890625,-0.07708740234375,0.065673828125,0.036224365234375,-0.04425048828125,0.09808349609375,-0.0947265625,0.0259552001953125,-0.0838623046875,-0.08184814453125,-0.0141143798828125,-0.00848388671875,0.052093505859375,0.0513916015625,0.0601806640625,0.01294708251953125,0.06488037109375,0.089599609375,0.04522705078125,-0.00042748451232910156,-0.01380157470703125,0.038116455078125,-0.020294189453125,-0.0618896484375,-0.02069091796875,-0.00756072998046875,-0.0283203125,-0.03753662109375,-0.062225341796875,-0.09356689453125,-0.01044464111328125,0.0159759521484375,-0.0506591796875,-0.0672607421875,0.0045013427734375,0.044281005859375,-0.0906982421875,0.0308990478515625,-0.034942626953125,-0.0219268798828125,-0.0095977783203125,0.0673828125,0.010040283203125,-0.041595458984375,0.02716064453125,-0.06512451171875,0.024078369140625,-0.025390625,0.0498046875,0.09857177734375,0.046844482421875,-0.004116058349609375,0.051177978515625,-0.043853759765625,-0.056610107421875,0.0025577545166015625,-0.01534271240234375,0.00206756591796875,-0.0153656005859375,0.0302886962890625,-0.005733489990234375,0.01490020751953125,-0.09637451171875,-0.0106201171875,0.006526947021484375,0.0357666015625,0.01751708984375,-0.011199951171875,-0.02276611328125,-0.07415771484375,-0.052215576171875,0.025360107421875,0.048370361328125,-0.0965576171875,-0.024749755859375,0.02490234375,0.0426025390625,-0.023590087890625,0.0228729248046875,0.0011854171752929688,0.05706787109375,0.058746337890625,0.08245849609375,0.05169677734375,-0.0176544189453125,-0.03399658203125,-0.020538330078125,-0.0230865478515625,0.018157958984375,-0.051513671875,0.018310546875,-0.0283660888671875,0.042449951171875,0.0679931640625,-0.07666015625,-0.030029296875,-0.0225830078125,-0.07904052734375,-0.055816650390625,-0.057586669921875,-0.0233306884765625,-0.0004394054412841797,-0.03289794921875,0.0870361328125,-0.0762939453125,-0.0170745849609375,0.10638427734375,0.050689697265625,0.12493896484375,0.0002579689025878906,-0.0726318359375,-0.052520751953125,-0.06903076171875,-0.0849609375,0.0223541259765625,0.053924560546875,0.03009033203125,-0.0025272369384765625,-0.0208587646484375,0.0004246234893798828,-0.0762939453125,-0.0234375,0.10784912109375,0.043670654296875,-0.02740478515625,-0.0010862350463867188,-0.0455322265625,-0.0120391845703125,0.1534423828125,0.0183868408203125,0.0035266876220703125,-0.0249481201171875,-0.0030040740966796875,0.0555419921875,0.043243408203125,0.066162109375,-0.077880859375,-0.0003085136413574219,-0.050079345703125,-0.038543701171875,0.002132415771484375,-0.042236328125,-0.02752685546875,0.0267486572265625,-0.009033203125,-0.0126495361328125,0.0849609375,-0.048065185546875,-0.025787353515625,-0.0311431884765625,-0.0491943359375,-0.0215911865234375,0.097900390625,-0.029388427734375,-0.0533447265625,0.01544952392578125,0.0163421630859375,-0.04541015625,-0.0017604827880859375,0.04058837890625,-0.005283355712890625,0.037567138671875,0.0185089111328125,0.004741668701171875,-0.0020999908447265625,0.004299163818359375,0.0399169921875,-0.0308074951171875,0.052001953125,-0.068115234375,0.0290374755859375,-0.00814056396484375,-0.06365966796875,0.0960693359375,-0.052215576171875,-0.070556640625,-0.01015472412109375,0.07501220703125,-0.031524658203125,-0.0262451171875,-0.037567138671875,-0.029327392578125,-0.0880126953125,-0.0218505859375,0.034759521484375,0.046783447265625,0.048675537109375,-0.01397705078125,-0.01076507568359375,0.0076751708984375,-0.0750732421875,-0.02740478515625,-0.0965576171875,0.10174560546875,-0.0555419921875,-0.00003987550735473633,-0.01456451416015625,-0.09228515625,0.0506591796875,-0.0191192626953125,0.04705810546875,-0.0051116943359375,0.021392822265625,-0.051605224609375,0.03857421875,-0.07781982421875,0.032928466796875,-0.04443359375,-0.048858642578125,-0.03228759765625,0.058868408203125,0.019195556640625,0.0201263427734375,0.022216796875,0.05047607421875,0.020050048828125,0.07879638671875,0.03558349609375,0.04766845703125,-0.0496826171875,0.044403076171875,-0.088623046875,0.085205078125,0.03875732421875,0.037841796875,0.0306549072265625,0.0672607421875,0.002941131591796875,0.0313720703125,-0.0255279541015625]],"8fa3ccb0db0015e5729678bf219423a0":[1.0003362690720603,[0.0321044921875,-0.006221771240234375,0.006526947021484375,-0.0024566650390625,0.1085205078125,-0.061004638671875,-0.06732177734375,-0.01580810546875,0.041778564453125,0.123046875,0.00659942626953125,0.0037403106689453125,0.072265625,-0.0278167724609375,-0.054840087890625,-0.018798828125,-0.0443115234375,-0.01427459716796875,0.0170135498046875,-0.0379638671875,0.12225341796875,0.045623779296875,0.01183319091796875,-0.0171051025390625,0.0293426513671875,0.016937255859375,0.0046844482421875,0.09698486328125,0.033477783203125,-0.02581787109375,-0.03802490234375,-0.024871826171875,-0.154541015625,-0.0540771484375,0.03271484375,0.034942626953125,0.0222320556640625,-0.058502197265625,0.0030536651611328125,-0.10009765625,0.00896453857421875,-0.007251739501953125,0.0799560546875,-0.0192413330078125,0.032379150390625,0.0243377685546875,0.08709716796875,0.011688232421875,-0.033935546875,0.07525634765625,-0.0261077880859375,-0.0157318115234375,0.0511474609375,-0.09429931640625,0.071044921875,0.01001739501953125,0.0253753662109375,-0.0103607177734375,-0.054931640625,0.055084228515625,0.06988525390625,0.067626953125,-0.0869140625,-0.0163726806640625,0.09991455078125,-0.09912109375,0.03118896484375,-0.01629638671875,0.09869384765625,-0.0697021484375,-0.07183837890625,0.00789642333984375,0.06414794921875,0.02166748046875,0.0082855224609375,-0.046112060546875,-0.006122589111328125,-0.08502197265625,0.051239013671875,-0.0049591064453125,0.0004851818084716797,-0.0288848876953125,0.01947021484375,-0.03546142578125,-0.041839599609375,0.0277099609375,0.046722412109375,-0.0184783935546875,-0.06329345703125,0.052703857421875,0.051605224609375,-0.00864410400390625,0.0240631103515625,-0.003757476806640625,0.0006685256958007812,0.01503753662109375,0.00873565673828125,0.020751953125,0.0290374755859375,0.049163818359375,0.0260467529296875,-0.07037353515625,0.004169464111328125,-0.04132080078125,0.0033855438232421875,0.07183837890625,0.03314208984375,-0.051910400390625,0.050079345703125,-0.05743408203125,-0.046661376953125,-0.029388427734375,-0.0693359375,0.030364990234375,-0.00319671630859375,0.0535888671875,0.10540771484375,-0.035919189453125,0.04803466796875,-0.038482666015625,-0.0286865234375,0.03076171875,-0.052490234375,0.0145721435546875,0.0306243896484375,0.073974609375,-0.026947021484375,0.041168212890625,-0.12103271484375,0.043609619140625,0.050567626953125,-0.0269775390625,-0.071044921875,0.051116943359375,0.0011587142944335938,0.01166534423828125,0.053375244140625,0.10986328125,-0.06866455078125,-0.06121826171875,-0.039276123046875,-0.0083465576171875,-0.048309326171875,-0.01959228515625,-0.01081085205078125,0.06683349609375,0.07342529296875,-0.049560546875,0.041748046875,0.026611328125,-0.024444580078125,-0.054656982421875,0.03631591796875,0.019317626953125,-0.08343505859375,-0.01812744140625,-0.01172637939453125,0.037445068359375,0.01451873779296875,0.10699462890625,-0.052001953125,0.0256500244140625,-0.11126708984375,-0.145263671875,0.08013916015625,-0.0914306640625,0.032318115234375,0.060760498046875,0.0189666748046875,-0.008392333984375,-0.039215087890625,0.07012939453125,-0.00591278076171875,-0.004711151123046875,-0.006870269775390625,0.0433349609375,0.062744140625,0.001384735107421875,0.020965576171875,0.0183868408203125,-0.019500732421875,-0.058319091796875,-0.110107421875,-0.0701904296875,0.03729248046875,0.025238037109375,0.00911712646484375,-0.105224609375,-0.03802490234375,0.0003445148468017578,0.01232147216796875,0.0355224609375,-0.020416259765625,-0.0439453125,0.026092529296875,0.04742431640625,-0.08154296875,-0.0096282958984375,0.07672119140625,-0.016815185546875,0.01140594482421875,-0.0936279296875,0.03790283203125,0.04571533203125,0.034027099609375,0.06646728515625,0.01004791259765625,0.0316162109375,-0.02581787109375,0.032928466796875,0.0118255615234375,0.042724609375,0.030914306640625,0.0347900390625,0.024627685546875,0.048309326171875,-0.0550537109375,0.033355712890625,-0.0609130859375,0.053466796875,0.01494598388671875,-0.0282135009765625,-0.03863525390625,-0.08624267578125,-0.047882080078125,0.04522705078125,-0.006420135498046875,-0.1309814453125,0.024749755859375,-0.032562255859375,-0.04742431640625,0.0271453857421875,-0.0142364501953125,0.0711669921875,0.08941650390625,0.003814697265625,0.0369873046875,-0.0272674560546875,-0.11114501953125,-0.08685302734375,-0.0180206298828125,0.0689697265625,0.081298828125,0.042633056640625,-0.0235137939453125,-0.10009765625,0.007030487060546875,0.012359619140625,-0.0175323486328125,0.033294677734375,-0.047393798828125,-0.0264129638671875,-0.0204315185546875,-0.06756591796875,-0.0167694091796875,0.042724609375,0.03643798828125,0.0218505859375,0.033477783203125,-0.11083984375,-0.027191162109375,0.056915283203125,0.072265625,-0.051422119140625,-0.039398193359375,-0.11505126953125,0.017242431640625,-0.0284576416015625,0.0162506103515625,-0.019775390625,0.01788330078125,0.013031005859375,0.0252838134765625,-0.05938720703125,0.0024776458740234375,-0.032012939453125,0.07672119140625,0.08416748046875,0.001499176025390625,-0.072265625,-0.00606536865234375,-0.0980224609375,0.0936279296875,0.0546875,0.01071929931640625,0.0235748291015625,0.01203155517578125,0.0806884765625,0.0203399658203125,0.062225341796875,-0.12030029296875,0.039947509765625,0.00334930419921875,-0.06842041015625,0.05230712890625,-0.043853759765625,-0.0260009765625,-0.036163330078125,-0.06170654296875,-0.005207061767578125,0.0531005859375,-0.021759033203125,-0.020965576171875,-0.0113677978515625,-0.040679931640625,-0.0199432373046875,0.033233642578125,-0.0191497802734375,-0.06341552734375,-0.00417327880859375,-0.03228759765625,-0.035736083984375,-0.01059722900390625,0.07208251953125,0.04229736328125,-0.032745361328125,0.04046630859375,-0.033660888671875,-0.026580810546875,0.03375244140625,-0.033477783203125,0.0015697479248046875,0.029144287109375,-0.036407470703125,0.132568359375,-0.006359100341796875,-0.0777587890625,0.09503173828125,-0.047088623046875,0.0251312255859375,0.00310516357421875,0.033294677734375,0.0012025833129882812,-0.027923583984375,-0.0706787109375,-0.0810546875,0.0374755859375,-0.10711669921875,-0.01015472412109375,0.001354217529296875,0.02374267578125,-0.03082275390625,0.044708251953125,0.01467132568359375,-0.050567626953125,0.0005998611450195312,-0.10107421875,0.0204620361328125,-0.064697265625,-0.0220184326171875,0.029693603515625,-0.080810546875,0.0738525390625,-0.032257080078125,0.003940582275390625,0.00922393798828125,0.0008568763732910156,-0.042724609375,0.061920166015625,0.021636962890625,0.0667724609375,-0.052490234375,0.0213165283203125,0.00010752677917480469,-0.0005950927734375,-0.034210205078125,0.061492919921875,-0.0105743408203125,0.0203704833984375,0.064453125,-0.01444244384765625,-0.004878997802734375,0.01947021484375,-0.027191162109375,-0.02374267578125,0.004772186279296875,0.039703369140625,-0.022613525390625,-0.060455322265625,0.022857666015625,0.072265625,-0.017059326171875,0.057037353515625,-0.01800537109375]],"cc49432675423864851bf22df8d3012e":[0.9999258360511079,[0.0004634857177734375,0.001117706298828125,0.0108642578125,0.024444580078125,0.062469482421875,-0.08984375,-0.0009584426879882812,0.0064544677734375,-0.0015506744384765625,0.1114501953125,0.0091705322265625,0.0299530029296875,0.047210693359375,-0.0183868408203125,0.00798797607421875,-0.036865234375,0.0015668869018554688,-0.032806396484375,0.01534271240234375,-0.020294189453125,0.11077880859375,0.035797119140625,0.0014858245849609375,0.007015228271484375,0.0137481689453125,0.027191162109375,0.002147674560546875,0.100341796875,0.009979248046875,-0.040252685546875,-0.06683349609375,-0.057220458984375,-0.09368896484375,-0.01436614990234375,0.05145263671875,0.06573486328125,0.033843994140625,-0.009185791015625,-0.023956298828125,-0.129150390625,0.026580810546875,-0.03375244140625,0.11151123046875,-0.0297698974609375,0.01580810546875,0.00608062744140625,0.09857177734375,0.03448486328125,-0.043426513671875,0.0948486328125,-0.057281494140625,-0.0208282470703125,0.06610107421875,-0.07373046875,0.109619140625,-0.022186279296875,0.05645751953125,0.005344390869140625,-0.08612060546875,0.05035400390625,0.09674072265625,0.07000732421875,-0.0197296142578125,0.03790283203125,0.072998046875,-0.08221435546875,0.03863525390625,-0.02740478515625,0.082275390625,-0.0264129638671875,-0.054290771484375,0.0055999755859375,0.039794921875,0.03240966796875,0.00055694580078125,-0.0760498046875,0.01239013671875,-0.106201171875,0.054351806640625,-0.0655517578125,-0.027984619140625,-0.05230712890625,0.005855560302734375,0.0127716064453125,-0.056243896484375,0.0416259765625,0.029083251953125,-0.03509521484375,-0.05218505859375,-0.04766845703125,0.058746337890625,0.0038928985595703125,0.0004024505615234375,0.02655029296875,-0.0036220550537109375,0.02606201171875,-0.047210693359375,0.01433563232421875,0.08306884765625,0.0122528076171875,-0.0011682510375976562,-0.08544921875,-0.0174407958984375,-0.0194549560546875,-0.01214599609375,0.05145263671875,-0.0017719268798828125,-0.077880859375,0.06781005859375,0.0071563720703125,-0.0595703125,-0.0146331787109375,-0.0394287109375,0.0119476318359375,-0.0391845703125,0.0293121337890625,0.047760009765625,-0.06817626953125,0.056793212890625,-0.033782958984375,-0.0200653076171875,-0.0081634521484375,-0.08575439453125,-0.033660888671875,0.0088348388671875,0.11236572265625,0.04229736328125,0.0253753662109375,-0.12335205078125,0.0210113525390625,0.01396942138671875,-0.029022216796875,-0.049163818359375,0.079345703125,0.00194549560546875,-0.011474609375,0.05645751953125,0.05963134765625,-0.058380126953125,-0.0863037109375,-0.055877685546875,-0.03466796875,-0.00016629695892333984,-0.0201416015625,-0.0654296875,0.02313232421875,0.05450439453125,-0.08489990234375,0.0161895751953125,0.0242156982421875,0.01983642578125,-0.0027618408203125,0.03472900390625,-0.00707244873046875,-0.011260986328125,-0.05633544921875,-0.0178070068359375,0.0158538818359375,-0.050933837890625,0.14111328125,-0.0177764892578125,0.060302734375,-0.093994140625,-0.1363525390625,0.05487060546875,-0.016143798828125,0.11151123046875,0.0223236083984375,0.006557464599609375,0.0222625732421875,-0.024810791015625,0.06634521484375,-0.006412506103515625,0.018798828125,-0.041259765625,0.05682373046875,0.00786590576171875,0.0224609375,0.036376953125,0.029144287109375,-0.02093505859375,-0.03338623046875,-0.11358642578125,-0.054718017578125,0.04046630859375,0.0701904296875,0.0020542144775390625,-0.062255859375,-0.025543212890625,-0.05853271484375,-0.0245208740234375,0.039398193359375,0.01519012451171875,-0.091552734375,-0.02325439453125,0.10931396484375,-0.06915283203125,-0.0257568359375,0.05096435546875,0.01433563232421875,0.0496826171875,-0.06707763671875,0.0657958984375,0.02886962890625,0.111083984375,0.05999755859375,-0.0073089599609375,0.048980712890625,-0.0484619140625,0.07958984375,0.0277252197265625,-0.0028438568115234375,0.01544952392578125,0.0219268798828125,0.054962158203125,0.032012939453125,-0.022491455078125,0.050689697265625,-0.07855224609375,0.0662841796875,0.03472900390625,-0.021148681640625,-0.045257568359375,-0.06256103515625,-0.07366943359375,0.0294952392578125,-0.050537109375,-0.1241455078125,-0.00795745849609375,-0.00965118408203125,-0.0017328262329101562,0.047332763671875,-0.034759521484375,0.057891845703125,0.036468505859375,0.040802001953125,0.04241943359375,0.004852294921875,-0.04510498046875,-0.10150146484375,0.022857666015625,0.049591064453125,0.09320068359375,0.0175018310546875,-0.0361328125,-0.10174560546875,-0.01983642578125,-0.0322265625,0.0274658203125,0.055511474609375,-0.00974273681640625,-0.00423431396484375,-0.0022029876708984375,-0.03094482421875,-0.0955810546875,0.04718017578125,-0.00212860107421875,0.021575927734375,0.0002199411392211914,-0.067138671875,0.0084075927734375,0.053924560546875,0.07452392578125,-0.020172119140625,-0.038330078125,-0.07977294921875,-0.054718017578125,-0.03863525390625,-0.00930023193359375,0.0213470458984375,-0.01947021484375,0.050140380859375,0.0241546630859375,-0.0215911865234375,0.034393310546875,-0.028900146484375,0.09368896484375,0.0814208984375,0.02960205078125,-0.051849365234375,-0.057952880859375,-0.032073974609375,0.110107421875,0.0592041015625,0.00980377197265625,0.02740478515625,-0.03094482421875,0.0859375,0.006622314453125,0.05780029296875,-0.1121826171875,0.04852294921875,-0.04833984375,-0.08782958984375,0.07049560546875,-0.07818603515625,-0.04156494140625,0.0219268798828125,-0.0341796875,0.032470703125,0.03704833984375,-0.042572021484375,0.01134490966796875,0.0056610107421875,-0.0004248619079589844,-0.01380157470703125,0.044769287109375,-0.02935791015625,-0.043975830078125,0.0274810791015625,-0.0377197265625,-0.066650390625,0.0263824462890625,0.0850830078125,0.0650634765625,-0.0198974609375,0.032745361328125,-0.050018310546875,-0.033782958984375,0.0428466796875,-0.06103515625,-0.01282501220703125,0.0210113525390625,-0.0183868408203125,0.06842041015625,-0.014129638671875,-0.044097900390625,0.0816650390625,-0.01316070556640625,-0.0265655517578125,-0.00673675537109375,0.054840087890625,-0.0634765625,0.0061798095703125,-0.0194091796875,-0.06256103515625,0.046875,-0.06494140625,-0.00807952880859375,-0.0477294921875,0.03173828125,-0.0119171142578125,0.0154571533203125,0.058135986328125,-0.035552978515625,-0.03759765625,-0.1568603515625,0.0259857177734375,-0.0361328125,-0.0360107421875,0.0043487548828125,-0.06787109375,0.06146240234375,-0.0233612060546875,0.0205535888671875,-0.008697509765625,-0.0186920166015625,-0.06512451171875,0.005641937255859375,-0.05242919921875,0.0128631591796875,-0.060791015625,0.0024051666259765625,-0.0673828125,0.019073486328125,-0.0178375244140625,0.0670166015625,-0.01340484619140625,0.03350830078125,0.08544921875,-0.00841522216796875,0.03009033203125,0.00662994384765625,-0.0831298828125,0.00012767314910888672,-0.041168212890625,0.0298919677734375,0.0013828277587890625,-0.053436279296875,-0.0030364990234375,0.00543975830078125,0.019439697265625,0.01319122314453125,-0.04217529296875]],"49ff9486289f87cb0be0966e968f6b8d":[0.9997732553758015,[-0.0135040283203125,-0.033477783203125,0.0072479248046875,0.01317596435546875,-0.0118865966796875,-0.0050048828125,-0.0017728805541992188,0.00366973876953125,0.03045654296875,0.057281494140625,0.036773681640625,-0.0027561187744140625,0.07781982421875,0.0572509765625,0.0311431884765625,-0.01021575927734375,0.0115966796875,0.004123687744140625,-0.01776123046875,-0.0193328857421875,0.0304107666015625,-0.00907135009765625,-0.0167083740234375,0.04058837890625,0.0258331298828125,0.01166534423828125,-0.0430908203125,0.018768310546875,0.0679931640625,-0.030059814453125,-0.05450439453125,-0.061309814453125,-0.002758026123046875,-0.0008473396301269531,0.10662841796875,0.0221405029296875,0.0279541015625,0.0200042724609375,-0.04638671875,-0.0828857421875,0.00884246826171875,-0.040802001953125,-0.024871826171875,0.06201171875,-0.03277587890625,-0.04937744140625,-0.01383209228515625,-0.0001392364501953125,-0.01470184326171875,-0.035125732421875,-0.005550384521484375,-0.00251007080078125,0.05816650390625,-0.09979248046875,-0.0020694732666015625,0.0301055908203125,0.08221435546875,0.01377105712890625,0.0247039794921875,0.07177734375,0.057159423828125,0.0206451416015625,-0.1087646484375,0.04296875,0.054901123046875,-0.061798095703125,-0.003997802734375,-0.043914794921875,0.10443115234375,-0.09844970703125,0.0205230712890625,-0.074951171875,-0.030609130859375,0.035064697265625,0.044647216796875,-0.0182037353515625,-0.00948333740234375,0.0239105224609375,0.057586669921875,-0.051055908203125,-0.021514892578125,0.0242767333984375,-0.042083740234375,0.0087738037109375,-0.10894775390625,0.044830322265625,-0.0211639404296875,0.0125885009765625,0.0091400146484375,0.036895751953125,0.018096923828125,0.033538818359375,-0.09857177734375,0.018768310546875,-0.045654296875,0.04083251953125,0.00978851318359375,-0.0063323974609375,0.0645751953125,0.0174407958984375,-0.00994110107421875,-0.1024169921875,-0.00502777099609375,-0.09918212890625,-0.0193634033203125,0.0570068359375,0.01470947265625,-0.006916046142578125,0.0263214111328125,0.040008544921875,-0.022552490234375,-0.0194244384765625,-0.010162353515625,-0.04302978515625,0.060455322265625,0.0167999267578125,0.029998779296875,-0.056884765625,0.033599853515625,-0.0811767578125,-0.00762939453125,0.027191162109375,-0.11474609375,-0.055572509765625,-0.06396484375,0.038299560546875,0.06561279296875,0.0755615234375,-0.09417724609375,0.05975341796875,-0.006305694580078125,0.0053863525390625,-0.040740966796875,0.1527099609375,0.09686279296875,-0.028228759765625,-0.04180908203125,0.09033203125,-0.043670654296875,0.0186920166015625,0.0406494140625,-0.042022705078125,-0.0005717277526855469,0.000035703182220458984,-0.033538818359375,0.0697021484375,-0.0193328857421875,-0.1302490234375,0.0650634765625,-0.0916748046875,-0.00072479248046875,0.0142822265625,0.08154296875,-0.027191162109375,-0.0472412109375,-0.029541015625,0.04449462890625,0.049102783203125,-0.04376220703125,0.15478515625,-0.05426025390625,0.034881591796875,-0.11065673828125,-0.0970458984375,0.091552734375,-0.0134735107421875,0.115234375,0.0212249755859375,-0.01245880126953125,0.01404571533203125,0.03509521484375,0.1417236328125,0.0221099853515625,0.005878448486328125,-0.0219573974609375,0.0927734375,-0.0614013671875,-0.058349609375,0.0230712890625,0.011566162109375,0.0087432861328125,0.02593994140625,-0.049102783203125,0.01067352294921875,0.0153656005859375,0.0660400390625,-0.0703125,0.049224853515625,-0.037628173828125,0.0196380615234375,0.0152435302734375,0.047698974609375,0.06268310546875,-0.08056640625,-0.0276641845703125,0.0758056640625,-0.039764404296875,-0.08831787109375,-0.0005125999450683594,-0.0227813720703125,0.08135986328125,-0.054534912109375,0.023681640625,0.07415771484375,-0.009674072265625,-0.027801513671875,0.0233001708984375,-0.0279541015625,-0.057586669921875,-0.0021724700927734375,0.017303466796875,-0.0034160614013671875,-0.0703125,-0.008453369140625,0.0034732818603515625,0.0189666748046875,-0.09307861328125,0.0053253173828125,-0.08587646484375,0.08355712890625,0.0113372802734375,-0.0248565673828125,-0.029815673828125,0.0136260986328125,-0.0196990966796875,0.01995849609375,0.06854248046875,-0.163330078125,-0.04864501953125,0.05462646484375,0.08355712890625,0.048309326171875,0.040985107421875,0.038238525390625,0.032440185546875,0.004322052001953125,0.0399169921875,0.0227813720703125,-0.019134521484375,-0.11578369140625,0.021759033203125,-0.021820068359375,0.03887939453125,-0.03448486328125,-0.0228271484375,-0.04461669921875,0.0242767333984375,0.059722900390625,-0.0159759521484375,-0.0199737548828125,0.0017099380493164062,-0.0516357421875,-0.0294189453125,-0.0706787109375,-0.0205078125,0.08447265625,0.00013053417205810547,0.0305938720703125,-0.0296783447265625,-0.02508544921875,-0.0014896392822265625,-0.031341552734375,0.01421356201171875,-0.0099945068359375,-0.026763916015625,-0.0972900390625,-0.04833984375,-0.00400543212890625,0.08660888671875,0.045806884765625,0.0196533203125,0.03460693359375,-0.0229644775390625,-0.00446319580078125,0.008209228515625,-0.042083740234375,0.0400390625,0.054412841796875,0.0196685791015625,-0.051605224609375,-0.052337646484375,-0.0089874267578125,0.13427734375,0.0207061767578125,-0.07305908203125,0.06756591796875,-0.0247039794921875,-0.0311279296875,0.1170654296875,-0.0218963623046875,-0.075439453125,0.0555419921875,0.05352783203125,-0.00247955322265625,0.06390380859375,-0.0003249645233154297,0.0657958984375,-0.051727294921875,-0.03729248046875,0.0108642578125,0.08660888671875,-0.08416748046875,0.0567626953125,-0.032562255859375,0.0126800537109375,0.023681640625,0.022186279296875,0.0287322998046875,-0.0400390625,0.08404541015625,-0.0015869140625,-0.0084075927734375,-0.036590576171875,-0.01019287109375,-0.06024169921875,0.0009593963623046875,-0.027008056640625,0.026824951171875,-0.051605224609375,-0.031829833984375,-0.0110015869140625,-0.0255279541015625,0.039886474609375,-0.060455322265625,-0.025665283203125,-0.013092041015625,-0.023040771484375,0.08868408203125,0.0460205078125,0.057037353515625,0.0194244384765625,-0.004856109619140625,-0.059417724609375,0.0157318115234375,-0.0234375,-0.06719970703125,-0.0517578125,0.044097900390625,-0.0261077880859375,-0.03277587890625,0.03399658203125,0.0709228515625,-0.0146636962890625,0.0452880859375,0.01483917236328125,-0.06011962890625,-0.10345458984375,0.04010009765625,-0.036285400390625,-0.0025653839111328125,-0.05096435546875,-0.09893798828125,0.06646728515625,-0.032684326171875,-0.044464111328125,0.0347900390625,-0.04541015625,-0.0997314453125,-0.056671142578125,-0.0802001953125,-0.03192138671875,-0.06072998046875,0.05047607421875,0.0168914794921875,-0.04986572265625,0.05029296875,-0.014739990234375,0.03289794921875,0.09271240234375,-0.0036754608154296875,0.03271484375,-0.002750396728515625,0.0869140625,-0.086181640625,-0.01367950439453125,-0.052703857421875,0.033233642578125,0.005893707275390625,-0.017608642578125,0.032501220703125,0.06695556640625,-0.0081329345703125,0.016693115234375,0.01519775390625]],"a48169f8d45b497076fc671092c0a4b2":[1.0000439267832926,[-0.0479736328125,0.0176239013671875,0.0275115966796875,-0.0677490234375,-0.034942626953125,-0.06341552734375,0.0167694091796875,0.09478759765625,0.0170135498046875,0.031463623046875,0.0053253173828125,-0.00890350341796875,0.061248779296875,-0.021087646484375,0.0584716796875,-0.0071868896484375,-0.0207061767578125,0.01210784912109375,0.056182861328125,-0.035064697265625,0.055450439453125,0.016448974609375,-0.0037078857421875,-0.007152557373046875,0.06787109375,-0.0086822509765625,-0.008270263671875,0.0458984375,0.04473876953125,-0.01548004150390625,0.0156707763671875,-0.0311126708984375,-0.06591796875,0.0244140625,0.12347412109375,0.037109375,0.06756591796875,-0.0070953369140625,0.00522613525390625,-0.08721923828125,-0.0167694091796875,-0.016998291015625,0.056060791015625,0.0782470703125,-0.0270538330078125,-0.042572021484375,0.0194854736328125,-0.0367431640625,-0.00653076171875,0.019287109375,0.01459503173828125,-0.058441162109375,0.04931640625,-0.0970458984375,0.037872314453125,0.0302276611328125,0.054412841796875,-0.0037174224853515625,0.036895751953125,-0.0142974853515625,0.1123046875,0.054473876953125,-0.09332275390625,0.037445068359375,0.0062713623046875,-0.048004150390625,0.027862548828125,-0.0256500244140625,0.0908203125,-0.0182647705078125,0.053619384765625,-0.07867431640625,-0.0026264190673828125,0.0304107666015625,0.11614990234375,-0.07061767578125,0.0438232421875,-0.0182647705078125,0.02752685546875,-0.0816650390625,-0.03753662109375,0.0102691650390625,-0.049041748046875,-0.03875732421875,-0.09271240234375,0.00759124755859375,-0.007061004638671875,-0.032257080078125,-0.028656005859375,0.056060791015625,0.0216522216796875,0.0364990234375,-0.010467529296875,0.0136871337890625,-0.02606201171875,0.0201263427734375,0.019012451171875,-0.0240020751953125,0.052337646484375,-0.0260162353515625,-0.006832122802734375,-0.06793212890625,0.0156707763671875,-0.07574462890625,-0.0987548828125,0.047332763671875,-0.0185089111328125,-0.0161285400390625,0.0170745849609375,0.029266357421875,-0.0307159423828125,0.028656005859375,-0.07073974609375,-0.031646728515625,0.045623779296875,-0.051177978515625,0.044281005859375,-0.0733642578125,-0.0023403167724609375,-0.076416015625,-0.03192138671875,-0.04229736328125,-0.0225982666015625,-0.01006317138671875,-0.057861328125,-0.0017948150634765625,0.09423828125,0.0418701171875,-0.06512451171875,-0.006317138671875,-0.0103302001953125,-0.00923919677734375,-0.1146240234375,0.0653076171875,0.082275390625,-0.03948974609375,-0.0190277099609375,0.09820556640625,0.00188446044921875,0.0117340087890625,0.05987548828125,-0.0139923095703125,-0.01392364501953125,0.00392913818359375,-0.0261077880859375,0.05804443359375,0.05908203125,-0.0723876953125,0.049102783203125,-0.07171630859375,-0.06512451171875,0.014312744140625,-0.004199981689453125,0.039947509765625,-0.06109619140625,0.00604248046875,0.01277923583984375,0.0643310546875,-0.07061767578125,0.11260986328125,-0.04937744140625,0.05523681640625,-0.0616455078125,-0.07611083984375,0.10107421875,-0.00228118896484375,0.0191650390625,0.0292816162109375,0.0107269287109375,0.0352783203125,-0.017333984375,0.1820068359375,-0.04705810546875,-0.03363037109375,-0.01129913330078125,0.11761474609375,-0.040679931640625,-0.06451416015625,-0.03375244140625,0.03656005859375,-0.01386260986328125,0.0144500732421875,-0.06500244140625,0.037689208984375,-0.00484466552734375,0.0845947265625,-0.01256561279296875,0.006866455078125,-0.05718994140625,-0.0226593017578125,-0.042694091796875,0.10369873046875,0.04852294921875,-0.04034423828125,-0.1053466796875,0.0288848876953125,-0.07586669921875,-0.06884765625,0.03692626953125,-0.03509521484375,0.0570068359375,-0.0202789306640625,0.055328369140625,0.10919189453125,-0.0751953125,0.047698974609375,-0.048736572265625,-0.01230621337890625,-0.0379638671875,-0.035614013671875,-0.06109619140625,0.0631103515625,-0.044189453125,-0.01824951171875,-0.0308837890625,0.00021255016326904297,-0.12744140625,-0.004581451416015625,-0.043701171875,0.0357666015625,0.05279541015625,-0.034515380859375,-0.12139892578125,-0.0254974365234375,-0.058441162109375,0.03985595703125,0.035552978515625,-0.12158203125,-0.024505615234375,0.0224456787109375,0.08782958984375,0.06268310546875,0.05328369140625,0.01043701171875,-0.003833770751953125,0.0162506103515625,0.0755615234375,0.0076141357421875,0.0166473388671875,-0.1094970703125,0.06219482421875,-0.01042938232421875,0.053192138671875,-0.032958984375,0.0256805419921875,-0.006549835205078125,0.00965118408203125,0.09100341796875,0.0229339599609375,0.01468658447265625,-0.08404541015625,-0.05804443359375,-0.037872314453125,-0.0227508544921875,-0.00948333740234375,0.0194854736328125,-0.03216552734375,-0.0305328369140625,0.0310516357421875,-0.043670654296875,0.0140228271484375,0.039306640625,0.038299560546875,0.073974609375,0.006595611572265625,-0.033843994140625,-0.068359375,0.00925445556640625,0.02716064453125,0.0477294921875,0.0272064208984375,0.05596923828125,-0.0330810546875,-0.0228729248046875,0.0966796875,-0.0771484375,0.032928466796875,0.09619140625,-0.006572723388671875,0.032073974609375,-0.044525146484375,-0.00632476806640625,0.10589599609375,0.08843994140625,-0.02490234375,0.049957275390625,-0.0377197265625,-0.004474639892578125,0.004261016845703125,-0.004863739013671875,-0.0986328125,0.061431884765625,-0.004680633544921875,-0.0157012939453125,0.07958984375,0.00019431114196777344,0.03057861328125,-0.0643310546875,-0.06512451171875,-0.0015411376953125,0.02850341796875,-0.09674072265625,-0.01953125,-0.0484619140625,-0.0252227783203125,-0.056549072265625,0.0213470458984375,-0.0107269287109375,0.004253387451171875,0.04290771484375,-0.0014190673828125,-0.0013437271118164062,-0.07537841796875,0.023834228515625,0.0103302001953125,0.06451416015625,0.01163482666015625,-0.01204681396484375,-0.053802490234375,-0.0277557373046875,0.00897216796875,0.004840850830078125,0.0687255859375,0.0631103515625,-0.033447265625,-0.0188446044921875,-0.033294677734375,0.0679931640625,0.0120391845703125,0.060516357421875,0.0203857421875,0.0220947265625,-0.03521728515625,0.0012607574462890625,0.072509765625,-0.1097412109375,-0.04949951171875,0.061492919921875,0.05224609375,0.0791015625,0.041229248046875,0.042022705078125,-0.000518798828125,0.058929443359375,0.00008535385131835938,-0.1309814453125,-0.1275634765625,0.032806396484375,-0.057891845703125,0.01898193359375,-0.007549285888671875,-0.043060302734375,-0.01210784912109375,-0.0224609375,-0.04254150390625,0.018035888671875,0.0159912109375,-0.07135009765625,-0.040374755859375,-0.11578369140625,-0.01251983642578125,-0.01898193359375,0.030364990234375,0.03875732421875,-0.08966064453125,-0.0017347335815429688,0.01374053955078125,0.00740814208984375,0.043487548828125,-0.0045928955078125,-0.034088134765625,0.016571044921875,0.052032470703125,-0.06982421875,-0.06195068359375,-0.03082275390625,-0.007045745849609375,-0.0304107666015625,0.045501708984375,0.00824737548828125,0.027252197265625,-0.0098114013671875,0.0168609619140625,-0.01256561279296875]],"b5c9a556d8dbfcfe6a3b58bcf2fa86f6":[0.999734913474794,[-0.005863189697265625,-0.06732177734375,0.0058135986328125,0.05291748046875,0.0965576171875,-0.051116943359375,0.04266357421875,0.0631103515625,0.0229644775390625,0.01457977294921875,-0.0239105224609375,-0.0518798828125,0.0792236328125,-0.0211181640625,0.050201416015625,-0.0159454345703125,0.0026531219482421875,-0.0004553794860839844,-0.02740478515625,-0.050140380859375,0.10028076171875,0.0004546642303466797,0.012939453125,-0.0231781005859375,0.0297393798828125,0.0070037841796875,-0.009185791015625,0.04931640625,0.043121337890625,-0.0225372314453125,-0.091552734375,-0.0797119140625,-0.00489044189453125,0.0025501251220703125,0.11480712890625,0.06317138671875,0.03424072265625,-0.013427734375,0.009246826171875,-0.11572265625,0.08270263671875,0.00249481201171875,0.028045654296875,0.08123779296875,-0.048431396484375,-0.029571533203125,0.03753662109375,0.00354766845703125,-0.0537109375,0.0251617431640625,-0.022796630859375,-0.0198822021484375,0.10162353515625,-0.101318359375,0.0217132568359375,0.0155029296875,0.00550079345703125,-0.05914306640625,-0.03912353515625,0.058074951171875,0.150146484375,0.0423583984375,-0.06304931640625,0.02532958984375,0.068115234375,-0.1273193359375,0.01451873779296875,-0.0657958984375,0.057708740234375,-0.041259765625,0.0313720703125,-0.0479736328125,-0.06884765625,0.013214111328125,0.055877685546875,-0.0217132568359375,0.019927978515625,-0.03497314453125,0.029388427734375,-0.075927734375,-0.031585693359375,-0.016448974609375,-0.041778564453125,0.03106689453125,-0.080322265625,0.037689208984375,-0.0308837890625,-0.018463134765625,0.0088653564453125,0.021575927734375,0.0152740478515625,0.042388916015625,-0.034393310546875,-0.006175994873046875,-0.036346435546875,0.06182861328125,0.00025272369384765625,-0.0411376953125,0.09881591796875,-0.0028018951416015625,-0.017120361328125,-0.08160400390625,-0.01503753662109375,-0.0828857421875,-0.0924072265625,0.0772705078125,0.0248565673828125,-0.022552490234375,-0.0364990234375,0.0094757080078125,-0.07843017578125,-0.005279541015625,-0.0086822509765625,0.054962158203125,0.004230499267578125,-0.0077972412109375,-0.01357269287109375,-0.1019287109375,0.03936767578125,-0.07147216796875,0.0212554931640625,0.035919189453125,-0.0946044921875,-0.02923583984375,-0.0948486328125,0.04638671875,0.0858154296875,0.06817626953125,-0.010955810546875,0.0213775634765625,-0.011993408203125,0.02978515625,-0.04254150390625,0.1295166015625,0.09075927734375,-0.00907135009765625,0.0219268798828125,0.02593994140625,-0.10955810546875,-0.0203704833984375,0.0325927734375,0.007137298583984375,0.0197906494140625,0.00864410400390625,0.004390716552734375,0.04510498046875,0.01221466064453125,-0.10211181640625,0.017181396484375,-0.0323486328125,0.0188751220703125,0.02349853515625,0.07049560546875,0.034912109375,-0.01142120361328125,-0.022705078125,0.07550048828125,0.0210723876953125,-0.08770751953125,0.125244140625,-0.024017333984375,0.06866455078125,-0.1370849609375,-0.091552734375,0.019775390625,-0.005947113037109375,0.057525634765625,0.039154052734375,-0.0374755859375,-0.01169586181640625,-0.035064697265625,0.1158447265625,-0.0177154541015625,-0.001842498779296875,-0.00519561767578125,0.052093505859375,-0.1278076171875,-0.055267333984375,0.060546875,0.039825439453125,-0.034454345703125,0.040374755859375,-0.07135009765625,-0.00823211669921875,-0.006038665771484375,0.031097412109375,-0.011932373046875,0.05096435546875,-0.00603485107421875,0.023529052734375,-0.041107177734375,0.053070068359375,0.04388427734375,-0.07244873046875,-0.08477783203125,0.06085205078125,-0.0643310546875,-0.021575927734375,0.033966064453125,-0.054779052734375,0.0158538818359375,-0.0784912109375,0.01100921630859375,0.040771484375,0.043365478515625,0.0259246826171875,-0.024810791015625,0.0226898193359375,-0.028472900390625,0.01299285888671875,0.0188140869140625,0.029449462890625,-0.0279693603515625,-0.048187255859375,-0.06353759765625,0.06268310546875,-0.056671142578125,0.0230255126953125,-0.0570068359375,0.12139892578125,0.0606689453125,-0.035400390625,-0.0340576171875,-0.05029296875,-0.029541015625,-0.0115509033203125,0.00856781005859375,-0.1329345703125,-0.06427001953125,-0.00536346435546875,0.08563232421875,0.07757568359375,0.0149383544921875,-0.0316162109375,-0.039764404296875,0.0198516845703125,-0.01229095458984375,0.0268402099609375,0.0115966796875,-0.06591796875,0.0855712890625,-0.051666259765625,0.0277099609375,-0.06243896484375,0.0064697265625,-0.06536865234375,-0.052825927734375,0.03045654296875,0.029632568359375,0.04669189453125,-0.017303466796875,-0.090576171875,0.03900146484375,-0.06463623046875,-0.06085205078125,0.031158447265625,0.0220794677734375,-0.0008664131164550781,-0.0114288330078125,-0.01611328125,0.01299285888671875,-0.005558013916015625,0.004161834716796875,-0.00521087646484375,0.011932373046875,-0.03265380859375,-0.056365966796875,0.0174560546875,0.0306396484375,0.027862548828125,-0.0282440185546875,0.08465576171875,0.01043701171875,0.0190277099609375,0.051666259765625,-0.055572509765625,0.08367919921875,0.07208251953125,-0.0130615234375,0.005596160888671875,0.061737060546875,0.00356292724609375,0.1173095703125,0.049560546875,-0.039520263671875,-0.0010538101196289062,-0.0634765625,-0.046661376953125,0.0167083740234375,-0.0372314453125,-0.12432861328125,0.00007218122482299805,-0.005157470703125,0.0017108917236328125,0.09698486328125,-0.0292205810546875,0.06280517578125,0.013580322265625,-0.00031256675720214844,0.0229949951171875,0.042388916015625,-0.0276336669921875,0.0426025390625,-0.0221405029296875,-0.034576416015625,-0.027923583984375,-0.043731689453125,0.006683349609375,0.0311737060546875,0.060089111328125,0.004734039306640625,-0.0249481201171875,-0.0209503173828125,0.049896240234375,-0.0115966796875,-0.01052093505859375,0.034454345703125,-0.00360870361328125,-0.07305908203125,0.01702880859375,-0.027313232421875,-0.032257080078125,0.032470703125,0.0094146728515625,0.0200347900390625,-0.0120849609375,-0.0005211830139160156,0.12335205078125,0.06109619140625,0.0165252685546875,-0.0265655517578125,-0.005237579345703125,-0.04046630859375,0.036529541015625,0.0347900390625,-0.1099853515625,-0.046173095703125,0.0430908203125,0.02630615234375,-0.01070404052734375,0.044525146484375,0.04937744140625,-0.027801513671875,0.0828857421875,0.0183563232421875,-0.109619140625,-0.11541748046875,0.03863525390625,-0.00921630859375,0.00592041015625,0.0172576904296875,-0.07952880859375,0.018402099609375,-0.07086181640625,-0.0206451416015625,0.0088043212890625,-0.0753173828125,-0.13623046875,0.024810791015625,-0.01042938232421875,0.046234130859375,-0.06805419921875,0.037139892578125,-0.0119171142578125,-0.041595458984375,-0.03302001953125,-0.017333984375,0.051116943359375,0.036895751953125,-0.0008296966552734375,0.04913330078125,0.01519012451171875,0.02215576171875,0.0052337646484375,-0.0517578125,-0.038177490234375,0.017913818359375,0.014923095703125,-0.005481719970703125,-0.0197601318359375,0.0130767822265625,0.0171051025390625,0.08001708984375,0.0291748046875]],"ad3bde0ddbeba88edf74afebcabe8f72":[0.9999427811477584,[-0.040985107421875,-0.0175933837890625,0.00795745849609375,0.09918212890625,0.06353759765625,-0.0911865234375,-0.005199432373046875,0.0845947265625,0.016021728515625,0.026275634765625,0.047210693359375,-0.05023193359375,0.1402587890625,-0.0171661376953125,0.06610107421875,-0.0352783203125,0.0281829833984375,0.03424072265625,-0.0305633544921875,-0.02484130859375,0.036712646484375,-0.005157470703125,-0.0287322998046875,0.0193939208984375,0.0677490234375,-0.00812530517578125,-0.059814453125,0.0390625,0.01277923583984375,-0.022491455078125,-0.04913330078125,-0.050994873046875,0.01128387451171875,-0.01303863525390625,0.09136962890625,0.07464599609375,0.04931640625,-0.03662109375,-0.01708984375,-0.0772705078125,0.05413818359375,-0.021820068359375,0.01495361328125,0.059051513671875,-0.0537109375,0.0179290771484375,0.0633544921875,-0.0035152435302734375,-0.046478271484375,0.02679443359375,0.005615234375,0.0017833709716796875,0.0760498046875,-0.1331787109375,-0.041473388671875,0.0106353759765625,0.022552490234375,-0.0182037353515625,0.0112457275390625,0.0450439453125,0.11346435546875,0.0537109375,-0.05078125,0.05389404296875,0.06805419921875,-0.0509033203125,0.0235443115234375,-0.023406982421875,0.03857421875,-0.038818359375,0.06549072265625,-0.00788116455078125,-0.0214080810546875,-0.0018444061279296875,-0.0162811279296875,-0.00794219970703125,0.048492431640625,-0.06488037109375,0.048004150390625,-0.082763671875,-0.0079193115234375,0.0482177734375,-0.08172607421875,-0.021728515625,-0.156494140625,0.00693511962890625,0.0046539306640625,0.00042724609375,0.0010137557983398438,-0.06890869140625,-0.01934814453125,0.047607421875,-0.058929443359375,0.0034389495849609375,-0.056243896484375,0.07757568359375,0.0297088623046875,-0.0413818359375,0.101318359375,-0.00984954833984375,0.0224609375,-0.075439453125,-0.030242919921875,-0.0653076171875,-0.053070068359375,0.048797607421875,-0.0135955810546875,-0.067626953125,-0.0215606689453125,0.0160369873046875,-0.051116943359375,-0.0830078125,0.050567626953125,-0.01136016845703125,0.033233642578125,-0.01019287109375,-0.0219879150390625,-0.0498046875,-0.042633056640625,-0.039398193359375,-0.01213836669921875,0.01305389404296875,-0.064208984375,-0.053131103515625,-0.07196044921875,0.0213775634765625,0.053009033203125,0.06915283203125,-0.0999755859375,0.06756591796875,0.0229644775390625,0.0188140869140625,-0.04071044921875,0.1578369140625,0.08392333984375,-0.0222625732421875,-0.07342529296875,-0.007366180419921875,-0.07537841796875,-0.06756591796875,0.0308685302734375,-0.0194091796875,0.0055999755859375,0.0151214599609375,-0.0460205078125,0.036224365234375,-0.02691650390625,-0.078125,0.004741668701171875,-0.094482421875,-0.006824493408203125,-0.025909423828125,0.11590576171875,0.07354736328125,-0.0035572052001953125,-0.07318115234375,0.052032470703125,0.0002193450927734375,-0.05462646484375,0.1427001953125,-0.046234130859375,0.03167724609375,-0.0858154296875,-0.07672119140625,0.0537109375,-0.0192413330078125,0.1065673828125,0.00905609130859375,-0.039398193359375,-0.0185089111328125,0.006988525390625,0.1136474609375,-0.024749755859375,-0.03228759765625,0.0084228515625,0.061126708984375,-0.101318359375,-0.033721923828125,0.052947998046875,0.05975341796875,-0.0736083984375,0.01629638671875,-0.045806884765625,-0.004131317138671875,0.03338623046875,0.0301361083984375,0.001800537109375,0.006778717041015625,0.034332275390625,-0.0190887451171875,-0.0212249755859375,0.0626220703125,0.0248565673828125,-0.034332275390625,-0.079833984375,0.059814453125,-0.004001617431640625,-0.01412200927734375,0.04254150390625,-0.005970001220703125,0.08038330078125,-0.0687255859375,0.0267333984375,0.0124969482421875,0.07403564453125,0.025238037109375,0.00971221923828125,-0.032012939453125,-0.04296875,0.0022487640380859375,0.01308441162109375,-0.016021728515625,0.011444091796875,-0.0214691162109375,-0.01117706298828125,0.0223236083984375,-0.044464111328125,0.0140838623046875,-0.0977783203125,0.1025390625,0.06658935546875,-0.02813720703125,-0.0275115966796875,-0.0364990234375,-0.062042236328125,0.00531768798828125,0.07342529296875,-0.1717529296875,-0.09967041015625,0.0197906494140625,0.058013916015625,0.03076171875,0.006099700927734375,0.0200653076171875,0.01763916015625,0.01806640625,0.0167083740234375,0.04547119140625,-0.0295257568359375,-0.02301025390625,0.07781982421875,-0.03009033203125,0.004863739013671875,0.0121612548828125,0.03521728515625,0.01043701171875,-0.058349609375,0.0650634765625,0.0157318115234375,0.065185546875,-0.039794921875,-0.0987548828125,-0.0008826255798339844,-0.06494140625,-0.0318603515625,0.047210693359375,-0.048492431640625,0.0355224609375,-0.03863525390625,-0.037750244140625,0.01397705078125,0.01233673095703125,0.0484619140625,-0.01239776611328125,-0.007476806640625,-0.07769775390625,-0.07769775390625,-0.042022705078125,0.0189971923828125,0.063720703125,-0.007282257080078125,0.06866455078125,0.00927734375,0.0289764404296875,0.048126220703125,-0.0228424072265625,0.06427001953125,0.046875,0.00858306884765625,-0.0089263916015625,0.00301361083984375,-0.01123046875,0.1258544921875,0.0556640625,-0.05792236328125,0.0186309814453125,0.006671905517578125,-0.0109100341796875,0.06597900390625,-0.0430908203125,-0.12548828125,-0.0211639404296875,0.0119476318359375,0.025726318359375,0.08917236328125,-0.00859832763671875,0.062469482421875,-0.007781982421875,0.00418853759765625,-0.040863037109375,0.045318603515625,-0.048431396484375,0.054443359375,0.00739288330078125,-0.0004131793975830078,0.015289306640625,0.0008029937744140625,0.00794219970703125,-0.027862548828125,0.047119140625,0.007740020751953125,-0.036651611328125,0.016387939453125,-0.035125732421875,-0.0197296142578125,0.00893402099609375,-0.0178985595703125,0.022613525390625,-0.061279296875,-0.0311431884765625,-0.0278472900390625,-0.01314544677734375,0.004283905029296875,-0.0048980712890625,0.04486083984375,-0.04693603515625,-0.00743865966796875,0.10223388671875,0.029876708984375,-0.0017347335815429688,-0.04937744140625,0.007556915283203125,-0.01934814453125,0.061126708984375,0.07171630859375,-0.107666015625,-0.07965087890625,0.03912353515625,-0.041778564453125,-0.049896240234375,0.042724609375,0.062255859375,0.006366729736328125,0.055908203125,-0.0498046875,-0.08892822265625,-0.1141357421875,0.04931640625,-0.04693603515625,-0.004154205322265625,-0.0007033348083496094,-0.0906982421875,0.025604248046875,-0.003810882568359375,-0.024078369140625,0.03192138671875,-0.047882080078125,-0.11578369140625,-0.032623291015625,-0.025299072265625,-0.00933074951171875,-0.070556640625,0.033782958984375,0.0008401870727539062,-0.036895751953125,-0.017486572265625,0.0177001953125,0.06890869140625,0.091552734375,0.0252838134765625,0.021453857421875,0.055145263671875,0.06695556640625,0.0132598876953125,-0.004856109619140625,-0.0306854248046875,-0.0194244384765625,-0.01175689697265625,0.0112457275390625,0.043365478515625,0.042816162109375,-0.01105499267578125,0.04888916015625,-0.0120849609375]],"3456f0d3010850b0e090133d07c76718":[1.0000221238078533,[-0.062255859375,-0.00856781005859375,-0.018707275390625,-0.0738525390625,-0.037933349609375,-0.039337158203125,-0.0064239501953125,0.079345703125,0.032073974609375,0.006580352783203125,-0.022003173828125,-0.065673828125,0.08428955078125,0.006351470947265625,0.0419921875,-0.050018310546875,-0.0237274169921875,-0.007160186767578125,0.031890869140625,-0.035064697265625,0.055145263671875,0.0322265625,-0.0330810546875,-0.016082763671875,0.04541015625,-0.009674072265625,0.006023406982421875,0.0242462158203125,0.065673828125,-0.027008056640625,0.0035381317138671875,-0.0421142578125,-0.056793212890625,0.024932861328125,0.129638671875,0.01422882080078125,0.07421875,-0.006366729736328125,-0.00860595703125,-0.06304931640625,0.0095367431640625,-0.005550384521484375,0.05682373046875,0.09503173828125,-0.016448974609375,-0.039459228515625,0.01041412353515625,-0.0496826171875,-0.0159759521484375,-0.0289764404296875,0.02130126953125,-0.05889892578125,0.0186767578125,-0.107421875,0.030670166015625,0.0423583984375,0.052490234375,-0.0190887451171875,0.022308349609375,0.01364898681640625,0.1021728515625,0.06884765625,-0.09686279296875,0.00800323486328125,0.0167999267578125,-0.059112548828125,0.04833984375,-0.032318115234375,0.1229248046875,-0.0228424072265625,0.05523681640625,-0.06549072265625,-0.00022351741790771484,0.06439208984375,0.11138916015625,-0.04632568359375,0.0511474609375,-0.043975830078125,0.0274658203125,-0.05694580078125,-0.025909423828125,0.01071929931640625,-0.06927490234375,-0.035430908203125,-0.07098388671875,0.0313720703125,-0.03564453125,0.0009236335754394531,-0.045379638671875,0.06817626953125,0.00627899169921875,0.053436279296875,-0.00498199462890625,0.050201416015625,-0.00855255126953125,0.042572021484375,0.0350341796875,-0.0019817352294921875,0.04803466796875,-0.0367431640625,-0.0111541748046875,-0.07318115234375,0.01476287841796875,-0.0828857421875,-0.10064697265625,0.0633544921875,-0.0242767333984375,-0.017791748046875,0.036163330078125,0.011260986328125,-0.055389404296875,0.0360107421875,-0.07818603515625,-0.0177001953125,0.04937744140625,-0.048187255859375,0.061309814453125,-0.08319091796875,-0.0222015380859375,-0.057342529296875,-0.025909423828125,-0.01702880859375,0.0002741813659667969,-0.0244598388671875,-0.027099609375,-0.0143585205078125,0.07421875,0.04656982421875,-0.05743408203125,0.027587890625,-0.0109710693359375,-0.0004897117614746094,-0.08056640625,0.0849609375,0.043182373046875,-0.0438232421875,-0.043243408203125,0.09747314453125,0.0028839111328125,0.02264404296875,0.06298828125,0.0084228515625,-0.024993896484375,0.00811004638671875,-0.0178985595703125,0.0653076171875,0.035888671875,-0.031036376953125,0.07843017578125,-0.057647705078125,-0.058746337890625,-0.008880615234375,0.01126861572265625,0.016815185546875,-0.05584716796875,0.01904296875,0.0218353271484375,0.050628662109375,-0.08160400390625,0.1136474609375,-0.059356689453125,0.0308990478515625,-0.1126708984375,-0.055450439453125,0.07452392578125,-0.0697021484375,0.006542205810546875,0.0426025390625,-0.00421142578125,0.0164794921875,-0.056732177734375,0.1444091796875,-0.018157958984375,-0.0467529296875,0.016082763671875,0.11444091796875,-0.05218505859375,-0.0634765625,0.00567626953125,0.042510986328125,-0.0305328369140625,0.01338958740234375,-0.064697265625,0.022430419921875,0.0286712646484375,0.08447265625,-0.04052734375,0.0237274169921875,-0.0804443359375,0.0193939208984375,0.0199432373046875,0.1171875,0.01407623291015625,-0.036285400390625,-0.1239013671875,0.02850341796875,-0.05364990234375,-0.06732177734375,0.04364013671875,-0.031585693359375,0.06317138671875,-0.03363037109375,0.030364990234375,0.084716796875,-0.0626220703125,0.0022754669189453125,-0.034271240234375,-0.041351318359375,0.00058746337890625,-0.0128936767578125,-0.0299224853515625,0.07080078125,-0.04388427734375,-0.031402587890625,-0.046966552734375,0.01110076904296875,-0.1505126953125,0.0026264190673828125,-0.06292724609375,0.0129547119140625,0.062469482421875,-0.0174407958984375,-0.1083984375,-0.0216217041015625,-0.03643798828125,0.04345703125,0.0258941650390625,-0.1170654296875,0.004749298095703125,0.0192413330078125,0.06988525390625,0.025421142578125,0.0758056640625,0.0584716796875,0.0008416175842285156,-0.0032444000244140625,0.050811767578125,0.0005269050598144531,0.037445068359375,-0.08819580078125,0.06610107421875,-0.0093536376953125,0.019622802734375,-0.0682373046875,0.0252685546875,-0.01174163818359375,0.0279998779296875,0.11114501953125,0.015411376953125,0.003658294677734375,-0.0821533203125,-0.0574951171875,-0.0745849609375,-0.06744384765625,0.0234832763671875,0.0079345703125,-0.0010814666748046875,-0.0333251953125,0.0411376953125,-0.033111572265625,0.0115814208984375,0.0261383056640625,0.045135498046875,0.059173583984375,-0.002445220947265625,-0.03448486328125,-0.052947998046875,0.0650634765625,0.0213623046875,0.0236358642578125,-0.0167236328125,0.0472412109375,-0.0185089111328125,-0.049713134765625,0.07861328125,-0.0758056640625,-0.0178070068359375,0.0638427734375,-0.0155181884765625,0.07244873046875,-0.0170440673828125,-0.03314208984375,0.076171875,0.1241455078125,-0.0109710693359375,0.0322265625,-0.032684326171875,-0.044219970703125,0.04010009765625,-0.0226287841796875,-0.0760498046875,0.087646484375,0.021240234375,-0.00846099853515625,0.01800537109375,0.021453857421875,0.02447509765625,-0.0499267578125,-0.051177978515625,-0.042205810546875,-0.0247955322265625,-0.08892822265625,-0.0099945068359375,-0.044097900390625,-0.0305328369140625,-0.08843994140625,0.015838623046875,0.00865936279296875,0.00690460205078125,0.038055419921875,0.00710296630859375,-0.018035888671875,-0.0836181640625,0.042022705078125,0.00035381317138671875,0.0295257568359375,0.01029205322265625,0.0172882080078125,-0.044921875,-0.0119171142578125,0.01432037353515625,0.04864501953125,0.07159423828125,0.041961669921875,0.00638580322265625,-0.023956298828125,0.0103912353515625,0.04705810546875,-0.011505126953125,0.06561279296875,0.06390380859375,0.01337432861328125,-0.002910614013671875,-0.01181793212890625,0.06842041015625,-0.1112060546875,-0.03875732421875,0.062469482421875,0.0233612060546875,0.07366943359375,0.041778564453125,0.037109375,0.026885986328125,0.08050537109375,0.0007219314575195312,-0.1575927734375,-0.10186767578125,0.036773681640625,-0.036163330078125,0.029571533203125,-0.03314208984375,-0.0283966064453125,0.00408935546875,-0.01131439208984375,-0.035430908203125,0.0178680419921875,0.00408172607421875,-0.102783203125,-0.0216827392578125,-0.10101318359375,-0.0196533203125,0.01259613037109375,0.0675048828125,0.07318115234375,-0.053863525390625,0.00531005859375,0.016265869140625,0.017913818359375,0.0489501953125,0.0079345703125,-0.041778564453125,-0.005359649658203125,0.08209228515625,-0.05914306640625,-0.0582275390625,-0.044403076171875,0.0003905296325683594,-0.05810546875,0.0011548995971679688,0.004444122314453125,0.025543212890625,-0.023101806640625,0.052703857421875,-0.01071929931640625]],"7862812dc01340fb2268e31c32332a93":[0.9999349266990274,[0.060394287109375,-0.00634765625,-0.0214385986328125,-0.0265960693359375,0.07025146484375,-0.04608154296875,0.0220489501953125,0.061187744140625,-0.0270538330078125,0.059112548828125,0.01454925537109375,0.0015115737915039062,0.0555419921875,-0.0191497802734375,0.0263214111328125,0.0113067626953125,0.08245849609375,-0.002101898193359375,-0.0017251968383789062,0.02264404296875,-0.046783447265625,0.061370849609375,-0.043182373046875,-0.02886962890625,0.0160980224609375,0.01148223876953125,-0.05511474609375,0.06878662109375,0.0771484375,-0.055755615234375,0.003452301025390625,-0.06256103515625,-0.14697265625,-0.0753173828125,-0.0090179443359375,0.0243682861328125,0.032379150390625,0.023529052734375,0.023406982421875,-0.0755615234375,0.07568359375,-0.040252685546875,0.038543701171875,0.0218658447265625,-0.053314208984375,0.0189361572265625,-0.00799560546875,-0.007167816162109375,-0.07696533203125,0.01120758056640625,-0.0246429443359375,0.0073699951171875,0.048065185546875,-0.0755615234375,0.024658203125,0.01404571533203125,-0.0117950439453125,0.00862884521484375,-0.01094818115234375,0.0276336669921875,0.0948486328125,0.03369140625,-0.05145263671875,0.037353515625,0.0889892578125,-0.06829833984375,-0.050537109375,0.07342529296875,0.0721435546875,-0.07098388671875,-0.08642578125,-0.055450439453125,0.01271820068359375,-0.03302001953125,0.0033359527587890625,-0.0210113525390625,0.047943115234375,-0.00786590576171875,-0.0391845703125,0.04241943359375,-0.057098388671875,-0.04705810546875,-0.069580078125,0.006542205810546875,-0.05938720703125,0.01403045654296875,0.081298828125,-0.10992431640625,-0.0296783447265625,-0.036285400390625,0.09954833984375,0.0297393798828125,-0.0265350341796875,-0.058349609375,0.001911163330078125,0.0054931640625,0.0030384063720703125,0.059600830078125,0.0208282470703125,0.0374755859375,-0.0263214111328125,-0.037689208984375,0.0521240234375,-0.021026611328125,-0.057281494140625,0.03399658203125,0.0318603515625,-0.045867919921875,0.051300048828125,0.03826904296875,-0.02935791015625,0.01898193359375,-0.00926971435546875,0.00870513916015625,0.0241241455078125,-0.041259765625,0.11712646484375,-0.065673828125,-0.0007157325744628906,-0.0968017578125,-0.063232421875,0.017730712890625,-0.07373046875,-0.0147247314453125,0.051177978515625,0.0238800048828125,0.034698486328125,0.006793975830078125,-0.035186767578125,0.10247802734375,0.022186279296875,0.01248931884765625,-0.10821533203125,0.06890869140625,0.0823974609375,0.059539794921875,0.05059814453125,0.082275390625,-0.00965118408203125,-0.10986328125,0.040557861328125,-0.0258636474609375,-0.061431884765625,-0.0233001708984375,-0.0350341796875,-0.0082244873046875,0.056640625,-0.03912353515625,0.0173187255859375,-0.044830322265625,0.016693115234375,0.026275634765625,0.0848388671875,0.03192138671875,-0.0118255615234375,-0.038604736328125,-0.01454925537109375,0.06903076171875,-0.035858154296875,0.0016689300537109375,-0.0207366943359375,0.03857421875,-0.0677490234375,-0.07904052734375,0.094482421875,-0.0936279296875,0.09759521484375,-0.0238494873046875,-0.02520751953125,-0.01357269287109375,0.05731201171875,0.0275115966796875,0.0206298828125,-0.037322998046875,-0.02825927734375,0.0455322265625,-0.0941162109375,0.0080108642578125,0.00020778179168701172,0.01641845703125,-0.02630615234375,-0.0234222412109375,-0.1051025390625,0.0197906494140625,0.018035888671875,0.0023479461669921875,0.004299163818359375,-0.0013208389282226562,0.010833740234375,0.03399658203125,-0.12060546875,0.0513916015625,0.00341796875,-0.0240631103515625,-0.044769287109375,0.09490966796875,-0.0010404586791992188,0.017669677734375,0.08721923828125,-0.0400390625,0.049835205078125,-0.03643798828125,-0.00553131103515625,0.0787353515625,0.01898193359375,0.05255126953125,-0.04681396484375,0.0187835693359375,-0.044891357421875,-0.050262451171875,-0.00464630126953125,-0.0023651123046875,-0.0198516845703125,0.017364501953125,-0.0270233154296875,-0.00524139404296875,-0.01464080810546875,0.057281494140625,-0.06304931640625,0.136474609375,0.083740234375,0.03399658203125,-0.07342529296875,-0.0557861328125,-0.05291748046875,0.0086212158203125,0.066162109375,-0.06195068359375,-0.0099639892578125,-0.01123809814453125,0.050994873046875,0.0340576171875,0.0207977294921875,0.0298309326171875,-0.015167236328125,-0.04010009765625,0.0906982421875,0.0235137939453125,-0.067138671875,-0.044097900390625,-0.06109619140625,0.03363037109375,0.03302001953125,0.00939178466796875,0.0152130126953125,-0.005008697509765625,0.007110595703125,0.08819580078125,0.00308990478515625,-0.04339599609375,-0.0933837890625,-0.0261077880859375,-0.038818359375,0.0016336441040039062,-0.057403564453125,0.0020294189453125,-0.061492919921875,0.048736572265625,-0.048614501953125,-0.0213775634765625,0.0775146484375,0.03582763671875,0.11541748046875,-0.017974853515625,0.00933074951171875,-0.12054443359375,-0.103759765625,0.038238525390625,0.033966064453125,0.05328369140625,0.0008001327514648438,-0.031341552734375,-0.0250091552734375,-0.023773193359375,-0.0478515625,-0.11199951171875,0.09552001953125,0.05902099609375,-0.014190673828125,-0.0131378173828125,0.01003265380859375,-0.061737060546875,0.131103515625,0.021026611328125,-0.051727294921875,0.004787445068359375,-0.0251617431640625,0.0673828125,0.06732177734375,0.05810546875,-0.11383056640625,0.07904052734375,-0.0181427001953125,-0.049896240234375,0.05615234375,-0.02581787109375,-0.021575927734375,-0.0290374755859375,-0.005565643310546875,0.0462646484375,0.0161285400390625,0.007671356201171875,-0.035247802734375,-0.03204345703125,-0.03302001953125,0.0225067138671875,0.0024662017822265625,-0.005126953125,-0.0296478271484375,0.034149169921875,0.08721923828125,-0.051727294921875,-0.04730224609375,0.06201171875,0.0082855224609375,0.002681732177734375,0.0882568359375,0.001834869384765625,-0.039276123046875,-0.046539306640625,0.030548095703125,-0.040557861328125,0.048248291015625,-0.0086822509765625,-0.0102386474609375,-0.06500244140625,-0.07061767578125,0.043426513671875,-0.045562744140625,-0.023284912109375,0.0582275390625,0.1290283203125,0.0089569091796875,-0.09002685546875,0.01507568359375,-0.09112548828125,-0.0100555419921875,0.05859375,0.00772857666015625,-0.0210113525390625,-0.039947509765625,-0.046173095703125,-0.06689453125,0.0675048828125,-0.00885772705078125,-0.135986328125,-0.050567626953125,-0.0073699951171875,-0.04217529296875,0.032135009765625,-0.095703125,-0.068359375,0.09515380859375,-0.005382537841796875,-0.002834320068359375,0.0113525390625,0.00720977783203125,-0.0187835693359375,-0.0139617919921875,0.00713348388671875,-0.0006542205810546875,-0.00379180908203125,0.034942626953125,-0.0224456787109375,-0.066162109375,-0.0256500244140625,0.0465087890625,0.035491943359375,0.0308685302734375,-0.038238525390625,-0.028076171875,0.054595947265625,0.006046295166015625,-0.043792724609375,-0.01206207275390625,0.00896453857421875,0.0478515625,0.10430908203125,-0.02264404296875,0.0134429931640625,0.07708740234375,-0.0011577606201171875,0.09619140625,-0.01151275634765625]],"e1a44fa3d221ff26146effd1fada3e62":[0.9997273232790841,[0.04217529296875,-0.062164306640625,-0.00384521484375,0.026092529296875,0.051788330078125,-0.02264404296875,0.00975799560546875,0.050872802734375,-0.019744873046875,0.10595703125,-0.0151519775390625,-0.037109375,0.01751708984375,-0.03619384765625,0.0394287109375,0.0179595947265625,0.09033203125,0.0184326171875,-0.03277587890625,0.006862640380859375,-0.00290679931640625,0.037017822265625,0.00330352783203125,-0.027374267578125,0.029144287109375,0.025665283203125,-0.057769775390625,0.0972900390625,0.03619384765625,-0.0794677734375,-0.0078887939453125,-0.07501220703125,-0.09625244140625,-0.07403564453125,0.0350341796875,0.049468994140625,0.0728759765625,-0.008087158203125,0.04278564453125,-0.0994873046875,0.07928466796875,-0.03497314453125,0.07843017578125,0.057037353515625,-0.0531005859375,0.0109100341796875,0.0244903564453125,-0.0169830322265625,-0.1082763671875,-0.005950927734375,-0.09490966796875,0.01690673828125,0.1025390625,-0.0706787109375,0.0183563232421875,0.034912109375,0.05157470703125,0.002429962158203125,-0.049285888671875,0.0244598388671875,0.1224365234375,0.0167236328125,-0.066650390625,0.024627685546875,0.10345458984375,-0.07684326171875,-0.064697265625,0.01267242431640625,0.051727294921875,-0.034576416015625,0.00298309326171875,-0.04254150390625,-0.025115966796875,-0.0665283203125,0.021881103515625,-0.0291595458984375,0.09039306640625,-0.0205078125,-0.044647216796875,0.0115814208984375,-0.03839111328125,-0.08319091796875,-0.059539794921875,0.01049041748046875,-0.0224456787109375,0.00106048583984375,0.048126220703125,-0.1170654296875,-0.05859375,-0.037445068359375,0.0848388671875,0.0697021484375,-0.045318603515625,0.0290679931640625,-0.046417236328125,0.0102386474609375,-0.027191162109375,0.0139923095703125,0.08203125,0.0073089599609375,-0.0013093948364257812,-0.1026611328125,-0.0128631591796875,0.004611968994140625,-0.10748291015625,0.004680633544921875,0.0232391357421875,-0.0318603515625,-0.00405120849609375,0.07452392578125,-0.06951904296875,0.02392578125,-0.0193634033203125,0.039215087890625,-0.0016269683837890625,-0.061492919921875,0.029449462890625,-0.010955810546875,-0.020538330078125,-0.0316162109375,-0.050262451171875,-0.0036602020263671875,-0.051971435546875,0.034942626953125,-0.0152130126953125,-0.004673004150390625,0.048736572265625,0.048004150390625,-0.050628662109375,0.0257568359375,0.0310821533203125,0.0243072509765625,-0.03692626953125,0.12139892578125,0.06549072265625,0.0247039794921875,0.03167724609375,0.054107666015625,-0.020355224609375,-0.119384765625,0.0225830078125,0.0135040283203125,-0.0723876953125,-0.036773681640625,-0.033203125,-0.033203125,0.012420654296875,-0.08917236328125,0.044921875,-0.0341796875,0.042724609375,0.050048828125,0.0567626953125,0.03460693359375,0.016632080078125,-0.041778564453125,0.0379638671875,0.05426025390625,-0.113037109375,0.034515380859375,-0.02392578125,0.05474853515625,-0.06915283203125,-0.10821533203125,0.046234130859375,-0.05279541015625,0.097412109375,-0.004299163818359375,-0.004787445068359375,-0.01367950439453125,0.0170440673828125,0.05316162109375,0.034393310546875,-0.027496337890625,-0.0026950836181640625,0.045440673828125,-0.07037353515625,0.0135040283203125,-0.0438232421875,0.01702880859375,0.004688262939453125,-0.005413055419921875,-0.082275390625,-0.0212554931640625,0.0250091552734375,0.0027523040771484375,-0.035400390625,-0.055877685546875,-0.027008056640625,-0.0002765655517578125,-0.0703125,0.040679931640625,0.0189666748046875,-0.0390625,-0.06280517578125,0.09234619140625,-0.0071868896484375,-0.0032958984375,0.08575439453125,-0.0169219970703125,0.0150604248046875,-0.055145263671875,-0.00843048095703125,0.06829833984375,0.0254058837890625,-0.007350921630859375,0.03271484375,0.0065765380859375,-0.0106048583984375,-0.015411376953125,0.04974365234375,-0.0318603515625,-0.040435791015625,0.01959228515625,-0.0116119384765625,0.04071044921875,-0.0233612060546875,0.0469970703125,-0.058074951171875,0.148681640625,0.0772705078125,0.037445068359375,-0.052703857421875,-0.045196533203125,-0.04840087890625,0.0672607421875,-0.0284271240234375,-0.09576416015625,-0.016693115234375,-0.0248260498046875,0.0679931640625,0.056671142578125,0.024444580078125,-0.018035888671875,-0.01812744140625,-0.06439208984375,0.07318115234375,-0.02569580078125,-0.014129638671875,-0.0665283203125,-0.06304931640625,0.001232147216796875,0.011077880859375,-0.004360198974609375,-0.02978515625,-0.02667236328125,-0.012451171875,0.06396484375,0.056915283203125,-0.006519317626953125,-0.034423828125,-0.049346923828125,-0.0440673828125,-0.0292816162109375,-0.06256103515625,0.0248260498046875,-0.06585693359375,0.00827789306640625,-0.08282470703125,-0.01305389404296875,0.0706787109375,0.03472900390625,0.1221923828125,0.020751953125,0.05126953125,-0.06982421875,-0.134033203125,-0.0243682861328125,0.06072998046875,0.04290771484375,-0.0394287109375,-0.01042938232421875,-0.040130615234375,0.0191192626953125,0.038116455078125,-0.105712890625,0.08709716796875,0.07305908203125,0.0106964111328125,0.00711822509765625,0.01007843017578125,-0.0305633544921875,0.11505126953125,0.01085662841796875,-0.0194549560546875,0.03369140625,-0.073486328125,0.037078857421875,0.0218505859375,0.08319091796875,-0.10284423828125,0.03167724609375,-0.0277099609375,-0.05792236328125,0.01296234130859375,-0.0120086669921875,0.01087188720703125,0.0167388916015625,0.041839599609375,0.062408447265625,0.060211181640625,0.0177459716796875,-0.031890869140625,-0.0023365020751953125,-0.01666259765625,0.033721923828125,0.021697998046875,-0.015411376953125,0.01107025146484375,0.040191650390625,0.0516357421875,-0.07598876953125,-0.036529541015625,0.094482421875,-0.0131072998046875,0.0186920166015625,0.07232666015625,0.005992889404296875,-0.0128326416015625,-0.041412353515625,0.024200439453125,0.005382537841796875,0.04571533203125,0.0048828125,-0.01003265380859375,-0.071044921875,-0.047576904296875,0.06256103515625,-0.03863525390625,-0.06536865234375,-0.01517486572265625,0.0701904296875,-0.01361846923828125,-0.07720947265625,0.034515380859375,-0.138916015625,-0.0298004150390625,0.08612060546875,0.03564453125,-0.01043701171875,-0.0284271240234375,-0.05279541015625,-0.06976318359375,0.11376953125,-0.00620269775390625,-0.12225341796875,-0.06939697265625,-0.0316162109375,-0.02569580078125,0.0241851806640625,-0.0175018310546875,-0.0621337890625,0.0992431640625,-0.01381683349609375,-0.051177978515625,0.01837158203125,0.00988006591796875,-0.02532958984375,0.01261138916015625,0.0032806396484375,0.0238494873046875,-0.0207366943359375,0.00989532470703125,-0.0684814453125,-0.0216827392578125,0.0138397216796875,0.08074951171875,0.019989013671875,0.0236663818359375,0.016571044921875,-0.00890350341796875,0.0888671875,-0.004695892333984375,-0.0151824951171875,0.0300445556640625,-0.04443359375,0.05303955078125,0.076904296875,-0.0017147064208984375,0.0210113525390625,0.050384521484375,0.045654296875,0.042510986328125,-0.0215606689453125]],"755d007d5eea85cb2a3bbb8345fa97c4":[0.9996861515262542,[-0.01457977294921875,-0.0242767333984375,-0.01375579833984375,-0.0030345916748046875,-0.00014150142669677734,-0.07086181640625,-0.05426025390625,-0.012298583984375,0.06024169921875,0.10284423828125,-0.041595458984375,0.0360107421875,0.031890869140625,0.05963134765625,0.06671142578125,0.0107574462890625,0.0310821533203125,0.0106353759765625,0.0504150390625,0.0171661376953125,0.0260162353515625,-0.0021533966064453125,-0.058197021484375,0.0164337158203125,0.06402587890625,0.01151275634765625,-0.06787109375,0.0675048828125,0.0806884765625,-0.02471923828125,0.046112060546875,-0.06927490234375,-0.134521484375,0.0142669677734375,0.0704345703125,0.048553466796875,0.046051025390625,-0.00301361083984375,-0.038970947265625,-0.06640625,0.0005903244018554688,-0.06793212890625,-0.0007452964782714844,0.098876953125,0.001041412353515625,-0.0909423828125,0.0171356201171875,-0.01171875,-0.0197601318359375,-0.012237548828125,-0.0260162353515625,-0.062286376953125,-0.004207611083984375,-0.0382080078125,0.056427001953125,-0.06890869140625,0.053466796875,-0.003925323486328125,-0.0291900634765625,-0.0163116455078125,0.08233642578125,0.062744140625,-0.05389404296875,0.08935546875,0.0892333984375,-0.07952880859375,-0.0274505615234375,0.0029888153076171875,0.083251953125,-0.027862548828125,-0.056640625,-0.037261962890625,-0.0095977783203125,0.0159759521484375,0.01812744140625,0.06427001953125,0.04071044921875,-0.07208251953125,0.01094818115234375,0.03887939453125,-0.1021728515625,-0.07275390625,-0.0167388916015625,-0.0265960693359375,-0.05938720703125,0.03363037109375,0.04473876953125,-0.06085205078125,-0.1051025390625,0.03997802734375,0.07489013671875,0.0252532958984375,-0.045440673828125,-0.00006139278411865234,-0.0019168853759765625,-0.0038299560546875,-0.06597900390625,-0.01016998291015625,0.045135498046875,0.00870513916015625,-0.0462646484375,-0.04876708984375,-0.06689453125,-0.09112548828125,0.04205322265625,0.049041748046875,0.03839111328125,0.01136016845703125,0.0318603515625,-0.0171661376953125,-0.011932373046875,0.044525146484375,0.00016510486602783203,0.0202789306640625,0.087890625,-0.0091094970703125,0.10076904296875,-0.08642578125,0.00516510009765625,-0.0309295654296875,-0.0222625732421875,0.01277923583984375,-0.054290771484375,0.0113983154296875,0.03118896484375,0.0016088485717773438,0.050689697265625,0.033935546875,-0.0775146484375,0.04864501953125,0.018096923828125,0.01367950439453125,-0.043060302734375,-0.0065460205078125,0.038238525390625,-0.08087158203125,0.027496337890625,0.068115234375,-0.01727294921875,-0.052734375,0.017364501953125,0.0198516845703125,0.032867431640625,-0.0293121337890625,-0.04498291015625,0.01047515869140625,-0.02020263671875,-0.07537841796875,-0.0302581787109375,-0.11083984375,0.04339599609375,0.023956298828125,0.05401611328125,0.0214996337890625,-0.07269287109375,-0.03509521484375,0.0394287109375,0.06719970703125,-0.0307464599609375,0.1593017578125,-0.146484375,0.0750732421875,-0.086181640625,-0.11932373046875,0.0894775390625,-0.06085205078125,-0.025390625,0.0704345703125,0.033966064453125,0.0516357421875,0.045166015625,0.10748291015625,0.007373809814453125,-0.00908660888671875,-0.05316162109375,0.05438232421875,-0.0653076171875,-0.032318115234375,-0.0300140380859375,0.06854248046875,0.01523590087890625,0.01038360595703125,-0.07769775390625,0.0243377685546875,-0.0035343170166015625,0.032318115234375,-0.05072021484375,-0.038360595703125,0.018585205078125,0.0008597373962402344,-0.09832763671875,0.01160430908203125,0.00812530517578125,-0.06256103515625,-0.0160064697265625,0.1165771484375,-0.0333251953125,-0.08599853515625,0.03717041015625,-0.0616455078125,-0.01568603515625,-0.06011962890625,0.007465362548828125,0.0631103515625,0.055450439453125,0.10137939453125,-0.0284881591796875,-0.06109619140625,0.05950927734375,0.018463134765625,0.02630615234375,-0.0036449432373046875,-0.024566650390625,0.040618896484375,-0.0003809928894042969,0.0118255615234375,-0.046600341796875,-0.055816650390625,-0.0301055908203125,0.07489013671875,-0.005901336669921875,-0.08026123046875,-0.118408203125,-0.00371551513671875,-0.056640625,0.043792724609375,0.05645751953125,-0.052734375,-0.014312744140625,0.02294921875,0.03497314453125,0.036468505859375,-0.017181396484375,0.037841796875,0.049285888671875,0.0181427001953125,0.0139617919921875,0.04412841796875,0.0029449462890625,-0.044769287109375,-0.0509033203125,0.00833892822265625,0.0075836181640625,-0.0223846435546875,-0.02764892578125,-0.041229248046875,0.0245208740234375,0.079833984375,0.004261016845703125,0.014617919921875,0.009735107421875,-0.044189453125,-0.04168701171875,0.005397796630859375,-0.043060302734375,0.00890350341796875,-0.12432861328125,0.0753173828125,-0.105224609375,-0.067138671875,-0.00778961181640625,-0.01177978515625,0.04296875,0.01241302490234375,-0.022369384765625,-0.046478271484375,-0.12176513671875,-0.003932952880859375,0.04022216796875,0.04791259765625,0.038604736328125,0.051116943359375,-0.07958984375,0.02667236328125,-0.0215301513671875,0.0012235641479492188,0.06146240234375,-0.01409149169921875,0.04473876953125,0.01885986328125,-0.053375244140625,0.04559326171875,0.1375732421875,0.0201263427734375,-0.00989532470703125,0.0406494140625,-0.030426025390625,0.0218353271484375,0.11468505859375,-0.039093017578125,-0.08203125,0.0053253173828125,-0.041900634765625,-0.053466796875,0.059112548828125,-0.0188446044921875,-0.003360748291015625,0.00701904296875,-0.0228729248046875,-0.00244140625,0.0032138824462890625,-0.0771484375,0.00029158592224121094,-0.0259246826171875,-0.02166748046875,-0.05029296875,0.0223236083984375,-0.0186767578125,0.0079193115234375,0.0682373046875,-0.05682373046875,0.03094482421875,0.044158935546875,0.01007843017578125,0.04608154296875,0.0426025390625,0.014373779296875,0.0272369384765625,-0.01012420654296875,0.042724609375,0.0092315673828125,0.0149383544921875,0.0667724609375,-0.006526947021484375,0.004291534423828125,-0.1171875,-0.0777587890625,0.0660400390625,0.050628662109375,0.0474853515625,-0.0382080078125,0.1458740234375,-0.01123809814453125,-0.0210113525390625,0.007007598876953125,0.0374755859375,-0.0276641845703125,-0.052459716796875,0.002777099609375,0.0217742919921875,0.094970703125,-0.0109710693359375,-0.0714111328125,0.0770263671875,-0.032257080078125,-0.033843994140625,-0.08624267578125,0.052337646484375,-0.069580078125,0.0247344970703125,-0.01081085205078125,-0.052825927734375,-0.006801605224609375,-0.00550079345703125,-0.0191192626953125,0.02569580078125,-0.053802490234375,0.047515869140625,-0.0310516357421875,0.005481719970703125,-0.0100250244140625,-0.037994384765625,-0.01025390625,-0.0180206298828125,-0.053558349609375,0.00872039794921875,0.095458984375,0.021881103515625,0.00746917724609375,0.0648193359375,0.011962890625,-0.014678955078125,0.05914306640625,-0.04779052734375,-0.02069091796875,-0.028076171875,-0.0106048583984375,0.0174102783203125,0.0300750732421875,0.05615234375,0.0877685546875,0.0042724609375,0.0196380615234375,-0.059844970703125]],"0836c208ec6065a3b8b001fd6c46d904":[0.9996796462131893,[-0.032928466796875,-0.011077880859375,-0.016815185546875,0.0012063980102539062,0.060089111328125,-0.048187255859375,-0.0161590576171875,0.07110595703125,0.050323486328125,0.051361083984375,-0.032623291015625,-0.108154296875,0.053192138671875,-0.0281219482421875,0.031494140625,0.061614990234375,0.082763671875,0.009552001953125,-0.0430908203125,-0.03497314453125,-0.00015044212341308594,-0.03656005859375,-0.0263214111328125,0.005107879638671875,0.04638671875,0.037872314453125,-0.005695343017578125,0.1280517578125,0.0208282470703125,-0.0382080078125,0.05511474609375,-0.055908203125,0.00571441650390625,0.032196044921875,-0.000007808208465576172,0.023406982421875,0.032928466796875,0.0364990234375,-0.044097900390625,-0.12548828125,0.044586181640625,-0.0255279541015625,0.0146331787109375,0.05694580078125,-0.0259246826171875,0.03802490234375,0.09033203125,0.07855224609375,-0.019012451171875,-0.01392364501953125,-0.041534423828125,0.05316162109375,0.1168212890625,-0.1285400390625,0.0064239501953125,0.0001100301742553711,0.02630615234375,-0.0640869140625,-0.004489898681640625,-0.048583984375,0.0849609375,0.052703857421875,-0.06414794921875,0.0587158203125,0.0875244140625,-0.1253662109375,-0.071533203125,-0.0026092529296875,0.052520751953125,-0.045135498046875,0.0556640625,0.07861328125,0.0516357421875,0.0245513916015625,0.0008459091186523438,-0.04425048828125,0.052978515625,-0.1600341796875,0.0187530517578125,-0.06878662109375,-0.034576416015625,-0.040008544921875,-0.12042236328125,-0.05615234375,-0.075927734375,0.021820068359375,0.0031833648681640625,-0.035247802734375,0.042083740234375,0.0673828125,0.0112762451171875,0.099365234375,0.0008115768432617188,-0.0404052734375,-0.083251953125,-0.03326416015625,-0.0268402099609375,0.0070037841796875,0.08331298828125,0.0546875,-0.0192413330078125,-0.05340576171875,0.032135009765625,-0.03167724609375,-0.056121826171875,-0.032867431640625,-0.04876708984375,0.0200653076171875,-0.0237274169921875,-0.01358795166015625,-0.059478759765625,0.05401611328125,0.010955810546875,-0.0201873779296875,0.0257415771484375,-0.07147216796875,0.0020160675048828125,-0.050689697265625,-0.0131072998046875,0.02099609375,-0.00417327880859375,0.037628173828125,-0.022247314453125,-0.022125244140625,-0.0305328369140625,0.164794921875,0.0179901123046875,0.007228851318359375,-0.08135986328125,0.0252838134765625,0.03106689453125,0.027496337890625,-0.058197021484375,0.0948486328125,0.00382232666015625,-0.049713134765625,0.07757568359375,0.092041015625,-0.028961181640625,-0.1041259765625,0.0208892822265625,0.006153106689453125,-0.0482177734375,-0.0303497314453125,0.0247802734375,0.0413818359375,-0.00565338134765625,-0.0699462890625,-0.0010166168212890625,-0.1134033203125,0.005340576171875,0.0286865234375,0.03326416015625,0.028533935546875,-0.037872314453125,-0.0157623291015625,0.01617431640625,0.0146636962890625,-0.0528564453125,0.1427001953125,-0.05389404296875,0.0662841796875,-0.035369873046875,-0.07342529296875,0.053009033203125,-0.02105712890625,-0.01091766357421875,0.059539794921875,-0.0167999267578125,-0.0924072265625,-0.00434112548828125,0.1339111328125,0.0144805908203125,-0.03656005859375,0.033172607421875,-0.0187835693359375,-0.08709716796875,-0.001102447509765625,0.06842041015625,0.0251617431640625,0.01178741455078125,0.0144805908203125,-0.0751953125,0.00013744831085205078,-0.0280609130859375,0.0031681060791015625,-0.030914306640625,0.0022563934326171875,0.066650390625,0.01425933837890625,-0.09869384765625,0.061126708984375,0.057281494140625,-0.014434814453125,-0.0789794921875,0.00783538818359375,0.00588226318359375,-0.026214599609375,-0.01531982421875,-0.03350830078125,0.0237274169921875,-0.01031494140625,-0.0007963180541992188,0.019287109375,0.033416748046875,0.005596160888671875,-0.0208587646484375,-0.0071868896484375,-0.0092620849609375,0.03314208984375,0.0014028549194335938,-0.03485107421875,0.0037670135498046875,0.044036865234375,-0.00240325927734375,0.0207977294921875,-0.004108428955078125,-0.03167724609375,-0.0706787109375,0.032196044921875,0.038482666015625,-0.047943115234375,-0.0806884765625,-0.06390380859375,-0.05743408203125,0.030670166015625,0.040069580078125,-0.0792236328125,-0.03253173828125,-0.07501220703125,0.0633544921875,0.00811004638671875,0.03619384765625,0.0283966064453125,0.033782958984375,-0.00726318359375,0.041748046875,-0.0325927734375,-0.04193115234375,0.0269317626953125,0.09490966796875,0.019195556640625,0.09967041015625,-0.0143585205078125,-0.07159423828125,-0.06597900390625,0.025177001953125,0.044891357421875,0.0212249755859375,0.005321502685546875,0.0115966796875,-0.0941162109375,0.007633209228515625,-0.032012939453125,-0.0214996337890625,0.0186309814453125,-0.05084228515625,0.0557861328125,-0.10394287109375,-0.0023956298828125,0.0253143310546875,0.0287017822265625,0.0662841796875,0.037872314453125,-0.0655517578125,-0.019256591796875,-0.0277862548828125,-0.051239013671875,0.036590576171875,0.0300140380859375,0.03070068359375,0.048065185546875,-0.0164031982421875,0.01446533203125,-0.0251312255859375,0.04443359375,0.09002685546875,0.06298828125,0.0999755859375,0.0171356201171875,0.001972198486328125,-0.035858154296875,0.09283447265625,0.0020160675048828125,0.018646240234375,0.0543212890625,-0.037750244140625,0.03460693359375,0.09033203125,-0.057403564453125,-0.060150146484375,-0.0279998779296875,-0.035980224609375,-0.003173828125,0.103271484375,-0.0701904296875,0.0018033981323242188,-0.05316162109375,-0.010223388671875,-0.010162353515625,0.068359375,-0.0301666259765625,0.03118896484375,0.037445068359375,-0.019012451171875,-0.0679931640625,-0.046173095703125,-0.00797271728515625,-0.03741455078125,-0.00003522634506225586,-0.046142578125,-0.06036376953125,-0.007572174072265625,0.032745361328125,0.0232086181640625,-0.0074310302734375,0.046051025390625,0.01548004150390625,-0.07598876953125,-0.041595458984375,-0.00629425048828125,0.0394287109375,0.03155517578125,-0.053558349609375,-0.0565185546875,-0.041473388671875,0.006710052490234375,0.0819091796875,0.023895263671875,-0.006595611572265625,-0.01055908203125,-0.0004730224609375,-0.013092041015625,-0.004665374755859375,0.014312744140625,-0.039947509765625,-0.07232666015625,-0.00901031494140625,-0.0258026123046875,-0.0114288330078125,0.01457977294921875,0.023406982421875,0.06414794921875,0.0706787109375,-0.07275390625,-0.032806396484375,-0.1259765625,0.07269287109375,-0.018524169921875,0.0306396484375,-0.020172119140625,-0.083251953125,0.0234222412109375,-0.08056640625,-0.050567626953125,-0.03729248046875,-0.04681396484375,0.0012483596801757812,-0.01329803466796875,0.0014352798461914062,0.03326416015625,-0.09295654296875,-0.0750732421875,0.0135498046875,-0.0209503173828125,-0.07049560546875,0.036468505859375,0.0177001953125,0.029083251953125,0.006626129150390625,0.07916259765625,0.0885009765625,0.052642822265625,0.0185699462890625,0.041351318359375,-0.0183868408203125,-0.0289154052734375,0.05218505859375,0.0097503662109375,0.115966796875,0.0234832763671875,0.08782958984375,0.040191650390625,0.002437591552734375]],"9394eede642d233df07ba612ae4d1765":[0.9998085315449353,[0.03643798828125,0.01425933837890625,0.05206298828125,0.01922607421875,0.081787109375,-0.0249786376953125,-0.08447265625,0.028167724609375,0.0207061767578125,0.081787109375,-0.005489349365234375,-0.01108551025390625,0.00582122802734375,0.032745361328125,0.033966064453125,-0.01044464111328125,-0.004833221435546875,-0.008392333984375,0.004283905029296875,0.000041961669921875,0.03411865234375,-0.0128631591796875,-0.08111572265625,-0.01459503173828125,0.0360107421875,0.017303466796875,-0.0799560546875,0.11474609375,0.042510986328125,-0.049224853515625,0.04656982421875,-0.0712890625,-0.08111572265625,0.0173492431640625,-0.0210113525390625,0.055328369140625,0.0288848876953125,0.041961669921875,0.0193328857421875,-0.10821533203125,0.01520538330078125,0.006801605224609375,0.06951904296875,0.060638427734375,-0.052093505859375,0.00795745849609375,0.062286376953125,0.06158447265625,-0.027984619140625,-0.0204925537109375,0.0153656005859375,0.0256805419921875,0.030181884765625,-0.0673828125,-0.0142974853515625,0.006801605224609375,0.048919677734375,-0.052337646484375,0.01385498046875,0.037689208984375,0.1090087890625,0.05328369140625,-0.051910400390625,0.041229248046875,0.05633544921875,-0.126953125,-0.04290771484375,-0.0179290771484375,-0.053741455078125,0.0184478759765625,0.12890625,-0.0132598876953125,0.0777587890625,-0.037841796875,0.0247344970703125,0.06573486328125,0.10791015625,-0.11480712890625,0.099853515625,-0.0267333984375,0.0284576416015625,-0.05218505859375,-0.0458984375,-0.036773681640625,-0.07952880859375,-0.0153045654296875,-0.034149169921875,0.021270751953125,-0.01251220703125,0.039581298828125,-0.024169921875,0.040252685546875,-0.063232421875,-0.02325439453125,-0.0194854736328125,-0.0028667449951171875,-0.00815582275390625,-0.00818634033203125,0.06732177734375,0.1336669921875,-0.01288604736328125,-0.09063720703125,-0.0472412109375,-0.046844482421875,-0.0243072509765625,0.0255889892578125,-0.06719970703125,-0.0218353271484375,0.0099334716796875,0.02301025390625,-0.09564208984375,-0.0214691162109375,-0.0389404296875,-0.05908203125,0.0087127685546875,-0.033782958984375,0.04656982421875,-0.03924560546875,0.006938934326171875,0.0076141357421875,0.0184783935546875,0.080810546875,-0.0106201171875,0.00551605224609375,-0.007801055908203125,0.08734130859375,0.08209228515625,0.036529541015625,-0.09844970703125,0.0234527587890625,-0.0035152435302734375,-0.022796630859375,-0.023193359375,0.120361328125,0.0281829833984375,-0.01861572265625,0.02386474609375,0.0870361328125,-0.035552978515625,-0.1087646484375,0.006595611572265625,0.0202484130859375,0.036102294921875,-0.04833984375,-0.04083251953125,0.093994140625,-0.03009033203125,-0.04425048828125,-0.015899658203125,-0.07672119140625,-0.0234375,-0.0228424072265625,0.0214385986328125,0.052337646484375,-0.07061767578125,-0.0147705078125,0.06396484375,-0.0011167526245117188,-0.07769775390625,0.00748443603515625,-0.0721435546875,0.032073974609375,-0.06842041015625,-0.10858154296875,0.10064697265625,-0.004741668701171875,-0.01313018798828125,0.059417724609375,0.06610107421875,-0.057830810546875,-0.03271484375,0.07965087890625,-0.0716552734375,0.000032782554626464844,0.0196075439453125,0.024078369140625,-0.124755859375,0.0328369140625,0.056640625,-0.01139068603515625,-0.00750732421875,0.043792724609375,-0.06439208984375,-0.042083740234375,-0.01259613037109375,0.006450653076171875,-0.0401611328125,-0.04412841796875,0.041229248046875,0.01042938232421875,-0.031463623046875,0.0255889892578125,0.087646484375,-0.03607177734375,-0.021820068359375,0.0241241455078125,-0.022552490234375,-0.0178375244140625,0.031463623046875,-0.036895751953125,0.0546875,-0.01253509521484375,-0.031341552734375,0.0477294921875,0.0538330078125,0.0004134178161621094,-0.040069580078125,0.0226287841796875,-0.025634765625,-0.007659912109375,0.0199737548828125,-0.0204315185546875,-0.0421142578125,-0.01548004150390625,0.008331298828125,-0.0284576416015625,0.029937744140625,0.00818634033203125,-0.0631103515625,0.10736083984375,0.0201263427734375,0.0197296142578125,-0.062042236328125,-0.022674560546875,-0.06268310546875,0.054107666015625,0.07159423828125,-0.0723876953125,-0.00577545166015625,-0.0298614501953125,0.060546875,0.006687164306640625,0.04779052734375,-0.016998291015625,0.0212860107421875,0.0880126953125,0.060516357421875,-0.0330810546875,-0.0179595947265625,-0.0263519287109375,0.05413818359375,0.048828125,-0.01113128662109375,-0.033782958984375,-0.03167724609375,-0.03631591796875,0.027679443359375,0.032806396484375,0.0079345703125,-0.025726318359375,-0.0248260498046875,-0.0814208984375,-0.00447845458984375,-0.08575439453125,0.003063201904296875,-0.0203857421875,-0.0469970703125,0.1239013671875,-0.085693359375,-0.054901123046875,0.043548583984375,0.06396484375,0.0963134765625,0.0190582275390625,-0.06732177734375,0.0024280548095703125,-0.041107177734375,-0.0075531005859375,0.066650390625,0.024505615234375,0.06500244140625,0.06488037109375,-0.0214385986328125,-0.00872039794921875,0.034820556640625,0.0028591156005859375,0.04833984375,0.0810546875,0.076904296875,0.00939178466796875,-0.05926513671875,-0.02423095703125,0.05572509765625,-0.043243408203125,-0.0184478759765625,0.027008056640625,-0.0310516357421875,0.052459716796875,0.046051025390625,0.032806396484375,-0.0313720703125,-0.038177490234375,-0.1021728515625,0.00626373291015625,0.01430511474609375,-0.09600830078125,0.01529693603515625,0.0088653564453125,0.00920867919921875,-0.0034160614013671875,0.1651611328125,0.01385498046875,-0.00986480712890625,-0.0186767578125,-0.0266876220703125,-0.041412353515625,0.01617431640625,0.007175445556640625,0.0535888671875,-0.062103271484375,-0.054046630859375,-0.05718994140625,0.0084075927734375,0.02130126953125,0.0194549560546875,-0.00447845458984375,0.0274505615234375,0.00027370452880859375,-0.061767578125,0.0236358642578125,-0.038665771484375,0.033721923828125,0.06451416015625,-0.08026123046875,-0.04425048828125,0.0039215087890625,-0.085693359375,0.038848876953125,0.03704833984375,-0.060150146484375,-0.038055419921875,-0.00504302978515625,0.002948760986328125,-0.0169525146484375,0.0011806488037109375,-0.1285400390625,-0.08905029296875,-0.0267791748046875,0.024139404296875,-0.053558349609375,0.074951171875,-0.00725555419921875,-0.046142578125,0.0350341796875,-0.07733154296875,-0.005634307861328125,-0.1507568359375,0.07586669921875,-0.0196990966796875,0.0169677734375,-0.0036602020263671875,-0.11181640625,-0.044586181640625,0.06298828125,-0.010589599609375,-0.048858642578125,-0.0273590087890625,0.115478515625,0.03875732421875,-0.0099334716796875,0.0183563232421875,-0.07940673828125,-0.0267791748046875,0.0194549560546875,-0.07025146484375,-0.0504150390625,-0.00989532470703125,-0.0033016204833984375,0.0648193359375,0.0135345458984375,-0.0183563232421875,0.054229736328125,-0.0008745193481445312,-0.00807952880859375,0.0296173095703125,-0.00836181640625,-0.0203704833984375,0.09503173828125,0.02288818359375,0.07080078125,0.0111541748046875,0.050872802734375,0.022552490234375,0.03741455078125]],"dc95b170c58a5910e62087acc07b3f99":[0.9996996685105329,[0.0540771484375,-0.020050048828125,-0.034271240234375,0.11602783203125,0.09722900390625,-0.057403564453125,-0.057281494140625,0.06903076171875,0.0406494140625,0.08453369140625,-0.006160736083984375,-0.05572509765625,0.038726806640625,-0.0162353515625,0.0279083251953125,0.035614013671875,0.05908203125,0.005664825439453125,-0.058319091796875,0.0158843994140625,0.04681396484375,0.01409912109375,-0.07470703125,0.0251007080078125,0.005191802978515625,0.0465087890625,-0.0247039794921875,0.074951171875,0.08056640625,-0.0057373046875,-0.00933837890625,-0.0300445556640625,-0.0626220703125,-0.006927490234375,-0.0162506103515625,0.0787353515625,0.056304931640625,0.03363037109375,-0.00988006591796875,-0.1103515625,0.0254669189453125,-0.057891845703125,0.0509033203125,-0.0175628662109375,-0.047027587890625,0.0131988525390625,0.09344482421875,0.038116455078125,-0.078125,0.0877685546875,-0.0311126708984375,-0.01129150390625,0.0146484375,-0.059173583984375,0.006988525390625,-0.0004115104675292969,0.02093505859375,-0.023345947265625,-0.06707763671875,0.0245513916015625,0.063232421875,-0.020416259765625,-0.1024169921875,0.09039306640625,0.11444091796875,-0.045166015625,-0.07574462890625,0.003582000732421875,-0.032257080078125,-0.08917236328125,-0.00959014892578125,-0.004001617431640625,0.000881195068359375,-0.0122222900390625,-0.00476837158203125,0.056793212890625,0.0509033203125,-0.105224609375,0.01293182373046875,-0.0212554931640625,-0.00959014892578125,-0.0723876953125,-0.03814697265625,0.0016498565673828125,-0.043060302734375,0.01273345947265625,-0.0006122589111328125,0.002483367919921875,-0.04266357421875,-0.0287017822265625,0.06463623046875,0.07977294921875,-0.026153564453125,0.0004906654357910156,-0.0304412841796875,0.0172882080078125,-0.01290130615234375,0.0299072265625,0.07476806640625,0.0623779296875,0.0164947509765625,-0.060516357421875,-0.051727294921875,-0.0181121826171875,-0.041015625,0.01119232177734375,-0.0110015869140625,-0.05596923828125,-0.016326904296875,0.054718017578125,-0.10333251953125,-0.00872802734375,0.029205322265625,-0.0123291015625,-0.048004150390625,0.04522705078125,0.038543701171875,-0.06317138671875,0.0280914306640625,-0.08660888671875,-0.01861572265625,-0.0306396484375,-0.0946044921875,0.076171875,0.07049560546875,0.08099365234375,0.0545654296875,0.019073486328125,-0.0565185546875,0.047607421875,0.0341796875,-0.0023517608642578125,-0.0167388916015625,0.07293701171875,-0.00658416748046875,-0.012054443359375,0.05279541015625,0.08416748046875,-0.0215911865234375,-0.017547607421875,0.004619598388671875,0.004253387451171875,-0.0033130645751953125,-0.06158447265625,-0.0010576248168945312,0.07684326171875,0.028961181640625,-0.07843017578125,-0.00026416778564453125,-0.1153564453125,0.0284423828125,0.044921875,0.07080078125,0.12158203125,-0.00835418701171875,-0.06463623046875,0.09722900390625,0.01291656494140625,-0.0877685546875,0.08917236328125,-0.11602783203125,0.0309906005859375,-0.08740234375,-0.05853271484375,0.046875,-0.0419921875,0.03851318359375,0.07086181640625,-0.00806427001953125,-0.032928466796875,0.021484375,0.0694580078125,-0.0280609130859375,-0.033294677734375,-0.01509857177734375,0.00925445556640625,-0.07183837890625,0.07373046875,0.007251739501953125,0.0897216796875,-0.002429962158203125,-0.014678955078125,-0.0703125,-0.035491943359375,0.050994873046875,0.056732177734375,-0.0284576416015625,-0.10394287109375,0.0225830078125,0.01161956787109375,-0.08209228515625,0.069580078125,0.0181884765625,-0.074462890625,-0.01438140869140625,0.045501708984375,0.031463623046875,-0.03564453125,0.0277862548828125,-0.02825927734375,0.0241546630859375,-0.0060272216796875,0.049285888671875,-0.005352020263671875,0.0882568359375,0.0289459228515625,-0.05670166015625,-0.00884246826171875,-0.007465362548828125,0.04376220703125,0.0020885467529296875,-0.01175689697265625,-0.08673095703125,0.01534271240234375,-0.03729248046875,0.0755615234375,-0.0181427001953125,-0.0121307373046875,-0.0301513671875,0.099853515625,0.070556640625,-0.037994384765625,-0.0694580078125,-0.0850830078125,-0.063720703125,0.031982421875,0.046966552734375,-0.10296630859375,-0.07012939453125,-0.0531005859375,0.03729248046875,0.035919189453125,0.028961181640625,0.0262908935546875,0.026092529296875,0.0312042236328125,0.02490234375,-0.04132080078125,-0.0955810546875,-0.006526947021484375,0.03424072265625,-0.027313232421875,0.0176239013671875,0.0236663818359375,-0.04901123046875,-0.0565185546875,0.01273345947265625,0.05438232421875,0.0189361572265625,-0.0101165771484375,-0.06976318359375,-0.140869140625,-0.00591278076171875,-0.127197265625,-0.040679931640625,0.045318603515625,-0.038360595703125,0.046630859375,-0.0892333984375,-0.0281829833984375,0.0404052734375,0.0023174285888671875,0.0543212890625,-0.0222625732421875,-0.0188751220703125,-0.068359375,-0.06011962890625,0.0014181137084960938,0.0108642578125,0.060882568359375,0.0298004150390625,0.0186920166015625,-0.00634765625,0.03302001953125,0.019378662109375,-0.01514434814453125,0.08465576171875,0.00829315185546875,0.077880859375,-0.0020732879638671875,0.0638427734375,0.032379150390625,0.139404296875,-0.01168060302734375,-0.03094482421875,0.0477294921875,-0.01181793212890625,0.00815582275390625,0.093994140625,0.0172882080078125,-0.07427978515625,-0.0294036865234375,-0.07562255859375,-0.007045745849609375,0.10540771484375,-0.06378173828125,0.0182342529296875,0.01045989990234375,-0.01471710205078125,0.00989532470703125,0.00994110107421875,-0.03192138671875,-0.018341064453125,0.0246124267578125,0.01084136962890625,-0.037017822265625,0.0244903564453125,0.01629638671875,-0.0257568359375,-0.007495880126953125,-0.0645751953125,0.0031757354736328125,0.017852783203125,0.07183837890625,0.0283355712890625,-0.0029354095458984375,0.06707763671875,0.0173187255859375,-0.04510498046875,0.0394287109375,-0.0355224609375,-0.01904296875,0.0291900634765625,-0.0038299560546875,-0.0004725456237792969,-0.08074951171875,-0.02984619140625,0.08843994140625,0.042816162109375,-0.0614013671875,-0.0609130859375,0.046722412109375,-0.01471710205078125,-0.0281524658203125,0.0018186569213867188,-0.01099395751953125,-0.0904541015625,0.022216796875,0.0287933349609375,-0.0193634033203125,0.04608154296875,-0.0013456344604492188,-0.0240478515625,0.02349853515625,-0.008544921875,-0.08233642578125,-0.120361328125,0.0184478759765625,-0.08013916015625,-0.0307464599609375,-0.0248870849609375,-0.12139892578125,0.02032470703125,-0.0078277587890625,-0.075927734375,-0.0019893646240234375,-0.05267333984375,0.0153961181640625,0.0101318359375,-0.0265960693359375,0.025665283203125,-0.02081298828125,-0.05419921875,-0.072509765625,-0.053680419921875,-0.037628173828125,-0.00955963134765625,0.04376220703125,0.033233642578125,0.057403564453125,-0.0000807046890258789,0.05938720703125,0.05133056640625,0.0105438232421875,0.0390625,-0.05059814453125,-0.0203857421875,-0.0181427001953125,0.037384033203125,0.049530029296875,0.051177978515625,0.051605224609375,0.09423828125,-0.00489044189453125]],"94b4d16e6d81304783b6b01e1e08165b":[0.999632390459696,[0.010711669921875,-0.00783538818359375,0.0328369140625,0.02008056640625,0.12939453125,-0.004917144775390625,-0.03656005859375,0.047454833984375,0.06585693359375,0.1376953125,-0.023681640625,-0.050048828125,0.0208740234375,0.0224456787109375,-0.007205963134765625,0.0054473876953125,0.048553466796875,0.0208740234375,-0.0167236328125,-0.01372528076171875,0.04693603515625,0.034027099609375,-0.01151275634765625,-0.01507568359375,0.00249481201171875,0.025146484375,-0.05279541015625,0.054962158203125,-0.0214385986328125,-0.0163726806640625,0.0721435546875,-0.048431396484375,-0.100341796875,-0.03460693359375,0.08502197265625,0.060028076171875,0.0163116455078125,-0.0114898681640625,-0.01062774658203125,-0.08282470703125,0.01016998291015625,-0.0137786865234375,0.06317138671875,0.048583984375,-0.02996826171875,-0.00405120849609375,0.049530029296875,-0.0064697265625,-0.035858154296875,0.02685546875,-0.056732177734375,0.06298828125,-0.00847625732421875,-0.1005859375,-0.0096588134765625,-0.09149169921875,0.064697265625,-0.0020599365234375,0.006870269775390625,0.026885986328125,0.11444091796875,0.03253173828125,-0.002521514892578125,0.033782958984375,0.0309906005859375,-0.0665283203125,-0.0205078125,-0.06884765625,0.0452880859375,-0.08697509765625,0.0087432861328125,0.0175933837890625,0.0419921875,0.00417327880859375,0.0789794921875,0.0136566162109375,0.0992431640625,-0.0650634765625,0.0102386474609375,-0.0109710693359375,-0.01641845703125,-0.05816650390625,-0.0673828125,-0.007122039794921875,-0.07330322265625,0.007053375244140625,0.0074920654296875,-0.048736572265625,-0.038848876953125,0.038787841796875,0.0794677734375,0.0771484375,-0.05743408203125,-0.0141448974609375,-0.052001953125,0.01715087890625,-0.04266357421875,0.004199981689453125,0.03948974609375,0.058197021484375,-0.04669189453125,-0.10430908203125,0.045013427734375,-0.042449951171875,0.01078033447265625,0.0191650390625,0.0771484375,-0.01364898681640625,0.0953369140625,-0.002292633056640625,-0.059234619140625,-0.0054168701171875,-0.01543426513671875,0.0162506103515625,-0.01113128662109375,-0.01453399658203125,0.01059722900390625,-0.04071044921875,0.06719970703125,-0.00020325183868408203,0.042205810546875,-0.0144805908203125,-0.01158905029296875,-0.0265350341796875,0.0203704833984375,0.07781982421875,0.042572021484375,0.06732177734375,-0.1656494140625,0.01224517822265625,0.047698974609375,0.00945281982421875,-0.059814453125,0.026611328125,0.039337158203125,-0.06890869140625,0.061981201171875,0.119384765625,-0.04962158203125,-0.07171630859375,0.055877685546875,-0.0035533905029296875,-0.007122039794921875,0.04010009765625,-0.076904296875,0.06011962890625,0.02423095703125,-0.056915283203125,-0.0134429931640625,-0.06671142578125,0.027679443359375,0.04229736328125,0.0191497802734375,0.08575439453125,-0.06317138671875,-0.040618896484375,0.0753173828125,0.0084075927734375,-0.01971435546875,0.1165771484375,-0.08782958984375,0.003818511962890625,-0.123291015625,-0.1307373046875,0.04412841796875,-0.003238677978515625,0.049072265625,0.059051513671875,-0.01543426513671875,-0.0009613037109375,-0.015716552734375,0.1102294921875,-0.01424407958984375,0.0142669677734375,0.0282745361328125,0.043975830078125,-0.05072021484375,-0.0239105224609375,0.0168304443359375,0.03948974609375,-0.0272369384765625,-0.0171966552734375,-0.062408447265625,-0.004558563232421875,-0.012481689453125,0.04241943359375,-0.042938232421875,-0.0222320556640625,-0.0238800048828125,-0.03338623046875,-0.0155792236328125,0.03765869140625,-0.0175018310546875,-0.06878662109375,-0.02166748046875,0.05255126953125,-0.0243377685546875,-0.01702880859375,0.02276611328125,-0.03131103515625,0.018829345703125,-0.09124755859375,0.0064239501953125,0.09393310546875,0.01183319091796875,-0.005344390869140625,-0.036529541015625,-0.0032958984375,-0.09735107421875,-0.01273345947265625,-0.00893402099609375,0.013336181640625,0.002590179443359375,-0.0361328125,-0.006473541259765625,-0.00667572021484375,-0.07257080078125,-0.0090484619140625,-0.048370361328125,0.104248046875,0.0604248046875,0.0022144317626953125,0.0127105712890625,-0.09625244140625,-0.10601806640625,0.09552001953125,0.007556915283203125,-0.08843994140625,0.0251922607421875,0.01178741455078125,0.0182952880859375,0.036468505859375,0.031463623046875,0.01971435546875,-0.06787109375,0.0672607421875,0.08697509765625,-0.006793975830078125,-0.064453125,-0.0245361328125,0.00803375244140625,-0.0038585662841796875,0.07293701171875,0.002864837646484375,-0.0189361572265625,-0.0217437744140625,0.11273193359375,0.06298828125,0.007465362548828125,-0.04437255859375,0.027191162109375,-0.0716552734375,-0.0667724609375,-0.0751953125,-0.05706787109375,0.0033855438232421875,-0.0188751220703125,0.0076904296875,-0.09625244140625,-0.0261688232421875,0.0078582763671875,0.0241241455078125,0.08673095703125,0.01910400390625,0.0212249755859375,0.00392913818359375,-0.0259552001953125,-0.08441162109375,0.00958251953125,0.001155853271484375,0.032562255859375,0.045074462890625,-0.044586181640625,-0.00800323486328125,-0.07464599609375,0.02740478515625,0.1083984375,0.08587646484375,0.0213165283203125,-0.0085906982421875,-0.11187744140625,-0.061553955078125,0.09014892578125,0.0445556640625,-0.0228271484375,0.0092010498046875,-0.019622802734375,0.1014404296875,0.07305908203125,0.031280517578125,-0.0062408447265625,0.04327392578125,0.0295562744140625,-0.05572509765625,0.040679931640625,-0.0026607513427734375,0.020111083984375,0.0025196075439453125,-0.05328369140625,0.0279693603515625,0.023468017578125,-0.03631591796875,-0.0078887939453125,-0.03424072265625,-0.056671142578125,-0.006092071533203125,0.073486328125,-0.0302581787109375,-0.06341552734375,0.01194000244140625,-0.0181884765625,-0.040802001953125,0.027130126953125,0.03631591796875,0.037750244140625,0.034942626953125,-0.01432037353515625,0.001605987548828125,-0.04400634765625,0.006153106689453125,-0.0069580078125,0.0216217041015625,0.0703125,-0.07763671875,-0.00836181640625,-0.0220947265625,-0.0802001953125,0.0904541015625,-0.03582763671875,-0.046478271484375,0.05938720703125,0.07806396484375,-0.069580078125,0.0038318634033203125,-0.0941162109375,-0.0298309326171875,-0.043182373046875,-0.0211334228515625,-0.033203125,0.002201080322265625,0.10906982421875,-0.040313720703125,-0.00004607439041137695,0.06109619140625,0.017181396484375,-0.048126220703125,-0.10595703125,-0.0208587646484375,-0.04278564453125,-0.039764404296875,-0.0421142578125,-0.07598876953125,0.01268768310546875,-0.017425537109375,-0.019866943359375,0.006824493408203125,0.0013217926025390625,-0.0153045654296875,0.04058837890625,-0.05517578125,0.0133209228515625,-0.12213134765625,-0.006793975830078125,0.034942626953125,0.0089111328125,-0.057830810546875,-0.006717681884765625,-0.0073089599609375,0.00679779052734375,0.03619384765625,0.01192474365234375,-0.0065155029296875,0.1510009765625,-0.032989501953125,-0.0028781890869140625,0.01538848876953125,0.05926513671875,-0.01641845703125,0.036895751953125,0.034027099609375,0.10626220703125,0.0202484130859375,-0.0099945068359375,-0.090576171875]],"f5fd9fdc058615ed967acf9c9b838dd3":[1.0001844546149576,[-0.01506805419921875,-0.041778564453125,0.0271759033203125,0.08282470703125,0.0723876953125,-0.0587158203125,-0.00832366943359375,0.022705078125,0.057891845703125,0.097412109375,0.0159759521484375,-0.006305694580078125,0.0233154296875,-0.03912353515625,0.0792236328125,-0.0006289482116699219,-0.01059722900390625,-0.0136566162109375,-0.0164337158203125,-0.0252685546875,0.0863037109375,0.0039043426513671875,-0.004302978515625,0.043182373046875,-0.005718231201171875,0.09027099609375,0.004413604736328125,0.02532958984375,0.025177001953125,-0.0251617431640625,0.06622314453125,-0.041259765625,-0.062744140625,-0.0301361083984375,0.057830810546875,0.044830322265625,0.07977294921875,0.026458740234375,-0.01200103759765625,-0.07537841796875,0.06219482421875,-0.043304443359375,0.0751953125,-0.02093505859375,-0.00957489013671875,0.0305328369140625,0.02374267578125,0.0186004638671875,-0.03729248046875,-0.02435302734375,-0.0035266876220703125,-0.0211029052734375,0.06207275390625,-0.06463623046875,-0.032989501953125,-0.0262451171875,-0.00429534912109375,-0.043975830078125,-0.033233642578125,0.089599609375,0.1514892578125,0.0345458984375,-0.018280029296875,0.06610107421875,0.05804443359375,-0.07855224609375,-0.06597900390625,-0.044403076171875,0.05908203125,0.004367828369140625,0.00574493408203125,-0.04638671875,0.01153564453125,-0.002216339111328125,0.040191650390625,0.0029392242431640625,0.1365966796875,-0.12408447265625,0.004795074462890625,-0.0106658935546875,0.00940704345703125,0.016754150390625,-0.0780029296875,-0.037933349609375,-0.0755615234375,-0.0243072509765625,0.04608154296875,0.032623291015625,-0.023406982421875,0.046966552734375,0.044586181640625,0.033294677734375,-0.0062103271484375,-0.03436279296875,-0.03582763671875,0.072021484375,0.0155487060546875,-0.005908966064453125,0.0083770751953125,0.07965087890625,-0.036468505859375,-0.0645751953125,0.0017452239990234375,-0.046966552734375,-0.06396484375,0.0016489028930664062,0.0134124755859375,-0.01479339599609375,0.0020656585693359375,-0.0255584716796875,-0.06353759765625,-0.01849365234375,-0.0126800537109375,0.0072784423828125,0.056976318359375,0.0243682861328125,0.03326416015625,-0.04681396484375,0.06829833984375,0.032379150390625,0.04571533203125,-0.011260986328125,-0.0841064453125,0.0029048919677734375,-0.08245849609375,0.07373046875,-0.00667572021484375,0.023681640625,-0.05072021484375,0.048797607421875,0.0141143798828125,-0.07940673828125,0.01445770263671875,0.056854248046875,0.05645751953125,0.01372528076171875,-0.002361297607421875,0.059112548828125,-0.0308074951171875,-0.0927734375,0.01259613037109375,-0.048828125,-0.055999755859375,0.0168304443359375,0.0465087890625,0.0340576171875,-0.005767822265625,-0.066650390625,0.01214599609375,-0.06982421875,0.0142669677734375,0.060546875,0.01512908935546875,0.06109619140625,-0.04638671875,-0.0709228515625,-0.001850128173828125,0.047271728515625,-0.03424072265625,0.07989501953125,-0.01507568359375,0.068603515625,-0.08135986328125,-0.1749267578125,0.08441162109375,-0.0543212890625,0.00951385498046875,0.06573486328125,0.03448486328125,-0.0396728515625,-0.003948211669921875,0.1259765625,0.0004572868347167969,-0.024139404296875,-0.0058135986328125,0.07061767578125,-0.07537841796875,0.008331298828125,0.09429931640625,0.0369873046875,-0.0021266937255859375,0.0170440673828125,-0.1014404296875,-0.02899169921875,0.03204345703125,0.07891845703125,0.0335693359375,-0.020660400390625,0.0211181640625,-0.0007143020629882812,-0.033966064453125,0.006626129150390625,0.00516510009765625,-0.089599609375,-0.036865234375,0.039276123046875,-0.0115203857421875,-0.09228515625,0.016143798828125,-0.0863037109375,0.0654296875,-0.0570068359375,0.05181884765625,0.043853759765625,0.0185089111328125,0.054107666015625,0.0220184326171875,0.04083251953125,-0.003971099853515625,0.04449462890625,0.0013227462768554688,0.027984619140625,-0.01727294921875,0.01129150390625,0.0203094482421875,0.019500732421875,-0.038604736328125,0.0163421630859375,-0.08148193359375,0.0938720703125,-0.016937255859375,0.024169921875,-0.079833984375,-0.03814697265625,-0.03558349609375,-0.0167083740234375,0.0377197265625,-0.1495361328125,-0.07794189453125,-0.038909912109375,0.09765625,0.0474853515625,0.026611328125,0.030914306640625,-0.003604888916015625,0.0264892578125,0.0235137939453125,0.029754638671875,-0.054656982421875,-0.057830810546875,-0.0274505615234375,0.01227569580078125,0.004878997802734375,0.06787109375,-0.01230621337890625,-0.046295166015625,-0.0528564453125,-0.022125244140625,-0.03509521484375,0.053192138671875,-0.0297088623046875,-0.10601806640625,0.0084381103515625,-0.054962158203125,-0.0247955322265625,-0.028533935546875,0.00955963134765625,0.0237274169921875,-0.0231170654296875,-0.0003273487091064453,0.0119171142578125,0.06536865234375,0.06268310546875,-0.0494384765625,-0.0325927734375,-0.00917816162109375,-0.05810546875,-0.0304412841796875,0.0704345703125,0.005306243896484375,0.06280517578125,-0.0165863037109375,0.037139892578125,0.0069732666015625,0.0057830810546875,-0.06195068359375,0.13818359375,0.10595703125,-0.0139923095703125,0.004543304443359375,0.002838134765625,-0.11859130859375,0.12396240234375,0.05419921875,-0.05072021484375,0.08636474609375,-0.0648193359375,0.10003662109375,0.08441162109375,0.027618408203125,-0.1551513671875,-0.00023627281188964844,-0.020843505859375,-0.0849609375,0.09490966796875,0.047576904296875,0.017730712890625,0.019134521484375,0.0168609619140625,-0.0128021240234375,0.061065673828125,0.04833984375,-0.003147125244140625,0.044708251953125,-0.02777099609375,-0.054443359375,-0.045013427734375,-0.0176849365234375,-0.032684326171875,-0.0104217529296875,-0.039947509765625,-0.055450439453125,-0.052215576171875,0.010772705078125,0.0129547119140625,0.00716400146484375,0.01389312744140625,0.060089111328125,-0.098876953125,-0.0386962890625,-0.0330810546875,-0.006103515625,-0.024749755859375,-0.060943603515625,-0.011505126953125,-0.019012451171875,-0.10906982421875,0.0711669921875,0.03851318359375,-0.0251922607421875,-0.06866455078125,0.03961181640625,-0.06396484375,0.01044464111328125,-0.043914794921875,-0.01666259765625,-0.0138397216796875,-0.010650634765625,0.022430419921875,0.01239776611328125,0.058746337890625,-0.0005884170532226562,-0.0184326171875,0.051239013671875,-0.0026149749755859375,-0.04840087890625,-0.09014892578125,0.0306396484375,-0.01007843017578125,-0.009185791015625,0.00055694580078125,-0.09002685546875,0.021209716796875,0.018463134765625,-0.05364990234375,-0.03729248046875,-0.12139892578125,-0.036407470703125,-0.031982421875,-0.06085205078125,0.0196990966796875,-0.0887451171875,-0.060272216796875,-0.0552978515625,0.01177978515625,0.0162353515625,0.021881103515625,-0.0621337890625,0.039794921875,0.004764556884765625,0.0210723876953125,0.049102783203125,0.0100860595703125,0.03857421875,0.0345458984375,0.0484619140625,-0.00286865234375,0.046783447265625,-0.0024967193603515625,0.0305328369140625,0.025054931640625,0.0069122314453125,0.06585693359375,-0.064697265625]],"6b7d2f8c17fb15fef149630a2d476e78":[0.999867749531472,[-0.0299072265625,0.0006895065307617188,0.0096588134765625,0.01309967041015625,0.04168701171875,-0.0599365234375,-0.039520263671875,0.0789794921875,0.036102294921875,0.06365966796875,0.03314208984375,-0.006267547607421875,0.037994384765625,-0.01497650146484375,0.039520263671875,0.0472412109375,0.04803466796875,-0.0015859603881835938,-0.017181396484375,-0.0665283203125,0.10125732421875,0.08197021484375,-0.01145172119140625,0.02490234375,0.049163818359375,0.051239013671875,0.0171661376953125,0.0305023193359375,0.08837890625,0.04644775390625,0.00595855712890625,-0.0177001953125,-0.0307464599609375,-0.0731201171875,0.05853271484375,0.050384521484375,0.042877197265625,0.064697265625,-0.007434844970703125,-0.10772705078125,0.07232666015625,-0.07952880859375,0.036956787109375,-0.023834228515625,0.0170745849609375,0.022369384765625,0.0423583984375,0.038177490234375,-0.0084686279296875,0.00908660888671875,-0.0214691162109375,-0.0270538330078125,0.049560546875,-0.07965087890625,-0.002063751220703125,0.00592803955078125,0.034576416015625,0.037078857421875,-0.0168304443359375,-0.0020427703857421875,0.11138916015625,0.045989990234375,-0.05023193359375,0.07391357421875,0.06939697265625,-0.06494140625,0.01152801513671875,-0.008209228515625,0.08599853515625,-0.030426025390625,0.0159759521484375,-0.038787841796875,-0.00885772705078125,-0.03521728515625,0.0116424560546875,0.02838134765625,0.0714111328125,-0.054779052734375,0.01629638671875,-0.057647705078125,-0.042510986328125,-0.076416015625,-0.0623779296875,-0.053985595703125,-0.07177734375,-0.0164642333984375,0.01104736328125,-0.007648468017578125,0.006988525390625,0.035552978515625,0.034942626953125,0.08636474609375,-0.039703369140625,0.05584716796875,-0.038665771484375,0.009124755859375,-0.01800537109375,0.014312744140625,0.041717529296875,0.04534912109375,0.01561737060546875,-0.0882568359375,-0.033477783203125,-0.01386260986328125,-0.08038330078125,-0.003570556640625,-0.007320404052734375,-0.0062408447265625,-0.0144195556640625,0.0350341796875,-0.048370361328125,-0.0218963623046875,-0.03887939453125,-0.008758544921875,0.0283203125,-0.0595703125,0.03045654296875,-0.1380615234375,0.05780029296875,-0.1060791015625,0.00933837890625,0.039886474609375,-0.092041015625,-0.040985107421875,-0.0672607421875,0.06561279296875,0.06622314453125,0.034515380859375,-0.09869384765625,0.033966064453125,0.03173828125,-0.01441192626953125,-0.035614013671875,0.03338623046875,0.046539306640625,-0.035614013671875,0.06268310546875,0.045318603515625,-0.0234375,-0.0134429931640625,-0.007572174072265625,0.014007568359375,-0.04180908203125,0.03948974609375,-0.03564453125,0.050933837890625,-0.0109100341796875,-0.062286376953125,0.0208282470703125,-0.0948486328125,0.0229644775390625,0.021697998046875,0.041900634765625,0.107666015625,-0.0103302001953125,0.0166778564453125,0.0153961181640625,0.024169921875,-0.03155517578125,0.05487060546875,-0.061614990234375,0.09539794921875,-0.06610107421875,-0.16455078125,0.07611083984375,0.0249786376953125,0.01434326171875,0.05230712890625,-0.013885498046875,-0.0361328125,-0.008026123046875,0.07623291015625,-0.0538330078125,-0.0421142578125,-0.0152587890625,0.042083740234375,-0.10369873046875,-0.00020170211791992188,-0.00018906593322753906,0.0430908203125,0.000667572021484375,0.022705078125,-0.0755615234375,0.006694793701171875,-0.0037384033203125,0.02862548828125,-0.0207672119140625,-0.02276611328125,0.049591064453125,-0.0187225341796875,-0.07379150390625,0.022705078125,0.0284271240234375,-0.07373046875,-0.07122802734375,-0.01136016845703125,-0.07421875,-0.07354736328125,-0.006427764892578125,-0.073974609375,0.09429931640625,-0.04620361328125,0.046234130859375,0.04827880859375,0.0518798828125,-0.00646209716796875,-0.0103759765625,0.058837890625,-0.0621337890625,0.0085601806640625,0.03863525390625,0.046661376953125,-0.032958984375,0.00244903564453125,-0.0042572021484375,0.04071044921875,0.0223846435546875,0.04180908203125,0.01105499267578125,0.1341552734375,0.043670654296875,-0.0196380615234375,-0.03424072265625,-0.082763671875,-0.139404296875,0.00177001953125,0.070068359375,-0.1275634765625,-0.07171630859375,-0.0126800537109375,0.0307464599609375,0.0523681640625,-0.01422119140625,-0.042694091796875,-0.009307861328125,0.004810333251953125,0.0301666259765625,0.047698974609375,-0.082275390625,-0.0269927978515625,0.056854248046875,-0.04205322265625,0.039306640625,0.020477294921875,-0.0489501953125,-0.0894775390625,-0.078369140625,0.02996826171875,-0.01480865478515625,0.0303497314453125,-0.059814453125,-0.08612060546875,-0.028594970703125,-0.0517578125,-0.0784912109375,-0.01222991943359375,-0.068115234375,0.01500701904296875,-0.061370849609375,0.0013628005981445312,0.060516357421875,0.052398681640625,0.027496337890625,-0.058837890625,-0.0258636474609375,-0.1077880859375,-0.070556640625,-0.0204620361328125,0.0731201171875,0.08221435546875,0.02764892578125,0.059661865234375,0.0909423828125,0.0157470703125,0.0258026123046875,-0.042999267578125,0.0966796875,0.03582763671875,-0.06146240234375,-0.0242462158203125,0.007167816162109375,-0.0210418701171875,0.1103515625,0.043731689453125,-0.0016412734985351562,0.02349853515625,-0.0264892578125,0.06640625,0.07928466796875,-0.0265960693359375,-0.137451171875,-0.04058837890625,-0.0526123046875,-0.0198516845703125,0.152587890625,-0.014556884765625,0.031280517578125,0.061859130859375,0.02655029296875,0.0208282470703125,0.06689453125,-0.0352783203125,0.009124755859375,0.01464080810546875,-0.022064208984375,-0.00970458984375,-0.0220947265625,-0.032684326171875,0.00891876220703125,0.049224853515625,-0.052215576171875,-0.004932403564453125,-0.01560211181640625,-0.0009026527404785156,-0.0079345703125,0.0211944580078125,0.051513671875,0.00988006591796875,-0.08343505859375,0.0189056396484375,-0.0615234375,0.0250244140625,-0.01959228515625,0.0251312255859375,-0.00909423828125,-0.031280517578125,-0.0286712646484375,0.11981201171875,0.06976318359375,-0.0011758804321289062,0.0005164146423339844,0.002285003662109375,-0.00429534912109375,-0.0167388916015625,-0.037384033203125,-0.00981903076171875,-0.01479339599609375,-0.015960693359375,0.040008544921875,0.059783935546875,0.03155517578125,-0.036163330078125,0.01425933837890625,0.08123779296875,-0.001987457275390625,-0.0767822265625,-0.1107177734375,-0.00522613525390625,-0.0426025390625,0.002468109130859375,-0.032745361328125,-0.08489990234375,-0.0418701171875,-0.06982421875,-0.051513671875,-0.03631591796875,-0.11199951171875,-0.00495147705078125,-0.034332275390625,0.032745361328125,0.06951904296875,-0.044219970703125,0.0030231475830078125,-0.0704345703125,-0.07513427734375,0.0011453628540039062,0.0072479248046875,0.0098876953125,0.050750732421875,0.060516357421875,0.05059814453125,-0.002391815185546875,0.06378173828125,-0.01094818115234375,-0.00388336181640625,-0.029052734375,0.0010690689086914062,0.0249481201171875,0.035675048828125,0.07611083984375,0.037109375,0.036163330078125,0.061004638671875,-0.01495361328125]],"86ea582ff110d6ec650cbeb762dbbdbd":[1.0002007899623766,[0.0235443115234375,-0.031280517578125,0.057159423828125,0.0625,0.0816650390625,-0.00196075439453125,-0.006317138671875,0.037872314453125,0.03399658203125,0.10382080078125,-0.02215576171875,-0.0706787109375,0.0134124755859375,0.01511383056640625,0.039703369140625,0.06439208984375,0.0034618377685546875,-0.0259552001953125,-0.0576171875,-0.0285797119140625,0.056610107421875,-0.049957275390625,-0.06353759765625,0.01541900634765625,0.0186767578125,0.0143280029296875,-0.037139892578125,0.11724853515625,-0.01293182373046875,-0.01641845703125,-0.0008602142333984375,-0.06488037109375,-0.0282135009765625,-0.037994384765625,0.00946807861328125,0.047821044921875,0.002414703369140625,0.0042724609375,0.0111236572265625,-0.08807373046875,0.01004791259765625,-0.03289794921875,0.032470703125,0.01103973388671875,-0.03717041015625,0.04638671875,0.1051025390625,0.050628662109375,-0.0212249755859375,-0.00016891956329345703,0.03167724609375,0.0226287841796875,0.07470703125,-0.0311431884765625,-0.0296783447265625,-0.01074981689453125,0.0111083984375,-0.040252685546875,0.00171661376953125,0.052276611328125,0.115966796875,0.05023193359375,-0.047210693359375,0.06646728515625,0.0731201171875,-0.09228515625,-0.09368896484375,-0.013580322265625,0.03570556640625,-0.01012420654296875,0.0286102294921875,-0.041778564453125,0.01114654541015625,-0.04766845703125,0.01861572265625,0.017486572265625,0.07806396484375,-0.10955810546875,0.06817626953125,-0.0291748046875,0.00679779052734375,-0.0262603759765625,-0.04302978515625,-0.0687255859375,-0.034210205078125,0.014312744140625,-0.018402099609375,0.00936126708984375,-0.0229034423828125,0.0772705078125,-0.0211029052734375,0.0550537109375,-0.0250701904296875,-0.004360198974609375,-0.0008759498596191406,0.0166015625,0.01384735107421875,0.00618743896484375,0.020843505859375,0.1029052734375,0.040130615234375,-0.129638671875,-0.039337158203125,-0.007442474365234375,-0.0248870849609375,-0.023773193359375,-0.062225341796875,0.0097198486328125,0.005115509033203125,0.0033931732177734375,-0.1025390625,0.00670623779296875,-0.0308685302734375,-0.05242919921875,0.0143585205078125,0.006175994873046875,0.0260467529296875,-0.0614013671875,0.0261688232421875,-0.04095458984375,-0.005222320556640625,0.058837890625,0.01412200927734375,0.0231781005859375,-0.0177459716796875,0.05975341796875,0.0258026123046875,-0.034637451171875,-0.0701904296875,0.043304443359375,0.0219268798828125,0.00495147705078125,-0.05035400390625,0.1187744140625,0.0606689453125,0.022430419921875,0.032470703125,0.05023193359375,-0.002567291259765625,-0.055023193359375,-0.0018873214721679688,-0.0421142578125,-0.027099609375,0.007778167724609375,-0.0117034912109375,0.0257568359375,-0.0243377685546875,-0.061553955078125,0.02593994140625,-0.036376953125,0.01221466064453125,0.01702880859375,0.05023193359375,-0.0009832382202148438,-0.07086181640625,-0.07342529296875,0.0592041015625,-0.0224609375,-0.06439208984375,0.09552001953125,-0.1317138671875,0.006038665771484375,-0.1033935546875,-0.1331787109375,0.1317138671875,-0.0008220672607421875,0.0098114013671875,0.11676025390625,0.06146240234375,-0.03790283203125,-0.056976318359375,0.07391357421875,-0.00466156005859375,-0.0309600830078125,0.036529541015625,0.0128173828125,-0.11395263671875,0.0243377685546875,0.03125,0.0015382766723632812,0.00670623779296875,0.00165557861328125,-0.10394287109375,-0.030548095703125,0.036529541015625,0.0255889892578125,-0.0281219482421875,-0.0006961822509765625,0.05712890625,0.0206451416015625,-0.1217041015625,0.032073974609375,0.051727294921875,-0.0270538330078125,-0.07464599609375,0.0003101825714111328,0.01444244384765625,-0.02471923828125,0.11102294921875,-0.06927490234375,0.0355224609375,-0.04913330078125,0.037109375,0.06463623046875,0.0533447265625,0.03448486328125,-0.01300048828125,-0.01052093505859375,-0.040252685546875,0.005596160888671875,0.01049041748046875,-0.0323486328125,-0.020660400390625,-0.0312347412109375,0.07305908203125,0.044891357421875,-0.005168914794921875,0.005855560302734375,-0.03643798828125,0.1142578125,0.0501708984375,-0.0297393798828125,-0.0736083984375,-0.0731201171875,-0.0916748046875,-0.032379150390625,0.042236328125,-0.10211181640625,-0.04656982421875,-0.07208251953125,0.049407958984375,0.0022220611572265625,0.06732177734375,-0.012908935546875,0.0186614990234375,0.02349853515625,0.060089111328125,-0.0258941650390625,-0.0628662109375,-0.0328369140625,0.07037353515625,0.032135009765625,0.042755126953125,0.01593017578125,-0.0692138671875,-0.07745361328125,-0.0121002197265625,0.022735595703125,-0.0217437744140625,0.0122833251953125,-0.0601806640625,-0.12408447265625,0.0024738311767578125,-0.06744384765625,0.01132965087890625,0.053436279296875,-0.07421875,0.03948974609375,-0.08721923828125,-0.0102691650390625,-0.01064300537109375,0.09716796875,0.057952880859375,-0.0273895263671875,-0.038604736328125,-0.004329681396484375,-0.007083892822265625,-0.0390625,0.0592041015625,0.052886962890625,0.053436279296875,0.0323486328125,-0.01025390625,0.0288848876953125,-0.022003173828125,0.0203399658203125,0.0909423828125,0.060394287109375,0.08123779296875,0.055023193359375,-0.004222869873046875,0.00800323486328125,0.0853271484375,0.037628173828125,-0.013092041015625,0.057586669921875,-0.0015897750854492188,0.06365966796875,0.036712646484375,-0.00612640380859375,-0.08355712890625,-0.04541015625,-0.07305908203125,-0.0203094482421875,0.06854248046875,-0.04840087890625,-0.010284423828125,-0.010894775390625,0.0105438232421875,-0.01502227783203125,0.0972900390625,-0.0170745849609375,0.0005240440368652344,0.0263214111328125,-0.0035552978515625,-0.031280517578125,0.01439666748046875,0.0117950439453125,-0.025360107421875,-0.0229034423828125,-0.0309600830078125,-0.0821533203125,0.024505615234375,0.020660400390625,0.07000732421875,-0.033447265625,0.00839996337890625,0.041290283203125,-0.07244873046875,0.00543212890625,-0.0416259765625,0.0169525146484375,0.032318115234375,-0.08831787109375,-0.0197601318359375,-0.048675537109375,-0.01025390625,0.1033935546875,0.035430908203125,-0.01641845703125,-0.030426025390625,0.0384521484375,-0.001697540283203125,-0.052459716796875,-0.0172576904296875,-0.06463623046875,-0.052001953125,-0.11279296875,-0.05059814453125,0.035369873046875,0.0692138671875,0.0684814453125,0.04791259765625,0.044677734375,-0.032501220703125,-0.0714111328125,-0.11431884765625,0.043670654296875,-0.02191162109375,0.04925537109375,0.018035888671875,-0.1268310546875,0.001068115234375,0.006740570068359375,-0.03662109375,-0.040924072265625,-0.0595703125,-0.024749755859375,-0.0041351318359375,-0.025390625,0.06939697265625,-0.12371826171875,-0.042022705078125,-0.0250396728515625,-0.06781005859375,-0.00353240966796875,0.07086181640625,-0.0051727294921875,0.0199432373046875,0.022064208984375,-0.0028476715087890625,0.00847625732421875,0.04010009765625,0.05279541015625,0.0166778564453125,0.0293121337890625,-0.00659942626953125,0.0848388671875,0.087158203125,0.08001708984375,0.033477783203125,0.053558349609375,0.021026611328125,-0.054656982421875]],"6ef08af3c4507048101e99c549d7b8e7":[0.9997483676489106,[-0.0214080810546875,0.024322509765625,0.0149383544921875,-0.003360748291015625,0.08245849609375,-0.0267791748046875,-0.0855712890625,0.114501953125,-0.0032863616943359375,0.05548095703125,-0.00965118408203125,-0.0732421875,0.050537109375,-0.042327880859375,0.054107666015625,0.0257110595703125,0.007419586181640625,0.01508331298828125,0.036102294921875,0.01174163818359375,0.060211181640625,-0.039581298828125,-0.07391357421875,0.0214080810546875,0.040283203125,0.00725555419921875,-0.052581787109375,0.08551025390625,0.0111846923828125,0.0016965866088867188,-0.0088348388671875,-0.0435791015625,-0.0246124267578125,-0.04498291015625,0.0184783935546875,0.0577392578125,0.044525146484375,-0.0009026527404785156,0.01751708984375,-0.11407470703125,-0.02020263671875,0.0189056396484375,0.09423828125,-0.02313232421875,-0.01329803466796875,0.024658203125,0.05389404296875,0.07940673828125,-0.034027099609375,-0.004161834716796875,0.045745849609375,0.0322265625,0.08502197265625,-0.0789794921875,0.0192718505859375,0.01227569580078125,0.04962158203125,-0.040740966796875,-0.044097900390625,-0.002811431884765625,0.1304931640625,0.03912353515625,-0.06854248046875,0.0229949951171875,0.11962890625,-0.07989501953125,-0.063232421875,-0.05279541015625,0.026947021484375,0.06390380859375,0.0231781005859375,-0.044403076171875,0.012359619140625,-0.0256195068359375,0.05340576171875,0.0251007080078125,0.0472412109375,-0.07135009765625,0.0311431884765625,-0.0487060546875,0.0080718994140625,0.001995086669921875,-0.016357421875,0.0016508102416992188,-0.01751708984375,-0.0361328125,-0.0174407958984375,0.072021484375,-0.03350830078125,0.0020160675048828125,0.03643798828125,0.0430908203125,-0.01207733154296875,0.0164794921875,-0.041961669921875,0.059600830078125,-0.001827239990234375,-0.037628173828125,0.015838623046875,0.165283203125,0.00554656982421875,-0.092529296875,-0.0633544921875,0.008819580078125,-0.0190582275390625,0.0308074951171875,-0.08209228515625,-0.049224853515625,-0.026641845703125,0.07769775390625,-0.057159423828125,-0.03448486328125,-0.0021495819091796875,0.039794921875,-0.05279541015625,-0.001689910888671875,0.0152587890625,-0.10711669921875,0.0223236083984375,-0.053009033203125,0.032440185546875,0.0305938720703125,-0.01493072509765625,0.0235137939453125,-0.053314208984375,0.05291748046875,0.01508331298828125,0.0076141357421875,-0.0841064453125,0.07647705078125,0.0207672119140625,-0.0265350341796875,-0.0694580078125,0.13623046875,0.0128021240234375,0.0081634521484375,0.00594329833984375,0.05584716796875,-0.039825439453125,-0.1253662109375,-0.03662109375,0.00032401084899902344,0.0087738037109375,0.030364990234375,-0.03851318359375,0.08758544921875,-0.019989013671875,-0.0716552734375,-0.02911376953125,-0.052978515625,-0.038909912109375,-0.0017557144165039062,0.0294189453125,0.0242156982421875,-0.06402587890625,-0.06329345703125,0.09149169921875,-0.031951904296875,-0.083251953125,0.09344482421875,-0.04296875,0.06317138671875,-0.0733642578125,-0.1048583984375,0.13427734375,-0.05230712890625,0.0406494140625,0.07281494140625,0.0260162353515625,-0.0467529296875,0.004974365234375,0.10601806640625,-0.07305908203125,-0.0167236328125,0.036865234375,0.030303955078125,-0.103271484375,0.07928466796875,0.03741455078125,0.02984619140625,-0.0535888671875,-0.004657745361328125,-0.07177734375,-0.05169677734375,0.026611328125,0.01438140869140625,0.0025691986083984375,0.0121307373046875,-0.006214141845703125,0.016082763671875,-0.060302734375,0.06488037109375,0.0421142578125,-0.02886962890625,-0.096923828125,-0.03411865234375,-0.0186004638671875,-0.03369140625,0.0555419921875,-0.02459716796875,0.03765869140625,-0.02105712890625,0.0278472900390625,0.0248565673828125,0.0831298828125,0.0172576904296875,-0.01378631591796875,0.0206146240234375,-0.0555419921875,0.0267333984375,-0.0176849365234375,0.0008606910705566406,-0.0153045654296875,-0.039642333984375,-0.0001354217529296875,0.02862548828125,0.0012359619140625,0.0289154052734375,-0.0212554931640625,0.09869384765625,0.06591796875,0.0457763671875,-0.04736328125,-0.0706787109375,-0.072265625,0.004138946533203125,0.0243988037109375,-0.080078125,-0.060516357421875,-0.00693511962890625,0.06158447265625,0.0082855224609375,0.052764892578125,0.023681640625,0.0228271484375,0.026947021484375,0.11334228515625,0.08465576171875,0.034454345703125,-0.02215576171875,0.024169921875,0.005413055419921875,-0.01800537109375,-0.047821044921875,-0.032989501953125,-0.042236328125,-0.0017137527465820312,0.00415802001953125,0.04791259765625,-0.0207672119140625,-0.04547119140625,-0.1087646484375,-0.023773193359375,-0.08740234375,-0.05340576171875,0.003101348876953125,-0.03375244140625,0.00390625,-0.1312255859375,-0.0080718994140625,0.01476287841796875,0.047821044921875,0.0367431640625,-0.030242919921875,-0.0206756591796875,-0.0025577545166015625,-0.0487060546875,-0.0169219970703125,0.030303955078125,0.039306640625,0.0175323486328125,0.07562255859375,-0.0294647216796875,0.039306640625,0.02801513671875,-0.04833984375,0.09356689453125,0.042938232421875,0.005649566650390625,-0.01320648193359375,-0.002971649169921875,-0.07501220703125,0.0830078125,0.0218048095703125,-0.002471923828125,0.02923583984375,-0.0799560546875,-0.0001672506332397461,0.06719970703125,-0.012298583984375,-0.07147216796875,-0.0413818359375,-0.08013916015625,-0.0421142578125,0.095947265625,-0.058746337890625,0.028076171875,0.017333984375,0.08477783203125,-0.03155517578125,0.10137939453125,-0.0182647705078125,-0.040924072265625,0.00014531612396240234,-0.01194000244140625,-0.052520751953125,0.059112548828125,0.000247955322265625,0.048828125,-0.03350830078125,-0.0163726806640625,-0.031890869140625,-0.039642333984375,0.029754638671875,0.00847625732421875,-0.00846099853515625,0.039825439453125,0.0212249755859375,-0.085205078125,0.0345458984375,-0.019683837890625,0.0224609375,0.054840087890625,-0.09185791015625,-0.059112548828125,-0.01378631591796875,-0.0184783935546875,0.0679931640625,0.0278472900390625,-0.03375244140625,-0.034942626953125,0.03729248046875,-0.0556640625,-0.0176849365234375,0.06158447265625,-0.1031494140625,-0.05029296875,-0.062744140625,0.0168914794921875,-0.01103973388671875,0.090576171875,0.0104217529296875,0.01605224609375,0.08056640625,-0.056884765625,-0.0487060546875,-0.135986328125,0.095703125,0.0165557861328125,-0.0008540153503417969,0.00482177734375,-0.09295654296875,-0.0384521484375,-0.023773193359375,-0.025787353515625,-0.0027942657470703125,-0.0418701171875,0.07171630859375,-0.03546142578125,-0.01451873779296875,-0.004459381103515625,-0.06597900390625,-0.06793212890625,-0.09033203125,-0.036285400390625,-0.017486572265625,0.0235137939453125,0.0020885467529296875,0.0323486328125,-0.00275421142578125,-0.007080078125,0.0655517578125,0.0274810791015625,0.00913238525390625,0.041229248046875,-0.006328582763671875,-0.0002181529998779297,0.040130615234375,-0.0022602081298828125,0.083251953125,0.05023193359375,0.015533447265625,0.06512451171875,-0.0252532958984375]],"bb24e2b75d91cdcdabe91b918c2e0b38":[1.0003272034212356,[0.0360107421875,-0.003971099853515625,-0.004364013671875,0.07330322265625,0.1075439453125,-0.02313232421875,-0.00010263919830322266,0.091552734375,-0.00247955322265625,0.1488037109375,-0.0025882720947265625,-0.072998046875,0.0283203125,-0.0643310546875,0.0787353515625,-0.01641845703125,-0.0106201171875,0.069091796875,-0.030914306640625,-0.044891357421875,0.09136962890625,0.006656646728515625,0.0233001708984375,0.050750732421875,0.004192352294921875,0.0872802734375,-0.032745361328125,0.089111328125,0.0263824462890625,-0.034271240234375,0.025848388671875,-0.044158935546875,-0.08642578125,-0.031646728515625,0.0124053955078125,0.039581298828125,0.057098388671875,0.023040771484375,-0.008880615234375,-0.08087158203125,0.05645751953125,-0.09423828125,0.041839599609375,0.04486083984375,0.01039886474609375,0.02618408203125,0.01751708984375,0.047027587890625,-0.08740234375,0.045196533203125,0.0196990966796875,0.04571533203125,0.036865234375,0.0020618438720703125,-0.0280914306640625,0.01300048828125,-0.003505706787109375,-0.0386962890625,-0.04913330078125,0.0589599609375,0.08111572265625,0.030914306640625,-0.080810546875,0.02978515625,0.01422119140625,-0.10223388671875,-0.0860595703125,-0.036712646484375,0.042633056640625,0.006504058837890625,0.0021648406982421875,-0.00827789306640625,-0.0035266876220703125,-0.07733154296875,0.011932373046875,0.007305145263671875,0.1234130859375,-0.04931640625,0.0305938720703125,-0.0694580078125,0.07720947265625,0.004180908203125,-0.047698974609375,-0.0204925537109375,-0.04119873046875,-0.004093170166015625,-0.0163421630859375,-0.007343292236328125,0.00634002685546875,0.035430908203125,0.034393310546875,0.0289459228515625,-0.0023288726806640625,0.017425537109375,-0.01519775390625,0.0362548828125,0.003326416015625,0.0169525146484375,0.0919189453125,0.1270751953125,0.0175018310546875,-0.03717041015625,0.0716552734375,-0.041259765625,-0.046783447265625,0.036773681640625,-0.0201416015625,0.052215576171875,0.0190582275390625,0.00927734375,-0.11334228515625,-0.00916290283203125,-0.0013580322265625,0.004039764404296875,0.0277099609375,0.049224853515625,0.0176239013671875,-0.06121826171875,0.06671142578125,-0.0153045654296875,-0.00440216064453125,-0.00794219970703125,-0.043701171875,-0.008148193359375,-0.050811767578125,0.0401611328125,0.070556640625,-0.0167083740234375,-0.040679931640625,0.0457763671875,0.0021514892578125,0.06866455078125,-0.010498046875,-0.0169219970703125,0.03875732421875,-0.047882080078125,0.03668212890625,0.051116943359375,-0.0254669189453125,-0.11932373046875,0.019561767578125,-0.045806884765625,-0.0645751953125,-0.0408935546875,-0.0100555419921875,-0.037109375,-0.000024199485778808594,-0.09686279296875,0.03338623046875,-0.0645751953125,-0.034271240234375,0.0968017578125,0.0438232421875,0.047332763671875,-0.03338623046875,0.0248565673828125,0.07568359375,0.0168914794921875,-0.0667724609375,0.04345703125,-0.07373046875,-0.0010614395141601562,-0.09112548828125,-0.09967041015625,0.119384765625,-0.007434844970703125,0.03509521484375,0.0300445556640625,-0.00684356689453125,-0.01468658447265625,-0.00962066650390625,0.10211181640625,-0.0092010498046875,-0.010528564453125,0.0178680419921875,0.0244140625,-0.08843994140625,0.03143310546875,0.037872314453125,-0.01552581787109375,-0.0184783935546875,0.00018310546875,-0.028076171875,-0.032135009765625,-0.07330322265625,0.0631103515625,-0.0088348388671875,-0.0024127960205078125,0.04217529296875,-0.069091796875,-0.069580078125,0.049102783203125,0.021575927734375,-0.0287933349609375,-0.04296875,0.01366424560546875,0.0032939910888671875,-0.085693359375,0.037322998046875,-0.0716552734375,0.06488037109375,-0.0301055908203125,0.01132965087890625,0.0435791015625,0.0012769699096679688,0.0183563232421875,-0.015167236328125,-0.02099609375,-0.04339599609375,0.078369140625,0.0160369873046875,-0.01495361328125,-0.0667724609375,-0.060760498046875,-0.04254150390625,-0.04302978515625,-0.0012493133544921875,0.04840087890625,-0.0870361328125,0.0726318359375,0.0396728515625,0.006587982177734375,-0.12274169921875,-0.0019435882568359375,-0.0268096923828125,-0.065185546875,-0.0013561248779296875,-0.05828857421875,0.01898193359375,-0.0567626953125,0.039093017578125,0.044403076171875,0.042755126953125,-0.06488037109375,0.0318603515625,0.018218994140625,0.045166015625,0.004520416259765625,-0.02435302734375,-0.0233917236328125,-0.007282257080078125,-0.0159759521484375,0.042510986328125,-0.020263671875,-0.03533935546875,-0.039642333984375,-0.06427001953125,0.045379638671875,0.01263427734375,-0.0292205810546875,-0.1265869140625,-0.11370849609375,-0.060516357421875,-0.126220703125,-0.10540771484375,0.0345458984375,0.0003764629364013672,0.01171875,-0.12396240234375,-0.02197265625,0.013641357421875,0.0374755859375,0.06414794921875,-0.017822265625,-0.0914306640625,0.01812744140625,-0.07403564453125,0.02581787109375,0.0411376953125,0.128173828125,0.03399658203125,-0.025665283203125,0.07965087890625,-0.0029811859130859375,0.0765380859375,-0.01296234130859375,0.09619140625,0.0295562744140625,-0.0011959075927734375,0.01468658447265625,-0.0120697021484375,-0.08697509765625,0.078369140625,0.050933837890625,-0.0096282958984375,0.05804443359375,0.00447845458984375,-0.01181793212890625,0.032684326171875,0.038726806640625,-0.09783935546875,-0.0304412841796875,-0.10186767578125,-0.0299530029296875,0.0736083984375,0.033721923828125,0.01361083984375,0.050506591796875,0.039031982421875,0.047088623046875,0.048736572265625,-0.014862060546875,-0.00728607177734375,-0.034393310546875,-0.039581298828125,-0.06121826171875,0.034149169921875,0.00846099853515625,-0.01470184326171875,0.00913238525390625,-0.01081085205078125,-0.01800537109375,-0.01187896728515625,0.01461029052734375,0.08929443359375,-0.00997161865234375,-0.003936767578125,0.029541015625,-0.11419677734375,-0.0654296875,0.02215576171875,0.000743865966796875,0.041961669921875,-0.0185394287109375,0.016998291015625,-0.023406982421875,-0.125244140625,0.0078582763671875,0.043243408203125,-0.0110931396484375,0.0200347900390625,0.01446533203125,-0.023101806640625,-0.0299530029296875,-0.0550537109375,-0.0885009765625,-0.0235595703125,-0.0225982666015625,0.035186767578125,0.047821044921875,0.08660888671875,0.02630615234375,-0.019775390625,0.0199127197265625,-0.032196044921875,-0.0745849609375,-0.10107421875,0.046173095703125,-0.047210693359375,0.00921630859375,-0.0233917236328125,-0.10943603515625,0.01277923583984375,0.028472900390625,-0.0207061767578125,-0.059112548828125,-0.056793212890625,-0.01262664794921875,-0.02587890625,-0.01088714599609375,0.01934814453125,-0.0266265869140625,0.004619598388671875,-0.0516357421875,-0.09869384765625,0.031494140625,0.024749755859375,0.01241302490234375,0.06365966796875,0.0191650390625,-0.007320404052734375,0.0579833984375,0.0309600830078125,0.0207366943359375,0.00626373291015625,0.030181884765625,0.08074951171875,0.0170440673828125,0.0810546875,0.049713134765625,0.057373046875,0.0217132568359375,0.1153564453125,0.021575927734375]]}}},"searchableProperties":["id","title","path","content","embedding","embeddingModel","created_at","ctime","mtime","tags","extension"],"searchablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embedding":"vector[384]","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","tags":"string[]","extension":"string"},"frequencies":{"id":{"2":{"a4f0df752e644510136309e8e2065ade":1},"22":{"6dedc5ab0aa727885ec51dae14131b24":1},"23":{"b36d72facd0568e122323e7ee01d1d07":1},"24":{"17de5b758025908c586c7e78eae6436c":1},"25":{"230d347e717fcc2bd8f88d8be27c615b":1},"26":{"5f81d58a12bbe25ea80fc3dbe9d6fdd8":1},"27":{"532c9bb532e6991b4193a08168972611":1},"28":{"c35863a93434be8a523a4e575dfa9992":1},"29":{"83987152e332f1ea34e67bb329483d46":1},"30":{"ae161ed1a029574975fc16d0abfe2e2d":1},"31":{"6aac7b121dc7c2f68c2e1d83be48a5cb":1},"32":{"234b7fc3a4936b769256c9380326a0fc":1},"33":{"7dc0c6c0e4de0046d154ca8d61f0ba6c":1},"34":{"53cc96bf262039586a88ab17ac076858":1},"35":{"c5480db69876dbe696397144d9796e2f":1},"36":{"8231cc476f6fbc72323236bc60d781ab":1},"37":{"515ae74151efa1ff92687e7d52343ac5":1},"38":{"68760701d145a45add658a5b60e81709":1},"39":{"6d1fc0583ca584a225bd01072fcd1b16":1},"40":{"4803ad84843e046af3b33d47d032359b":1},"41":{"bf70ec7050d709f367edaf3c865b8597":1},"42":{"163113acc2627c112602577a83b6edac":1},"43":{"5883ef0265c795329291772ad145f25f":1},"44":{"a7e82c4eb3e192f780bb2fbe19411782":1},"45":{"a6fb16ab6210e4e160e6e4c54afbb948":1},"46":{"a3e3a9298cc139f91ba0f4e801a8954d":1},"47":{"edd334388e5b767324da496afca10cff":1},"48":{"815f570fed7f3502fc6402c73d009860":1},"49":{"6faffddc81ef57b2fa941ed3226a91b4":1},"50":{"ef586c0a890322cc0d74e2410f35bbd1":1},"51":{"78c4f8d9eab3431ad61ce0f242ab5415":1},"52":{"8fa3ccb0db0015e5729678bf219423a0":1},"53":{"cc49432675423864851bf22df8d3012e":1},"54":{"49ff9486289f87cb0be0966e968f6b8d":1},"55":{"a48169f8d45b497076fc671092c0a4b2":1},"56":{"b5c9a556d8dbfcfe6a3b58bcf2fa86f6":1},"57":{"ad3bde0ddbeba88edf74afebcabe8f72":1},"58":{"3456f0d3010850b0e090133d07c76718":1},"59":{"7862812dc01340fb2268e31c32332a93":1},"60":{"e1a44fa3d221ff26146effd1fada3e62":1},"61":{"755d007d5eea85cb2a3bbb8345fa97c4":1},"62":{"0836c208ec6065a3b8b001fd6c46d904":1},"63":{"9394eede642d233df07ba612ae4d1765":1},"64":{"dc95b170c58a5910e62087acc07b3f99":1},"65":{"94b4d16e6d81304783b6b01e1e08165b":1},"66":{"f5fd9fdc058615ed967acf9c9b838dd3":1},"67":{"6b7d2f8c17fb15fef149630a2d476e78":1},"68":{"86ea582ff110d6ec650cbeb762dbbdbd":1},"69":{"6ef08af3c4507048101e99c549d7b8e7":1},"70":{"bb24e2b75d91cdcdabe91b918c2e0b38":1}},"title":{"2":{"kanban":0.5,"dashboard":0.5},"22":{"34":1},"23":{"33":1},"24":{"32":1},"25":{"31":1},"26":{"30":1},"27":{"29":1},"28":{"28":1},"29":{"27":1},"30":{"26":1},"31":{"25":1},"32":{"24":1},"33":{"23":1},"34":{"22":1},"35":{"22":1},"36":{"22":1},"37":{"22":1},"38":{"21":1},"39":{"21":1},"40":{"21":1},"41":{"20":1},"42":{"20":1},"43":{"20":1},"44":{"19":1},"45":{"18":1},"46":{"17":1},"47":{"16":1},"48":{"16":1},"49":{"16":1},"50":{"15":1},"51":{"14":1},"52":{"13":1},"53":{"13":1},"54":{"12":1},"55":{"12":1},"56":{"12":1},"57":{"12":1},"58":{"12":1},"59":{"11":1},"60":{"11":1},"61":{"10":1},"62":{"09":1},"63":{"08":1},"64":{"07":1},"65":{"06":1},"66":{"05":1},"67":{"04":1},"68":{"03":1},"69":{"02":1},"70":{"01":1}},"path":{"2":{"1":0.2,"project":0.2,"kanban":0.2,"dashboard":0.2,"md":0.2},"22":{"1":0.25,"34":0.25,"project":0.25,"md":0.25},"23":{"1":0.25,"33":0.25,"project":0.25,"md":0.25},"24":{"1":0.25,"32":0.25,"project":0.25,"md":0.25},"25":{"1":0.25,"31":0.25,"project":0.25,"md":0.25},"26":{"1":0.25,"30":0.25,"project":0.25,"md":0.25},"27":{"1":0.25,"29":0.25,"project":0.25,"md":0.25},"28":{"1":0.25,"28":0.25,"project":0.25,"md":0.25},"29":{"1":0.25,"27":0.25,"project":0.25,"md":0.25},"30":{"1":0.25,"26":0.25,"project":0.25,"md":0.25},"31":{"1":0.25,"25":0.25,"project":0.25,"md":0.25},"32":{"1":0.25,"24":0.25,"project":0.25,"md":0.25},"33":{"1":0.25,"23":0.25,"project":0.25,"md":0.25},"34":{"1":0.25,"22":0.25,"project":0.25,"md":0.25},"35":{"1":0.25,"22":0.25,"project":0.25,"md":0.25},"36":{"1":0.25,"22":0.25,"project":0.25,"md":0.25},"37":{"1":0.25,"22":0.25,"project":0.25,"md":0.25},"38":{"1":0.25,"21":0.25,"project":0.25,"md":0.25},"39":{"1":0.25,"21":0.25,"project":0.25,"md":0.25},"40":{"1":0.25,"21":0.25,"project":0.25,"md":0.25},"41":{"1":0.25,"20":0.25,"project":0.25,"md":0.25},"42":{"1":0.25,"20":0.25,"project":0.25,"md":0.25},"43":{"1":0.25,"20":0.25,"project":0.25,"md":0.25},"44":{"1":0.25,"19":0.25,"project":0.25,"md":0.25},"45":{"1":0.25,"18":0.25,"project":0.25,"md":0.25},"46":{"1":0.25,"17":0.25,"project":0.25,"md":0.25},"47":{"1":0.25,"16":0.25,"project":0.25,"md":0.25},"48":{"1":0.25,"16":0.25,"project":0.25,"md":0.25},"49":{"1":0.25,"16":0.25,"project":0.25,"md":0.25},"50":{"1":0.25,"15":0.25,"project":0.25,"md":0.25},"51":{"1":0.25,"14":0.25,"project":0.25,"md":0.25},"52":{"1":0.25,"13":0.25,"project":0.25,"md":0.25},"53":{"1":0.25,"13":0.25,"project":0.25,"md":0.25},"54":{"1":0.25,"12":0.25,"project":0.25,"md":0.25},"55":{"1":0.25,"12":0.25,"project":0.25,"md":0.25},"56":{"1":0.25,"12":0.25,"project":0.25,"md":0.25},"57":{"1":0.25,"12":0.25,"project":0.25,"md":0.25},"58":{"1":0.25,"12":0.25,"project":0.25,"md":0.25},"59":{"1":0.25,"11":0.25,"project":0.25,"md":0.25},"60":{"1":0.25,"11":0.25,"project":0.25,"md":0.25},"61":{"1":0.25,"10":0.25,"project":0.25,"md":0.25},"62":{"1":0.25,"project":0.25,"09":0.25,"md":0.25},"63":{"1":0.25,"project":0.25,"08":0.25,"md":0.25},"64":{"1":0.25,"project":0.25,"07":0.25,"md":0.25},"65":{"1":0.25,"project":0.25,"06":0.25,"md":0.25},"66":{"1":0.25,"project":0.25,"05":0.25,"md":0.25},"67":{"1":0.25,"project":0.25,"04":0.25,"md":0.25},"68":{"1":0.25,"project":0.25,"03":0.25,"md":0.25},"69":{"1":0.25,"project":0.25,"02":0.25,"md":0.25},"70":{"1":0.25,"project":0.25,"01":0.25,"md":0.25}},"content":{"2":{"10":0.012987012987012988,"11":0.012987012987012988,"12":0.012987012987012988,"13":0.012987012987012988,"14":0.012987012987012988,"15":0.012987012987012988,"16":0.012987012987012988,"17":0.012987012987012988,"18":0.012987012987012988,"19":0.012987012987012988,"20":0.012987012987012988,"21":0.012987012987012988,"22":0.012987012987012988,"23":0.012987012987012988,"24":0.012987012987012988,"25":0.012987012987012988,"26":0.012987012987012988,"27":0.012987012987012988,"28":0.012987012987012988,"29":0.012987012987012988,"30":0.012987012987012988,"31":0.012987012987012988,"32":0.012987012987012988,"33":0.012987012987012988,"34":0.012987012987012988,"35":0.012987012987012988,"36":0.012987012987012988,"37":0.012987012987012988,"38":0.012987012987012988,"39":0.012987012987012988,"40":0.012987012987012988,"41":0.012987012987012988,"42":0.012987012987012988,"43":0.012987012987012988,"44":0.012987012987012988,"45":0.012987012987012988,"2024":0.012987012987012988,"2025":0.012987012987012988,"note":0.012987012987012988,"title":0.012987012987012988,"kanban":0.012987012987012988,"dashboard":0.012987012987012988,"metadata":0.012987012987012988,"kanban-plugin":0.012987012987012988,"board":0.012987012987012988,"created":0.012987012987012988,"modified":0.012987012987012988,"01":0.012987012987012988,"03":0.012987012987012988,"block":0.012987012987012988,"content":0.012987012987012988,"---":0.012987012987012988,"ch11":0.012987012987012988,"-":0.012987012987012988,"x":0.012987012987012988,"02":0.012987012987012988,"04":0.012987012987012988,"05":0.012987012987012988,"06":0.012987012987012988,"ch12":0.012987012987012988,"07":0.012987012987012988,"08":0.012987012987012988,"09":0.012987012987012988,"ch13":0.012987012987012988,"dfs":0.012987012987012988,"bfs":0.012987012987012988,"ch14":0.012987012987012988,"ch15":0.012987012987012988,"ch16":0.012987012987012988,"ch17":0.012987012987012988,"ch18":0.012987012987012988,"settings":0.012987012987012988,"list-collapse":0.012987012987012988,"false":0.012987012987012988,"show-checkboxes":0.012987012987012988,"true":0.012987012987012988,"hide-card-count":0.012987012987012988},"22":{"0":0.009708737864077669,"1":0.009708737864077669,"2":0.009708737864077669,"3":0.009708737864077669,"4":0.009708737864077669,"5":0.009708737864077669,"6":0.009708737864077669,"7":0.009708737864077669,"8":0.009708737864077669,"11":0.009708737864077669,"12":0.009708737864077669,"15":0.009708737864077669,"20":0.009708737864077669,"22":0.009708737864077669,"34":0.009708737864077669,"36":0.009708737864077669,"2025":0.009708737864077669,"18353":0.009708737864077669,"note":0.009708737864077669,"title":0.009708737864077669,"metadata":0.009708737864077669,"created":0.009708737864077669,"01":0.009708737864077669,"modified":0.009708737864077669,"block":0.009708737864077669,"content":0.009708737864077669,"https":0.009708737864077669,"www":0.009708737864077669,"acmicpc":0.009708737864077669,"net":0.009708737864077669,"problem":0.009708737864077669,"-":0.009708737864077669,"o":0.009708737864077669,"n":0.009708737864077669,"java":0.009708737864077669,"dp":0.009708737864077669,"i":0.009708737864077669,"max":0.009708737864077669,"j":0.009708737864077669,"data":0.009708737864077669,"---":0.009708737864077669,"-----":0.009708737864077669,"import":0.009708737864077669,"util":0.009708737864077669,"io":0.009708737864077669,"public":0.009708737864077669,"class":0.009708737864077669,"main":0.009708737864077669,"private":0.009708737864077669,"static":0.009708737864077669,"stringbuilder":0.009708737864077669,"sb":0.009708737864077669,"new":0.009708737864077669,"inputprocessor":0.009708737864077669,"void":0.009708737864077669,"string":0.009708737864077669,"args":0.009708737864077669,"input":0.009708737864077669,"pro":0.009708737864077669,"output":0.009708737864077669,"int":0.009708737864077669,"nextint":0.009708737864077669,"for":0.009708737864077669,"i--":0.009708737864077669,"j--":0.009708737864077669,"if":0.009708737864077669,"math":0.009708737864077669,"append":0.009708737864077669,"try":0.009708737864077669,"bufferedwriter":0.009708737864077669,"bw":0.009708737864077669,"outputstreamwriter":0.009708737864077669,"system":0.009708737864077669,"out":0.009708737864077669,"write":0.009708737864077669,"tostring":0.009708737864077669,"flush":0.009708737864077669,"catch":0.009708737864077669,"ioexception":0.009708737864077669,"e":0.009708737864077669,"throw":0.009708737864077669,"runtimeexception":0.009708737864077669,"bufferedreader":0.009708737864077669,"br":0.009708737864077669,"stringtokenizer":0.009708737864077669,"st":0.009708737864077669,"this":0.009708737864077669,"inputstreamreader":0.009708737864077669,"in":0.009708737864077669,"next":0.009708737864077669,"while":0.009708737864077669,"null":0.009708737864077669,"hasmoreelements":0.009708737864077669,"readline":0.009708737864077669,"return":0.009708737864077669,"nexttoken":0.009708737864077669,"nextline":0.009708737864077669,"result":0.009708737864077669,"integer":0.009708737864077669,"parseint":0.009708737864077669,"long":0.009708737864077669,"nextlong":0.009708737864077669,"parselong":0.009708737864077669},"23":{"0":0.01020408163265306,"1":0.01020408163265306,"2":0.01020408163265306,"11":0.01020408163265306,"12":0.01020408163265306,"15":0.01020408163265306,"33":0.01020408163265306,"47":0.01020408163265306,"2025":0.01020408163265306,"14501":0.01020408163265306,"note":0.01020408163265306,"title":0.01020408163265306,"metadata":0.01020408163265306,"created":0.01020408163265306,"01":0.01020408163265306,"modified":0.01020408163265306,"08":0.01020408163265306,"block":0.01020408163265306,"content":0.01020408163265306,"https":0.01020408163265306,"www":0.01020408163265306,"acmicpc":0.01020408163265306,"net":0.01020408163265306,"problem":0.01020408163265306,"-":0.01020408163265306,"o":0.01020408163265306,"n":0.01020408163265306,"dp":0.01020408163265306,"i":0.01020408163265306,"java":0.01020408163265306,"max":0.01020408163265306,"maxvalue":0.01020408163265306,"p":0.01020408163265306,"t":0.01020408163265306,"int":0.01020408163265306,"new":0.01020408163265306,"day":0.01020408163265306,"import":0.01020408163265306,"util":0.01020408163265306,"io":0.01020408163265306,"public":0.01020408163265306,"class":0.01020408163265306,"main":0.01020408163265306,"private":0.01020408163265306,"static":0.01020408163265306,"stringbuilder":0.01020408163265306,"sb":0.01020408163265306,"inputprocessor":0.01020408163265306,"void":0.01020408163265306,"string":0.01020408163265306,"args":0.01020408163265306,"input":0.01020408163265306,"pro":0.01020408163265306,"output":0.01020408163265306,"schedule":0.01020408163265306,"nextint":0.01020408163265306,"for":0.01020408163265306,"maxcost":0.01020408163265306,"i--":0.01020408163265306,"if":0.01020408163265306,"math":0.01020408163265306,"else":0.01020408163265306,"result":0.01020408163265306,"append":0.01020408163265306,"try":0.01020408163265306,"bufferedwriter":0.01020408163265306,"bw":0.01020408163265306,"outputstreamwriter":0.01020408163265306,"system":0.01020408163265306,"out":0.01020408163265306,"write":0.01020408163265306,"tostring":0.01020408163265306,"flush":0.01020408163265306,"catch":0.01020408163265306,"ioexception":0.01020408163265306,"e":0.01020408163265306,"throw":0.01020408163265306,"runtimeexception":0.01020408163265306,"bufferedreader":0.01020408163265306,"br":0.01020408163265306,"stringtokenizer":0.01020408163265306,"st":0.01020408163265306,"this":0.01020408163265306,"inputstreamreader":0.01020408163265306,"in":0.01020408163265306,"next":0.01020408163265306,"while":0.01020408163265306,"null":0.01020408163265306,"hasmoreelements":0.01020408163265306,"readline":0.01020408163265306,"return":0.01020408163265306,"nexttoken":0.01020408163265306,"nextline":0.01020408163265306,"integer":0.01020408163265306,"parseint":0.01020408163265306,"long":0.01020408163265306,"nextlong":0.01020408163265306,"parselong":0.01020408163265306},"24":{"0":0.010416666666666666,"1":0.010416666666666666,"2":0.010416666666666666,"11":0.010416666666666666,"23":0.010416666666666666,"28":0.010416666666666666,"31":0.010416666666666666,"32":0.010416666666666666,"1932":0.010416666666666666,"2025":0.010416666666666666,"note":0.010416666666666666,"title":0.010416666666666666,"metadata":0.010416666666666666,"created":0.010416666666666666,"01":0.010416666666666666,"08":0.010416666666666666,"modified":0.010416666666666666,"block":0.010416666666666666,"content":0.010416666666666666,"https":0.010416666666666666,"www":0.010416666666666666,"acmicpc":0.010416666666666666,"net":0.010416666666666666,"problem":0.010416666666666666,"-":0.010416666666666666,"o":0.010416666666666666,"n":0.010416666666666666,"bottom-up":0.010416666666666666,"dp":0.010416666666666666,"j":0.010416666666666666,"left":0.010416666666666666,"right":0.010416666666666666,"i":0.010416666666666666,"java":0.010416666666666666,"import":0.010416666666666666,"util":0.010416666666666666,"io":0.010416666666666666,"public":0.010416666666666666,"class":0.010416666666666666,"main":0.010416666666666666,"private":0.010416666666666666,"static":0.010416666666666666,"stringbuilder":0.010416666666666666,"sb":0.010416666666666666,"new":0.010416666666666666,"inputprocessor":0.010416666666666666,"void":0.010416666666666666,"string":0.010416666666666666,"args":0.010416666666666666,"input":0.010416666666666666,"pro":0.010416666666666666,"output":0.010416666666666666,"int":0.010416666666666666,"triangle":0.010416666666666666,"nextint":0.010416666666666666,"for":0.010416666666666666,"if":0.010416666666666666,"else":0.010416666666666666,"math":0.010416666666666666,"max":0.010416666666666666,"result":0.010416666666666666,"append":0.010416666666666666,"try":0.010416666666666666,"bufferedwriter":0.010416666666666666,"bw":0.010416666666666666,"outputstreamwriter":0.010416666666666666,"system":0.010416666666666666,"out":0.010416666666666666,"write":0.010416666666666666,"tostring":0.010416666666666666,"flush":0.010416666666666666,"catch":0.010416666666666666,"ioexception":0.010416666666666666,"e":0.010416666666666666,"throw":0.010416666666666666,"runtimeexception":0.010416666666666666,"bufferedreader":0.010416666666666666,"br":0.010416666666666666,"stringtokenizer":0.010416666666666666,"st":0.010416666666666666,"this":0.010416666666666666,"inputstreamreader":0.010416666666666666,"in":0.010416666666666666,"next":0.010416666666666666,"while":0.010416666666666666,"null":0.010416666666666666,"hasmoreelements":0.010416666666666666,"readline":0.010416666666666666,"return":0.010416666666666666,"nexttoken":0.010416666666666666,"nextline":0.010416666666666666,"integer":0.010416666666666666,"parseint":0.010416666666666666,"long":0.010416666666666666,"nextlong":0.010416666666666666,"parselong":0.010416666666666666},"25":{"0":0.010752688172043012,"1":0.010752688172043012,"2":0.010752688172043012,"11":0.010752688172043012,"25":0.010752688172043012,"31":0.010752688172043012,"53":0.010752688172043012,"2025":0.010752688172043012,"note":0.010752688172043012,"title":0.010752688172043012,"metadata":0.010752688172043012,"created":0.010752688172043012,"01":0.010752688172043012,"04":0.010752688172043012,"modified":0.010752688172043012,"07":0.010752688172043012,"block":0.010752688172043012,"content":0.010752688172043012,"-":0.010752688172043012,"flipkart":0.010752688172043012,"o":0.010752688172043012,"n":0.010752688172043012,"java":0.010752688172043012,"dp":0.010752688172043012,"row":0.010752688172043012,"col":0.010752688172043012,"max":0.010752688172043012,"leftup":0.010752688172043012,"left":0.010752688172043012,"leftdown":0.010752688172043012,"import":0.010752688172043012,"util":0.010752688172043012,"io":0.010752688172043012,"public":0.010752688172043012,"class":0.010752688172043012,"main":0.010752688172043012,"private":0.010752688172043012,"static":0.010752688172043012,"stringbuilder":0.010752688172043012,"sb":0.010752688172043012,"new":0.010752688172043012,"inputprocessor":0.010752688172043012,"void":0.010752688172043012,"string":0.010752688172043012,"args":0.010752688172043012,"input":0.010752688172043012,"output":0.010752688172043012,"int":0.010752688172043012,"m":0.010752688172043012,"t":0.010752688172043012,"nextint":0.010752688172043012,"while":0.010752688172043012,"for":0.010752688172043012,"i":0.010752688172043012,"j":0.010752688172043012,"pro":0.010752688172043012,"if":0.010752688172043012,"math":0.010752688172043012,"result":0.010752688172043012,"append":0.010752688172043012,"try":0.010752688172043012,"bufferedwriter":0.010752688172043012,"bw":0.010752688172043012,"outputstreamwriter":0.010752688172043012,"system":0.010752688172043012,"out":0.010752688172043012,"write":0.010752688172043012,"tostring":0.010752688172043012,"flush":0.010752688172043012,"catch":0.010752688172043012,"ioexception":0.010752688172043012,"e":0.010752688172043012,"throw":0.010752688172043012,"runtimeexception":0.010752688172043012,"bufferedreader":0.010752688172043012,"br":0.010752688172043012,"stringtokenizer":0.010752688172043012,"st":0.010752688172043012,"this":0.010752688172043012,"inputstreamreader":0.010752688172043012,"in":0.010752688172043012,"next":0.010752688172043012,"null":0.010752688172043012,"hasmoreelements":0.010752688172043012,"readline":0.010752688172043012,"return":0.010752688172043012,"nexttoken":0.010752688172043012,"nextline":0.010752688172043012,"integer":0.010752688172043012,"parseint":0.010752688172043012,"long":0.010752688172043012,"nextlong":0.010752688172043012,"parselong":0.010752688172043012},"26":{"0":0.008333333333333333,"1":0.008333333333333333,"2":0.008333333333333333,"5":0.008333333333333333,"6":0.008333333333333333,"10":0.008333333333333333,"12":0.008333333333333333,"13":0.008333333333333333,"16":0.008333333333333333,"17":0.008333333333333333,"29":0.008333333333333333,"30":0.008333333333333333,"31":0.008333333333333333,"44":0.008333333333333333,"100":0.008333333333333333,"2024":0.008333333333333333,"60060":0.008333333333333333,"note":0.008333333333333333,"title":0.008333333333333333,"metadata":0.008333333333333333,"created":0.008333333333333333,"03":0.008333333333333333,"modified":0.008333333333333333,"block":0.008333333333333333,"content":0.008333333333333333,"https":0.008333333333333333,"school":0.008333333333333333,"programmers":0.008333333333333333,"co":0.008333333333333333,"kr":0.008333333333333333,"learn":0.008333333333333333,"courses":0.008333333333333333,"lessons":0.008333333333333333,"-":0.008333333333333333,"o":0.008333333333333333,"nlogn":0.008333333333333333,"queries":0.008333333333333333,"words":0.008333333333333333,"000log100":0.008333333333333333,"000":0.008333333333333333,"linkedlist":0.008333333333333333,"idx":0.008333333333333333,"arraylist":0.008333333333333333,"java":0.008333333333333333,"stringbuilder":0.008333333333333333,"reverse":0.008333333333333333,"tostring":0.008333333333333333,"setlength":0.008333333333333333,"font":0.008333333333333333,"color":0.008333333333333333,"7f7f7f":0.008333333333333333,"text":0.008333333333333333,"frame":0.008333333333333333,"frodo":0.008333333333333333,"front":0.008333333333333333,"frost":0.008333333333333333,"kakao":0.008333333333333333,"frozen":0.008333333333333333,"emarf":0.008333333333333333,"oakak":0.008333333333333333,"odorf":0.008333333333333333,"tnorf":0.008333333333333333,"tsorf":0.008333333333333333,"nezorf":0.008333333333333333,"quries":0.008333333333333333,"question":0.008333333333333333,"mark":0.008333333333333333,"forward":0.008333333333333333,"query":0.008333333333333333,"a":0.008333333333333333,"z":0.008333333333333333,"oaaaa":0.008333333333333333,"left":0.008333333333333333,"ozzzz":0.008333333333333333,"right":0.008333333333333333,"hl":0.008333333333333333,"54-55":0.008333333333333333,"import":0.008333333333333333,"util":0.008333333333333333,"io":0.008333333333333333,"class":0.008333333333333333,"solution":0.008333333333333333,"private":0.008333333333333333,"static":0.008333333333333333,"sb":0.008333333333333333,"new":0.008333333333333333,"list":0.008333333333333333,"string":0.008333333333333333,"public":0.008333333333333333,"int":0.008333333333333333,"for":0.008333333333333333,"i":0.008333333333333333,"10_000":0.008333333333333333,"add":0.008333333333333333,"w":0.008333333333333333,"len":0.008333333333333333,"length":0.008333333333333333,"get":0.008333333333333333,"reversefrom":0.008333333333333333,"if":0.008333333333333333,"isempty":0.008333333333333333,"continue":0.008333333333333333,"collections":0.008333333333333333,"sort":0.008333333333333333,"answer":0.008333333333333333,"startswith":0.008333333333333333,"countbyrange":0.008333333333333333,"else":0.008333333333333333,"return":0.008333333333333333,"word":0.008333333333333333,"result":0.008333333333333333,"append":0.008333333333333333,"binarysearch":0.008333333333333333,"replaceall":0.008333333333333333,"l":0.008333333333333333,"r":0.008333333333333333,"size":0.008333333333333333,"while":0.008333333333333333,"mid":0.008333333333333333,"compareto":0.008333333333333333},"27":{"0":0.009523809523809525,"1":0.009523809523809525,"2":0.009523809523809525,"12":0.009523809523809525,"15":0.009523809523809525,"16":0.009523809523809525,"29":0.009523809523809525,"31":0.009523809523809525,"47":0.009523809523809525,"49":0.009523809523809525,"2024":0.009523809523809525,"2110":0.009523809523809525,"note":0.009523809523809525,"title":0.009523809523809525,"metadata":0.009523809523809525,"created":0.009523809523809525,"modified":0.009523809523809525,"02":0.009523809523809525,"block":0.009523809523809525,"content":0.009523809523809525,"https":0.009523809523809525,"www":0.009523809523809525,"acmicpc":0.009523809523809525,"net":0.009523809523809525,"problem":0.009523809523809525,"-":0.009523809523809525,"o":0.009523809523809525,"nlogn":0.009523809523809525,"logn":0.009523809523809525,"n":0.009523809523809525,"d":0.009523809523809525,"c":0.009523809523809525,"java":0.009523809523809525,"count":0.009523809523809525,"import":0.009523809523809525,"util":0.009523809523809525,"io":0.009523809523809525,"public":0.009523809523809525,"class":0.009523809523809525,"main":0.009523809523809525,"private":0.009523809523809525,"static":0.009523809523809525,"stringbuilder":0.009523809523809525,"sb":0.009523809523809525,"new":0.009523809523809525,"inputprocessor":0.009523809523809525,"void":0.009523809523809525,"string":0.009523809523809525,"args":0.009523809523809525,"input":0.009523809523809525,"pro":0.009523809523809525,"output":0.009523809523809525,"int":0.009523809523809525,"data":0.009523809523809525,"nextint":0.009523809523809525,"for":0.009523809523809525,"i":0.009523809523809525,"arrays":0.009523809523809525,"sort":0.009523809523809525,"result":0.009523809523809525,"l":0.009523809523809525,"r":0.009523809523809525,"while":0.009523809523809525,"if":0.009523809523809525,"ispossible":0.009523809523809525,"else":0.009523809523809525,"append":0.009523809523809525,"boolean":0.009523809523809525,"prev":0.009523809523809525,"cur":0.009523809523809525,"diff":0.009523809523809525,"continue":0.009523809523809525,"return":0.009523809523809525,"try":0.009523809523809525,"bufferedwriter":0.009523809523809525,"bw":0.009523809523809525,"outputstreamwriter":0.009523809523809525,"system":0.009523809523809525,"out":0.009523809523809525,"write":0.009523809523809525,"tostring":0.009523809523809525,"flush":0.009523809523809525,"catch":0.009523809523809525,"ioexception":0.009523809523809525,"e":0.009523809523809525,"throw":0.009523809523809525,"runtimeexception":0.009523809523809525,"bufferedreader":0.009523809523809525,"br":0.009523809523809525,"stringtokenizer":0.009523809523809525,"st":0.009523809523809525,"this":0.009523809523809525,"inputstreamreader":0.009523809523809525,"in":0.009523809523809525,"next":0.009523809523809525,"null":0.009523809523809525,"hasmoreelements":0.009523809523809525,"readline":0.009523809523809525,"nexttoken":0.009523809523809525,"nextline":0.009523809523809525,"integer":0.009523809523809525,"parseint":0.009523809523809525,"long":0.009523809523809525,"nextlong":0.009523809523809525,"parselong":0.009523809523809525},"28":{"0":0.009523809523809525,"1":0.009523809523809525,"2":0.009523809523809525,"3":0.009523809523809525,"5":0.009523809523809525,"7":0.009523809523809525,"8":0.009523809523809525,"9":0.009523809523809525,"12":0.009523809523809525,"13":0.009523809523809525,"15":0.009523809523809525,"28":0.009523809523809525,"31":0.009523809523809525,"40":0.009523809523809525,"43":0.009523809523809525,"50":0.009523809523809525,"55":0.009523809523809525,"2024":0.009523809523809525,"note":0.009523809523809525,"title":0.009523809523809525,"metadata":0.009523809523809525,"created":0.009523809523809525,"modified":0.009523809523809525,"block":0.009523809523809525,"content":0.009523809523809525,"amazon":0.009523809523809525,"-":0.009523809523809525,"o":0.009523809523809525,"nlogn":0.009523809523809525,"logn":0.009523809523809525,"java":0.009523809523809525,"data":0.009523809523809525,"mid":0.009523809523809525,"l":0.009523809523809525,"r":0.009523809523809525,"text":0.009523809523809525,"-15":0.009523809523809525,"-6":0.009523809523809525,"-4":0.009523809523809525,"-1":0.009523809523809525,"import":0.009523809523809525,"util":0.009523809523809525,"io":0.009523809523809525,"public":0.009523809523809525,"class":0.009523809523809525,"main":0.009523809523809525,"private":0.009523809523809525,"static":0.009523809523809525,"stringbuilder":0.009523809523809525,"sb":0.009523809523809525,"new":0.009523809523809525,"inputprocessor":0.009523809523809525,"void":0.009523809523809525,"string":0.009523809523809525,"args":0.009523809523809525,"input":0.009523809523809525,"pro":0.009523809523809525,"output":0.009523809523809525,"int":0.009523809523809525,"n":0.009523809523809525,"nextint":0.009523809523809525,"for":0.009523809523809525,"i":0.009523809523809525,"arrays":0.009523809523809525,"sort":0.009523809523809525,"length":0.009523809523809525,"result":0.009523809523809525,"while":0.009523809523809525,"if":0.009523809523809525,"break":0.009523809523809525,"else":0.009523809523809525,"append":0.009523809523809525,"try":0.009523809523809525,"bufferedwriter":0.009523809523809525,"bw":0.009523809523809525,"outputstreamwriter":0.009523809523809525,"system":0.009523809523809525,"out":0.009523809523809525,"write":0.009523809523809525,"tostring":0.009523809523809525,"flush":0.009523809523809525,"catch":0.009523809523809525,"ioexception":0.009523809523809525,"e":0.009523809523809525,"throw":0.009523809523809525,"runtimeexception":0.009523809523809525,"bufferedreader":0.009523809523809525,"br":0.009523809523809525,"stringtokenizer":0.009523809523809525,"st":0.009523809523809525,"this":0.009523809523809525,"inputstreamreader":0.009523809523809525,"in":0.009523809523809525,"next":0.009523809523809525,"null":0.009523809523809525,"hasmoreelements":0.009523809523809525,"readline":0.009523809523809525,"return":0.009523809523809525,"nexttoken":0.009523809523809525,"nextline":0.009523809523809525,"integer":0.009523809523809525,"parseint":0.009523809523809525,"long":0.009523809523809525,"nextlong":0.009523809523809525,"parselong":0.009523809523809525},"29":{"0":0.009708737864077669,"1":0.009708737864077669,"2":0.009708737864077669,"3":0.009708737864077669,"4":0.009708737864077669,"7":0.009708737864077669,"12":0.009708737864077669,"15":0.009708737864077669,"19":0.009708737864077669,"27":0.009708737864077669,"31":0.009708737864077669,"37":0.009708737864077669,"59":0.009708737864077669,"2024":0.009708737864077669,"note":0.009708737864077669,"title":0.009708737864077669,"metadata":0.009708737864077669,"created":0.009708737864077669,"modified":0.009708737864077669,"block":0.009708737864077669,"content":0.009708737864077669,"-":0.009708737864077669,"zoho":0.009708737864077669,"o":0.009708737864077669,"nlogn":0.009708737864077669,"logn":0.009708737864077669,"lowerboud":0.009708737864077669,"upperbound":0.009708737864077669,"lowerbound":0.009708737864077669,"x":0.009708737864077669,"text":0.009708737864077669,"-1":0.009708737864077669,"java":0.009708737864077669,"import":0.009708737864077669,"util":0.009708737864077669,"io":0.009708737864077669,"public":0.009708737864077669,"class":0.009708737864077669,"main":0.009708737864077669,"private":0.009708737864077669,"static":0.009708737864077669,"stringbuilder":0.009708737864077669,"sb":0.009708737864077669,"new":0.009708737864077669,"inputprocessor":0.009708737864077669,"void":0.009708737864077669,"string":0.009708737864077669,"args":0.009708737864077669,"input":0.009708737864077669,"pro":0.009708737864077669,"output":0.009708737864077669,"int":0.009708737864077669,"n":0.009708737864077669,"data":0.009708737864077669,"nextint":0.009708737864077669,"for":0.009708737864077669,"i":0.009708737864077669,"arrays":0.009708737864077669,"sort":0.009708737864077669,"left":0.009708737864077669,"right":0.009708737864077669,"result":0.009708737864077669,"append":0.009708737864077669,"target":0.009708737864077669,"l":0.009708737864077669,"r":0.009708737864077669,"while":0.009708737864077669,"mid":0.009708737864077669,"if":0.009708737864077669,"else":0.009708737864077669,"return":0.009708737864077669,"try":0.009708737864077669,"bufferedwriter":0.009708737864077669,"bw":0.009708737864077669,"outputstreamwriter":0.009708737864077669,"system":0.009708737864077669,"out":0.009708737864077669,"write":0.009708737864077669,"tostring":0.009708737864077669,"flush":0.009708737864077669,"catch":0.009708737864077669,"ioexception":0.009708737864077669,"e":0.009708737864077669,"throw":0.009708737864077669,"runtimeexception":0.009708737864077669,"bufferedreader":0.009708737864077669,"br":0.009708737864077669,"stringtokenizer":0.009708737864077669,"st":0.009708737864077669,"this":0.009708737864077669,"inputstreamreader":0.009708737864077669,"in":0.009708737864077669,"next":0.009708737864077669,"null":0.009708737864077669,"hasmoreelements":0.009708737864077669,"readline":0.009708737864077669,"nexttoken":0.009708737864077669,"nextline":0.009708737864077669,"integer":0.009708737864077669,"parseint":0.009708737864077669,"long":0.009708737864077669,"nextlong":0.009708737864077669,"parselong":0.009708737864077669},"30":{"0":0.010416666666666666,"1":0.010416666666666666,"12":0.010416666666666666,"15":0.010416666666666666,"18":0.010416666666666666,"26":0.010416666666666666,"31":0.010416666666666666,"51":0.010416666666666666,"1715":0.010416666666666666,"2024":0.010416666666666666,"note":0.010416666666666666,"title":0.010416666666666666,"metadata":0.010416666666666666,"created":0.010416666666666666,"04":0.010416666666666666,"modified":0.010416666666666666,"block":0.010416666666666666,"content":0.010416666666666666,"https":0.010416666666666666,"www":0.010416666666666666,"acmicpc":0.010416666666666666,"net":0.010416666666666666,"problem":0.010416666666666666,"-":0.010416666666666666,"o":0.010416666666666666,"nlogn":0.010416666666666666,"integer":0.010416666666666666,"result":0.010416666666666666,"java":0.010416666666666666,"import":0.010416666666666666,"util":0.010416666666666666,"io":0.010416666666666666,"public":0.010416666666666666,"class":0.010416666666666666,"main":0.010416666666666666,"private":0.010416666666666666,"static":0.010416666666666666,"stringbuilder":0.010416666666666666,"sb":0.010416666666666666,"new":0.010416666666666666,"inputprocessor":0.010416666666666666,"void":0.010416666666666666,"string":0.010416666666666666,"args":0.010416666666666666,"input":0.010416666666666666,"pro":0.010416666666666666,"output":0.010416666666666666,"int":0.010416666666666666,"n":0.010416666666666666,"data":0.010416666666666666,"nextint":0.010416666666666666,"for":0.010416666666666666,"i":0.010416666666666666,"queue":0.010416666666666666,"pq":0.010416666666666666,"priorityqueue":0.010416666666666666,"add":0.010416666666666666,"while":0.010416666666666666,"size":0.010416666666666666,"v1":0.010416666666666666,"poll":0.010416666666666666,"v2":0.010416666666666666,"sum":0.010416666666666666,"append":0.010416666666666666,"try":0.010416666666666666,"bufferedwriter":0.010416666666666666,"bw":0.010416666666666666,"outputstreamwriter":0.010416666666666666,"system":0.010416666666666666,"out":0.010416666666666666,"write":0.010416666666666666,"tostring":0.010416666666666666,"flush":0.010416666666666666,"catch":0.010416666666666666,"ioexception":0.010416666666666666,"e":0.010416666666666666,"throw":0.010416666666666666,"runtimeexception":0.010416666666666666,"bufferedreader":0.010416666666666666,"br":0.010416666666666666,"stringtokenizer":0.010416666666666666,"st":0.010416666666666666,"this":0.010416666666666666,"inputstreamreader":0.010416666666666666,"in":0.010416666666666666,"next":0.010416666666666666,"null":0.010416666666666666,"hasmoreelements":0.010416666666666666,"readline":0.010416666666666666,"return":0.010416666666666666,"nexttoken":0.010416666666666666,"nextline":0.010416666666666666,"parseint":0.010416666666666666,"long":0.010416666666666666,"nextlong":0.010416666666666666,"parselong":0.010416666666666666},"31":{"0":0.01282051282051282,"1":0.01282051282051282,"2":0.01282051282051282,"7":0.01282051282051282,"12":0.01282051282051282,"13":0.01282051282051282,"14":0.01282051282051282,"15":0.01282051282051282,"16":0.01282051282051282,"25":0.01282051282051282,"30":0.01282051282051282,"31":0.01282051282051282,"35":0.01282051282051282,"40":0.01282051282051282,"47":0.01282051282051282,"2024":0.01282051282051282,"42889":0.01282051282051282,"note":0.01282051282051282,"title":0.01282051282051282,"metadata":0.01282051282051282,"created":0.01282051282051282,"modified":0.01282051282051282,"07":0.01282051282051282,"block":0.01282051282051282,"content":0.01282051282051282,"https":0.01282051282051282,"school":0.01282051282051282,"programmers":0.01282051282051282,"co":0.01282051282051282,"kr":0.01282051282051282,"learn":0.01282051282051282,"courses":0.01282051282051282,"lessons":0.01282051282051282,"-":0.01282051282051282,"o":0.01282051282051282,"nlogn":0.01282051282051282,"int":0.01282051282051282,"stoped":0.01282051282051282,"stages":0.01282051282051282,"length":0.01282051282051282,"double":0.01282051282051282,"if":0.01282051282051282,"java":0.01282051282051282,"hl":0.01282051282051282,"import":0.01282051282051282,"util":0.01282051282051282,"lang":0.01282051282051282,"class":0.01282051282051282,"solution":0.01282051282051282,"public":0.01282051282051282,"n":0.01282051282051282,"new":0.01282051282051282,"for":0.01282051282051282,"s":0.01282051282051282,"list":0.01282051282051282,"stage":0.01282051282051282,"arraylist":0.01282051282051282,"players":0.01282051282051282,"i":0.01282051282051282,"stop":0.01282051282051282,"failrate":0.01282051282051282,"add":0.01282051282051282,"collections":0.01282051282051282,"sort":0.01282051282051282,"answer":0.01282051282051282,"size":0.01282051282051282,"get":0.01282051282051282,"no":0.01282051282051282,"return":0.01282051282051282,"private":0.01282051282051282,"static":0.01282051282051282,"implements":0.01282051282051282,"comparable":0.01282051282051282,"final":0.01282051282051282,"this":0.01282051282051282,"compareto":0.01282051282051282,"else":0.01282051282051282,"-1":0.01282051282051282},"32":{"0":0.010752688172043012,"1":0.010752688172043012,"2":0.010752688172043012,"12":0.010752688172043012,"14":0.010752688172043012,"15":0.010752688172043012,"20":0.010752688172043012,"24":0.010752688172043012,"31":0.010752688172043012,"47":0.010752688172043012,"52":0.010752688172043012,"2024":0.010752688172043012,"18310":0.010752688172043012,"note":0.010752688172043012,"title":0.010752688172043012,"metadata":0.010752688172043012,"created":0.010752688172043012,"07":0.010752688172043012,"modified":0.010752688172043012,"block":0.010752688172043012,"content":0.010752688172043012,"https":0.010752688172043012,"www":0.010752688172043012,"acmicpc":0.010752688172043012,"net":0.010752688172043012,"problem":0.010752688172043012,"o":0.010752688172043012,"nlogn":0.010752688172043012,"-":0.010752688172043012,"n":0.010752688172043012,"for":0.010752688172043012,"java":0.010752688172043012,"import":0.010752688172043012,"util":0.010752688172043012,"io":0.010752688172043012,"public":0.010752688172043012,"class":0.010752688172043012,"main":0.010752688172043012,"private":0.010752688172043012,"static":0.010752688172043012,"stringbuilder":0.010752688172043012,"sb":0.010752688172043012,"new":0.010752688172043012,"inputprocessor":0.010752688172043012,"void":0.010752688172043012,"string":0.010752688172043012,"args":0.010752688172043012,"input":0.010752688172043012,"pro":0.010752688172043012,"output":0.010752688172043012,"int":0.010752688172043012,"house":0.010752688172043012,"nextint":0.010752688172043012,"i":0.010752688172043012,"arrays":0.010752688172043012,"sort":0.010752688172043012,"mid":0.010752688172043012,"append":0.010752688172043012,"try":0.010752688172043012,"bufferedwriter":0.010752688172043012,"bw":0.010752688172043012,"outputstreamwriter":0.010752688172043012,"system":0.010752688172043012,"out":0.010752688172043012,"write":0.010752688172043012,"tostring":0.010752688172043012,"flush":0.010752688172043012,"catch":0.010752688172043012,"ioexception":0.010752688172043012,"e":0.010752688172043012,"throw":0.010752688172043012,"runtimeexception":0.010752688172043012,"bufferedreader":0.010752688172043012,"br":0.010752688172043012,"stringtokenizer":0.010752688172043012,"st":0.010752688172043012,"this":0.010752688172043012,"inputstreamreader":0.010752688172043012,"in":0.010752688172043012,"next":0.010752688172043012,"while":0.010752688172043012,"null":0.010752688172043012,"hasmoreelements":0.010752688172043012,"readline":0.010752688172043012,"return":0.010752688172043012,"nexttoken":0.010752688172043012,"nextline":0.010752688172043012,"result":0.010752688172043012,"integer":0.010752688172043012,"parseint":0.010752688172043012,"long":0.010752688172043012,"nextlong":0.010752688172043012,"parselong":0.010752688172043012},"33":{"1":0.009615384615384616,"12":0.009615384615384616,"13":0.009615384615384616,"15":0.009615384615384616,"23":0.009615384615384616,"31":0.009615384615384616,"55":0.009615384615384616,"56":0.009615384615384616,"58":0.009615384615384616,"2024":0.009615384615384616,"10825":0.009615384615384616,"note":0.009615384615384616,"title":0.009615384615384616,"metadata":0.009615384615384616,"created":0.009615384615384616,"modified":0.009615384615384616,"07":0.009615384615384616,"block":0.009615384615384616,"content":0.009615384615384616,"https":0.009615384615384616,"www":0.009615384615384616,"acmicpc":0.009615384615384616,"net":0.009615384615384616,"problem":0.009615384615384616,"o":0.009615384615384616,"nlogn":0.009615384615384616,"comparable":0.009615384615384616,"java":0.009615384615384616,"import":0.009615384615384616,"util":0.009615384615384616,"io":0.009615384615384616,"public":0.009615384615384616,"class":0.009615384615384616,"main":0.009615384615384616,"private":0.009615384615384616,"static":0.009615384615384616,"stringbuilder":0.009615384615384616,"sb":0.009615384615384616,"new":0.009615384615384616,"inputprocessor":0.009615384615384616,"void":0.009615384615384616,"string":0.009615384615384616,"args":0.009615384615384616,"input":0.009615384615384616,"pro":0.009615384615384616,"output":0.009615384615384616,"int":0.009615384615384616,"n":0.009615384615384616,"list":0.009615384615384616,"student":0.009615384615384616,"students":0.009615384615384616,"nextint":0.009615384615384616,"arraylist":0.009615384615384616,"for":0.009615384615384616,"i":0.009615384615384616,"name":0.009615384615384616,"next":0.009615384615384616,"ko":0.009615384615384616,"eng":0.009615384615384616,"math":0.009615384615384616,"add":0.009615384615384616,"implements":0.009615384615384616,"final":0.009615384615384616,"this":0.009615384615384616,"compareto":0.009615384615384616,"if":0.009615384615384616,"return":0.009615384615384616,"-":0.009615384615384616,"else":0.009615384615384616,"collections":0.009615384615384616,"sort":0.009615384615384616,"append":0.009615384615384616,"try":0.009615384615384616,"bufferedwriter":0.009615384615384616,"bw":0.009615384615384616,"outputstreamwriter":0.009615384615384616,"system":0.009615384615384616,"out":0.009615384615384616,"write":0.009615384615384616,"tostring":0.009615384615384616,"flush":0.009615384615384616,"catch":0.009615384615384616,"ioexception":0.009615384615384616,"e":0.009615384615384616,"throw":0.009615384615384616,"runtimeexception":0.009615384615384616,"bufferedreader":0.009615384615384616,"br":0.009615384615384616,"stringtokenizer":0.009615384615384616,"st":0.009615384615384616,"inputstreamreader":0.009615384615384616,"in":0.009615384615384616,"while":0.009615384615384616,"null":0.009615384615384616,"hasmoreelements":0.009615384615384616,"readline":0.009615384615384616,"nexttoken":0.009615384615384616,"nextline":0.009615384615384616,"result":0.009615384615384616,"integer":0.009615384615384616,"parseint":0.009615384615384616,"long":0.009615384615384616,"nextlong":0.009615384615384616,"parselong":0.009615384615384616},"34":{"0":0.013333333333333334,"1":0.013333333333333334,"2":0.013333333333333334,"3":0.013333333333333334,"4":0.013333333333333334,"12":0.013333333333333334,"15":0.013333333333333334,"22":0.013333333333333334,"23":0.013333333333333334,"30":0.013333333333333334,"33":0.013333333333333334,"35":0.013333333333333334,"57":0.013333333333333334,"2025":0.013333333333333334,"60063":0.013333333333333334,"note":0.013333333333333334,"title":0.013333333333333334,"metadata":0.013333333333333334,"created":0.013333333333333334,"01":0.013333333333333334,"modified":0.013333333333333334,"02":0.013333333333333334,"09":0.013333333333333334,"block":0.013333333333333334,"content":0.013333333333333334,"https":0.013333333333333334,"school":0.013333333333333334,"programmers":0.013333333333333334,"co":0.013333333333333334,"kr":0.013333333333333334,"learn":0.013333333333333334,"courses":0.013333333333333334,"lessons":0.013333333333333334,"-":0.013333333333333334,"o":0.013333333333333334,"v":0.013333333333333334,"e":0.013333333333333334,"bfs":0.013333333333333334,"java":0.013333333333333334,"x1":0.013333333333333334,"x2":0.013333333333333334,"y1":0.013333333333333334,"y2":0.013333333333333334,"b":0.013333333333333334,"x":0.013333333333333334,"y":0.013333333333333334,"-1":0.013333333333333334,"2025-01-02":0.013333333333333334,"png":0.013333333333333334,"row":0.013333333333333334,"text":0.013333333333333334,"set":0.013333333333333334,"equals":0.013333333333333334,"hashcode":0.013333333333333334,"boolean":0.013333333333333334,"ispossible":0.013333333333333334,"true":0.013333333333333334,"for":0.013333333333333334,"robot":0.013333333333333334,"visited":0.013333333333333334,"if":0.013333333333333334,"next":0.013333333333333334,"false":0.013333333333333334,"break":0.013333333333333334,"u":0.013333333333333334,"int":0.013333333333333334,"nums":0.013333333333333334,"new":0.013333333333333334,"ishosizontal":0.013333333333333334,"i":0.013333333333333334,"maps":0.013333333333333334,"result":0.013333333333333334,"add":0.013333333333333334,"dist":0.013333333333333334,"isvertical":0.013333333333333334},"35":{"12":0.04,"15":0.04,"22":0.04,"33":0.04,"35":0.04,"57":0.04,"2025":0.04,"note":0.04,"title":0.04,"metadata":0.04,"created":0.04,"01":0.04,"modified":0.04,"02":0.04,"09":0.04,"block":0.04,"content":0.04,"cont'd":0.04,"java":0.04,"hl":0.04,"8-10":0.04,"36-41":0.04,"116-140":0.04,"import":0.04,"util":0.04},"36":{"0":0.011235955056179775,"1":0.011235955056179775,"2":0.011235955056179775,"4":0.011235955056179775,"12":0.011235955056179775,"15":0.011235955056179775,"22":0.011235955056179775,"33":0.011235955056179775,"35":0.011235955056179775,"57":0.011235955056179775,"2025":0.011235955056179775,"note":0.011235955056179775,"title":0.011235955056179775,"metadata":0.011235955056179775,"created":0.011235955056179775,"01":0.011235955056179775,"modified":0.011235955056179775,"02":0.011235955056179775,"09":0.011235955056179775,"block":0.011235955056179775,"content":0.011235955056179775,"cont'd":0.011235955056179775,"class":0.011235955056179775,"solution":0.011235955056179775,"public":0.011235955056179775,"int":0.011235955056179775,"board":0.011235955056179775,"row":0.011235955056179775,"length":0.011235955056179775,"col":0.011235955056179775,"newboard":0.011235955056179775,"new":0.011235955056179775,"for":0.011235955056179775,"i":0.011235955056179775,"arrays":0.011235955056179775,"fill":0.011235955056179775,"j":0.011235955056179775,"-":0.011235955056179775,"deque":0.011235955056179775,"robot":0.011235955056179775,"que":0.011235955056179775,"arraydeque":0.011235955056179775,"start":0.011235955056179775,"add":0.011235955056179775,"set":0.011235955056179775,"visited":0.011235955056179775,"hashset":0.011235955056179775,"answer":0.011235955056179775,"-1":0.011235955056179775,"while":0.011235955056179775,"isempty":0.011235955056179775,"cur":0.011235955056179775,"poll":0.011235955056179775,"if":0.011235955056179775,"isfinish":0.011235955056179775,"dist":0.011235955056179775,"break":0.011235955056179775,"list":0.011235955056179775,"nexts":0.011235955056179775,"findnexts":0.011235955056179775,"next":0.011235955056179775,"boolean":0.011235955056179775,"ispossible":0.011235955056179775,"true":0.011235955056179775,"v":0.011235955056179775,"false":0.011235955056179775,"return":0.011235955056179775,"private":0.011235955056179775,"static":0.011235955056179775,"final":0.011235955056179775,"x1":0.011235955056179775,"y1":0.011235955056179775,"x2":0.011235955056179775,"y2":0.011235955056179775,"this":0.011235955056179775,"x":0.011235955056179775,"y":0.011235955056179775,"o":0.011235955056179775,"ishosizontal":0.011235955056179775,"isvertical":0.011235955056179775,"dir":0.011235955056179775,"maps":0.011235955056179775,"result":0.011235955056179775,"arraylist":0.011235955056179775,"dx1":0.011235955056179775,"dy1":0.011235955056179775,"dx2":0.011235955056179775,"dy2":0.011235955056179775,"continue":0.011235955056179775},"37":{"0":0.030303030303030304,"1":0.030303030303030304,"12":0.030303030303030304,"15":0.030303030303030304,"22":0.030303030303030304,"33":0.030303030303030304,"35":0.030303030303030304,"57":0.030303030303030304,"2025":0.030303030303030304,"note":0.030303030303030304,"title":0.030303030303030304,"metadata":0.030303030303030304,"created":0.030303030303030304,"01":0.030303030303030304,"modified":0.030303030303030304,"02":0.030303030303030304,"09":0.030303030303030304,"block":0.030303030303030304,"content":0.030303030303030304,"cont'd":0.030303030303030304,"result":0.030303030303030304,"add":0.030303030303030304,"new":0.030303030303030304,"robot":0.030303030303030304,"x1":0.030303030303030304,"y1":0.030303030303030304,"-":0.030303030303030304,"dist":0.030303030303030304,"x2":0.030303030303030304,"y2":0.030303030303030304,"if":0.030303030303030304,"maps":0.030303030303030304,"return":0.030303030303030304},"38":{"15":0.027777777777777776,"21":0.027777777777777776,"22":0.027777777777777776,"27":0.027777777777777776,"54":0.027777777777777776,"57":0.027777777777777776,"58":0.027777777777777776,"2025":0.027777777777777776,"16234":0.027777777777777776,"note":0.027777777777777776,"title":0.027777777777777776,"metadata":0.027777777777777776,"created":0.027777777777777776,"01":0.027777777777777776,"modified":0.027777777777777776,"block":0.027777777777777776,"content":0.027777777777777776,"https":0.027777777777777776,"www":0.027777777777777776,"acmicpc":0.027777777777777776,"net":0.027777777777777776,"problem":0.027777777777777776,"-":0.027777777777777776,"o":0.027777777777777776,"v":0.027777777777777776,"e":0.027777777777777776,"bfs":0.027777777777777776,"l":0.027777777777777776,"r":0.027777777777777776,"groupno":0.027777777777777776,"n":0.027777777777777776,"java":0.027777777777777776,"list":0.027777777777777776,"int":0.027777777777777776,"union":0.027777777777777776,"sum":0.027777777777777776},"39":{"0":0.008695652173913044,"1":0.008695652173913044,"4":0.008695652173913044,"15":0.008695652173913044,"21":0.008695652173913044,"22":0.008695652173913044,"27":0.008695652173913044,"54":0.008695652173913044,"57":0.008695652173913044,"58":0.008695652173913044,"2025":0.008695652173913044,"note":0.008695652173913044,"title":0.008695652173913044,"metadata":0.008695652173913044,"created":0.008695652173913044,"01":0.008695652173913044,"modified":0.008695652173913044,"block":0.008695652173913044,"content":0.008695652173913044,"cont'd":0.008695652173913044,"java":0.008695652173913044,"import":0.008695652173913044,"util":0.008695652173913044,"io":0.008695652173913044,"public":0.008695652173913044,"class":0.008695652173913044,"main":0.008695652173913044,"private":0.008695652173913044,"static":0.008695652173913044,"stringbuilder":0.008695652173913044,"sb":0.008695652173913044,"new":0.008695652173913044,"inputprocessor":0.008695652173913044,"void":0.008695652173913044,"string":0.008695652173913044,"args":0.008695652173913044,"input":0.008695652173913044,"pro":0.008695652173913044,"output":0.008695652173913044,"int":0.008695652173913044,"n":0.008695652173913044,"l":0.008695652173913044,"r":0.008695652173913044,"country":0.008695652173913044,"nextint":0.008695652173913044,"for":0.008695652173913044,"i":0.008695652173913044,"j":0.008695652173913044,"result":0.008695652173913044,"while":0.008695652173913044,"true":0.008695652173913044,"groupno":0.008695652173913044,"groups":0.008695652173913044,"if":0.008695652173913044,"bfs":0.008695652173913044,"break":0.008695652173913044,"append":0.008695652173913044,"final":0.008695652173913044,"dir":0.008695652173913044,"-1":0.008695652173913044,"startx":0.008695652173913044,"starty":0.008695652173913044,"deque":0.008695652173913044,"que":0.008695652173913044,"arraydeque":0.008695652173913044,"add":0.008695652173913044,"list":0.008695652173913044,"union":0.008695652173913044,"arraylist":0.008695652173913044,"sum":0.008695652173913044,"isempty":0.008695652173913044,"cur":0.008695652173913044,"poll":0.008695652173913044,"x":0.008695652173913044,"y":0.008695652173913044,"dx":0.008695652173913044,"dy":0.008695652173913044,"continue":0.008695652173913044,"diff":0.008695652173913044,"math":0.008695652173913044,"abs":0.008695652173913044,"-":0.008695652173913044,"next":0.008695652173913044,"size":0.008695652173913044,"return":0.008695652173913044,"avg":0.008695652173913044,"u":0.008695652173913044,"try":0.008695652173913044,"bufferedwriter":0.008695652173913044,"bw":0.008695652173913044,"outputstreamwriter":0.008695652173913044,"system":0.008695652173913044,"out":0.008695652173913044,"write":0.008695652173913044,"tostring":0.008695652173913044,"flush":0.008695652173913044,"catch":0.008695652173913044,"ioexception":0.008695652173913044,"e":0.008695652173913044,"throw":0.008695652173913044,"runtimeexception":0.008695652173913044,"bufferedreader":0.008695652173913044,"br":0.008695652173913044,"stringtokenizer":0.008695652173913044,"st":0.008695652173913044,"this":0.008695652173913044,"inputstreamreader":0.008695652173913044,"in":0.008695652173913044,"null":0.008695652173913044,"hasmoreelements":0.008695652173913044,"readline":0.008695652173913044,"nexttoken":0.008695652173913044,"nextline":0.008695652173913044,"integer":0.008695652173913044,"parseint":0.008695652173913044},"40":{"15":0.03571428571428571,"21":0.03571428571428571,"22":0.03571428571428571,"27":0.03571428571428571,"54":0.03571428571428571,"57":0.03571428571428571,"58":0.03571428571428571,"2025":0.03571428571428571,"note":0.03571428571428571,"title":0.03571428571428571,"metadata":0.03571428571428571,"created":0.03571428571428571,"01":0.03571428571428571,"modified":0.03571428571428571,"block":0.03571428571428571,"content":0.03571428571428571,"cont'd":0.03571428571428571,"return":0.03571428571428571,"result":0.03571428571428571,"public":0.03571428571428571,"int":0.03571428571428571,"nextint":0.03571428571428571,"integer":0.03571428571428571,"parseint":0.03571428571428571,"next":0.03571428571428571,"long":0.03571428571428571,"nextlong":0.03571428571428571,"parselong":0.03571428571428571},"41":{"3":0.027777777777777776,"4":0.027777777777777776,"15":0.027777777777777776,"20":0.027777777777777776,"22":0.027777777777777776,"24":0.027777777777777776,"32":0.027777777777777776,"36":0.027777777777777776,"57":0.027777777777777776,"2025":0.027777777777777776,"18428":0.027777777777777776,"note":0.027777777777777776,"title":0.027777777777777776,"metadata":0.027777777777777776,"created":0.027777777777777776,"01":0.027777777777777776,"modified":0.027777777777777776,"07":0.027777777777777776,"block":0.027777777777777776,"content":0.027777777777777776,"https":0.027777777777777776,"www":0.027777777777777776,"acmicpc":0.027777777777777776,"net":0.027777777777777776,"problem":0.027777777777777776,"-":0.027777777777777776,"o":0.027777777777777776,"36c3":0.027777777777777776,"v":0.027777777777777776,"e":0.027777777777777776,"bfs":0.027777777777777776,"x":0.027777777777777776,"t":0.027777777777777776,"s":0.027777777777777776,"false":0.027777777777777776,"true":0.027777777777777776},"42":{"0":0.008547008547008548,"1":0.008547008547008548,"3":0.008547008547008548,"4":0.008547008547008548,"15":0.008547008547008548,"20":0.008547008547008548,"22":0.008547008547008548,"24":0.008547008547008548,"32":0.008547008547008548,"57":0.008547008547008548,"2025":0.008547008547008548,"note":0.008547008547008548,"title":0.008547008547008548,"metadata":0.008547008547008548,"created":0.008547008547008548,"01":0.008547008547008548,"modified":0.008547008547008548,"07":0.008547008547008548,"block":0.008547008547008548,"content":0.008547008547008548,"cont'd":0.008547008547008548,"java":0.008547008547008548,"import":0.008547008547008548,"util":0.008547008547008548,"io":0.008547008547008548,"public":0.008547008547008548,"class":0.008547008547008548,"main":0.008547008547008548,"private":0.008547008547008548,"static":0.008547008547008548,"stringbuilder":0.008547008547008548,"sb":0.008547008547008548,"new":0.008547008547008548,"inputprocessor":0.008547008547008548,"void":0.008547008547008548,"string":0.008547008547008548,"args":0.008547008547008548,"input":0.008547008547008548,"pro":0.008547008547008548,"output":0.008547008547008548,"int":0.008547008547008548,"n":0.008547008547008548,"school":0.008547008547008548,"list":0.008547008547008548,"blank":0.008547008547008548,"blanks":0.008547008547008548,"teacher":0.008547008547008548,"teachers":0.008547008547008548,"boolean":0.008547008547008548,"result":0.008547008547008548,"nextint":0.008547008547008548,"arraylist":0.008547008547008548,"for":0.008547008547008548,"i":0.008547008547008548,"j":0.008547008547008548,"v":0.008547008547008548,"next":0.008547008547008548,"if":0.008547008547008548,"t":0.008547008547008548,"equals":0.008547008547008548,"add":0.008547008547008548,"-1":0.008547008547008548,"else":0.008547008547008548,"x":0.008547008547008548,"final":0.008547008547008548,"y":0.008547008547008548,"this":0.008547008547008548,"dir":0.008547008547008548,"createdummy":0.008547008547008548,"append":0.008547008547008548,"yes":0.008547008547008548,"no":0.008547008547008548,"idx":0.008547008547008548,"cnt":0.008547008547008548,"return":0.008547008547008548,"survive":0.008547008547008548,"size":0.008547008547008548,"get":0.008547008547008548,"o":0.008547008547008548,"deque":0.008547008547008548,"queue":0.008547008547008548,"arraydeque":0.008547008547008548,"while":0.008547008547008548,"isempty":0.008547008547008548,"cur":0.008547008547008548,"poll":0.008547008547008548,"dx":0.008547008547008548,"dy":0.008547008547008548,"continue":0.008547008547008548,"s":0.008547008547008548,"false":0.008547008547008548,"true":0.008547008547008548,"try":0.008547008547008548,"bufferedwriter":0.008547008547008548,"bw":0.008547008547008548,"outputstreamwriter":0.008547008547008548,"system":0.008547008547008548,"out":0.008547008547008548,"write":0.008547008547008548,"tostring":0.008547008547008548,"flush":0.008547008547008548,"catch":0.008547008547008548,"ioexception":0.008547008547008548,"e":0.008547008547008548,"throw":0.008547008547008548,"runtimeexception":0.008547008547008548,"bufferedreader":0.008547008547008548,"br":0.008547008547008548,"stringtokenizer":0.008547008547008548,"st":0.008547008547008548,"inputstreamreader":0.008547008547008548,"in":0.008547008547008548,"null":0.008547008547008548,"hasmoreelements":0.008547008547008548,"readline":0.008547008547008548,"nexttoken":0.008547008547008548,"nextline":0.008547008547008548},"43":{"15":0.024390243902439025,"20":0.024390243902439025,"22":0.024390243902439025,"24":0.024390243902439025,"32":0.024390243902439025,"57":0.024390243902439025,"2025":0.024390243902439025,"note":0.024390243902439025,"title":0.024390243902439025,"metadata":0.024390243902439025,"created":0.024390243902439025,"01":0.024390243902439025,"modified":0.024390243902439025,"07":0.024390243902439025,"block":0.024390243902439025,"content":0.024390243902439025,"cont'd":0.024390243902439025,"return":0.024390243902439025,"st":0.024390243902439025,"nexttoken":0.024390243902439025,"public":0.024390243902439025,"string":0.024390243902439025,"nextline":0.024390243902439025,"result":0.024390243902439025,"try":0.024390243902439025,"br":0.024390243902439025,"readline":0.024390243902439025,"catch":0.024390243902439025,"ioexception":0.024390243902439025,"e":0.024390243902439025,"throw":0.024390243902439025,"new":0.024390243902439025,"runtimeexception":0.024390243902439025,"int":0.024390243902439025,"nextint":0.024390243902439025,"integer":0.024390243902439025,"parseint":0.024390243902439025,"next":0.024390243902439025,"long":0.024390243902439025,"nextlong":0.024390243902439025,"parselong":0.024390243902439025},"44":{"0":0.008928571428571428,"1":0.008928571428571428,"2":0.008928571428571428,"3":0.008928571428571428,"4":0.008928571428571428,"5":0.008928571428571428,"10":0.008928571428571428,"11":0.008928571428571428,"15":0.008928571428571428,"17":0.008928571428571428,"19":0.008928571428571428,"20":0.008928571428571428,"22":0.008928571428571428,"57":0.008928571428571428,"576":0.008928571428571428,"2025":0.008928571428571428,"14888":0.008928571428571428,"note":0.008928571428571428,"title":0.008928571428571428,"metadata":0.008928571428571428,"created":0.008928571428571428,"01":0.008928571428571428,"modified":0.008928571428571428,"03":0.008928571428571428,"block":0.008928571428571428,"content":0.008928571428571428,"https":0.008928571428571428,"www":0.008928571428571428,"acmicpc":0.008928571428571428,"net":0.008928571428571428,"problem":0.008928571428571428,"-":0.008928571428571428,"o":0.008928571428571428,"n":0.008928571428571428,"048":0.008928571428571428,"dfs":0.008928571428571428,"java":0.008928571428571428,"int":0.008928571428571428,"selected":0.008928571428571428,"import":0.008928571428571428,"util":0.008928571428571428,"io":0.008928571428571428,"public":0.008928571428571428,"class":0.008928571428571428,"main":0.008928571428571428,"private":0.008928571428571428,"static":0.008928571428571428,"stringbuilder":0.008928571428571428,"sb":0.008928571428571428,"new":0.008928571428571428,"inputprocessor":0.008928571428571428,"void":0.008928571428571428,"string":0.008928571428571428,"args":0.008928571428571428,"input":0.008928571428571428,"pro":0.008928571428571428,"output":0.008928571428571428,"min":0.008928571428571428,"max":0.008928571428571428,"nums":0.008928571428571428,"operator":0.008928571428571428,"nextint":0.008928571428571428,"for":0.008928571428571428,"i":0.008928571428571428,"integer":0.008928571428571428,"max_value":0.008928571428571428,"min_value":0.008928571428571428,"rec":0.008928571428571428,"append":0.008928571428571428,"idx":0.008928571428571428,"value":0.008928571428571428,"if":0.008928571428571428,"math":0.008928571428571428,"return":0.008928571428571428,"calculate":0.008928571428571428,"v1":0.008928571428571428,"op":0.008928571428571428,"v2":0.008928571428571428,"else":0.008928571428571428,"try":0.008928571428571428,"bufferedwriter":0.008928571428571428,"bw":0.008928571428571428,"outputstreamwriter":0.008928571428571428,"system":0.008928571428571428,"out":0.008928571428571428,"write":0.008928571428571428,"tostring":0.008928571428571428,"flush":0.008928571428571428,"catch":0.008928571428571428,"ioexception":0.008928571428571428,"e":0.008928571428571428,"throw":0.008928571428571428,"runtimeexception":0.008928571428571428,"bufferedreader":0.008928571428571428,"br":0.008928571428571428,"stringtokenizer":0.008928571428571428,"st":0.008928571428571428,"this":0.008928571428571428,"inputstreamreader":0.008928571428571428,"in":0.008928571428571428,"next":0.008928571428571428,"while":0.008928571428571428,"null":0.008928571428571428,"hasmoreelements":0.008928571428571428,"readline":0.008928571428571428,"nexttoken":0.008928571428571428,"nextline":0.008928571428571428,"result":0.008928571428571428,"parseint":0.008928571428571428,"long":0.008928571428571428,"nextlong":0.008928571428571428,"parselong":0.008928571428571428},"45":{"0":0.0136986301369863,"1":0.0136986301369863,"10":0.0136986301369863,"15":0.0136986301369863,"16":0.0136986301369863,"18":0.0136986301369863,"30":0.0136986301369863,"52":0.0136986301369863,"57":0.0136986301369863,"58":0.0136986301369863,"2025":0.0136986301369863,"60058":0.0136986301369863,"note":0.0136986301369863,"title":0.0136986301369863,"metadata":0.0136986301369863,"created":0.0136986301369863,"01":0.0136986301369863,"modified":0.0136986301369863,"02":0.0136986301369863,"block":0.0136986301369863,"content":0.0136986301369863,"https":0.0136986301369863,"school":0.0136986301369863,"programmers":0.0136986301369863,"co":0.0136986301369863,"kr":0.0136986301369863,"learn":0.0136986301369863,"courses":0.0136986301369863,"lessons":0.0136986301369863,"-":0.0136986301369863,"java":0.0136986301369863,"parentheses":0.0136986301369863,"import":0.0136986301369863,"io":0.0136986301369863,"class":0.0136986301369863,"solution":0.0136986301369863,"public":0.0136986301369863,"string":0.0136986301369863,"p":0.0136986301369863,"return":0.0136986301369863,"rec":0.0136986301369863,"private":0.0136986301369863,"w":0.0136986301369863,"if":0.0136986301369863,"equals":0.0136986301369863,"int":0.0136986301369863,"idx":0.0136986301369863,"for":0.0136986301369863,"char":0.0136986301369863,"c":0.0136986301369863,"tochararray":0.0136986301369863,"'":0.0136986301369863,"else":0.0136986301369863,"break":0.0136986301369863,"u":0.0136986301369863,"substring":0.0136986301369863,"v":0.0136986301369863,"check":0.0136986301369863,"converttext":0.0136986301369863,"boolean":0.0136986301369863,"isempty":0.0136986301369863,"true":0.0136986301369863,"count":0.0136986301369863,"--count":0.0136986301369863,"false":0.0136986301369863,"stringbuilder":0.0136986301369863,"sb":0.0136986301369863,"new":0.0136986301369863,"append":0.0136986301369863,"i":0.0136986301369863,"length":0.0136986301369863,"charat":0.0136986301369863,"tostring":0.0136986301369863},"46":{"0":0.008547008547008548,"1":0.008547008547008548,"4":0.008547008547008548,"12":0.008547008547008548,"15":0.008547008547008548,"16":0.008547008547008548,"17":0.008547008547008548,"31":0.008547008547008548,"34":0.008547008547008548,"57":0.008547008547008548,"2025":0.008547008547008548,"18405":0.008547008547008548,"note":0.008547008547008548,"title":0.008547008547008548,"metadata":0.008547008547008548,"created":0.008547008547008548,"01":0.008547008547008548,"modified":0.008547008547008548,"block":0.008547008547008548,"content":0.008547008547008548,"https":0.008547008547008548,"www":0.008547008547008548,"acmicpc":0.008547008547008548,"net":0.008547008547008548,"problem":0.008547008547008548,"-":0.008547008547008548,"o":0.008547008547008548,"v":0.008547008547008548,"e":0.008547008547008548,"java":0.008547008547008548,"hl":0.008547008547008548,"88-94":0.008547008547008548,"import":0.008547008547008548,"util":0.008547008547008548,"io":0.008547008547008548,"public":0.008547008547008548,"class":0.008547008547008548,"main":0.008547008547008548,"private":0.008547008547008548,"static":0.008547008547008548,"stringbuilder":0.008547008547008548,"sb":0.008547008547008548,"new":0.008547008547008548,"inputprocessor":0.008547008547008548,"void":0.008547008547008548,"string":0.008547008547008548,"args":0.008547008547008548,"input":0.008547008547008548,"pro":0.008547008547008548,"output":0.008547008547008548,"int":0.008547008547008548,"n":0.008547008547008548,"k":0.008547008547008548,"s":0.008547008547008548,"x":0.008547008547008548,"y":0.008547008547008548,"maps":0.008547008547008548,"nextint":0.008547008547008548,"for":0.008547008547008548,"i":0.008547008547008548,"j":0.008547008547008548,"final":0.008547008547008548,"dir":0.008547008547008548,"-1":0.008547008547008548,"queue":0.008547008547008548,"virus":0.008547008547008548,"que":0.008547008547008548,"priorityqueue":0.008547008547008548,"if":0.008547008547008548,"add":0.008547008547008548,"while":0.008547008547008548,"isempty":0.008547008547008548,"cur":0.008547008547008548,"poll":0.008547008547008548,"time":0.008547008547008548,"break":0.008547008547008548,"dx":0.008547008547008548,"dy":0.008547008547008548,"continue":0.008547008547008548,"no":0.008547008547008548,"append":0.008547008547008548,"implements":0.008547008547008548,"comparable":0.008547008547008548,"this":0.008547008547008548,"compareto":0.008547008547008548,"return":0.008547008547008548,"try":0.008547008547008548,"bufferedwriter":0.008547008547008548,"bw":0.008547008547008548,"outputstreamwriter":0.008547008547008548,"system":0.008547008547008548,"out":0.008547008547008548,"write":0.008547008547008548,"tostring":0.008547008547008548,"flush":0.008547008547008548,"catch":0.008547008547008548,"ioexception":0.008547008547008548,"throw":0.008547008547008548,"runtimeexception":0.008547008547008548,"bufferedreader":0.008547008547008548,"br":0.008547008547008548,"stringtokenizer":0.008547008547008548,"st":0.008547008547008548,"inputstreamreader":0.008547008547008548,"in":0.008547008547008548,"next":0.008547008547008548,"null":0.008547008547008548,"hasmoreelements":0.008547008547008548,"readline":0.008547008547008548,"nexttoken":0.008547008547008548,"nextline":0.008547008547008548,"result":0.008547008547008548,"integer":0.008547008547008548,"parseint":0.008547008547008548,"long":0.008547008547008548,"nextlong":0.008547008547008548,"parselong":0.008547008547008548},"47":{"3":0.03225806451612903,"8":0.03225806451612903,"15":0.03225806451612903,"16":0.03225806451612903,"19":0.03225806451612903,"51":0.03225806451612903,"57":0.03225806451612903,"2025":0.03225806451612903,"14502":0.03225806451612903,"note":0.03225806451612903,"title":0.03225806451612903,"metadata":0.03225806451612903,"created":0.03225806451612903,"01":0.03225806451612903,"08":0.03225806451612903,"modified":0.03225806451612903,"block":0.03225806451612903,"content":0.03225806451612903,"https":0.03225806451612903,"www":0.03225806451612903,"acmicpc":0.03225806451612903,"net":0.03225806451612903,"problem":0.03225806451612903,"-":0.03225806451612903,"64c3":0.03225806451612903,"bfs":0.03225806451612903,"dfs":0.03225806451612903,"o":0.03225806451612903,"v":0.03225806451612903,"e":0.03225806451612903,"nm":0.03225806451612903},"48":{"0":0.00909090909090909,"1":0.00909090909090909,"2":0.00909090909090909,"3":0.00909090909090909,"4":0.00909090909090909,"15":0.00909090909090909,"16":0.00909090909090909,"19":0.00909090909090909,"51":0.00909090909090909,"57":0.00909090909090909,"2025":0.00909090909090909,"note":0.00909090909090909,"title":0.00909090909090909,"metadata":0.00909090909090909,"created":0.00909090909090909,"01":0.00909090909090909,"08":0.00909090909090909,"modified":0.00909090909090909,"block":0.00909090909090909,"content":0.00909090909090909,"cont'd":0.00909090909090909,"java":0.00909090909090909,"import":0.00909090909090909,"util":0.00909090909090909,"io":0.00909090909090909,"public":0.00909090909090909,"class":0.00909090909090909,"main":0.00909090909090909,"private":0.00909090909090909,"static":0.00909090909090909,"stringbuilder":0.00909090909090909,"sb":0.00909090909090909,"new":0.00909090909090909,"inputprocessor":0.00909090909090909,"void":0.00909090909090909,"string":0.00909090909090909,"args":0.00909090909090909,"input":0.00909090909090909,"pro":0.00909090909090909,"output":0.00909090909090909,"final":0.00909090909090909,"int":0.00909090909090909,"dir":0.00909090909090909,"-1":0.00909090909090909,"n":0.00909090909090909,"m":0.00909090909090909,"fields":0.00909090909090909,"list":0.00909090909090909,"blank":0.00909090909090909,"blanks":0.00909090909090909,"virus":0.00909090909090909,"viruses":0.00909090909090909,"result":0.00909090909090909,"nextint":0.00909090909090909,"arraylist":0.00909090909090909,"for":0.00909090909090909,"i":0.00909090909090909,"j":0.00909090909090909,"v":0.00909090909090909,"if":0.00909090909090909,"add":0.00909090909090909,"else":0.00909090909090909,"x":0.00909090909090909,"y":0.00909090909090909,"this":0.00909090909090909,"createwall":0.00909090909090909,"append":0.00909090909090909,"count":0.00909090909090909,"idx":0.00909090909090909,"boolean":0.00909090909090909,"spread":0.00909090909090909,"safety":0.00909090909090909,"math":0.00909090909090909,"max":0.00909090909090909,"return":0.00909090909090909,"size":0.00909090909090909,"cur":0.00909090909090909,"get":0.00909090909090909,"visited":0.00909090909090909,"continue":0.00909090909090909,"dfs":0.00909090909090909,"true":0.00909090909090909,"dx":0.00909090909090909,"dy":0.00909090909090909,"try":0.00909090909090909,"bufferedwriter":0.00909090909090909,"bw":0.00909090909090909,"outputstreamwriter":0.00909090909090909,"system":0.00909090909090909,"out":0.00909090909090909,"write":0.00909090909090909,"tostring":0.00909090909090909,"flush":0.00909090909090909,"catch":0.00909090909090909,"ioexception":0.00909090909090909,"e":0.00909090909090909,"throw":0.00909090909090909,"runtimeexception":0.00909090909090909,"bufferedreader":0.00909090909090909,"br":0.00909090909090909,"stringtokenizer":0.00909090909090909,"st":0.00909090909090909,"inputstreamreader":0.00909090909090909,"in":0.00909090909090909,"next":0.00909090909090909,"while":0.00909090909090909,"null":0.00909090909090909,"hasmoreelements":0.00909090909090909,"readline":0.00909090909090909,"nexttoken":0.00909090909090909},"49":{"15":0.025,"16":0.025,"19":0.025,"51":0.025,"57":0.025,"2025":0.025,"note":0.025,"title":0.025,"metadata":0.025,"created":0.025,"01":0.025,"08":0.025,"modified":0.025,"block":0.025,"content":0.025,"cont'd":0.025,"return":0.025,"st":0.025,"nexttoken":0.025,"public":0.025,"string":0.025,"nextline":0.025,"result":0.025,"try":0.025,"br":0.025,"readline":0.025,"catch":0.025,"ioexception":0.025,"e":0.025,"throw":0.025,"new":0.025,"runtimeexception":0.025,"int":0.025,"nextint":0.025,"integer":0.025,"parseint":0.025,"next":0.025,"long":0.025,"nextlong":0.025,"parselong":0.025},"50":{"0":0.00909090909090909,"1":0.00909090909090909,"15":0.00909090909090909,"38":0.00909090909090909,"39":0.00909090909090909,"54":0.00909090909090909,"56":0.00909090909090909,"2025":0.00909090909090909,"18352":0.00909090909090909,"note":0.00909090909090909,"title":0.00909090909090909,"metadata":0.00909090909090909,"created":0.00909090909090909,"01":0.00909090909090909,"modified":0.00909090909090909,"block":0.00909090909090909,"content":0.00909090909090909,"https":0.00909090909090909,"www":0.00909090909090909,"acmicpc":0.00909090909090909,"net":0.00909090909090909,"problem":0.00909090909090909,"-":0.00909090909090909,"o":0.00909090909090909,"v":0.00909090909090909,"e":0.00909090909090909,"bfs":0.00909090909090909,"x":0.00909090909090909,"k":0.00909090909090909,"-1":0.00909090909090909,"java":0.00909090909090909,"import":0.00909090909090909,"util":0.00909090909090909,"io":0.00909090909090909,"public":0.00909090909090909,"class":0.00909090909090909,"main":0.00909090909090909,"private":0.00909090909090909,"static":0.00909090909090909,"stringbuilder":0.00909090909090909,"sb":0.00909090909090909,"new":0.00909090909090909,"inputprocessor":0.00909090909090909,"void":0.00909090909090909,"string":0.00909090909090909,"args":0.00909090909090909,"input":0.00909090909090909,"pro":0.00909090909090909,"output":0.00909090909090909,"int":0.00909090909090909,"n":0.00909090909090909,"m":0.00909090909090909,"list":0.00909090909090909,"integer":0.00909090909090909,"adj":0.00909090909090909,"nextint":0.00909090909090909,"arraylist":0.00909090909090909,"for":0.00909090909090909,"i":0.00909090909090909,"add":0.00909090909090909,"a":0.00909090909090909,"b":0.00909090909090909,"get":0.00909090909090909,"deque":0.00909090909090909,"que":0.00909090909090909,"arraydeque":0.00909090909090909,"dist":0.00909090909090909,"arrays":0.00909090909090909,"fill":0.00909090909090909,"max_value":0.00909090909090909,"while":0.00909090909090909,"isempty":0.00909090909090909,"cur":0.00909090909090909,"poll":0.00909090909090909,"next":0.00909090909090909,"if":0.00909090909090909,"continue":0.00909090909090909,"result":0.00909090909090909,"append":0.00909090909090909,"else":0.00909090909090909,"try":0.00909090909090909,"bufferedwriter":0.00909090909090909,"bw":0.00909090909090909,"outputstreamwriter":0.00909090909090909,"system":0.00909090909090909,"out":0.00909090909090909,"write":0.00909090909090909,"tostring":0.00909090909090909,"flush":0.00909090909090909,"catch":0.00909090909090909,"ioexception":0.00909090909090909,"throw":0.00909090909090909,"runtimeexception":0.00909090909090909,"bufferedreader":0.00909090909090909,"br":0.00909090909090909,"stringtokenizer":0.00909090909090909,"st":0.00909090909090909,"this":0.00909090909090909,"inputstreamreader":0.00909090909090909,"in":0.00909090909090909,"null":0.00909090909090909,"hasmoreelements":0.00909090909090909,"readline":0.00909090909090909,"return":0.00909090909090909,"nexttoken":0.00909090909090909,"nextline":0.00909090909090909,"parseint":0.00909090909090909,"long":0.00909090909090909,"nextlong":0.00909090909090909,"parselong":0.00909090909090909},"51":{"0":0.013333333333333334,"1":0.013333333333333334,"8":0.013333333333333334,"10":0.013333333333333334,"12":0.013333333333333334,"14":0.013333333333333334,"15":0.013333333333333334,"22":0.013333333333333334,"30":0.013333333333333334,"36":0.013333333333333334,"38":0.013333333333333334,"50":0.013333333333333334,"2025":0.013333333333333334,"60062":0.013333333333333334,"note":0.013333333333333334,"title":0.013333333333333334,"metadata":0.013333333333333334,"created":0.013333333333333334,"01":0.013333333333333334,"02":0.013333333333333334,"00":0.013333333333333334,"modified":0.013333333333333334,"block":0.013333333333333334,"content":0.013333333333333334,"https":0.013333333333333334,"school":0.013333333333333334,"programmers":0.013333333333333334,"co":0.013333333333333334,"kr":0.013333333333333334,"learn":0.013333333333333334,"courses":0.013333333333333334,"lessons":0.013333333333333334,"-":0.013333333333333334,"weak":0.013333333333333334,"dist":0.013333333333333334,"o":0.013333333333333334,"u":0.013333333333333334,"java":0.013333333333333334,"diff":0.013333333333333334,"n":0.013333333333333334,"cur":0.013333333333333334,"next":0.013333333333333334,"-8":0.013333333333333334,"int":0.013333333333333334,"visited":0.013333333333333334,"32bit":0.013333333333333334,"answer":0.013333333333333334,"return":0.013333333333333334,"pointer":0.013333333333333334,"for":0.013333333333333334,"i":0.013333333333333334,"len":0.013333333333333334,"if":0.013333333333333334,"continue":0.013333333333333334,"rec":0.013333333333333334,"used":0.013333333333333334,"hl":0.013333333333333334,"50-54":0.013333333333333334,"import":0.013333333333333334,"util":0.013333333333333334,"class":0.013333333333333334,"solution":0.013333333333333334,"private":0.013333333333333334,"_n":0.013333333333333334,"public":0.013333333333333334,"integer":0.013333333333333334,"max_value":0.013333333333333334,"length":0.013333333333333334,"arrays":0.013333333333333334,"sort":0.013333333333333334,"-1":0.013333333333333334,"void":0.013333333333333334,"break":0.013333333333333334,"math":0.013333333333333334,"min":0.013333333333333334},"52":{"1":0.03225806451612903,"13":0.03225806451612903,"14":0.03225806451612903,"17":0.03225806451612903,"32":0.03225806451612903,"42":0.03225806451612903,"54":0.03225806451612903,"2025":0.03225806451612903,"15686":0.03225806451612903,"note":0.03225806451612903,"title":0.03225806451612903,"metadata":0.03225806451612903,"created":0.03225806451612903,"01":0.03225806451612903,"02":0.03225806451612903,"00":0.03225806451612903,"modified":0.03225806451612903,"block":0.03225806451612903,"content":0.03225806451612903,"https":0.03225806451612903,"www":0.03225806451612903,"acmicpc":0.03225806451612903,"net":0.03225806451612903,"problem":0.03225806451612903,"-":0.03225806451612903,"o":0.03225806451612903,"xcm":0.03225806451612903,"x":0.03225806451612903,"n":0.03225806451612903,"h":0.03225806451612903,"m":0.03225806451612903},"53":{"0":0.008849557522123894,"1":0.008849557522123894,"2":0.008849557522123894,"13":0.008849557522123894,"14":0.008849557522123894,"17":0.008849557522123894,"32":0.008849557522123894,"42":0.008849557522123894,"54":0.008849557522123894,"2025":0.008849557522123894,"note":0.008849557522123894,"title":0.008849557522123894,"metadata":0.008849557522123894,"created":0.008849557522123894,"01":0.008849557522123894,"02":0.008849557522123894,"00":0.008849557522123894,"modified":0.008849557522123894,"block":0.008849557522123894,"content":0.008849557522123894,"cont'd":0.008849557522123894,"-":0.008849557522123894,"m":0.008849557522123894,"java":0.008849557522123894,"import":0.008849557522123894,"util":0.008849557522123894,"io":0.008849557522123894,"public":0.008849557522123894,"class":0.008849557522123894,"main":0.008849557522123894,"private":0.008849557522123894,"static":0.008849557522123894,"stringbuilder":0.008849557522123894,"sb":0.008849557522123894,"new":0.008849557522123894,"inputprocessor":0.008849557522123894,"void":0.008849557522123894,"string":0.008849557522123894,"args":0.008849557522123894,"input":0.008849557522123894,"pro":0.008849557522123894,"output":0.008849557522123894,"list":0.008849557522123894,"chicken":0.008849557522123894,"chickenlist":0.008849557522123894,"house":0.008849557522123894,"houselist":0.008849557522123894,"int":0.008849557522123894,"n":0.008849557522123894,"result":0.008849557522123894,"nextint":0.008849557522123894,"arraylist":0.008849557522123894,"for":0.008849557522123894,"i":0.008849557522123894,"j":0.008849557522123894,"v":0.008849557522123894,"if":0.008849557522123894,"add":0.008849557522123894,"else":0.008849557522123894,"integer":0.008849557522123894,"max_value":0.008849557522123894,"final":0.008849557522123894,"x":0.008849557522123894,"y":0.008849557522123894,"this":0.008849557522123894,"combination":0.008849557522123894,"append":0.008849557522123894,"idx":0.008849557522123894,"count":0.008849557522123894,"selected":0.008849557522123894,"distance":0.008849557522123894,"h":0.008849557522123894,"mindiff":0.008849557522123894,"c":0.008849557522123894,"get":0.008849557522123894,"diff":0.008849557522123894,"math":0.008849557522123894,"abs":0.008849557522123894,"min":0.008849557522123894,"return":0.008849557522123894,"size":0.008849557522123894,"-1":0.008849557522123894,"try":0.008849557522123894,"bufferedwriter":0.008849557522123894,"bw":0.008849557522123894,"outputstreamwriter":0.008849557522123894,"system":0.008849557522123894,"out":0.008849557522123894,"write":0.008849557522123894,"tostring":0.008849557522123894,"flush":0.008849557522123894,"catch":0.008849557522123894,"ioexception":0.008849557522123894,"e":0.008849557522123894,"throw":0.008849557522123894,"runtimeexception":0.008849557522123894,"bufferedreader":0.008849557522123894,"br":0.008849557522123894,"stringtokenizer":0.008849557522123894,"st":0.008849557522123894,"inputstreamreader":0.008849557522123894,"in":0.008849557522123894,"next":0.008849557522123894,"while":0.008849557522123894,"null":0.008849557522123894,"hasmoreelements":0.008849557522123894,"readline":0.008849557522123894,"nexttoken":0.008849557522123894,"nextline":0.008849557522123894,"parseint":0.008849557522123894,"long":0.008849557522123894,"nextlong":0.008849557522123894,"parselong":0.008849557522123894},"54":{"0":0.0196078431372549,"1":0.0196078431372549,"2":0.0196078431372549,"6":0.0196078431372549,"12":0.0196078431372549,"14":0.0196078431372549,"20":0.0196078431372549,"26":0.0196078431372549,"28":0.0196078431372549,"30":0.0196078431372549,"56":0.0196078431372549,"2025":0.0196078431372549,"60061":0.0196078431372549,"note":0.0196078431372549,"title":0.0196078431372549,"metadata":0.0196078431372549,"created":0.0196078431372549,"01":0.0196078431372549,"02":0.0196078431372549,"00":0.0196078431372549,"modified":0.0196078431372549,"block":0.0196078431372549,"content":0.0196078431372549,"https":0.0196078431372549,"school":0.0196078431372549,"programmers":0.0196078431372549,"co":0.0196078431372549,"kr":0.0196078431372549,"learn":0.0196078431372549,"courses":0.0196078431372549,"lessons":0.0196078431372549,"-":0.0196078431372549,"o":0.0196078431372549,"n":0.0196078431372549,"build_frame":0.0196078431372549,"000":0.0196078431372549,"java":0.0196078431372549,"boolean":0.0196078431372549,"pole":0.0196078431372549,"bo":0.0196078431372549,"count":0.0196078431372549,"-1":0.0196078431372549,"false":0.0196078431372549,"true":0.0196078431372549,"hl":0.0196078431372549,"private":0.0196078431372549,"buildablepole":0.0196078431372549,"int":0.0196078431372549,"x":0.0196078431372549,"y":0.0196078431372549,"return":0.0196078431372549},"55":{"12":0.04,"14":0.04,"20":0.04,"26":0.04,"28":0.04,"56":0.04,"2025":0.04,"note":0.04,"title":0.04,"metadata":0.04,"created":0.04,"01":0.04,"02":0.04,"00":0.04,"modified":0.04,"block":0.04,"content":0.04,"cont'd":0.04,"java":0.04,"import":0.04,"io":0.04,"util":0.04,"public":0.04,"class":0.04,"main":0.04},"56":{"0":0.012987012987012988,"1":0.012987012987012988,"2":0.012987012987012988,"3":0.012987012987012988,"4":0.012987012987012988,"5":0.012987012987012988,"12":0.012987012987012988,"14":0.012987012987012988,"20":0.012987012987012988,"26":0.012987012987012988,"28":0.012987012987012988,"56":0.012987012987012988,"2025":0.012987012987012988,"note":0.012987012987012988,"title":0.012987012987012988,"metadata":0.012987012987012988,"created":0.012987012987012988,"01":0.012987012987012988,"02":0.012987012987012988,"00":0.012987012987012988,"modified":0.012987012987012988,"block":0.012987012987012988,"content":0.012987012987012988,"cont'd":0.012987012987012988,"private":0.012987012987012988,"static":0.012987012987012988,"stringbuilder":0.012987012987012988,"sb":0.012987012987012988,"new":0.012987012987012988,"inputprocessor":0.012987012987012988,"public":0.012987012987012988,"void":0.012987012987012988,"main":0.012987012987012988,"string":0.012987012987012988,"args":0.012987012987012988,"input":0.012987012987012988,"pro":0.012987012987012988,"output":0.012987012987012988,"final":0.012987012987012988,"int":0.012987012987012988,"n":0.012987012987012988,"build_frame":0.012987012987012988,"result":0.012987012987012988,"board":0.012987012987012988,"for":0.012987012987012988,"bf":0.012987012987012988,"x":0.012987012987012988,"y":0.012987012987012988,"a":0.012987012987012988,"b":0.012987012987012988,"execute":0.012987012987012988,"answer":0.012987012987012988,"count":0.012987012987012988,"idx":0.012987012987012988,"boolean":0.012987012987012988,"pole":0.012987012987012988,"bo":0.012987012987012988,"i":0.012987012987012988,"j":0.012987012987012988,"if":0.012987012987012988,"append":0.012987012987012988,"arrays":0.012987012987012988,"tostring":0.012987012987012988,"class":0.012987012987012988,"this":0.012987012987012988,"destroypole":0.012987012987012988,"else":0.012987012987012988,"buildpole":0.012987012987012988,"destroybo":0.012987012987012988,"buildbo":0.012987012987012988,"buildablepole":0.012987012987012988,"true":0.012987012987012988,"return":0.012987012987012988,"-":0.012987012987012988,"false":0.012987012987012988,"invalid":0.012987012987012988,"buildablebo":0.012987012987012988},"57":{"0":0.010752688172043012,"1":0.010752688172043012,"12":0.010752688172043012,"14":0.010752688172043012,"20":0.010752688172043012,"26":0.010752688172043012,"28":0.010752688172043012,"56":0.010752688172043012,"2025":0.010752688172043012,"note":0.010752688172043012,"title":0.010752688172043012,"metadata":0.010752688172043012,"created":0.010752688172043012,"01":0.010752688172043012,"02":0.010752688172043012,"00":0.010752688172043012,"modified":0.010752688172043012,"block":0.010752688172043012,"content":0.010752688172043012,"cont'd":0.010752688172043012,"private":0.010752688172043012,"boolean":0.010752688172043012,"buildablebo":0.010752688172043012,"int":0.010752688172043012,"x":0.010752688172043012,"y":0.010752688172043012,"return":0.010752688172043012,"pole":0.010752688172043012,"-":0.010752688172043012,"bo":0.010752688172043012,"void":0.010752688172043012,"destroybo":0.010752688172043012,"false":0.010752688172043012,"if":0.010752688172043012,"invalid":0.010752688172043012,"true":0.010752688172043012,"else":0.010752688172043012,"count":0.010752688172043012,"minx":0.010752688172043012,"math":0.010752688172043012,"max":0.010752688172043012,"maxx":0.010752688172043012,"min":0.010752688172043012,"n":0.010752688172043012,"miny":0.010752688172043012,"maxy":0.010752688172043012,"for":0.010752688172043012,"i":0.010752688172043012,"j":0.010752688172043012,"buildablepole":0.010752688172043012,"static":0.010752688172043012,"output":0.010752688172043012,"try":0.010752688172043012,"bufferedwriter":0.010752688172043012,"bw":0.010752688172043012,"new":0.010752688172043012,"outputstreamwriter":0.010752688172043012,"system":0.010752688172043012,"out":0.010752688172043012,"write":0.010752688172043012,"sb":0.010752688172043012,"tostring":0.010752688172043012,"flush":0.010752688172043012,"catch":0.010752688172043012,"ioexception":0.010752688172043012,"e":0.010752688172043012,"throw":0.010752688172043012,"runtimeexception":0.010752688172043012,"class":0.010752688172043012,"inputprocessor":0.010752688172043012,"bufferedreader":0.010752688172043012,"br":0.010752688172043012,"stringtokenizer":0.010752688172043012,"st":0.010752688172043012,"public":0.010752688172043012,"this":0.010752688172043012,"inputstreamreader":0.010752688172043012,"in":0.010752688172043012,"string":0.010752688172043012,"next":0.010752688172043012,"while":0.010752688172043012,"null":0.010752688172043012,"hasmoreelements":0.010752688172043012,"readline":0.010752688172043012,"nexttoken":0.010752688172043012,"nextline":0.010752688172043012,"result":0.010752688172043012,"nextint":0.010752688172043012,"integer":0.010752688172043012,"parseint":0.010752688172043012,"long":0.010752688172043012,"nextlong":0.010752688172043012,"parselong":0.010752688172043012},"58":{"12":0.05555555555555555,"14":0.05555555555555555,"20":0.05555555555555555,"26":0.05555555555555555,"28":0.05555555555555555,"56":0.05555555555555555,"2025":0.05555555555555555,"note":0.05555555555555555,"title":0.05555555555555555,"metadata":0.05555555555555555,"created":0.05555555555555555,"01":0.05555555555555555,"02":0.05555555555555555,"00":0.05555555555555555,"modified":0.05555555555555555,"block":0.05555555555555555,"content":0.05555555555555555,"cont'd":0.05555555555555555},"59":{"0":0.023809523809523808,"1":0.023809523809523808,"2":0.023809523809523808,"3":0.023809523809523808,"4":0.023809523809523808,"11":0.023809523809523808,"14":0.023809523809523808,"18":0.023809523809523808,"19":0.023809523809523808,"25":0.023809523809523808,"45":0.023809523809523808,"2025":0.023809523809523808,"3190":0.023809523809523808,"note":0.023809523809523808,"title":0.023809523809523808,"metadata":0.023809523809523808,"created":0.023809523809523808,"01":0.023809523809523808,"02":0.023809523809523808,"00":0.023809523809523808,"modified":0.023809523809523808,"block":0.023809523809523808,"content":0.023809523809523808,"https":0.023809523809523808,"www":0.023809523809523808,"acmicpc":0.023809523809523808,"net":0.023809523809523808,"problem":0.023809523809523808,"-":0.023809523809523808,"multi":0.023809523809523808,"source":0.023809523809523808,"java":0.023809523809523808,"maps":0.023809523809523808,"tailx":0.023809523809523808,"taily":0.023809523809523808,"x":0.023809523809523808,"y":0.023809523809523808,"time":0.023809523809523808,"map":0.023809523809523808,"d":0.023809523809523808,"idx":0.023809523809523808,"l":0.023809523809523808},"60":{"0":0.008849557522123894,"1":0.008849557522123894,"2":0.008849557522123894,"3":0.008849557522123894,"4":0.008849557522123894,"11":0.008849557522123894,"14":0.008849557522123894,"18":0.008849557522123894,"19":0.008849557522123894,"25":0.008849557522123894,"45":0.008849557522123894,"2025":0.008849557522123894,"note":0.008849557522123894,"title":0.008849557522123894,"metadata":0.008849557522123894,"created":0.008849557522123894,"01":0.008849557522123894,"02":0.008849557522123894,"00":0.008849557522123894,"modified":0.008849557522123894,"block":0.008849557522123894,"content":0.008849557522123894,"cont'd":0.008849557522123894,"java":0.008849557522123894,"import":0.008849557522123894,"util":0.008849557522123894,"io":0.008849557522123894,"public":0.008849557522123894,"class":0.008849557522123894,"main":0.008849557522123894,"private":0.008849557522123894,"static":0.008849557522123894,"stringbuilder":0.008849557522123894,"sb":0.008849557522123894,"new":0.008849557522123894,"inputprocessor":0.008849557522123894,"void":0.008849557522123894,"string":0.008849557522123894,"args":0.008849557522123894,"input":0.008849557522123894,"pro":0.008849557522123894,"output":0.008849557522123894,"int":0.008849557522123894,"n":0.008849557522123894,"k":0.008849557522123894,"l":0.008849557522123894,"map":0.008849557522123894,"integer":0.008849557522123894,"commandmap":0.008849557522123894,"hashmap":0.008849557522123894,"maps":0.008849557522123894,"nextint":0.008849557522123894,"for":0.008849557522123894,"i":0.008849557522123894,"x":0.008849557522123894,"y":0.008849557522123894,"time":0.008849557522123894,"dir":0.008849557522123894,"next":0.008849557522123894,"put":0.008849557522123894,"-1":0.008849557522123894,"deque":0.008849557522123894,"que":0.008849557522123894,"arraydeque":0.008849557522123894,"add":0.008849557522123894,"while":0.008849557522123894,"true":0.008849557522123894,"if":0.008849557522123894,"break":0.008849557522123894,"tailx":0.008849557522123894,"poll":0.008849557522123894,"taily":0.008849557522123894,"containskey":0.008849557522123894,"nextdir":0.008849557522123894,"remove":0.008849557522123894,"append":0.008849557522123894,"ix":0.008849557522123894,"cmd":0.008849557522123894,"d":0.008849557522123894,"equals":0.008849557522123894,"return":0.008849557522123894,"-":0.008849557522123894,"try":0.008849557522123894,"bufferedwriter":0.008849557522123894,"bw":0.008849557522123894,"outputstreamwriter":0.008849557522123894,"system":0.008849557522123894,"out":0.008849557522123894,"write":0.008849557522123894,"tostring":0.008849557522123894,"flush":0.008849557522123894,"catch":0.008849557522123894,"ioexception":0.008849557522123894,"e":0.008849557522123894,"throw":0.008849557522123894,"runtimeexception":0.008849557522123894,"bufferedreader":0.008849557522123894,"br":0.008849557522123894,"stringtokenizer":0.008849557522123894,"st":0.008849557522123894,"this":0.008849557522123894,"inputstreamreader":0.008849557522123894,"in":0.008849557522123894,"null":0.008849557522123894,"hasmoreelements":0.008849557522123894,"readline":0.008849557522123894,"nexttoken":0.008849557522123894,"nextline":0.008849557522123894,"result":0.008849557522123894,"parseint":0.008849557522123894,"long":0.008849557522123894,"nextlong":0.008849557522123894,"parselong":0.008849557522123894},"61":{"0":0.012658227848101266,"1":0.012658227848101266,"2":0.012658227848101266,"3":0.012658227848101266,"4":0.012658227848101266,"10":0.012658227848101266,"14":0.012658227848101266,"17":0.012658227848101266,"22":0.012658227848101266,"26":0.012658227848101266,"30":0.012658227848101266,"36":0.012658227848101266,"40":0.012658227848101266,"90":0.012658227848101266,"2025":0.012658227848101266,"60059":0.012658227848101266,"note":0.012658227848101266,"title":0.012658227848101266,"metadata":0.012658227848101266,"created":0.012658227848101266,"01":0.012658227848101266,"02":0.012658227848101266,"00":0.012658227848101266,"modified":0.012658227848101266,"block":0.012658227848101266,"content":0.012658227848101266,"https":0.012658227848101266,"school":0.012658227848101266,"programmers":0.012658227848101266,"co":0.012658227848101266,"kr":0.012658227848101266,"learn":0.012658227848101266,"courses":0.012658227848101266,"lessons":0.012658227848101266,"-":0.012658227848101266,"o":0.012658227848101266,"nm":0.012658227848101266,"shif":0.012658227848101266,"-40":0.012658227848101266,"n":0.012658227848101266,"shift":0.012658227848101266,"java":0.012658227848101266,"lock":0.012658227848101266,"dx":0.012658227848101266,"dy":0.012658227848101266,"key":0.012658227848101266,"row":0.012658227848101266,"col":0.012658227848101266,"int":0.012658227848101266,"u":0.012658227848101266,"class":0.012658227848101266,"solution":0.012658227848101266,"private":0.012658227848101266,"_key":0.012658227848101266,"_lock":0.012658227848101266,"public":0.012658227848101266,"boolean":0.012658227848101266,"m":0.012658227848101266,"length":0.012658227848101266,"answer":0.012658227848101266,"false":0.012658227848101266,"loop1":0.012658227848101266,"for":0.012658227848101266,"i":0.012658227848101266,"x":0.012658227848101266,"y":0.012658227848101266,"pushkey":0.012658227848101266,"if":0.012658227848101266,"unlock":0.012658227848101266,"true":0.012658227848101266,"break":0.012658227848101266,"pollkey":0.012658227848101266,"rotate":0.012658227848101266,"return":0.012658227848101266,"void":0.012658227848101266,"continue":0.012658227848101266,"j":0.012658227848101266,"temp":0.012658227848101266,"new":0.012658227848101266},"62":{"0":0.011904761904761904,"1":0.011904761904761904,"2":0.011904761904761904,"5":0.011904761904761904,"8":0.011904761904761904,"10":0.011904761904761904,"14":0.011904761904761904,"19":0.011904761904761904,"30":0.011904761904761904,"32":0.011904761904761904,"38":0.011904761904761904,"57":0.011904761904761904,"83":0.011904761904761904,"85":0.011904761904761904,"1001":0.011904761904761904,"2025":0.011904761904761904,"60057":0.011904761904761904,"note":0.011904761904761904,"title":0.011904761904761904,"09":0.011904761904761904,"metadata":0.011904761904761904,"created":0.011904761904761904,"01":0.011904761904761904,"02":0.011904761904761904,"00":0.011904761904761904,"modified":0.011904761904761904,"03":0.011904761904761904,"block":0.011904761904761904,"content":0.011904761904761904,"https":0.011904761904761904,"school":0.011904761904761904,"programmers":0.011904761904761904,"co":0.011904761904761904,"kr":0.011904761904761904,"learn":0.011904761904761904,"courses":0.011904761904761904,"lessons":0.011904761904761904,"-":0.011904761904761904,"len":0.011904761904761904,"mb":0.011904761904761904,"ms":0.011904761904761904,"java":0.011904761904761904,"import":0.011904761904761904,"util":0.011904761904761904,"io":0.011904761904761904,"class":0.011904761904761904,"solution":0.011904761904761904,"private":0.011904761904761904,"stringbuilder":0.011904761904761904,"sb":0.011904761904761904,"new":0.011904761904761904,"string":0.011904761904761904,"s":0.011904761904761904,"public":0.011904761904761904,"int":0.011904761904761904,"if":0.011904761904761904,"length":0.011904761904761904,"return":0.011904761904761904,"answer":0.011904761904761904,"half":0.011904761904761904,"for":0.011904761904761904,"compressed":0.011904761904761904,"compress":0.011904761904761904,"math":0.011904761904761904,"min":0.011904761904761904,"setlength":0.011904761904761904,"l":0.011904761904761904,"while":0.011904761904761904,"r":0.011904761904761904,"base":0.011904761904761904,"substring":0.011904761904761904,"repeated":0.011904761904761904,"count":0.011904761904761904,"append":0.011904761904761904,"else":0.011904761904761904,"tostring":0.011904761904761904,"t":0.011904761904761904,"from":0.011904761904761904,"remain":0.011904761904761904,"startswith":0.011904761904761904,"rec":0.011904761904761904,"repeat":0.011904761904761904,"pre":0.011904761904761904,"post":0.011904761904761904},"63":{"0":0.009345794392523364,"10":0.009345794392523364,"14":0.009345794392523364,"15":0.009345794392523364,"16":0.009345794392523364,"29":0.009345794392523364,"48":0.009345794392523364,"2025":0.009345794392523364,"note":0.009345794392523364,"title":0.009345794392523364,"08":0.009345794392523364,"metadata":0.009345794392523364,"created":0.009345794392523364,"01":0.009345794392523364,"02":0.009345794392523364,"00":0.009345794392523364,"modified":0.009345794392523364,"block":0.009345794392523364,"content":0.009345794392523364,"-":0.009345794392523364,"facebook":0.009345794392523364,"o":0.009345794392523364,"nlogn":0.009345794392523364,"000":0.009345794392523364,"text":0.009345794392523364,"k1ka5cb7":0.009345794392523364,"abckk13":0.009345794392523364,"ajkdlsi412k4jsj9d":0.009345794392523364,"addijjjkklss20":0.009345794392523364,"java":0.009345794392523364,"import":0.009345794392523364,"util":0.009345794392523364,"io":0.009345794392523364,"public":0.009345794392523364,"class":0.009345794392523364,"main":0.009345794392523364,"private":0.009345794392523364,"static":0.009345794392523364,"stringbuilder":0.009345794392523364,"sb":0.009345794392523364,"new":0.009345794392523364,"inputprocessor":0.009345794392523364,"void":0.009345794392523364,"string":0.009345794392523364,"args":0.009345794392523364,"input":0.009345794392523364,"pro":0.009345794392523364,"output":0.009345794392523364,"s":0.009345794392523364,"nextline":0.009345794392523364,"trim":0.009345794392523364,"list":0.009345794392523364,"alphabet":0.009345794392523364,"arraylist":0.009345794392523364,"int":0.009345794392523364,"sum":0.009345794392523364,"for":0.009345794392523364,"char":0.009345794392523364,"t":0.009345794392523364,"tochararray":0.009345794392523364,"if":0.009345794392523364,"character":0.009345794392523364,"isalphabetic":0.009345794392523364,"add":0.009345794392523364,"valueof":0.009345794392523364,"else":0.009345794392523364,"v":0.009345794392523364,"'0'":0.009345794392523364,"collections":0.009345794392523364,"sort":0.009345794392523364,"a":0.009345794392523364,"append":0.009345794392523364,"try":0.009345794392523364,"bufferedwriter":0.009345794392523364,"bw":0.009345794392523364,"outputstreamwriter":0.009345794392523364,"system":0.009345794392523364,"out":0.009345794392523364,"write":0.009345794392523364,"tostring":0.009345794392523364,"flush":0.009345794392523364,"catch":0.009345794392523364,"ioexception":0.009345794392523364,"e":0.009345794392523364,"throw":0.009345794392523364,"runtimeexception":0.009345794392523364,"bufferedreader":0.009345794392523364,"br":0.009345794392523364,"stringtokenizer":0.009345794392523364,"st":0.009345794392523364,"this":0.009345794392523364,"inputstreamreader":0.009345794392523364,"in":0.009345794392523364,"next":0.009345794392523364,"while":0.009345794392523364,"null":0.009345794392523364,"hasmoreelements":0.009345794392523364,"readline":0.009345794392523364,"return":0.009345794392523364,"nexttoken":0.009345794392523364,"result":0.009345794392523364,"nextint":0.009345794392523364,"integer":0.009345794392523364,"parseint":0.009345794392523364,"long":0.009345794392523364,"nextlong":0.009345794392523364,"parselong":0.009345794392523364},"64":{"0":0.010309278350515464,"2":0.010309278350515464,"10":0.010309278350515464,"11":0.010309278350515464,"14":0.010309278350515464,"16":0.010309278350515464,"40":0.010309278350515464,"2025":0.010309278350515464,"18406":0.010309278350515464,"note":0.010309278350515464,"title":0.010309278350515464,"07":0.010309278350515464,"metadata":0.010309278350515464,"created":0.010309278350515464,"01":0.010309278350515464,"02":0.010309278350515464,"00":0.010309278350515464,"modified":0.010309278350515464,"block":0.010309278350515464,"content":0.010309278350515464,"https":0.010309278350515464,"www":0.010309278350515464,"acmicpc":0.010309278350515464,"net":0.010309278350515464,"problem":0.010309278350515464,"-":0.010309278350515464,"o":0.010309278350515464,"n":0.010309278350515464,"lucky":0.010309278350515464,"ready":0.010309278350515464,"java":0.010309278350515464,"import":0.010309278350515464,"util":0.010309278350515464,"io":0.010309278350515464,"public":0.010309278350515464,"class":0.010309278350515464,"main":0.010309278350515464,"private":0.010309278350515464,"static":0.010309278350515464,"stringbuilder":0.010309278350515464,"sb":0.010309278350515464,"new":0.010309278350515464,"inputprocessor":0.010309278350515464,"void":0.010309278350515464,"string":0.010309278350515464,"args":0.010309278350515464,"input":0.010309278350515464,"pro":0.010309278350515464,"output":0.010309278350515464,"int":0.010309278350515464,"nextint":0.010309278350515464,"nums":0.010309278350515464,"valueof":0.010309278350515464,"len":0.010309278350515464,"length":0.010309278350515464,"half":0.010309278350515464,"v1":0.010309278350515464,"integer":0.010309278350515464,"parseint":0.010309278350515464,"substring":0.010309278350515464,"v2":0.010309278350515464,"calculate":0.010309278350515464,"append":0.010309278350515464,"result":0.010309278350515464,"next":0.010309278350515464,"while":0.010309278350515464,"mod":0.010309278350515464,"return":0.010309278350515464,"try":0.010309278350515464,"bufferedwriter":0.010309278350515464,"bw":0.010309278350515464,"outputstreamwriter":0.010309278350515464,"system":0.010309278350515464,"out":0.010309278350515464,"write":0.010309278350515464,"tostring":0.010309278350515464,"flush":0.010309278350515464,"catch":0.010309278350515464,"ioexception":0.010309278350515464,"e":0.010309278350515464,"throw":0.010309278350515464,"runtimeexception":0.010309278350515464,"bufferedreader":0.010309278350515464,"br":0.010309278350515464,"stringtokenizer":0.010309278350515464,"st":0.010309278350515464,"this":0.010309278350515464,"inputstreamreader":0.010309278350515464,"in":0.010309278350515464,"null":0.010309278350515464,"hasmoreelements":0.010309278350515464,"readline":0.010309278350515464,"nexttoken":0.010309278350515464,"nextline":0.010309278350515464,"long":0.010309278350515464,"nextlong":0.010309278350515464,"parselong":0.010309278350515464},"65":{"0":0.011494252873563218,"1":0.011494252873563218,"2":0.011494252873563218,"13":0.011494252873563218,"15":0.011494252873563218,"18":0.011494252873563218,"21":0.011494252873563218,"28":0.011494252873563218,"29":0.011494252873563218,"30":0.011494252873563218,"37":0.011494252873563218,"46":0.011494252873563218,"58":0.011494252873563218,"2025":0.011494252873563218,"42891":0.011494252873563218,"note":0.011494252873563218,"title":0.011494252873563218,"06":0.011494252873563218,"metadata":0.011494252873563218,"created":0.011494252873563218,"01":0.011494252873563218,"02":0.011494252873563218,"modified":0.011494252873563218,"block":0.011494252873563218,"content":0.011494252873563218,"https":0.011494252873563218,"school":0.011494252873563218,"programmers":0.011494252873563218,"co":0.011494252873563218,"kr":0.011494252873563218,"learn":0.011494252873563218,"courses":0.011494252873563218,"lessons":0.011494252873563218,"-":0.011494252873563218,"o":0.011494252873563218,"nlogn":0.011494252873563218,"food":0.011494252873563218,"k":0.011494252873563218,"-1":0.011494252873563218,"diff":0.011494252873563218,"int":0.011494252873563218,"area":0.011494252873563218,"java":0.011494252873563218,"long":0.011494252873563218,"w":0.011494252873563218,"sub":0.011494252873563218,"get":0.011494252873563218,"size":0.011494252873563218,"no":0.011494252873563218,"idx":0.011494252873563218,"hl":0.011494252873563218,"import":0.011494252873563218,"util":0.011494252873563218,"io":0.011494252873563218,"class":0.011494252873563218,"solution":0.011494252873563218,"public":0.011494252873563218,"food_times":0.011494252873563218,"list":0.011494252873563218,"foods":0.011494252873563218,"new":0.011494252873563218,"arraylist":0.011494252873563218,"for":0.011494252873563218,"i":0.011494252873563218,"length":0.011494252873563218,"add":0.011494252873563218,"collections":0.011494252873563218,"sort":0.011494252873563218,"answer":0.011494252873563218,"prevtime":0.011494252873563218,"f":0.011494252873563218,"time":0.011494252873563218,"if":0.011494252873563218,"else":0.011494252873563218,"sublist":0.011494252873563218,"comparator":0.011494252873563218,"comparingint":0.011494252873563218,"a":0.011494252873563218,"break":0.011494252873563218,"return":0.011494252873563218,"private":0.011494252873563218,"static":0.011494252873563218,"implements":0.011494252873563218,"comparable":0.011494252873563218,"final":0.011494252873563218,"this":0.011494252873563218,"compareto":0.011494252873563218},"66":{"0":0.011363636363636364,"1":0.011363636363636364,"3":0.011363636363636364,"10":0.011363636363636364,"13":0.011363636363636364,"40":0.011363636363636364,"49":0.011363636363636364,"56":0.011363636363636364,"2019":0.011363636363636364,"2025":0.011363636363636364,"note":0.011363636363636364,"title":0.011363636363636364,"05":0.011363636363636364,"metadata":0.011363636363636364,"created":0.011363636363636364,"01":0.011363636363636364,"02":0.011363636363636364,"03":0.011363636363636364,"modified":0.011363636363636364,"block":0.011363636363636364,"content":0.011363636363636364,"-":0.011363636363636364,"sw":0.011363636363636364,"o":0.011363636363636364,"n":0.011363636363636364,"000":0.011363636363636364,"m":0.011363636363636364,"java":0.011363636363636364,"int":0.011363636363636364,"count":0.011363636363636364,"i":0.011363636363636364,"result":0.011363636363636364,"import":0.011363636363636364,"util":0.011363636363636364,"io":0.011363636363636364,"public":0.011363636363636364,"class":0.011363636363636364,"main":0.011363636363636364,"private":0.011363636363636364,"static":0.011363636363636364,"stringbuilder":0.011363636363636364,"sb":0.011363636363636364,"new":0.011363636363636364,"inputprocessor":0.011363636363636364,"void":0.011363636363636364,"string":0.011363636363636364,"args":0.011363636363636364,"input":0.011363636363636364,"pro":0.011363636363636364,"output":0.011363636363636364,"nextint":0.011363636363636364,"for":0.011363636363636364,"v":0.011363636363636364,"append":0.011363636363636364,"try":0.011363636363636364,"bufferedwriter":0.011363636363636364,"bw":0.011363636363636364,"outputstreamwriter":0.011363636363636364,"system":0.011363636363636364,"out":0.011363636363636364,"write":0.011363636363636364,"tostring":0.011363636363636364,"flush":0.011363636363636364,"catch":0.011363636363636364,"ioexception":0.011363636363636364,"e":0.011363636363636364,"throw":0.011363636363636364,"runtimeexception":0.011363636363636364,"bufferedreader":0.011363636363636364,"br":0.011363636363636364,"stringtokenizer":0.011363636363636364,"st":0.011363636363636364,"this":0.011363636363636364,"inputstreamreader":0.011363636363636364,"in":0.011363636363636364,"next":0.011363636363636364,"while":0.011363636363636364,"null":0.011363636363636364,"hasmoreelements":0.011363636363636364,"readline":0.011363636363636364,"return":0.011363636363636364,"nexttoken":0.011363636363636364,"nextline":0.011363636363636364,"integer":0.011363636363636364,"parseint":0.011363636363636364,"long":0.011363636363636364,"nextlong":0.011363636363636364,"parselong":0.011363636363636364},"67":{"0":0.01020408163265306,"1":0.01020408163265306,"2":0.01020408163265306,"3":0.01020408163265306,"4":0.01020408163265306,"5":0.01020408163265306,"6":0.01020408163265306,"7":0.01020408163265306,"8":0.01020408163265306,"9":0.01020408163265306,"12":0.01020408163265306,"13":0.01020408163265306,"27":0.01020408163265306,"38":0.01020408163265306,"58":0.01020408163265306,"2025":0.01020408163265306,"note":0.01020408163265306,"title":0.01020408163265306,"04":0.01020408163265306,"metadata":0.01020408163265306,"created":0.01020408163265306,"01":0.01020408163265306,"02":0.01020408163265306,"modified":0.01020408163265306,"03":0.01020408163265306,"block":0.01020408163265306,"content":0.01020408163265306,"-":0.01020408163265306,"k":0.01020408163265306,"o":0.01020408163265306,"n":0.01020408163265306,"target":0.01020408163265306,"java":0.01020408163265306,"text":0.01020408163265306,"import":0.01020408163265306,"util":0.01020408163265306,"io":0.01020408163265306,"public":0.01020408163265306,"class":0.01020408163265306,"main":0.01020408163265306,"private":0.01020408163265306,"static":0.01020408163265306,"stringbuilder":0.01020408163265306,"sb":0.01020408163265306,"new":0.01020408163265306,"inputprocessor":0.01020408163265306,"void":0.01020408163265306,"string":0.01020408163265306,"args":0.01020408163265306,"input":0.01020408163265306,"pro":0.01020408163265306,"output":0.01020408163265306,"int":0.01020408163265306,"arr":0.01020408163265306,"nextint":0.01020408163265306,"for":0.01020408163265306,"i":0.01020408163265306,"arrays":0.01020408163265306,"sort":0.01020408163265306,"a":0.01020408163265306,"if":0.01020408163265306,"break":0.01020408163265306,"append":0.01020408163265306,"try":0.01020408163265306,"bufferedwriter":0.01020408163265306,"bw":0.01020408163265306,"outputstreamwriter":0.01020408163265306,"system":0.01020408163265306,"out":0.01020408163265306,"write":0.01020408163265306,"tostring":0.01020408163265306,"flush":0.01020408163265306,"catch":0.01020408163265306,"ioexception":0.01020408163265306,"e":0.01020408163265306,"throw":0.01020408163265306,"runtimeexception":0.01020408163265306,"bufferedreader":0.01020408163265306,"br":0.01020408163265306,"stringtokenizer":0.01020408163265306,"st":0.01020408163265306,"this":0.01020408163265306,"inputstreamreader":0.01020408163265306,"in":0.01020408163265306,"next":0.01020408163265306,"while":0.01020408163265306,"null":0.01020408163265306,"hasmoreelements":0.01020408163265306,"readline":0.01020408163265306,"return":0.01020408163265306,"nexttoken":0.01020408163265306,"nextline":0.01020408163265306,"result":0.01020408163265306,"integer":0.01020408163265306,"parseint":0.01020408163265306,"long":0.01020408163265306,"nextlong":0.01020408163265306,"parselong":0.01020408163265306},"68":{"0":0.01,"1":0.01,"2":0.01,"11":0.01,"13":0.01,"28":0.01,"36":0.01,"49":0.01,"58":0.01,"100":0.01,"1439":0.01,"2025":0.01,"note":0.01,"title":0.01,"03":0.01,"metadata":0.01,"created":0.01,"01":0.01,"02":0.01,"modified":0.01,"block":0.01,"content":0.01,"https":0.01,"www":0.01,"acmicpc":0.01,"net":0.01,"problem":0.01,"-":0.01,"o":0.01,"s":0.01,"java":0.01,"import":0.01,"util":0.01,"io":0.01,"public":0.01,"class":0.01,"main":0.01,"private":0.01,"static":0.01,"stringbuilder":0.01,"sb":0.01,"new":0.01,"inputprocessor":0.01,"void":0.01,"string":0.01,"args":0.01,"input":0.01,"pro":0.01,"output":0.01,"nextline":0.01,"trim":0.01,"int":0.01,"count":0.01,"char":0.01,"prev":0.01,"'2'":0.01,"for":0.01,"c":0.01,"tochararray":0.01,"if":0.01,"continue":0.01,"'0'":0.01,"result":0.01,"math":0.01,"min":0.01,"append":0.01,"try":0.01,"bufferedwriter":0.01,"bw":0.01,"outputstreamwriter":0.01,"system":0.01,"out":0.01,"write":0.01,"tostring":0.01,"flush":0.01,"catch":0.01,"ioexception":0.01,"e":0.01,"throw":0.01,"runtimeexception":0.01,"bufferedreader":0.01,"br":0.01,"stringtokenizer":0.01,"st":0.01,"this":0.01,"inputstreamreader":0.01,"in":0.01,"next":0.01,"while":0.01,"null":0.01,"hasmoreelements":0.01,"readline":0.01,"return":0.01,"nexttoken":0.01,"nextint":0.01,"integer":0.01,"parseint":0.01,"long":0.01,"nextlong":0.01,"parselong":0.01},"69":{"0":0.011111111111111112,"1":0.011111111111111112,"13":0.011111111111111112,"16":0.011111111111111112,"18":0.011111111111111112,"20":0.011111111111111112,"35":0.011111111111111112,"2025":0.011111111111111112,"note":0.011111111111111112,"title":0.011111111111111112,"02":0.011111111111111112,"metadata":0.011111111111111112,"created":0.011111111111111112,"01":0.011111111111111112,"modified":0.011111111111111112,"block":0.011111111111111112,"content":0.011111111111111112,"-":0.011111111111111112,"facebook":0.011111111111111112,"o":0.011111111111111112,"n":0.011111111111111112,"java":0.011111111111111112,"import":0.011111111111111112,"util":0.011111111111111112,"io":0.011111111111111112,"public":0.011111111111111112,"class":0.011111111111111112,"main":0.011111111111111112,"private":0.011111111111111112,"static":0.011111111111111112,"stringbuilder":0.011111111111111112,"sb":0.011111111111111112,"new":0.011111111111111112,"inputprocessor":0.011111111111111112,"void":0.011111111111111112,"string":0.011111111111111112,"args":0.011111111111111112,"input":0.011111111111111112,"pro":0.011111111111111112,"output":0.011111111111111112,"s":0.011111111111111112,"nextline":0.011111111111111112,"trim":0.011111111111111112,"char":0.011111111111111112,"arr":0.011111111111111112,"tochararray":0.011111111111111112,"int":0.011111111111111112,"result":0.011111111111111112,"for":0.011111111111111112,"i":0.011111111111111112,"length":0.011111111111111112,"v":0.011111111111111112,"'0'":0.011111111111111112,"if":0.011111111111111112,"else":0.011111111111111112,"append":0.011111111111111112,"try":0.011111111111111112,"bufferedwriter":0.011111111111111112,"bw":0.011111111111111112,"outputstreamwriter":0.011111111111111112,"system":0.011111111111111112,"out":0.011111111111111112,"write":0.011111111111111112,"tostring":0.011111111111111112,"flush":0.011111111111111112,"catch":0.011111111111111112,"ioexception":0.011111111111111112,"e":0.011111111111111112,"throw":0.011111111111111112,"runtimeexception":0.011111111111111112,"bufferedreader":0.011111111111111112,"br":0.011111111111111112,"stringtokenizer":0.011111111111111112,"st":0.011111111111111112,"this":0.011111111111111112,"inputstreamreader":0.011111111111111112,"in":0.011111111111111112,"next":0.011111111111111112,"while":0.011111111111111112,"null":0.011111111111111112,"hasmoreelements":0.011111111111111112,"readline":0.011111111111111112,"return":0.011111111111111112,"nexttoken":0.011111111111111112,"nextint":0.011111111111111112,"integer":0.011111111111111112,"parseint":0.011111111111111112,"long":0.011111111111111112,"nextlong":0.011111111111111112,"parselong":0.011111111111111112},"70":{"0":0.011363636363636364,"1":0.011363636363636364,"12":0.011363636363636364,"29":0.011363636363636364,"30":0.011363636363636364,"31":0.011363636363636364,"38":0.011363636363636364,"39":0.011363636363636364,"2024":0.011363636363636364,"2025":0.011363636363636364,"note":0.011363636363636364,"title":0.011363636363636364,"01":0.011363636363636364,"metadata":0.011363636363636364,"created":0.011363636363636364,"modified":0.011363636363636364,"03":0.011363636363636364,"block":0.011363636363636364,"content":0.011363636363636364,"-":0.011363636363636364,"o":0.011363636363636364,"n":0.011363636363636364,"'":0.011363636363636364,"java":0.011363636363636364,"import":0.011363636363636364,"util":0.011363636363636364,"io":0.011363636363636364,"public":0.011363636363636364,"class":0.011363636363636364,"main":0.011363636363636364,"private":0.011363636363636364,"static":0.011363636363636364,"stringbuilder":0.011363636363636364,"sb":0.011363636363636364,"new":0.011363636363636364,"inputprocessor":0.011363636363636364,"void":0.011363636363636364,"string":0.011363636363636364,"args":0.011363636363636364,"input":0.011363636363636364,"pro":0.011363636363636364,"output":0.011363636363636364,"int":0.011363636363636364,"fear":0.011363636363636364,"nextint":0.011363636363636364,"for":0.011363636363636364,"i":0.011363636363636364,"arrays":0.011363636363636364,"sort":0.011363636363636364,"result":0.011363636363636364,"count":0.011363636363636364,"f":0.011363636363636364,"if":0.011363636363636364,"append":0.011363636363636364,"try":0.011363636363636364,"bufferedwriter":0.011363636363636364,"bw":0.011363636363636364,"outputstreamwriter":0.011363636363636364,"system":0.011363636363636364,"out":0.011363636363636364,"write":0.011363636363636364,"tostring":0.011363636363636364,"flush":0.011363636363636364,"catch":0.011363636363636364,"ioexception":0.011363636363636364,"e":0.011363636363636364,"throw":0.011363636363636364,"runtimeexception":0.011363636363636364,"bufferedreader":0.011363636363636364,"br":0.011363636363636364,"stringtokenizer":0.011363636363636364,"st":0.011363636363636364,"this":0.011363636363636364,"inputstreamreader":0.011363636363636364,"in":0.011363636363636364,"next":0.011363636363636364,"while":0.011363636363636364,"null":0.011363636363636364,"hasmoreelements":0.011363636363636364,"readline":0.011363636363636364,"return":0.011363636363636364,"nexttoken":0.011363636363636364,"nextline":0.011363636363636364,"integer":0.011363636363636364,"parseint":0.011363636363636364,"long":0.011363636363636364,"nextlong":0.011363636363636364,"parselong":0.011363636363636364}},"embeddingModel":{"2":{"0":0.5,"embed-multilingual-light-v3":0.5},"22":{"0":0.5,"embed-multilingual-light-v3":0.5},"23":{"0":0.5,"embed-multilingual-light-v3":0.5},"24":{"0":0.5,"embed-multilingual-light-v3":0.5},"25":{"0":0.5,"embed-multilingual-light-v3":0.5},"26":{"0":0.5,"embed-multilingual-light-v3":0.5},"27":{"0":0.5,"embed-multilingual-light-v3":0.5},"28":{"0":0.5,"embed-multilingual-light-v3":0.5},"29":{"0":0.5,"embed-multilingual-light-v3":0.5},"30":{"0":0.5,"embed-multilingual-light-v3":0.5},"31":{"0":0.5,"embed-multilingual-light-v3":0.5},"32":{"0":0.5,"embed-multilingual-light-v3":0.5},"33":{"0":0.5,"embed-multilingual-light-v3":0.5},"34":{"0":0.5,"embed-multilingual-light-v3":0.5},"35":{"0":0.5,"embed-multilingual-light-v3":0.5},"36":{"0":0.5,"embed-multilingual-light-v3":0.5},"37":{"0":0.5,"embed-multilingual-light-v3":0.5},"38":{"0":0.5,"embed-multilingual-light-v3":0.5},"39":{"0":0.5,"embed-multilingual-light-v3":0.5},"40":{"0":0.5,"embed-multilingual-light-v3":0.5},"41":{"0":0.5,"embed-multilingual-light-v3":0.5},"42":{"0":0.5,"embed-multilingual-light-v3":0.5},"43":{"0":0.5,"embed-multilingual-light-v3":0.5},"44":{"0":0.5,"embed-multilingual-light-v3":0.5},"45":{"0":0.5,"embed-multilingual-light-v3":0.5},"46":{"0":0.5,"embed-multilingual-light-v3":0.5},"47":{"0":0.5,"embed-multilingual-light-v3":0.5},"48":{"0":0.5,"embed-multilingual-light-v3":0.5},"49":{"0":0.5,"embed-multilingual-light-v3":0.5},"50":{"0":0.5,"embed-multilingual-light-v3":0.5},"51":{"0":0.5,"embed-multilingual-light-v3":0.5},"52":{"0":0.5,"embed-multilingual-light-v3":0.5},"53":{"0":0.5,"embed-multilingual-light-v3":0.5},"54":{"0":0.5,"embed-multilingual-light-v3":0.5},"55":{"0":0.5,"embed-multilingual-light-v3":0.5},"56":{"0":0.5,"embed-multilingual-light-v3":0.5},"57":{"0":0.5,"embed-multilingual-light-v3":0.5},"58":{"0":0.5,"embed-multilingual-light-v3":0.5},"59":{"0":0.5,"embed-multilingual-light-v3":0.5},"60":{"0":0.5,"embed-multilingual-light-v3":0.5},"61":{"0":0.5,"embed-multilingual-light-v3":0.5},"62":{"0":0.5,"embed-multilingual-light-v3":0.5},"63":{"0":0.5,"embed-multilingual-light-v3":0.5},"64":{"0":0.5,"embed-multilingual-light-v3":0.5},"65":{"0":0.5,"embed-multilingual-light-v3":0.5},"66":{"0":0.5,"embed-multilingual-light-v3":0.5},"67":{"0":0.5,"embed-multilingual-light-v3":0.5},"68":{"0":0.5,"embed-multilingual-light-v3":0.5},"69":{"0":0.5,"embed-multilingual-light-v3":0.5},"70":{"0":0.5,"embed-multilingual-light-v3":0.5}},"tags":{},"extension":{"2":{"md":1},"22":{"md":1},"23":{"md":1},"24":{"md":1},"25":{"md":1},"26":{"md":1},"27":{"md":1},"28":{"md":1},"29":{"md":1},"30":{"md":1},"31":{"md":1},"32":{"md":1},"33":{"md":1},"34":{"md":1},"35":{"md":1},"36":{"md":1},"37":{"md":1},"38":{"md":1},"39":{"md":1},"40":{"md":1},"41":{"md":1},"42":{"md":1},"43":{"md":1},"44":{"md":1},"45":{"md":1},"46":{"md":1},"47":{"md":1},"48":{"md":1},"49":{"md":1},"50":{"md":1},"51":{"md":1},"52":{"md":1},"53":{"md":1},"54":{"md":1},"55":{"md":1},"56":{"md":1},"57":{"md":1},"58":{"md":1},"59":{"md":1},"60":{"md":1},"61":{"md":1},"62":{"md":1},"63":{"md":1},"64":{"md":1},"65":{"md":1},"66":{"md":1},"67":{"md":1},"68":{"md":1},"69":{"md":1},"70":{"md":1}}},"tokenOccurrences":{"id":{"dc039849957310ec69c1cf88775147c2":0,"a4f0df752e644510136309e8e2065ade":1,"280a55cb47a9aa7947a3089fae949644":0,"2eb2d18d5533d9fee2a95e4d8fe7732d":0,"984c1b52a1e4a348d71e06ae1af76e5e":0,"0921f066aa07966e3bbfcc9499b36f38":0,"9009ee42f2d05bf3768455c3f2c7281b":0,"c456cb171026e17f10769c6975793269":0,"8b4fd28b0c87b6367b043b5953aa5367":0,"78a4483414041f4000f82451cfa3cd1b":0,"820b9dea304b06cf71068bc11a8486ec":0,"dbd257ae16d44c8d4536931e3947e38d":0,"62c7765e813a3aa825cd459737ec9f88":0,"b1ac257cf783d0801e0458cebfcd62cf":0,"90696bce1b2efd329bfd39efa3d7ab97":0,"485c018c53d5bb8817757bebf48ecba1":0,"781fc6eef919c68c43d9442f30929185":0,"c7bcb297eb88d19640104306d31c1e6a":0,"63edfc7e46510e78ab366102035522b6":0,"ea192ae485b0fe9cc5ce7fb6507a4e72":0,"b5dd7e43bdc112de3dd8b71df91f8aa4":0,"6dedc5ab0aa727885ec51dae14131b24":1,"b36d72facd0568e122323e7ee01d1d07":1,"17de5b758025908c586c7e78eae6436c":1,"230d347e717fcc2bd8f88d8be27c615b":1,"5f81d58a12bbe25ea80fc3dbe9d6fdd8":1,"532c9bb532e6991b4193a08168972611":1,"c35863a93434be8a523a4e575dfa9992":1,"83987152e332f1ea34e67bb329483d46":1,"ae161ed1a029574975fc16d0abfe2e2d":1,"6aac7b121dc7c2f68c2e1d83be48a5cb":1,"234b7fc3a4936b769256c9380326a0fc":1,"7dc0c6c0e4de0046d154ca8d61f0ba6c":1,"53cc96bf262039586a88ab17ac076858":1,"c5480db69876dbe696397144d9796e2f":1,"8231cc476f6fbc72323236bc60d781ab":1,"515ae74151efa1ff92687e7d52343ac5":1,"68760701d145a45add658a5b60e81709":1,"6d1fc0583ca584a225bd01072fcd1b16":1,"4803ad84843e046af3b33d47d032359b":1,"bf70ec7050d709f367edaf3c865b8597":1,"163113acc2627c112602577a83b6edac":1,"5883ef0265c795329291772ad145f25f":1,"a7e82c4eb3e192f780bb2fbe19411782":1,"a6fb16ab6210e4e160e6e4c54afbb948":1,"a3e3a9298cc139f91ba0f4e801a8954d":1,"edd334388e5b767324da496afca10cff":1,"815f570fed7f3502fc6402c73d009860":1,"6faffddc81ef57b2fa941ed3226a91b4":1,"ef586c0a890322cc0d74e2410f35bbd1":1,"78c4f8d9eab3431ad61ce0f242ab5415":1,"8fa3ccb0db0015e5729678bf219423a0":1,"cc49432675423864851bf22df8d3012e":1,"49ff9486289f87cb0be0966e968f6b8d":1,"a48169f8d45b497076fc671092c0a4b2":1,"b5c9a556d8dbfcfe6a3b58bcf2fa86f6":1,"ad3bde0ddbeba88edf74afebcabe8f72":1,"3456f0d3010850b0e090133d07c76718":1,"7862812dc01340fb2268e31c32332a93":1,"e1a44fa3d221ff26146effd1fada3e62":1,"755d007d5eea85cb2a3bbb8345fa97c4":1,"0836c208ec6065a3b8b001fd6c46d904":1,"9394eede642d233df07ba612ae4d1765":1,"dc95b170c58a5910e62087acc07b3f99":1,"94b4d16e6d81304783b6b01e1e08165b":1,"f5fd9fdc058615ed967acf9c9b838dd3":1,"6b7d2f8c17fb15fef149630a2d476e78":1,"86ea582ff110d6ec650cbeb762dbbdbd":1,"6ef08af3c4507048101e99c549d7b8e7":1,"bb24e2b75d91cdcdabe91b918c2e0b38":1},"title":{"10":1,"11":2,"12":5,"13":2,"14":1,"15":1,"16":3,"17":1,"18":1,"19":1,"20":3,"21":3,"22":4,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"readme":0,"kanban":1,"dashboard":1,"09":1,"08":1,"07":1,"06":1,"05":1,"04":1,"03":1,"02":1,"01":1},"path":{"1":50,"10":1,"11":2,"12":5,"13":2,"14":1,"15":1,"16":3,"17":1,"18":1,"19":1,"20":3,"21":3,"22":4,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"readme":0,"md":50,"project":50,"kanban":1,"dashboard":1,"09":1,"08":1,"07":1,"06":1,"05":1,"04":1,"03":1,"02":1,"01":1},"content":{"0":38,"1":38,"2":25,"3":15,"4":15,"5":7,"6":4,"7":5,"8":6,"9":2,"10":10,"11":10,"12":24,"13":12,"14":17,"15":30,"16":12,"17":7,"18":7,"19":9,"20":13,"21":5,"22":15,"23":4,"24":5,"25":5,"26":8,"27":6,"28":10,"29":6,"30":11,"31":13,"32":8,"33":6,"34":3,"35":7,"36":6,"37":3,"38":6,"39":3,"40":6,"41":1,"42":3,"43":2,"44":2,"45":3,"46":1,"47":4,"48":1,"49":3,"50":2,"51":4,"52":2,"53":1,"54":6,"55":2,"56":8,"57":17,"58":8,"59":1,"61":0,"71":0,"83":1,"85":1,"90":1,"100":2,"200":0,"576":1,"1001":1,"1439":1,"1715":1,"1932":1,"2019":1,"2024":10,"2025":42,"2110":1,"2887":0,"3190":1,"3665":0,"10825":1,"11404":0,"14501":1,"14502":1,"14888":1,"15686":1,"16234":1,"18310":1,"18352":1,"18353":1,"18405":1,"18406":1,"18428":1,"42889":1,"42891":1,"60057":1,"60058":1,"60059":1,"60060":1,"60061":1,"60062":1,"60063":1,"5000001":0,"note":50,"title":50,"readme":0,"metadata":50,"created":50,"modified":50,"block":50,"content":50,"para":0,"kanban":1,"dashboard":1,"kanban-plugin":1,"board":3,"01":42,"03":8,"---":2,"ch11":1,"-":42,"x":18,"02":26,"04":4,"05":2,"06":2,"ch12":1,"07":9,"08":7,"09":6,"ch13":1,"dfs":4,"bfs":7,"ch14":1,"ch15":1,"ch16":1,"ch17":1,"ch18":1,"settings":1,"list-collapse":1,"false":10,"show-checkboxes":1,"true":13,"hide-card-count":1,"00":14,"https":26,"www":17,"acmicpc":17,"net":17,"problem":17,"o":33,"v":14,"e":32,"java":38,"boolean":10,"edge":0,"1-4":0,"indegree":0,"no":4,"i":32,"swap":0,"n":31,"for":35,"impossible":0,"u":5,"cont'd":15,"hl":7,"import":33,"util":32,"io":30,"public":39,"class":36,"main":27,"private":36,"static":31,"stringbuilder":29,"sb":30,"new":38,"inputprocessor":27,"void":29,"string":32,"args":26,"input":26,"output":27,"int":41,"m":7,"t":6,"nextint":29,"while":29,"j":12,"if":33,"continue":11,"a":6,"b":3,"pro":26,"else":20,"deque":5,"integer":28,"que":5,"arraydeque":5,"add":16,"answer":8,"idx":9,"isempty":7,"append":29,"return":40,"size":8,"cur":8,"poll":7,"try":28,"bufferedwriter":26,"bw":26,"outputstreamwriter":26,"system":26,"out":26,"write":26,"tostring":30,"flush":26,"catch":28,"ioexception":28,"throw":28,"runtimeexception":28,"bufferedreader":26,"br":28,"stringtokenizer":26,"st":28,"this":30,"inputstreamreader":26,"in":26,"next":32,"null":26,"hasmoreelements":26,"readline":28,"nexttoken":28,"nextline":27,"result":34,"parseint":27,"long":27,"nextlong":26,"parselong":26,"eloge":0,"4byte":0,"16gbyte":0,"y":13,"z":1,"30-50":0,"list":12,"edges":0,"plant":0,"plants":0,"arraylist":11,"collections":5,"sort":12,"comparator":1,"comparingint":1,"from":1,"get":7,"to":0,"math":13,"abs":2,"final":10,"implements":4,"comparable":4,"cost":0,"compareto":5,"parent":0,"0l":0,"compare":0,"union":2,"findparent":0,"_a":0,"_b":0,"university":0,"of":0,"ulm":0,"local":0,"contest":0,"000":4,"000log200":0,"mst":0,"union-find":0,"text":6,"total":0,"mindist":0,"ccc":0,"amortized":0,"inverse":0,"ackermann":0,"function":0,"chat-gpt":0,"find":0,"gi":0,"g":0,"p":2,"wanted":0,"exits":0,"exit":0,"findexit":0,"break":11,"none":0,"yes":1,"29-30":0,"schedule":1,"check":1,"usaco":0,"elogv":0,"log":0,"dist":5,"inf":0,"100_000_001":0,"adj":1,"queue":3,"node":0,"pq":1,"priorityqueue":2,"arrays":10,"fill":2,"_dist":0,"maxdist":0,"count":11,"acm-icpc":0,"dir":6,"-1":15,"max_value":4,"robot":3,"dx":5,"dy":5,"k":5,"5_000_001":0,"grade":0,"min":6,"10_000_001":0,"c":4,"goldman":0,"sachs":0,"dp":4,"cut":0,"cat":0,"-----":1,"------------------------------":0,"font":1,"color":1,"ffff00":0,"trim":3,"length":11,"char":4,"charat":1,"d":3,"google":0,"three":0,"pointer":1,"'":2,"ugle":0,"i2":0,"i3":0,"i5":0,"next2":0,"next3":0,"next5":0,"ugly":0,"--":0,"max":7,"data":5,"i--":2,"j--":1,"maxvalue":1,"day":1,"maxcost":1,"bottom-up":1,"left":4,"right":3,"triangle":1,"flipkart":1,"row":4,"col":3,"leftup":1,"leftdown":1,"school":10,"programmers":9,"co":9,"kr":9,"learn":9,"courses":9,"lessons":9,"nlogn":10,"queries":1,"words":1,"000log100":1,"linkedlist":1,"reverse":1,"setlength":2,"7f7f7f":1,"frame":1,"frodo":1,"front":1,"frost":1,"kakao":1,"frozen":1,"emarf":1,"oakak":1,"odorf":1,"tnorf":1,"tsorf":1,"nezorf":1,"quries":1,"question":1,"mark":1,"forward":1,"query":1,"oaaaa":1,"ozzzz":1,"54-55":1,"solution":8,"10_000":1,"w":3,"len":4,"reversefrom":1,"startswith":2,"countbyrange":1,"word":1,"binarysearch":1,"replaceall":1,"l":9,"r":7,"mid":4,"logn":3,"ispossible":3,"prev":2,"diff":5,"amazon":1,"-15":1,"-6":1,"-4":1,"zoho":1,"lowerboud":1,"upperbound":1,"lowerbound":1,"target":2,"v1":3,"v2":3,"sum":4,"stoped":1,"stages":1,"double":1,"lang":1,"s":8,"stage":1,"players":1,"stop":1,"failrate":1,"house":2,"student":1,"students":1,"name":1,"ko":1,"eng":1,"x1":3,"x2":3,"y1":3,"y2":3,"2025-01-02":1,"png":1,"set":2,"equals":4,"hashcode":1,"visited":4,"nums":3,"ishosizontal":2,"maps":6,"isvertical":2,"8-10":1,"36-41":1,"116-140":1,"newboard":1,"start":1,"hashset":1,"isfinish":1,"nexts":1,"findnexts":1,"dx1":1,"dy1":1,"dx2":1,"dy2":1,"groupno":2,"country":1,"groups":1,"startx":1,"starty":1,"avg":1,"36c3":1,"blank":2,"blanks":2,"teacher":1,"teachers":1,"createdummy":1,"cnt":1,"survive":1,"048":1,"selected":2,"operator":1,"min_value":1,"rec":4,"value":1,"calculate":2,"op":1,"parentheses":1,"tochararray":4,"substring":3,"converttext":1,"--count":1,"88-94":1,"virus":2,"time":4,"64c3":1,"nm":2,"fields":1,"viruses":1,"createwall":1,"spread":1,"safety":1,"weak":1,"-8":1,"32bit":1,"used":1,"50-54":1,"_n":1,"xcm":1,"h":2,"chicken":1,"chickenlist":1,"houselist":1,"combination":1,"distance":1,"mindiff":1,"build_frame":2,"pole":3,"bo":3,"buildablepole":3,"bf":1,"execute":1,"destroypole":1,"buildpole":1,"destroybo":2,"buildbo":1,"invalid":2,"buildablebo":2,"minx":1,"maxx":1,"miny":1,"maxy":1,"multi":1,"source":1,"tailx":2,"taily":2,"map":2,"commandmap":1,"hashmap":1,"put":1,"containskey":1,"nextdir":1,"remove":1,"ix":1,"cmd":1,"shif":1,"-40":1,"shift":1,"lock":1,"key":1,"_key":1,"_lock":1,"loop1":1,"pushkey":1,"unlock":1,"pollkey":1,"rotate":1,"temp":1,"mb":1,"ms":1,"half":2,"compressed":1,"compress":1,"base":1,"repeated":1,"remain":1,"repeat":1,"pre":1,"post":1,"facebook":2,"k1ka5cb7":1,"abckk13":1,"ajkdlsi412k4jsj9d":1,"addijjjkklss20":1,"alphabet":1,"character":1,"isalphabetic":1,"valueof":2,"'0'":3,"lucky":1,"ready":1,"mod":1,"food":1,"area":1,"sub":1,"food_times":1,"foods":1,"prevtime":1,"f":2,"sublist":1,"sw":1,"arr":2,"'2'":1,"fear":1},"embeddingModel":{"0":50,"embed-multilingual-light-v3":50},"tags":{},"extension":{"md":50}},"avgFieldLength":{"id":1,"title":1.0199999999999998,"path":4.02,"content":80.3,"embeddingModel":2,"tags":0,"extension":1},"fieldLengths":{"id":{"2":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"title":{"2":2,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"path":{"2":5,"22":4,"23":4,"24":4,"25":4,"26":4,"27":4,"28":4,"29":4,"30":4,"31":4,"32":4,"33":4,"34":4,"35":4,"36":4,"37":4,"38":4,"39":4,"40":4,"41":4,"42":4,"43":4,"44":4,"45":4,"46":4,"47":4,"48":4,"49":4,"50":4,"51":4,"52":4,"53":4,"54":4,"55":4,"56":4,"57":4,"58":4,"59":4,"60":4,"61":4,"62":4,"63":4,"64":4,"65":4,"66":4,"67":4,"68":4,"69":4,"70":4},"content":{"2":77,"22":103,"23":98,"24":96,"25":93,"26":120,"27":105,"28":105,"29":103,"30":96,"31":78,"32":93,"33":104,"34":75,"35":25,"36":89,"37":33,"38":36,"39":115,"40":28,"41":36,"42":117,"43":41,"44":112,"45":73,"46":117,"47":31,"48":110,"49":40,"50":110,"51":75,"52":31,"53":113,"54":51,"55":25,"56":77,"57":93,"58":18,"59":42,"60":113,"61":79,"62":84,"63":107,"64":97,"65":87,"66":88,"67":98,"68":100,"69":90,"70":88},"embeddingModel":{"2":2,"22":2,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":2,"32":2,"33":2,"34":2,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":2,"42":2,"43":2,"44":2,"45":2,"46":2,"47":2,"48":2,"49":2,"50":2,"51":2,"52":2,"53":2,"54":2,"55":2,"56":2,"57":2,"58":2,"59":2,"60":2,"61":2,"62":2,"63":2,"64":2,"65":2,"66":2,"67":2,"68":2,"69":2,"70":2},"tags":{},"extension":{"2":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1}}},"docs":{"docs":{"2":{"title":"kanban dashboard","path":"1. Project/이것이 취업을 위한 코딩테스트다/kanban dashboard.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735616258786,"mtime":1735875505797,"tags":[],"extension":"md","metadata":{"kanban-plugin":"board","created":"2024/12/31 12:37:38","modified":"2025/01/03 12:38:25"},"id":"a4f0df752e644510136309e8e2065ade","content":"\n\nNOTE TITLE: [[kanban dashboard]]\n\nMETADATA:{\"kanban-plugin\":\"board\",\"created\":\"2024/12/31 12:37:38\",\"modified\":\"2025/01/03 12:38:25\"}\n\nNOTE BLOCK CONTENT:\n\n---\n\nkanban-plugin: board\n\n---\n\n## Ch11. 그리디 문제\n\n- [x] [[01. 모험가 길드 (🔺)]]\n- [x] [[02.곱하기 혹은 더하기]]\n- [x] [[03.문자열 뒤집기]]\n- [x] [[04.만들 수 없는 금액 (💩)]]\n- [x] [[05.볼링공 고르기]]\n- [x] [[06.무지의 먹방라이브]]\n\n\n## Ch12. 구현 문제\n\n- [x] [[07.럭키 스트레이트]]\n- [x] [[08.문자열 재정렬]]\n- [x] [[09.문자열 압축]]\n- [x] [[10.자물쇠와 열쇠]]\n- [x] [[11.뱀]]\n- [x] [[12.기둥과 보 설치]]\n- [x] [[13.치킨배달]]\n- [x] [[14.외벽점검 (🔺)]]\n\n\n## Ch13. DFS/BFS 문제\n\n- [x] [[15.특정 거리의 도시 찾기]]\n- [x] [[16.연구소]]\n- [x] [[17.경쟁적 전염]]\n- [x] [[18.괄호 변환]]\n- [x] [[19.연산자 끼워 넣기]]\n- [x] [[20.감시 피하기]]\n- [x] [[21.인구 이동]]\n- [x] [[22.블록 이동하기 (🔺)]]\n\n\n## Ch14. 정렬 문제\n\n- [x] [[23.국영수]]\n- [x] [[24.안테나]]\n- [x] [[25.실패율]]\n- [x] [[26.카드 정렬하기]]\n\n\n## Ch15. 이진 탐색 문제\n\n- [x] [[27.정렬된 배열에서 특정 수의 개수 구하기]]\n- [x] [[28.고정점 찾기]]\n- [x] [[29.공유기 설치]]\n- [x] [[30.가사 검색]]\n\n\n## Ch16. 다이나믹 프로그래밍 문제\n\n- [x] [[31.금광]]\n- [x] [[32.정수 삼각형]]\n- [x] [[33.퇴사]]\n- [x] [[34.병사 배치하기]]\n- [x] [[35.못생긴 수]]\n- [x] [[36.편집 거리]]\n\n\n## Ch17. 최단 경로 문제\n\n- [x] [[37.플로이드]]\n- [x] [[38.정확한 순위]]\n- [x] [[39.화성 탐사]]\n- [x] [[40.숨바꼭질]]\n\n\n## Ch18. 그래프 이론 문제\n\n- [x] [[41.여행계획]]\n- [x] [[42.탑승구(🔺)]]\n- [x] [[43.어두운길]]\n- [x] [[44.행성터널]]\n- [x] [[45.최종순위]]\n\n\n\n\n%% kanban:settings\n```\n{\"kanban-plugin\":\"board\",\"list-collapse\":[false,false,false,false,false,false,false,false],\"show-checkboxes\":true,\"hide-card-count\":false}\n```\n%%","embedding":[0.014289856,-0.008956909,-0.024627686,0.04244995,0.093566895,-0.109436035,-0.038360596,0.031555176,0.0013875961,0.09075928,-0.008407593,0.014846802,0.015563965,0.0018796921,0.019332886,-0.018417358,-0.017868042,0.02861023,0.04928589,-0.04437256,0.06707764,0.053131104,0.027664185,-0.012741089,0.010231018,0.008865356,-0.03665161,0.06530762,0.034851074,0.002538681,-0.0018281937,-0.035949707,-0.095947266,0.001868248,0.009468079,0.053741455,0.035949707,-0.0048828125,0.013404846,-0.060150146,0.01335144,0.019088745,0.040527344,0.09637451,-0.049224854,-0.048950195,0.01525116,-0.033203125,-0.11627197,0.01651001,0.025680542,-0.014152527,-0.0019426346,-0.07067871,0.005836487,0.021057129,0.00504303,0.1126709,-0.035125732,0.026733398,0.06549072,-0.039215088,-0.03112793,-0.049713135,0.0037021637,-0.09265137,0.05319214,-0.029464722,0.07092285,-0.039733887,0.028411865,-0.07354736,-0.03756714,-0.01158905,-0.017623901,-0.0059776306,0.0748291,0.01878357,0.05618286,-0.022476196,-0.032958984,-0.022613525,-0.080200195,-0.02670288,-0.030700684,0.020507812,0.006214142,-0.047546387,-0.09527588,0.11804199,-0.03048706,0.03286743,-0.011795044,0.04434204,0.026977539,0.034332275,0.052947998,0.03579712,-0.027877808,0.032470703,-0.027633667,-0.09490967,-0.033172607,-0.076538086,-0.08392334,0.056732178,0.002500534,0.018478394,0.03225708,0.035583496,-0.022094727,0.029724121,-0.011550903,0.020385742,0.0070152283,0.02670288,0.085632324,-0.075805664,0.03302002,-0.07110596,-0.024139404,0.015350342,-0.021270752,-0.0149002075,0.021347046,-0.030181885,0.0048332214,0.042663574,-0.111083984,0.026916504,0.023117065,0.01574707,-0.050323486,0.032409668,0.05731201,0.03225708,0.006587982,0.101135254,-0.025238037,-0.019958496,0.08306885,0.040039062,-0.006500244,0.04711914,-0.03677368,0.01411438,0.049346924,-0.13989258,0.022445679,-0.000044882298,0.07763672,0.029129028,0.025115967,0.045715332,-0.03274536,-0.10272217,0.08203125,0.062194824,-0.028930664,0.049560547,-0.051635742,0.026687622,-0.14038086,-0.19873047,0.054992676,-0.097595215,0.055908203,0.0071907043,-0.006614685,-0.027008057,0.024536133,0.13879395,-0.029281616,0.021759033,-0.017089844,0.0836792,-0.012184143,-0.008399963,-0.0076522827,-0.002626419,0.059448242,0.060028076,-0.054595947,-0.04196167,-0.075805664,0.085876465,-0.024475098,-0.09063721,-0.040008545,0.011962891,-0.11151123,0.049987793,-0.048614502,-0.109191895,-0.039642334,0.034942627,-0.033172607,-0.021697998,0.009391785,-0.00070142746,-0.04119873,-0.0619812,0.013671875,0.025817871,-0.012336731,-0.022567749,0.05630493,0.023605347,-0.056396484,-0.009178162,-0.037841797,0.0066452026,0.00070858,0.033172607,-0.059326172,0.007461548,-0.040130615,-0.026138306,-0.024856567,0.12005615,0.054656982,-0.008613586,-0.13842773,-0.088134766,0.0020484924,0.022888184,-0.020690918,-0.09454346,-0.051239014,-0.018875122,0.075683594,-0.0054397583,0.052642822,0.07098389,0.0118637085,0.105407715,0.022445679,-0.054138184,0.010017395,-0.08557129,-0.02067566,0.04425049,0.10748291,-0.048828125,-0.03741455,-0.052490234,-0.033721924,0.023345947,-0.008766174,0.027664185,0.005672455,-0.050048828,-0.1048584,-0.038116455,-0.045776367,0.06341553,0.017105103,0.02722168,-0.018295288,-0.038330078,0.021408081,-0.020858765,0.05770874,-0.016540527,-0.025161743,-0.04522705,-0.05130005,0.042266846,0.04043579,0.014808655,0.035583496,-0.006389618,-0.027954102,0.015487671,0.021606445,-0.033996582,0.096069336,0.067993164,0.01751709,0.07678223,-0.010719299,-0.0043754578,0.1005249,0.10119629,0.023239136,-0.00274086,-0.0155181885,0.050567627,0.079589844,-0.0039100647,-0.08154297,0.010826111,-0.046569824,-0.0034313202,0.10809326,0.04309082,0.01663208,0.0077171326,-0.051452637,0.023345947,0.05319214,0.015327454,-0.031677246,0.011619568,-0.040863037,-0.049713135,0.06390381,-0.054107666,0.0061149597,0.0038394928,0.0001296997,0.02859497,-0.0135650635,0.027832031,-0.000100672245,0.04751587,0.033233643,0.027145386,-0.06762695,0.012451172,-0.023223877,0.009849548,0.031829834,-0.024414062,-0.00674057,0.022079468,-0.079833984,0.059173584,-0.04647827,0.11853027,0.03503418,-0.005504608,0.020065308,0.0052719116,-0.03225708,-0.08288574,-0.019989014,-0.035125732,-0.0051956177,0.0052719116,0.06982422,-0.041870117,-0.03289795,0.055358887,0.0071029663,-0.024368286,-0.08947754,0.052612305,-0.11602783,-0.0385437,-0.10333252,-0.10900879,0.041412354,-0.011367798,0.049713135,-0.045928955,-0.016998291,-0.08709717,-0.009468079,-0.024139404,0.02861023,-0.055999756,0.024536133,0.07696533,-0.015975952,-0.08050537,0.008300781,0.0385437,-0.032318115,0.032073975,0.054260254,0.006465912,0.050750732,0.0014028549,-0.0050582886,-0.031921387,0.09631348,-0.014343262,0.033325195,0.047668457,0.056610107,-0.034454346,-0.0011110306,-0.021331787],"created_at":1735875660518,"nchars":1449},"22":{"title":"34.병사 배치하기","path":"1. Project/이것이 취업을 위한 코딩테스트다/34.병사 배치하기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735697540141,"mtime":1735702582359,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 11:12:20","modified":"2025/01/01 12:36:22"},"id":"6dedc5ab0aa727885ec51dae14131b24","content":"\n\nNOTE TITLE: [[34.병사 배치하기]]\n\nMETADATA:{\"created\":\"2025/01/01 11:12:20\",\"modified\":\"2025/01/01 12:36:22\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/18353\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 동적 프로그래밍\n- 가장 긴 부분 수열로 문제를 역으로 바꿔서 풀이\n- **점화식** : `{java} dp[i] = max(dp[i], dp[j] + 1) (이때 data[j] < data[i]인 경우)`\n\n\n입력 데이터를 역순으로 나열하고, dp 테이블을 1로 초기화 한다 (1 = 자기자신 뜻함)\n\n|     | 1   | 2   | 3   | 4   | 5   | 6   | 7   |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| 전투력 | 4   | 2   | 5   | 8   | 4   | 11  | 15  |\n| dp  | 1   | 1   | 1   | 1   | 1   | 1   | 1   |\n\n3번 병사의 경우 본인보다 전투력이 낮은 병사가 1, 2번이 있으므로 2(최대)가 된다\n\n|     | 1   | 2   | 3     | 4   | 5   | 6   | 7   |\n| --- | --- | --- | ----- | --- | --- | --- | --- |\n| 전투력 | 4   | 2   | 5     | 8   | 4   | 11  | 15  |\n| dp  | 1   | 1   | **2** | 1   | 1   | 1   | 1   |\n\n4번 병사의 경우 본인 보다 전투력이 낮은 병사가 3(최대)이 된다\n\n|     | 1   | 2   | 3   | 4     | 5   | 6   | 7   |\n| --- | --- | --- | --- | ----- | --- | --- | --- |\n| 전투력 | 4   | 2   | 5   | 8     | 4   | 11  | 15  |\n| dp  | 1   | 1   | 2   | **3** | 1   | 1   | 1   |\n\n현재 본인의 전투력보다 낮은 병사의 `dp 테이블 값 + 1` 하면서 최대값을 구하면 가장 긴 오름차순 부분 수열을 구할 수 있다. 결과는 열외해야 하는 병사 수를 구하므로, 전체 병사 수에서 빼주면 원하는 값을 구할 수 있다\n\n|     | 1   | 2   | 3   | 4   | 5   | 6   | 7     |\n| --- | --- | --- | --- | --- | --- | --- | ----- |\n| 전투력 | 4   | 2   | 5   | 8   | 4   | 11  | 15    |\n| dp  | 1   | 1   | 2   | 3   | 2   | 4   | **5** |\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] data;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t  \n\t    data = new int[n + 1];  \n\t    for(int i = n; i >= 1; i--) {  \n\t        data[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    int[] dp = new int[n + 1];  \n\t  \n\t    // 가장 긴 오름차순 수열을 구한다  \n\t    dp[1] = 1;  \n\t    for(int i = 2; i <= n; i++) {  \n\t        dp[i] = 1;  \n\t        for(int j = i - 1; j >= 1; j--) {  \n\t            if(data[j] < data[i]) {  \n\t                dp[i] = Math.max(dp[i], dp[j] + 1);  \n\t            }  \n\t        }  \n\t    }  \n\t  \n\t    // 결과 = 전체 병사 수 - 가장 긴 오름차순 수열  \n\t    int max = 0;  \n\t    for(int i = 1; i <= n; i++) {  \n\t        max = Math.max(max, dp[i]);  \n\t    }  \n\t  \n\t    sb.append(n - max);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n    \n}\n```","embedding":[0.011367798,0.022583008,-0.0413208,0.032836914,0.09869385,-0.06390381,-0.048065186,0.083496094,-0.07122803,0.026275635,0.038513184,-0.007987976,0.061401367,-0.04296875,0.023269653,-0.004245758,0.076171875,0.019302368,-0.005302429,-0.017227173,0.0062713623,0.07312012,-0.041168213,-0.019699097,0.075805664,0.015167236,-0.03186035,0.13623047,-0.0018892288,0.026184082,-0.02947998,-0.035247803,0.00036931038,-0.06915283,0.03515625,0.068481445,-0.0035362244,0.05670166,0.046875,-0.113464355,0.04067993,-0.052490234,0.072509766,0.051635742,0.06958008,0.0541687,-0.04284668,-0.05596924,-0.02444458,0.04663086,-0.03189087,-0.018798828,0.017440796,-0.09338379,-0.05102539,-0.012245178,0.044921875,-0.060058594,-0.07092285,0.011268616,0.00894928,-0.007419586,-0.00466156,-0.024902344,0.10437012,-0.11425781,0.023132324,-0.06222534,0.08312988,-0.037109375,-0.01939392,0.015426636,-0.03250122,-0.032714844,-0.020202637,0.018920898,0.105041504,-0.013801575,0.05218506,0.007160187,0.013076782,-0.075683594,0.0087890625,-0.019851685,-0.068359375,0.00932312,0.04537964,-0.030288696,-0.07531738,-0.010810852,0.08288574,0.0028972626,-0.036224365,-0.02015686,-0.03274536,-0.01701355,-0.06542969,0.05343628,0.04159546,0.07269287,-0.037475586,-0.06500244,0.046722412,-0.07098389,-0.029663086,0.015823364,-0.046295166,-0.09161377,0.022064209,0.005580902,0.013824463,0.085632324,0.003868103,-0.008880615,0.014419556,-0.0056381226,0.041168213,-0.021026611,0.020568848,-0.0871582,0.021911621,-0.018661499,-0.089416504,0.043670654,-0.03164673,0.053497314,0.032104492,0.056884766,-0.08319092,0.01071167,0.070739746,0.020599365,-0.032165527,0.04425049,0.087768555,0.06274414,0.015029907,0.1394043,-0.044006348,-0.08111572,-0.024414062,0.0552063,-0.04815674,0.0030612946,-0.01537323,0.07543945,0.043395996,-0.08648682,0.034576416,-0.09197998,0.051116943,-0.09954834,0.10491943,0.05026245,-0.055480957,0.0024089813,0.03704834,0.018035889,-0.03036499,0.15600586,-0.039123535,0.026046753,-0.09338379,-0.15686035,0.011566162,-0.056884766,0.025604248,-0.03338623,-0.03982544,-0.062408447,0.014770508,0.05996704,-0.042816162,0.0552063,-0.07104492,0.039093018,-0.031677246,-0.036254883,0.024597168,-0.041412354,-0.021347046,0.092285156,-0.078552246,0.015449524,-0.032287598,-0.0022830963,-0.071899414,-0.05947876,0.0057029724,0.03149414,-0.05657959,0.04486084,0.04937744,-0.048950195,-0.039245605,0.017105103,-0.08251953,-0.02154541,0.004917145,-0.024246216,0.04876709,0.005821228,0.04547119,0.09814453,0.016189575,-0.05532837,0.0155181885,0.049224854,-0.060668945,-0.038513184,0.031585693,0.010879517,0.010093689,-0.011528015,0.00409317,-0.019866943,-0.07043457,-0.0028362274,-0.012542725,0.05606079,0.006416321,-0.008453369,-0.08856201,-0.068481445,-0.038909912,-0.022613525,-0.0062294006,-0.09515381,-0.06298828,0.038085938,0.06719971,0.07800293,-0.0004453659,0.013587952,-0.017807007,0.006378174,0.02758789,0.008369446,-0.06304932,-0.08300781,-0.030639648,-0.01927185,-0.013809204,-0.00944519,-0.006008148,0.020431519,-0.009315491,0.06112671,-0.047729492,0.03881836,-0.058746338,-0.03640747,-0.040100098,-0.107666016,-0.06604004,0.053863525,-0.016967773,0.034729004,-0.023880005,-0.03744507,-0.011520386,0.070251465,0.036834717,-0.023498535,-0.021057129,-0.058624268,-0.05279541,0.02532959,0.08929443,0.0077400208,0.0077323914,0.08288574,0.062683105,-0.042785645,-0.024002075,-0.05380249,0.09057617,0.043395996,-0.012008667,-0.039245605,0.0345459,-0.045776367,0.070495605,0.062683105,0.040924072,0.06185913,0.00995636,0.087768555,0.061065674,-0.0053520203,-0.1307373,0.07287598,0.025238037,0.030700684,0.07775879,-0.023712158,0.020065308,0.023544312,-0.0018234253,0.030227661,0.031097412,0.016952515,-0.008338928,0.031433105,-0.0035324097,-0.013954163,-0.010810852,0.003862381,-0.052825928,0.04888916,-0.09875488,-0.03479004,-0.087768555,0.037353516,0.046569824,-0.009666443,0.045532227,0.04626465,0.007926941,0.053863525,-0.058502197,0.029891968,0.0012865067,0.039794922,-0.009033203,-0.040283203,-0.055664062,0.09674072,-0.00005632639,0.15734863,0.02558899,0.026016235,-0.011123657,-0.043121338,0.0043945312,-0.0690918,-0.034820557,-0.09161377,-0.060668945,-0.07330322,0.044555664,-0.0015573502,-0.07543945,0.05657959,0.04550171,-0.01676941,-0.041748047,-0.017807007,-0.020263672,-0.01914978,0.03286743,-0.08581543,0.07885742,0.028961182,0.031021118,0.0030517578,-0.022903442,0.0074806213,-0.021987915,0.029067993,0.028701782,-0.0904541,0.038208008,0.014892578,-0.0357666,-0.023117065,0.038085938,0.049957275,-0.0033836365,0.0010223389,-0.028198242,-0.05380249,0.057403564,-0.0055351257,0.004470825,-0.01600647,0.017333984,-0.04083252,0.05529785,0.072631836,0.064697266,-0.040405273,0.034423828,0.015655518],"created_at":1735875660535,"nchars":3841},"23":{"title":"33.퇴사","path":"1. Project/이것이 취업을 위한 코딩테스트다/33.퇴사.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735697535581,"mtime":1735699628835,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 11:12:15","modified":"2025/01/01 11:47:08"},"id":"b36d72facd0568e122323e7ee01d1d07","content":"\n\nNOTE TITLE: [[33.퇴사]]\n\nMETADATA:{\"created\":\"2025/01/01 11:12:15\",\"modified\":\"2025/01/01 11:47:08\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/14501\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 동적 프로그래밍 \n- 역방향으로 n ~ 1 까지 감소하면서 dp 테이블 갱신\n- `dp[i] = i 번째 날부터 마지막 날까지 낼 수 있는 최대 이익`\n- **점화식** : `{java} dp[i] = max(maxValue, p[i] + dp[i + t[i]])` \n\t- `maxValue` : 현재까지의 최대 상담 금액에 해당하는 변수\n- `int[] dp = new int[n + 2]`를 하는 이유는 n + 1일 날 퇴사를 하기 때문에 퇴사일까지 상담 완료하는 경우를 고려하여 초기화 0을 해둠\n- `day > n + 1` 인 경우 퇴사일까지 상담 완료를 못하므로 `maxValue` 최대치를 기록해준다\n\t- 처음엔 `0`이지만 중간에 `maxValue`가 갱신되는 경우 생각해보기\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[][] schedule;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        schedule = new int[n + 1][2]; // 0 : T, 1 : P\n        for(int i = 1; i <= n; i++) {\n            int t = inputProcessor.nextInt();\n            int p = inputProcessor.nextInt();\n\n            schedule[i][0] = t;\n            schedule[i][1] = p;\n        }\n    }\n\n    private static void pro() {\n        int[] dp = new int[n + 2]; // n + 1 퇴사일에 상담 종료되는것 고려\n\n        int maxCost = 0;\n        for(int i = n; i >= 1; i--) {\n            int day = i + schedule[i][0];\n            if(day <= n + 1) {\n                dp[i] = Math.max(maxCost, dp[day] + schedule[i][1]);\n                maxCost = dp[i];\n            } else {\n                dp[i] = maxCost;\n            }\n        }\n\n        int result = 0;\n        for(int i = 1; i <= n; i++) {\n            if(result < dp[i]) {\n                result = dp[i];\n            }\n        }\n\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.017242432,0.031173706,0.03994751,0.08685303,0.079833984,-0.047027588,-0.05734253,0.051727295,0.049194336,0.060791016,-0.049865723,0.026031494,0.06726074,-0.05441284,0.030975342,0.04055786,0.059936523,-0.051513672,-0.020584106,-0.0028381348,-0.02507019,-0.01977539,-0.08666992,0.025054932,0.019332886,0.010734558,-0.0736084,0.11669922,-0.017593384,-0.04071045,-0.06112671,-0.054626465,-0.05581665,-0.08483887,0.03717041,0.07458496,0.026992798,0.011070251,-0.0017442703,-0.1348877,-0.011787415,-0.07684326,0.013031006,0.07739258,0.051330566,0.031982422,-0.003124237,0.07696533,0.021987915,0.0647583,-0.043914795,-0.016540527,0.070739746,-0.06994629,-0.045440674,-0.012626648,0.022872925,-0.055877686,-0.08190918,0.009422302,0.06677246,0.058929443,-0.023956299,0.03353882,0.07550049,-0.08520508,-0.007549286,0.012802124,0.0993042,-0.026931763,0.01612854,-0.0770874,-0.027359009,-0.038360596,-0.013725281,0.041748047,0.05557251,-0.055419922,0.057281494,-0.009643555,-0.028457642,-0.064575195,-0.031311035,-0.0022792816,-0.08203125,-0.017974854,0.027999878,-0.029006958,-0.060150146,0.049865723,0.0317688,0.025527954,0.015853882,0.034942627,-0.011924744,0.026977539,-0.049560547,0.012969971,-0.0047187805,0.07476807,-0.022079468,-0.091552734,0.0121536255,-0.042755127,-0.0003209114,-0.042541504,-0.010734558,-0.004169464,0.10021973,-0.0036087036,-0.07952881,0.046081543,0.0418396,-0.060302734,-0.0038471222,0.00818634,0.02130127,-0.09197998,0.058929443,-0.05834961,0.08508301,0.035339355,-0.038604736,0.056396484,-0.01676941,0.0770874,0.060333252,0.002023697,-0.12890625,0.07305908,0.009307861,-0.004261017,-0.022979736,-0.029418945,0.10089111,0.05380249,0.0016365051,0.10760498,-0.04260254,-0.099121094,0.04751587,-0.034698486,-0.032470703,-0.014450073,-0.00092220306,0.048309326,0.036193848,-0.10443115,0.022949219,-0.15490723,0.015945435,0.030380249,0.1439209,0.09448242,-0.044128418,-0.002204895,0.07910156,0.009613037,-0.07330322,0.06707764,-0.017745972,-0.028717041,-0.08880615,-0.07421875,0.07824707,-0.06463623,0.09313965,0.009513855,-0.029693604,-0.0016393661,0.023162842,0.07727051,-0.059936523,0.047058105,0.024597168,0.03112793,-0.08728027,-0.032226562,0.025009155,0.011810303,-0.095581055,-0.023635864,-0.006046295,-0.0017681122,-0.06762695,-0.020050049,-0.07891846,-0.031982422,0.038909912,-0.018966675,-0.06903076,0.027023315,0.08728027,-0.05859375,-0.02911377,-0.037628174,-0.054107666,-0.02571106,0.061340332,-0.050598145,0.059570312,0.022247314,0.0070724487,0.10412598,0.038970947,0.0038108826,0.041290283,0.0028972626,-0.033935547,-0.030654907,0.038391113,0.012878418,0.06378174,-0.013946533,0.048675537,-0.0067596436,-0.008399963,0.042266846,-0.06719971,0.08239746,0.04147339,0.0037231445,-0.07006836,-0.06402588,-0.123168945,0.062561035,-0.037902832,-0.15466309,-0.077819824,0.013404846,0.037109375,0.030273438,0.044036865,-0.018188477,0.048065186,-0.00014126301,0.038909912,0.09399414,0.013435364,-0.053985596,0.014305115,-0.03265381,0.034057617,-0.02456665,-0.017852783,-0.040130615,-0.029006958,0.006755829,-0.012046814,0.012298584,-0.014205933,-0.07873535,-0.075683594,-0.02218628,-0.07330322,0.028015137,-0.023910522,-0.0012807846,-0.051605225,-0.05142212,0.04159546,0.060272217,0.08093262,-0.05001831,0.03756714,-0.09124756,-0.07714844,-0.05859375,-0.019317627,0.0065612793,-0.0045814514,-0.00017738342,0.012237549,-0.037353516,-0.05392456,-0.038635254,0.046813965,0.05316162,-0.03439331,0.0050086975,-0.020736694,-0.076660156,0.046783447,0.07952881,0.005908966,0.005882263,-0.005001068,0.038024902,0.03643799,0.0413208,-0.06713867,0.033813477,0.07196045,0.008728027,0.08294678,-0.01689148,0.0057029724,0.025024414,-0.017486572,-0.019714355,0.093566895,0.009124756,0.0041999817,0.013542175,-0.03781128,-0.03161621,0.028427124,-0.010826111,-0.05831909,0.022827148,-0.05102539,-0.048858643,0.00051498413,0.055908203,0.03479004,0.07244873,0.04437256,0.037200928,-0.009178162,0.043548584,-0.026168823,-0.03152466,0.023986816,-0.050476074,-0.010261536,-0.04852295,-0.10559082,0.02720642,0.02355957,-0.012939453,-0.03717041,-0.03463745,-0.0491333,0.010398865,0.054534912,-0.023345947,-0.02178955,-0.005256653,-0.028823853,-0.024154663,0.0859375,0.037261963,0.038513184,0.02784729,-0.011070251,-0.022247314,-0.050109863,-0.0065727234,-0.045654297,0.009262085,0.078552246,-0.08288574,0.05996704,0.030151367,0.03253174,0.0025482178,-0.002576828,-0.040130615,-0.08532715,0.021224976,0.062561035,-0.085510254,-0.027618408,-0.053253174,0.018859863,-0.012252808,0.012702942,0.055236816,0.019821167,-0.034332275,-0.000623703,0.056762695,0.06323242,0.013969421,-0.016540527,0.00982666,0.004676819,0.014823914,-0.038391113,0.043823242,0.1274414,0.018997192,0.004436493,0.023757935],"created_at":1735875660536,"nchars":3220},"24":{"title":"32.정수 삼각형","path":"1. Project/이것이 취업을 위한 코딩테스트다/32.정수 삼각형.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735697311596,"mtime":1735698208027,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 11:08:31","modified":"2025/01/01 11:23:28"},"id":"17de5b758025908c586c7e78eae6436c","content":"\n\nNOTE TITLE: [[32.정수 삼각형]]\n\nMETADATA:{\"created\":\"2025/01/01 11:08:31\",\"modified\":\"2025/01/01 11:23:28\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/1932\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 동적 프로그래밍 (bottom-up 방식)\n- `dp[1][1]` 초기화 후 두번째 행 부터 대각선 방향으로 큰 값을 구해 합산하여 결과 구함\n\t- `j == 1` 인 경우 `left = 0` , `right = dp[i - 1][j]`\n\t- `j == n` 인 경우 `left = dp[i - 1][j - 1]` , `right = 0`\n\t-  그외 `j`의 경우 `left = dp[i - 1][j - 1]`, `right = dp[i - 1][j]`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[][] triangle;\n    private static void input() {\n        n = inputProcessor.nextInt(); // 삼각형의 크기\n        triangle = new int[n + 1][n + 1];\n\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= i; j++) {\n                triangle[i][j] = inputProcessor.nextInt();\n            }\n        }\n    }\n\n    private static void pro() {\n        int[][] dp = new int[n + 1][n + 1];\n        dp[1][1] = triangle[1][1];\n\n        for(int i = 2; i <= n; i++) {\n            for(int j = 1; j <= i; j++) {\n                int left = 0;\n                int right = 0;\n                if(j == 1) {\n                    right = dp[i - 1][j];\n                } else if(j == n) {\n                    left = dp[i - 1][j - 1];\n                } else { // 중간\n                    left = dp[i - 1][j - 1];\n                    right = dp[i - 1][j];\n                }\n\n                dp[i][j] = triangle[i][j] + Math.max(left, right);\n            }\n        }\n\n        int result = 0;\n        for(int i = 1; i <= n; i++) {\n            result = Math.max(result, dp[n][i]);\n        }\n\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.033355713,0.030181885,0.020141602,0.0847168,0.06726074,-0.029022217,0.027038574,0.02519226,0.028518677,0.07183838,-0.005367279,-0.06021118,0.016174316,0.07067871,0.026062012,0.00308609,0.0362854,-0.02796936,-0.079589844,-0.051849365,-0.0051879883,0.008506775,-0.028244019,-0.02444458,0.040893555,0.0647583,0.01512146,0.11151123,0.044158936,0.03918457,0.057769775,-0.07720947,0.0067863464,-0.01134491,-0.015350342,0.07385254,0.068725586,-0.016586304,-0.08477783,-0.07312012,0.059753418,-0.005844116,0.09832764,0.04888916,-0.01625061,0.00022602081,0.01802063,0.0345459,-0.05105591,0.027999878,-0.026672363,-0.044403076,0.04953003,-0.05999756,-0.048980713,0.037261963,0.056396484,-0.019241333,0.017242432,0.1161499,0.061279297,0.0131073,-0.021850586,0.06665039,0.053619385,-0.15856934,-0.046966553,-0.040161133,0.07055664,-0.062286377,0.05657959,-0.06530762,0.04168701,-0.020767212,0.020996094,0.014671326,0.043792725,-0.066833496,0.02243042,-0.04611206,-0.0019779205,-0.041503906,0.03277588,-0.021697998,-0.049346924,-0.04559326,0.019546509,-0.018432617,-0.09802246,-0.017807007,0.019836426,0.029342651,0.0020065308,0.027542114,-0.021911621,0.012184143,-0.048187256,-0.07141113,0.02494812,0.06561279,-0.01626587,-0.08453369,0.02180481,0.0005078316,-0.049102783,-0.033172607,0.0005507469,0.00038647652,-0.018554688,0.057678223,-0.052947998,0.014289856,0.009437561,-0.008880615,0.0028915405,-0.003484726,-0.010231018,-0.012802124,-0.0074768066,0.004673004,0.0068893433,-0.038909912,-0.0715332,0.0357666,-0.050048828,0.076416016,-0.006713867,0.01725769,0.0030784607,-0.011711121,0.04824829,0.0023059845,-0.019485474,0.13134766,0.06439209,0.0143966675,-0.005332947,0.087524414,-0.06121826,-0.08123779,0.0044288635,-0.06793213,-0.054626465,-0.04574585,-0.02368164,0.039215088,-0.045013428,-0.04727173,0.0110321045,-0.016418457,0.020111084,0.024032593,0.022827148,0.050567627,-0.06719971,-0.06652832,0.026443481,-0.034332275,-0.13269043,0.08520508,-0.07281494,0.090270996,-0.066711426,-0.15319824,0.07312012,-0.06530762,0.0015230179,-0.0034599304,0.05734253,-0.021240234,-0.0061149597,0.05557251,0.03201294,-0.041412354,0.0050582886,0.0569458,-0.0680542,0.00041151047,0.0317688,-0.04763794,0.042419434,0.08306885,-0.06549072,-0.001209259,0.01864624,0.03744507,0.043945312,-0.001704216,0.007865906,0.0993042,-0.10668945,0.030410767,0.043640137,-0.026901245,-0.0053710938,0.05078125,-0.011650085,-0.015213013,0.0713501,-0.021499634,0.024124146,-0.025970459,0.012245178,-0.012916565,0.018478394,0.07128906,0.026443481,0.0028934479,-0.016601562,-0.047973633,0.032287598,0.05984497,-0.04144287,-0.009391785,0.001953125,0.022567749,-0.08081055,-0.05444336,-0.059936523,0.11541748,0.02760315,-0.051757812,0.006565094,-0.060180664,-0.051971436,0.009353638,0.028808594,-0.066711426,-0.064819336,0.0001385212,0.10443115,0.03100586,-0.007133484,-0.0071640015,0.06921387,-0.014961243,0.057434082,0.04385376,-0.071899414,0.0067863464,0.05355835,-0.06008911,-0.042877197,-0.04107666,0.012062073,0.028564453,-0.025390625,0.089782715,-0.001209259,-0.015136719,-0.029312134,-0.09222412,-0.057403564,-0.09814453,-0.042541504,0.021102905,-0.0010719299,0.041381836,-0.068725586,-0.02696228,-0.0035934448,0.10064697,0.042022705,0.043762207,-0.008224487,-0.10424805,0.0071105957,-0.012756348,0.053649902,0.021881104,0.015670776,0.06414795,0.010856628,-0.023391724,0.0013151169,-0.09326172,0.11773682,0.07305908,-0.039276123,-0.031463623,0.018035889,-0.025604248,0.13928223,-0.032043457,-0.020446777,-0.001121521,0.0112838745,0.015205383,0.09509277,0.010055542,-0.10559082,-0.059143066,-0.033294678,-0.0026836395,0.036590576,-0.009742737,-0.0073165894,-0.0345459,0.023727417,0.0736084,0.070739746,0.0002770424,-0.007419586,0.027374268,-0.052520752,-0.0009832382,-0.030334473,0.000051796436,-0.04449463,-0.04147339,-0.023422241,-0.045776367,0.0053749084,-0.0008049011,-0.045440674,0.019180298,0.053649902,0.08557129,-0.09484863,-0.01159668,-0.0061798096,-0.030273438,0.051116943,-0.10101318,-0.04525757,-0.1270752,-0.05834961,0.12939453,0.01939392,-0.04034424,-0.04699707,0.061279297,-0.059570312,-0.011688232,0.05001831,-0.09893799,0.01096344,-0.06719971,-0.04586792,0.057403564,0.030685425,0.01864624,0.01675415,-0.016677856,0.00289917,-0.08111572,-0.08294678,-0.0025806427,-0.015960693,-0.060821533,0.02394104,-0.059143066,-0.011222839,-0.0053100586,-0.02432251,-0.026351929,-0.025741577,0.03717041,-0.02458191,-0.042541504,0.056518555,-0.03173828,-0.0070266724,-0.062408447,-0.08123779,-0.0569458,0.10369873,0.037261963,0.04046631,0.05142212,0.053985596,0.07836914,0.014442444,0.039215088,0.02104187,-0.020141602,-0.0146484375,0.089904785,0.111694336,0.009391785,0.02319336,0.02986145,0.08892822,-0.029067993],"created_at":1735875660536,"nchars":3241},"25":{"title":"31.금광","path":"1. Project/이것이 취업을 위한 코딩테스트다/31.금광.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735697065046,"mtime":1735697273079,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 11:04:25","modified":"2025/01/01 11:07:53"},"id":"230d347e717fcc2bd8f88d8be27c615b","content":"\n\nNOTE TITLE: [[31.금광]]\n\nMETADATA:{\"created\":\"2025/01/01 11:04:25\",\"modified\":\"2025/01/01 11:07:53\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- Flipkart 인터뷰\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이 \n- 동적 프로그래밍\n- **점화식** : `{java} dp[row][col] += max(leftUp, max(left, leftDown)` \n\t- `row = 1` 인 경우 `leftUp = 0`\n\t- `row = n` 인 경우 `leftDown = 0`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n, m;  \n\tprivate static int[][] dp;  \n\t  \n\tprivate static void input() {  \n\t    int T = inputProcessor.nextInt();  \n\t    while(T > 0) {  \n\t        n = inputProcessor.nextInt(); // 행  \n\t        m = inputProcessor.nextInt(); // 열  \n\t  \n\t        dp = new int[n + 1][m + 1];  \n\t        for(int i = 1; i <= n; i++) {  \n\t            for(int j = 1; j <= m; j++) {  \n\t                dp[i][j] = inputProcessor.nextInt();  \n\t            }  \n\t        }  \n\t  \n\t        pro();  \n\t  \n\t        T -= 1;  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    // 열을 증가 시키면서 이전 열에서 최대값을 구해서 더함  \n\t    for(int col = 2; col <= m; col++) {  \n\t        for(int row = 1; row <= n; row++) {  \n\t            int leftUp = 0;  \n\t            if(row != 1) {  \n\t                leftUp = dp[row - 1][col - 1];  \n\t            }  \n\t  \n\t            int left = dp[row][col - 1];  \n\t            \n\t            int leftDown = 0;  \n\t            if(row != n) {  \n\t                leftDown = dp[row + 1][col - 1];  \n\t            }  \n\t  \n\t            dp[row][col] \n\t            += Math.max(leftUp, Math.max(left, leftDown));  \n\t        }  \n\t    }  \n\t  \n\t  \n\t    int result = 0;  \n\t    for(int i = 1; i <= n; i++) {  \n\t        // 각 행별로 마지막 열에 있는 값 중 최대를 구함  \n\t        result = Math.max(result, dp[i][m]); \n\t    }  \n\t  \n\t    sb.append(result).append(\"\\n\");  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```","embedding":[0.017120361,-0.008636475,0.019470215,0.13464355,0.059936523,-0.04537964,-0.028045654,0.07269287,-0.013504028,0.09881592,0.0074920654,-0.022064209,0.074279785,0.03062439,0.0892334,-0.015205383,0.059417725,-0.01802063,-0.022125244,-0.04348755,0.03100586,-0.02418518,-0.05960083,0.011016846,0.01108551,0.07006836,-0.06762695,0.076538086,-0.006954193,-0.009567261,0.0037117004,-0.11816406,-0.026443481,0.0003581047,0.120910645,0.06311035,0.0340271,-0.012275696,-0.03286743,-0.078308105,0.05001831,-0.061706543,0.045410156,0.024612427,0.024551392,0.005748749,0.05001831,0.034362793,-0.07824707,0.01701355,-0.11328125,-0.0690918,0.0927124,-0.050842285,-0.006839752,0.015602112,0.03414917,-0.03186035,-0.081726074,0.07501221,0.121276855,0.057373047,-0.04296875,0.05593872,0.10437012,-0.12561035,-0.027908325,0.02355957,0.0713501,-0.09313965,-0.03062439,-0.043273926,-0.021621704,-0.009178162,0.025802612,0.019256592,0.028152466,-0.077819824,0.04034424,-0.0039482117,-0.072631836,-0.059509277,0.012786865,-0.050811768,-0.04824829,0.016845703,-0.0046424866,0.003540039,-0.0002450943,-0.017608643,0.039031982,0.055541992,-0.024902344,-0.009918213,-0.068725586,-0.015472412,-0.04699707,-0.027359009,-0.0206604,0.039031982,-0.01348114,-0.1274414,-0.019943237,-0.010269165,-0.011550903,-0.009422302,0.022094727,-0.014099121,-0.02746582,0.028503418,-0.055358887,0.011894226,-0.020477295,0.016082764,-0.0022792816,0.011528015,0.0027618408,-0.109558105,0.040039062,-0.005203247,-0.010314941,0.04373169,-0.058746338,0.031402588,-0.021774292,0.122924805,0.06506348,0.0680542,-0.11102295,0.010803223,0.059509277,0.060302734,-0.012641907,0.052947998,0.053100586,0.0017700195,0.026565552,0.06774902,-0.09539795,-0.080078125,-0.03488159,0.027252197,-0.03414917,-0.025726318,-0.047027588,0.08868408,0.04159546,-0.11236572,-0.026321411,-0.027053833,-0.0028362274,0.026855469,0.043426514,0.067871094,-0.033843994,-0.062072754,0.07458496,0.050598145,-0.12207031,0.08929443,-0.0690918,0.06567383,-0.056549072,-0.111206055,0.08557129,0.015083313,0.0138549805,0.060760498,0.03842163,0.043823242,0.0101623535,0.08380127,-0.018692017,-0.003446579,0.05255127,0.017440796,-0.05456543,-0.022491455,0.049102783,-0.008049011,-0.026321411,0.0047340393,-0.09814453,-0.046813965,-0.023391724,0.01537323,-0.06286621,0.00554657,-0.013961792,-0.046569824,-0.11126709,0.08392334,0.017501831,-0.046142578,-0.08001709,0.029693604,-0.08013916,-0.028945923,0.0063323975,-0.08416748,0.05090332,-0.011161804,0.029968262,0.06518555,0.07080078,0.042785645,-0.03302002,0.006580353,-0.069885254,-0.01537323,-0.0011234283,-0.011039734,-0.032928467,-0.020233154,-0.0028877258,0.04550171,-0.04598999,0.05105591,-0.04257202,0.13659668,0.025009155,-0.02458191,-0.033966064,-0.06262207,-0.0826416,-0.015159607,-0.0038051605,-0.11376953,-0.10430908,0.006298065,0.058135986,0.046081543,-0.035247803,0.0053100586,0.041259766,0.06896973,0.051116943,0.05496216,-0.074279785,-0.049743652,0.04623413,-0.052886963,0.035064697,0.0014371872,-0.06213379,-0.030288696,-0.046447754,0.030258179,-0.008132935,0.0025024414,-0.012817383,-0.083740234,0.013839722,-0.035491943,-0.03930664,0.041656494,-0.054595947,0.040130615,-0.031311035,-0.06427002,0.037231445,0.060791016,-0.019363403,0.0012550354,0.031097412,-0.06933594,-0.08532715,-0.08251953,0.0357666,0.039031982,0.04727173,0.07196045,-0.005432129,0.071899414,0.00983429,-0.036712646,0.105285645,0.067871094,0.053863525,-0.004261017,0.007583618,-0.0046844482,0.10620117,0.055541992,-0.007835388,0.041809082,-0.011405945,0.064331055,0.021194458,-0.011955261,-0.08343506,-0.062286377,-0.019195557,0.002544403,0.052642822,-0.014335632,0.019104004,0.031143188,0.003211975,0.039764404,0.047058105,0.0060539246,0.014701843,0.0027885437,-0.073791504,-0.036193848,0.010887146,0.076538086,0.024673462,0.002538681,-0.0022335052,-0.037750244,0.04269409,0.045410156,0.021636963,0.023742676,0.0132751465,-0.005092621,-0.06311035,-0.013282776,-0.0692749,-0.015205383,0.036071777,-0.0340271,0.043029785,-0.048980713,-0.051605225,0.097473145,-0.033081055,-0.03277588,-0.0069084167,0.049224854,-0.031173706,0.037841797,0.037963867,-0.03543091,-0.032592773,-0.05227661,-0.04324341,-0.026138306,0.08892822,0.008895874,0.015670776,0.043151855,-0.014572144,-0.0647583,-0.11303711,0.04348755,-0.055877686,-0.0060920715,-0.021774292,-0.06359863,0.021453857,-0.008232117,-0.031082153,0.008636475,-0.024612427,-0.0154800415,-0.025863647,0.009552002,0.05404663,-0.04434204,-0.031463623,-0.080200195,-0.06451416,-0.042419434,0.016418457,0.016815186,0.07281494,-0.0076789856,0.01676941,0.04434204,0.021224976,-0.030334473,0.038848877,-0.006965637,-0.0017623901,0.018478394,0.059631348,0.031204224,0.013885498,0.055358887,0.059783936,-0.04812622],"created_at":1735875660537,"nchars":3260},"26":{"title":"30.가사 검색","path":"1. Project/이것이 취업을 위한 코딩테스트다/30.가사 검색.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735628609785,"mtime":1735634653849,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 16:03:29","modified":"2024/12/31 17:44:13"},"id":"5f81d58a12bbe25ea80fc3dbe9d6fdd8","content":"\n\nNOTE TITLE: [[30.가사 검색]]\n\nMETADATA:{\"created\":\"2024/12/31 16:03:29\",\"modified\":\"2024/12/31 17:44:13\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60060\n\n### 시간 복잡도 \n- `O(NlogN)`\n\t-  queries의 길이가 10만(최대)이고, words가 10만(최대)일때 \n\t  `O(100,000log100,000)` 시간 복잡도 가짐\n\n### 풀이 \n- `words` 길이 별로 리스트에 저장\n\t- LinkedList 처음 사용했었는데, 요소 추가에는 유리하지만 인덱스 조회시 0 ~ idx 까지 순차 조회하여 **시간초과** 발생 (주의)\n\t- ArrayList 사용할 경우 인덱스 접근 시간 복잡도가 *O(1)*\n- 길이별 정방향과 역방향 문자열을 리스트에 저장\n\t- `{java}StringBuilder` 클래스에 `{java}reverse().toString()` 사용하면 간편하게 역방향 문자 구함\n\t\t- 이때 초기화 주의 ➡ `{java}setLength(0)`\n\n<font color=\"#7f7f7f\">참고. 정렬된 결과</font>\n```text\n{5=[frame, frodo, front, frost, kakao], 6=[frozen]}  \n{5=[emarf, oakak, odorf, tnorf, tsorf], 6=[nezorf]}\n```\n\n- quries에서 question mark(`?`)로 시작할 경우 reverse를 사용하고, 반대의 경우 forward를 사용\n\t- 이때 query 문자열 길이로 조회\n\t- 리스트가 비어 있는 경우 `0`을 반환\n- 이진탐색을 수행한다\n\t- question mark(`?`)를 각각 `a`와 `z`로 치환하여 범위를 구한다\n- 예로 `????o` 의 경우\n\t- `o????`로 역방향 변환\n\t-  그리고 `?` 마크를 시작점 조회시 `a` 로 종료점 조회시 `z` 로 변환하여 이진 탐색을 수행한다\n\t- `oaaaa` 의 경우 o로 시작하는 문자열 중 가장 첫 번째이다\n\t\t- **left** : `oakak` 와 만나게 되는 경우 **음수** 값을 나타내게 된다\n\t\t\t- 반면 `emarf` 보다 정렬 순위가 높으므로 *양수* 값을 나타내게 된다\n\t- `ozzzz` 의 경우 o로 시작하는 문자열 중 가장 마지막 문자열이 된다\n\t\t- **right** : `odorf` 와 비교하면 `ozzzz` 가 순위가 높아 양수 값을 가지게 된다\n\t\t\t-  반면 `tnorf` 보다 우선순위가 낮으므로 **음수** 값을 나타내게 된다 \n\n### 제출 코드\n```java hl:54-55\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    private static StringBuilder sb = new StringBuilder();\n    private List<List<String>> forward;\n    private List<List<String>> reverse;\n    \n    public int[] solution(String[] words, String[] queries) {\n        forward = new ArrayList<>();\n        reverse = new ArrayList<>();\n        for(int i = 0; i <= 10_000; i++) {\n            forward.add(new ArrayList<>());\n            reverse.add(new ArrayList<>());\n        }\n\n        for(String w : words) {\n            int len = w.length();\n            forward.get(len).add(w);\n            reverse.get(len).add(reverseFrom(w));\n        }\n\n        for(int i = 1; i <= 10_000; i++) {\n            if(forward.get(i).isEmpty() \n            || reverse.get(i).isEmpty()) continue;\n\n            Collections.sort(forward.get(i));\n            Collections.sort(reverse.get(i));\n        }\n\n        int[] answer = new int[queries.length];\n        for(int i = 0; i < queries.length; i++) {\n            String query = queries[i];\n            int len = query.length();\n            if(query.startsWith(\"?\")) {\n                answer[i] = countByRange(reverse.get(len), reverseFrom(query));\n            } else {\n                answer[i] = countByRange(forward.get(len), query);\n            }\n        }\n        \n        return answer;\n    }\n    \n    private static String reverseFrom(String word) {\n        String result = sb.append(word).reverse().toString();\n        sb.setLength(0);\n        return result;\n    }\n\n    private static int countByRange(List<String> words, String query) {\n        if(words.isEmpty()) return 0;\n\n        int left = binarySearch(words, query.replaceAll(\"\\\\?\", \"a\"));\n        int right = binarySearch(words, query.replaceAll(\"\\\\?\", \"z\"));\n\n        return right - left;\n    }\n\n    private static int binarySearch(List<String> words, String query) {\n        int L = 0;\n        int R = words.size();\n\n        while(L < R) {\n            int mid = (L + R) / 2;\n\n            if(query.compareTo(words.get(mid)) < 0) {\n                R = mid;\n            } else {\n                L = mid + 1;\n            }\n        }\n\n        return R;\n    }\n}\n```","embedding":[0.023635864,-0.027526855,0.060424805,0.026138306,0.059906006,-0.062408447,-0.06756592,-0.0013618469,-0.0018987656,0.1262207,-0.035736084,-0.026794434,0.011802673,-0.001996994,0.03869629,0.038848877,0.04763794,0.013557434,-0.023239136,-0.0647583,-0.0104599,0.037750244,-0.07946777,0.054656982,0.050201416,0.029953003,-0.025268555,0.12109375,0.044525146,-0.051635742,0.026306152,-0.056915283,0.00046300888,-0.041290283,0.026519775,0.032043457,0.02633667,0.057647705,-0.021697998,-0.1459961,0.0637207,-0.040802002,0.012260437,0.070617676,0.014930725,0.032989502,0.081604004,0.0541687,-0.055908203,0.035705566,-0.048675537,-0.029312134,0.044525146,-0.115722656,0.0007033348,-0.016433716,0.030914307,-0.035491943,0.044525146,-0.042388916,0.11773682,0.0047912598,-0.036987305,0.044647217,0.097839355,-0.10949707,-0.046691895,-0.044647217,0.055267334,-0.014656067,0.0023498535,0.045654297,-0.044311523,0.009300232,0.023208618,0.03050232,0.06982422,-0.10028076,0.019195557,-0.048675537,-0.042022705,-0.027740479,-0.09954834,0.0055618286,0.030319214,0.005493164,-0.035308838,-0.03692627,-0.01789856,0.01966858,-0.0008535385,0.10021973,-0.048797607,0.011871338,-0.059173584,0.033843994,-0.074645996,0.010910034,0.052124023,0.11242676,-0.005138397,-0.061431885,0.012199402,-0.064941406,0.00017607212,0.047851562,-0.03466797,-0.012939453,0.07220459,0.10003662,-0.13415527,-0.010040283,-0.0011873245,0.0146865845,0.03274536,0.030059814,0.024749756,-0.06378174,0.07281494,-0.0703125,0.04827881,0.07299805,-0.044525146,-0.07800293,-0.06210327,0.050445557,0.06210327,0.02633667,-0.07128906,0.037963867,-0.03845215,-0.0019187927,-0.06750488,0.05053711,0.077941895,-0.03869629,0.06713867,0.07751465,-0.060577393,-0.033447266,0.01222229,0.020889282,-0.038146973,-0.036712646,-0.039245605,0.06109619,0.003730774,-0.039886475,-0.034606934,-0.037200928,0.02897644,0.031158447,0.07879639,0.10211182,-0.07495117,0.013397217,0.09820557,0.015525818,-0.06384277,0.0970459,-0.06915283,0.009597778,-0.06335449,-0.10369873,0.057403564,0.0073280334,0.074279785,0.022399902,-0.019180298,-0.0003144741,-0.013542175,0.1116333,0.04257202,0.009765625,-0.0007185936,0.04525757,-0.12988281,-0.03439331,0.053344727,-0.0041046143,-0.081970215,-0.019348145,-0.05734253,-0.037628174,-0.03466797,0.01979065,0.008544922,0.048187256,0.037261963,0.027709961,-0.02609253,-0.012374878,0.0121536255,-0.05291748,-0.04647827,0.024841309,-0.005180359,-0.026306152,0.02015686,-0.09375,0.003627777,-0.073913574,0.039367676,0.08630371,0.0463562,-0.0423584,-0.011512756,0.00920105,-0.014625549,0.018859863,-0.00068330765,0.049682617,-0.023269653,0.026016235,0.036743164,-0.032409668,-0.028457642,-0.0064926147,-0.08099365,0.07922363,0.015380859,0.0044555664,-0.08856201,-0.06958008,-0.0748291,0.048706055,-0.0046157837,-0.107177734,-0.015357971,-0.0010986328,0.08026123,0.0129852295,0.019729614,0.036102295,0.03857422,0.0065841675,0.06744385,-0.022613525,-0.066711426,-0.05154419,0.055847168,0.025497437,0.054748535,-0.041168213,0.02268982,-0.019012451,-0.027359009,0.040374756,0.006515503,0.06561279,-0.019760132,-0.09552002,-0.04559326,-0.036712646,-0.012062073,0.0009784698,0.022155762,0.11608887,-0.0769043,-0.04815674,0.03579712,0.027816772,0.109558105,-0.00008505583,0.012519836,-0.032592773,-0.068725586,-0.044433594,0.047729492,0.015823364,0.05895996,-0.02218628,-0.023452759,0.0064888,-0.03164673,-0.020599365,0.10803223,0.10632324,0.08679199,0.020767212,-0.0061454773,-0.05316162,0.037628174,0.024963379,0.01084137,-0.00013327599,-0.06970215,0.07635498,0.05947876,0.010231018,-0.091308594,0.05999756,0.008529663,-0.010765076,0.0073509216,-0.027359009,0.018753052,0.0059509277,-0.0045280457,-0.02482605,0.07946777,-0.036254883,-0.01739502,0.030441284,-0.079711914,0.00061130524,-0.0015983582,0.00029349327,-0.06439209,-0.018737793,0.026473999,-0.08947754,-0.07299805,0.042053223,0.05114746,0.0074768066,-0.0158844,-0.013153076,-0.089660645,0.012466431,-0.0061454773,0.0045280457,0.034210205,-0.11981201,-0.040496826,-0.023132324,-0.03717041,0.12512207,0.0060043335,-0.028778076,-0.034820557,0.0803833,-0.026885986,-0.044921875,-0.08300781,-0.024795532,-0.08691406,0.006263733,0.02708435,0.027572632,-0.01222229,-0.0008792877,-0.048828125,0.066101074,-0.027496338,-0.023483276,-0.10882568,0.046203613,-0.046447754,0.024230957,-0.0736084,-0.09411621,-0.029220581,0.0010175705,0.004825592,0.015106201,0.0025844574,0.022354126,-0.02305603,-0.04486084,0.018569946,-0.050231934,-0.01084137,0.046691895,-0.037841797,-0.029586792,-0.006210327,-0.002708435,0.016448975,0.050109863,0.04107666,0.024291992,0.04949951,-0.06323242,0.00042271614,-0.011528015,-0.0036697388,0.031433105,0.015594482,0.02897644,0.08258057,0.028945923,0.026412964,-0.0059661865],"created_at":1735875660537,"nchars":3529},"27":{"title":"29.공유기 설치","path":"1. Project/이것이 취업을 위한 코딩테스트다/29.공유기 설치.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735627769037,"mtime":1735628567838,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 15:49:29","modified":"2024/12/31 16:02:47"},"id":"532c9bb532e6991b4193a08168972611","content":"\n\nNOTE TITLE: [[29.공유기 설치]]\n\nMETADATA:{\"created\":\"2024/12/31 15:49:29\",\"modified\":\"2024/12/31 16:02:47\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/2110\n\n### 시간 복잡도\n- `O(NlogN)`\n\t- 정렬이 가장 오래 걸림 \n\t- 매개변수 탐색 `O(logN)` + 그리디 알고리즘 `O(N)`\n\n### 풀이 \n- 매개변수 탐색(이진 탐색)과 그리디 문제\n\t- `d만큼 거리를 둘 때 c개 이상의 공유기를 설치 가능한가? 이때 최대 d는 얼마인가`\n\t-  첫번째 집에 공유기를 무조건 설치하고 시작 \n\t\t- 다음 집과의 거리 차이가 d 이상인 경우 공유기를 설치하고 포인터 이동\n\t\t- `{java}c <= count` 이상인 경우 오른쪽 구간 탐색하여 최대 값을 구한다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N, C;\n    private static int[] DATA;\n\n    private static void input() {\n        N = inputProcessor.nextInt(); // 집의 개수\n        C = inputProcessor.nextInt();\n\n        DATA = new int[N + 1];\n        for(int i = 1; i <= N; i++) {\n            DATA[i] = inputProcessor.nextInt();\n        }\n    }\n\n    private static void pro() {\n        Arrays.sort(DATA, 1, N + 1);\n\n        int result = 0;\n        int L = 1;\n        int R = DATA[N] + 1;\n\n        while(L <= R) {\n            int d = (L + R) / 2;\n\n            if(isPossible(d, C)) {\n                result = d;\n                L = d + 1;\n            } else {\n                R = d - 1;\n            }\n        }\n\n        sb.append(result);\n    }\n\n    private static boolean isPossible(int d, int c) {\n        int count = 1;\n        int prev = DATA[1];\n        for(int i = 2; i <= N; i++) {\n            int cur = DATA[i];\n            int diff = cur - prev;\n\n            if(diff < d) continue;\n\n            count += 1;\n            prev = cur;\n        }\n        \n        return count >= c;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw \n        = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n\n```","embedding":[0.00548172,-0.0010824203,0.03918457,0.015808105,0.056610107,-0.044677734,-0.04724121,0.028015137,0.034484863,0.05999756,-0.045715332,-0.04019165,0.031066895,0.0022220612,0.047454834,-0.074645996,0.002040863,-0.028930664,-0.020309448,0.0013790131,0.09185791,-0.012275696,-0.017669678,0.0024414062,0.038848877,0.016555786,-0.036346436,0.10101318,0.0053482056,0.0069236755,-0.0154418945,-0.052612305,-0.08880615,-0.03765869,0.06112671,0.055633545,0.06402588,-0.021713257,0.022155762,-0.08465576,0.054260254,-0.027191162,0.042022705,0.053710938,-0.009361267,-0.026260376,0.028839111,0.02571106,-0.05142212,-0.024673462,-0.046295166,0.030471802,0.09484863,-0.047058105,-0.009002686,0.055267334,-0.0075683594,-0.010269165,-0.049621582,0.048980713,0.06652832,0.045806885,-0.07244873,0.046691895,0.0635376,-0.085876465,-0.0028934479,-0.056671143,0.06500244,-0.02520752,0.017211914,-0.014335632,0.018295288,-0.0021038055,0.038024902,-0.052581787,0.05102539,-0.039733887,0.031188965,-0.02494812,0.038146973,-0.008583069,0.031799316,0.026779175,-0.068847656,-0.023910522,0.002450943,-0.020004272,-0.024414062,0.061279297,-0.0009813309,0.04510498,-0.0001527071,0.015686035,0.055267334,0.044830322,0.026733398,-0.011367798,-0.004627228,0.049926758,-0.02760315,0.0028762817,0.007129669,-0.09277344,-0.05923462,-0.0057868958,0.028808594,0.0074310303,0.035614014,0.045013428,-0.09503174,-0.08605957,-0.059051514,-0.016937256,-0.0018081665,0.028762817,0.093811035,-0.06048584,-0.025253296,0.0029659271,-0.06652832,0.017929077,-0.04168701,-0.051940918,-0.03640747,0.0131073,0.039123535,0.019470215,-0.107788086,0.07318115,0.023773193,0.0064468384,-0.03933716,0.054016113,0.115600586,-0.055847168,-0.052337646,0.099853516,-0.07696533,-0.0803833,0.027328491,-0.0055732727,0.0023956299,0.059753418,-0.021972656,0.13562012,0.004463196,-0.1361084,0.0025348663,-0.10058594,0.04248047,0.051239014,0.027008057,0.040527344,0.0107421875,-0.045837402,0.006378174,0.02468872,-0.10095215,0.06762695,-0.09088135,0.03967285,-0.06323242,-0.056030273,0.11480713,-0.015457153,0.020904541,0.047973633,0.0018033981,0.008720398,0.0791626,0.09814453,0.022018433,-0.0018758774,0.0045433044,0.03543091,-0.029022217,-0.0031089783,0.028656006,0.06506348,-0.015960693,0.008163452,-0.118896484,-0.036712646,-0.011146545,0.035461426,0.044769287,-0.05078125,-0.04815674,-0.0013475418,-0.033172607,0.07116699,0.023544312,-0.1194458,-0.00058460236,0.005619049,-0.023452759,-0.08880615,-0.08123779,-0.031555176,0.022491455,0.005001068,-0.0647583,0.08770752,0.04525757,0.009933472,0.058776855,-0.028259277,-0.043701172,-0.04385376,-0.009033203,-0.00995636,0.022872925,0.034088135,0.05142212,0.0072784424,-0.06707764,0.04916382,-0.014762878,0.022247314,-0.019683838,0.007434845,-0.025558472,-0.061462402,-0.07495117,0.019500732,-0.0058135986,-0.13061523,-0.105529785,0.004650116,0.042785645,0.070617676,0.0340271,0.0102005005,0.10131836,0.05807495,0.045135498,0.028930664,0.04522705,-0.027923584,0.0657959,0.048339844,0.049987793,0.03756714,0.015640259,-0.048797607,0.013977051,-0.06500244,0.044311523,-0.029220581,-0.07952881,-0.11395264,0.03451538,-0.038146973,0.015510559,0.054626465,-0.012916565,0.0075798035,0.009742737,-0.04269409,-0.014953613,0.064941406,0.022338867,-0.0021190643,-0.019073486,-0.018585205,-0.0647583,-0.039886475,0.10449219,0.02532959,0.027832031,0.03378296,-0.009284973,-0.019958496,0.010810852,-0.097839355,0.11462402,0.09777832,0.055541992,0.080322266,-0.00063323975,-0.042053223,0.15429688,0.08294678,0.022918701,-0.00059366226,0.037597656,0.025161743,0.07720947,0.038391113,-0.0970459,-0.03640747,-0.025299072,-0.108947754,0.064819336,-0.027740479,0.10687256,0.012138367,-0.011978149,-0.03479004,0.074035645,0.014915466,-0.021575928,-0.014953613,-0.055664062,0.04006958,0.062408447,0.0024204254,-0.05517578,0.03173828,-0.04071045,-0.039093018,-0.070129395,0.0031967163,-0.008598328,0.062194824,0.045684814,0.035247803,-0.12646484,-0.024490356,-0.019805908,0.039367676,0.049621582,-0.06768799,-0.039916992,-0.05697632,-0.061676025,0.07873535,-0.01789856,-0.05166626,-0.0025539398,0.05303955,-0.05770874,-0.043304443,0.024917603,0.0084991455,0.00052404404,-0.029403687,0.0017852783,-0.017959595,0.09814453,0.017303467,0.015388489,0.032196045,-0.028533936,-0.09277344,-0.14208984,-0.003686905,-0.04486084,0.005569458,-0.03488159,-0.053710938,0.036621094,0.005592346,-0.01146698,-0.04208374,-0.0061836243,-0.053833008,-0.030639648,-0.03982544,-0.067993164,-0.046844482,-0.078308105,-0.08666992,-0.06591797,-0.0073127747,0.08068848,0.074523926,0.040740967,0.008125305,0.016860962,-0.015510559,0.03955078,-0.01083374,0.019927979,-0.048553467,0.010429382,0.0054779053,-0.020217896,0.028564453,0.0026302338,0.014579773,0.035736084,-0.031234741],"created_at":1735875660538,"nchars":3168},"28":{"title":"28.고정점 찾기","path":"1. Project/이것이 취업을 위한 코딩테스트다/28.고정점 찾기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735627420522,"mtime":1735627855984,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 15:43:40","modified":"2024/12/31 15:50:55"},"id":"c35863a93434be8a523a4e575dfa9992","content":"\n\nNOTE TITLE: [[28.고정점 찾기]]\n\nMETADATA:{\"created\":\"2024/12/31 15:43:40\",\"modified\":\"2024/12/31 15:50:55\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n`Amazon 인터뷰`\n\n### 시간 복잡도\n- `O(NlogN)`\n\t- 정렬 시간 복잡도가 가장 크다\n\t- 이진 탐색은 `O(logN)` 시간 복잡도 걸림\n\n### 풀이\n- 이진 탐색 사용하여 풀이 \n- `고정점` = 인덱스와 값이 동일한 점\n\t- `{java}data[mid] < mid` : 중간점이 가르키는 위치 값이 작은 경우 오른쪽을 탐색 (`{java}L = mid + 1`)\n\t-  반대의 경우 왼쪽을 탐색 (`{java}R = mid - 1`)\n\n입출력 예시\n```text\n입력\n5\n-15 -6 1 3 7 \n\n출력\n3\n\n  \n입력\n7\n-15 -4 2 8 9 13 15\n\n출력\n2\n\n  \n입력\n7\n-15 -4 3 8 9 13 15\n\n출력\n-1\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] data;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t  \n\t    data = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        data[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(data);  \n\t  \n\t    int L = 0;  \n\t    int R = data.length - 1;  \n\t    int result = -1;  \n\t    while(L <= R) {  \n\t        int mid = (L + R) / 2;  \n\t  \n\t        if(data[mid] == mid) {  \n\t            result = mid;  \n\t            break;  \n\t        }  \n\t  \n\t        if(data[mid] < mid) {  \n\t            L = mid + 1;  \n\t        } else {  \n\t            R = mid - 1;  \n\t        }  \n\t    }  \n\t  \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw \n\t    = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n\n}\n```","embedding":[-0.012207031,-0.016143799,0.052368164,0.08062744,0.034088135,-0.0440979,-0.02268982,0.0256958,0.010116577,0.12963867,0.021835327,0.0065689087,0.00894928,0.027420044,-0.0018053055,0.0015802383,0.0054779053,-0.0021324158,-0.020767212,-0.0340271,0.047607422,-0.00044226646,-0.07330322,0.029327393,0.061035156,0.06384277,-0.043151855,0.12719727,-0.0079956055,0.038024902,0.01739502,-0.04336548,-0.064086914,-0.03488159,0.06628418,0.072509766,0.07531738,0.1348877,-0.00054597855,-0.083740234,-0.014862061,-0.057006836,-0.012863159,0.09094238,-0.0055885315,0.020614624,0.058135986,0.052764893,-0.045562744,0.0287323,-0.02998352,-0.04425049,0.036224365,-0.12939453,0.06500244,0.008407593,0.008079529,-0.017410278,-0.03277588,-0.033966064,0.09820557,0.03665161,-0.07067871,0.060546875,0.12200928,-0.09509277,-0.048095703,0.029968262,0.029830933,-0.055664062,0.043395996,-0.0053100586,-0.004562378,0.007160187,0.0057144165,0.04333496,0.10583496,-0.043151855,0.030548096,-0.064697266,0.025344849,-0.056488037,-0.043792725,0.019561768,-0.008872986,0.017822266,-0.044036865,0.01625061,-0.009498596,-0.014961243,-0.05114746,0.053619385,-0.032104492,-0.025466919,-0.0050468445,-0.014717102,-0.030029297,0.05105591,0.050201416,0.10803223,-0.054016113,-0.06640625,-0.00029087067,0.000045597553,-0.016403198,0.03274536,0.0129852295,-0.04901123,0.016342163,0.042053223,-0.12768555,-0.0007314682,0.019805908,0.03982544,0.019485474,0.036987305,0.0848999,-0.07965088,0.06854248,-0.031280518,0.052215576,0.029281616,-0.05532837,0.017807007,-0.059509277,0.055908203,0.020477295,0.042907715,-0.040405273,0.034088135,-0.012916565,0.01008606,-0.101379395,0.023361206,-0.0041503906,-0.053009033,-0.019897461,0.10662842,-0.034240723,-0.04498291,-0.017486572,0.051635742,-0.009864807,-0.032470703,-0.0038928986,0.08319092,-0.020126343,-0.090026855,-0.016082764,0.003982544,-0.046661377,0.02458191,0.0236969,0.10473633,-0.08087158,-0.038909912,0.074523926,0.045440674,-0.115112305,0.045166016,-0.07659912,0.075805664,-0.059509277,-0.119140625,0.020126343,-0.04486084,0.021102905,0.038269043,-0.024597168,0.0052261353,0.0892334,0.05038452,-0.008239746,-0.045837402,0.021911621,0.020904541,-0.030227661,-0.013793945,0.001789093,-0.023544312,-0.060028076,-0.076416016,-0.097351074,-0.037139893,-0.0028018951,0.0060539246,-0.018966675,-0.006816864,-0.016540527,-0.0022125244,-0.05670166,0.008300781,-0.039489746,-0.0501709,-0.047698975,0.04812622,-0.0069770813,-0.027145386,0.024749756,-0.09741211,0.05444336,-0.0009198189,-0.000603199,0.09320068,0.028045654,0.039642334,-0.01361084,0.0028266907,-0.064086914,-0.00970459,0.030548096,0.052947998,0.00623703,0.118896484,-0.009750366,-0.0072669983,-0.021575928,0.02671814,-0.033325195,0.07678223,0.027893066,-0.01008606,0.0028591156,-0.031051636,-0.06463623,0.032104492,0.04034424,-0.13378906,-0.029190063,0.010528564,0.15722656,0.027297974,0.07147217,-0.001083374,0.030349731,0.039855957,0.0574646,0.0025463104,-0.03161621,-0.07763672,0.016479492,0.06274414,0.016326904,0.0049819946,0.01133728,-0.052642822,-0.046203613,0.08581543,0.034240723,-0.02305603,-0.03286743,-0.08569336,-0.07312012,-0.023010254,-0.04724121,0.0016450882,-0.03829956,0.11791992,-0.11431885,-0.05581665,0.016830444,0.012054443,0.093444824,-0.042663574,-0.04537964,-0.046722412,-0.03768921,-0.017532349,0.021209717,0.067871094,0.04107666,0.032409668,-0.021453857,0.021255493,-0.07208252,-0.03640747,0.12060547,0.07922363,0.037353516,-0.04119873,-0.026916504,-0.038391113,0.10424805,0.0069618225,0.05331421,-0.00041103363,-0.014961243,0.07043457,0.052856445,0.0030498505,-0.0925293,-0.017578125,-0.06994629,-0.011077881,0.08099365,0.02810669,-0.003019333,0.011604309,0.0006070137,-0.018539429,0.090148926,0.00919342,-0.011726379,0.012290955,-0.09161377,0.041015625,0.052215576,0.0637207,0.010238647,0.011459351,0.018692017,-0.04724121,-0.04547119,0.03829956,0.03100586,0.04309082,0.021026611,0.006259918,-0.051086426,0.011276245,-0.028182983,0.0032539368,0.0065689087,-0.076171875,-0.02760315,-0.07501221,-0.08166504,0.07745361,-0.027359009,-0.062286377,-0.06335449,0.077941895,-0.012428284,-0.056396484,-0.010414124,-0.03527832,-0.03955078,0.011459351,-0.0027751923,0.04827881,0.042053223,-0.034179688,0.038879395,-0.00844574,0.012886047,-0.08734131,-0.12298584,-0.021820068,-0.027023315,0.015823364,-0.042785645,-0.07165527,-0.015853882,0.03564453,0.04977417,-0.06506348,0.0004272461,0.045715332,-0.08886719,-0.014884949,0.050598145,-0.031555176,-0.033966064,-0.068359375,-0.0803833,-0.043548584,0.021942139,-0.053253174,-0.009277344,0.022628784,0.024642944,-0.07122803,0.034606934,-0.020614624,0.05581665,-0.05908203,-0.013656616,0.024612427,0.056884766,0.011665344,0.023498535,0.017120361,0.02720642,-0.02645874],"created_at":1735875660538,"nchars":2850},"29":{"title":"27.정렬된 배열에서 특정 수의 개수 구하기","path":"1. Project/이것이 취업을 위한 코딩테스트다/27.정렬된 배열에서 특정 수의 개수 구하기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735625955495,"mtime":1735627079511,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 15:19:15","modified":"2024/12/31 15:37:59"},"id":"83987152e332f1ea34e67bb329483d46","content":"\n\nNOTE TITLE: [[27.정렬된 배열에서 특정 수의 개수 구하기]]\n\nMETADATA:{\"created\":\"2024/12/31 15:19:15\",\"modified\":\"2024/12/31 15:37:59\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \n- Zoho 인터뷰 기출 문제\n### 시간 복잡도\n- `O(NlogN)`\n- 정렬의 시간복잡도가 가장 크다 \n- 이진 탐색의 경우 `O(logN)`의 시간복잡도를 가진다\n\n### 풀이\n- 이진 탐색을 사용해서 lowerBoud, upperBound의 차이를 구하는 문제 \n\t- `lowerBound` :  x가 되는 첫번째 인덱스\n\t- `upperBound` : x보다 큰 첫번째 수의 인덱스\n\n입출력 예시\n```text\n입력1\n7 2 \n1 1 2 2 2 2 3\n\n출력1\n4\n  \n입력2 \n7 4\n1 1 2 2 2 2 3\n\n출력2 \n-1\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n, x;  \n\tprivate static int[] data;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt(); // 원소 개수  \n\t    x = inputProcessor.nextInt(); // 찾는 수  \n\t  \n\t    data = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        data[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(data);  \n\t  \n\t    int left = lowerBound(x);  \n\t    int right = upperBound(x);  \n\t    int result = right - left;  \n\t  \n\t    sb.append(result == 0 ? -1 : result);  \n\t}  \n\t  \n\tprivate static int lowerBound(int target) {  \n\t    int L = 0;  \n\t    int R = n;  \n\t  \n\t    while(L < R) {  \n\t        int mid = (L + R) / 2;  \n\t  \n\t        if(data[mid] < target) {  \n\t            L = mid + 1;  \n\t        } else {  \n\t            R = mid;  \n\t        }  \n\t    }  \n\t  \n\t    return R;  \n\t}  \n\t  \n\tprivate static int upperBound(int target) {  \n\t    int L = 0;  \n\t    int R = n;  \n\t  \n\t    while(L < R) {  \n\t        int mid = (L + R) / 2;  \n\t  \n\t        if(target < data[mid]) {  \n\t            R = mid;  \n\t        } else {  \n\t            L = mid + 1;  \n\t        }  \n\t    }  \n\t  \n\t    return R;  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n}\n```","embedding":[0.05029297,-0.028411865,0.035614014,0.05532837,0.10449219,-0.014053345,-0.055480957,0.0033435822,-0.005153656,0.13012695,-0.0015535355,0.047912598,0.03640747,0.052825928,0.06112671,-0.032958984,-0.013717651,-0.028503418,-0.085632324,-0.052612305,0.012062073,0.067871094,-0.034118652,0.050598145,0.055236816,0.06982422,-0.015823364,0.09075928,0.009788513,-0.05102539,0.0184021,-0.07495117,-0.06738281,0.0012388229,0.03665161,0.043121338,0.07318115,0.055389404,0.040924072,-0.043548584,0.025909424,-0.015548706,0.00013017654,-0.041412354,-0.037109375,0.055145264,0.019241333,0.0025138855,-0.051239014,-0.030944824,0.053222656,-0.03378296,0.095214844,-0.093933105,-0.016296387,0.03277588,-0.0051460266,0.017074585,-0.03656006,0.05532837,0.08856201,0.019851685,-0.014030457,0.018737793,0.091796875,-0.06677246,-0.050872803,-0.0440979,0.049468994,-0.046936035,0.017990112,0.0075683594,0.00705719,-0.015625,0.003440857,0.075805664,0.05517578,-0.05621338,-0.0029468536,-0.031051636,0.002363205,0.0051498413,-0.08544922,-0.010299683,0.007545471,0.010948181,0.022064209,0.0038986206,-0.06036377,-0.018615723,0.00793457,0.04736328,-0.024490356,-0.024780273,-0.028457642,0.00043320656,-0.018936157,0.002527237,0.02230835,0.11791992,-0.05505371,-0.07324219,0.015167236,-0.024642944,-0.038970947,0.054473877,-0.0042037964,-0.035980225,0.015510559,0.01210022,-0.09802246,-0.045776367,-0.007247925,0.030059814,0.08935547,-0.02470398,0.078308105,-0.07116699,0.04147339,0.029083252,-0.0019254684,-0.020431519,-0.084472656,0.0072517395,-0.10498047,0.10272217,-0.055145264,-0.024810791,-0.04324341,-0.0178833,0.0021266937,-0.05545044,-0.03286743,0.056243896,0.038635254,0.0435791,0.0016841888,0.11016846,-0.06842041,-0.06762695,-0.02218628,0.04840088,-0.011665344,-0.052886963,-0.0158844,0.11444092,0.021072388,-0.034057617,-0.040130615,-0.04663086,0.014083862,0.07019043,0.028427124,0.083496094,-0.025299072,-0.056243896,0.05166626,0.0859375,-0.10479736,-0.023040771,-0.10424805,0.061828613,-0.09466553,-0.0803833,0.050598145,-0.020874023,0.051239014,-0.005592346,0.024337769,-0.03982544,0.056854248,0.06561279,-0.007701874,-0.008323669,-0.0044403076,0.05908203,-0.04095459,-0.0033092499,0.056915283,0.07836914,-0.028503418,-0.05847168,-0.09643555,-0.023925781,0.012123108,0.02748108,0.018936157,-0.008903503,-0.0017662048,-0.018753052,-0.004295349,0.0317688,0.018463135,-0.046875,-0.01398468,0.05545044,-0.008766174,-0.005378723,-0.0124435425,-0.10253906,0.05419922,-0.03289795,0.030288696,0.06323242,0.058502197,0.005027771,-0.026306152,0.0066604614,0.004722595,0.023666382,-0.0435791,-0.0023460388,-0.05239868,0.008026123,-0.017715454,-0.015083313,-0.057891846,0.01914978,-0.064697266,0.12005615,-0.024246216,0.0024433136,-0.0619812,-0.031051636,-0.048309326,0.010238647,0.03741455,-0.1217041,-0.06121826,0.00623703,0.15759277,0.046569824,0.04208374,0.022125244,0.05630493,0.039123535,0.0076522827,-0.032592773,-0.058654785,-0.012741089,0.025726318,-0.0053100586,0.0317688,-0.04257202,-0.020431519,-0.1003418,-0.008651733,0.040771484,0.023803711,-0.0036258698,-0.026641846,-0.07324219,0.02734375,-0.10736084,0.008575439,-0.015068054,0.010795593,0.09881592,-0.052612305,-0.097351074,0.045654297,0.06665039,0.11444092,-0.009880066,-0.0043792725,0.028549194,-0.05899048,-0.011512756,0.045410156,0.01902771,0.074401855,0.017745972,0.016784668,0.008056641,-0.02217102,-0.0152282715,0.09918213,0.07849121,0.016540527,-0.002811432,0.0068092346,-0.105285645,0.11444092,-0.014579773,-0.059539795,0.024017334,-0.022201538,0.07318115,0.04119873,0.052703857,-0.118896484,-0.051757812,-0.024154663,-0.08630371,0.030334473,0.020584106,0.026412964,0.033294678,0.012245178,0.047210693,0.11791992,0.039642334,0.02822876,-0.0013551712,-0.046447754,0.0029392242,-0.057739258,0.013519287,-0.08886719,0.03363037,0.020614624,-0.08709717,-0.086120605,0.032104492,0.003742218,0.0027866364,0.022460938,0.07946777,-0.011657715,-0.01739502,-0.02355957,0.028167725,0.00422287,-0.007446289,-0.032440186,-0.08685303,-0.053894043,0.105041504,0.0017576218,-0.0602417,-0.070251465,0.054473877,-0.009918213,-0.015930176,-0.10040283,-0.07293701,-0.00283432,0.003900528,0.0619812,-0.056427002,0.0034618378,0.016616821,-0.031555176,0.023468018,0.000049114227,-0.005241394,-0.105041504,0.0035877228,-0.068481445,0.020141602,-0.06695557,-0.12915039,0.04486084,0.027389526,-0.026794434,-0.057739258,-0.023803711,0.021606445,-0.023117065,-0.023849487,0.035339355,-0.0637207,-0.029006958,-0.06738281,-0.027679443,0.034423828,0.042510986,0.016448975,0.0065689087,0.0028266907,0.048309326,0.015327454,0.0046157837,0.031707764,0.0013742447,-0.019302368,-0.004802704,0.11987305,0.0031852722,0.07623291,0.038604736,0.052947998,0.03704834,-0.083618164],"created_at":1735875660539,"nchars":3214},"30":{"title":"26.카드 정렬하기","path":"1. Project/이것이 취업을 위한 코딩테스트다/26.카드 정렬하기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735625091752,"mtime":1735625931582,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 15:04:51","modified":"2024/12/31 15:18:51"},"id":"ae161ed1a029574975fc16d0abfe2e2d","content":"\n\nNOTE TITLE: [[26.카드 정렬하기]]\n\nMETADATA:{\"created\":\"2024/12/31 15:04:51\",\"modified\":\"2024/12/31 15:18:51\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/1715\n\n### 시간 복잡도 \n- `O(NlogN)`\n### 풀이 \n- *항상 가장 작은 크기의 두 카드 묶음을 합쳤을 때 최적의 해를 보장한다*\n\t- 그리디 알고리즘으로 분류 가능\n- `우선 순위 큐` 사용\n\t- Integer는 기본적으로 **오름차순 정렬**\n\t- 가장 작은 두 수를 뽑아서 합산 \n\t- `result` 에 누적 후 다시 큐에 넣음\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[] data;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        data = new int[n];\n        for(int i = 0; i < n; i++) {\n            data[i] = inputProcessor.nextInt();\n        }\n    }\n\n    private static void pro() {\n        Queue<Integer> pq = new PriorityQueue<>();\n        for(int i = 0; i < n; i++) {\n            pq.add(data[i]);\n        }\n\n        int result = 0;\n        while(pq.size() > 1)) {\n            int v1 = pq.poll();\n            int v2 = pq.poll();\n\n            int sum = v1 + v2;\n            result += sum;\n            pq.add(sum);\n        }\n\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.066711426,0.057006836,0.040649414,0.068237305,0.05834961,-0.020904541,-0.03100586,0.03817749,0.04714966,0.062927246,0.035064697,-0.0037326813,0.03869629,0.005104065,0.03982544,-0.045440674,-0.06109619,0.0056495667,-0.0178833,-0.019042969,0.0029888153,0.032104492,-0.026885986,-0.00944519,0.057281494,0.039245605,-0.06008911,0.100097656,-0.004055023,0.004589081,-0.021697998,-0.041015625,-0.06304932,-0.049224854,0.07550049,0.06359863,-0.03982544,0.017578125,0.006214142,-0.06347656,0.042877197,-0.019927979,0.045898438,-0.008598328,-0.03527832,0.076049805,0.06390381,0.0032215118,-0.050689697,0.016616821,0.022735596,-0.03744507,0.05810547,0.0061416626,-0.025909424,-0.0077209473,0.01361084,-0.029724121,-0.019424438,0.02053833,0.09301758,0.004135132,-0.03189087,0.10491943,-0.013259888,-0.06616211,-0.05340576,0.044647217,-0.0014533997,-0.020935059,0.029449463,-0.014793396,-0.052825928,-0.046203613,-0.029205322,0.04107666,0.11444092,-0.02861023,0.060943604,-0.02935791,0.009559631,-0.10369873,-0.026641846,-0.026519775,-0.06524658,-0.04714966,0.044281006,-0.024658203,-0.08099365,0.049987793,-0.02684021,0.058532715,-0.029006958,-0.031021118,-0.007408142,0.01134491,-0.0284729,0.009552002,0.048828125,0.07659912,-0.04425049,-0.026641846,0.017715454,-0.018295288,-0.049560547,0.045532227,-0.03164673,0.000767231,-0.01448822,0.026870728,-0.035125732,-0.01550293,-0.07702637,-0.01121521,-0.061920166,0.015090942,0.033416748,-0.06518555,0.026550293,-0.0077667236,-0.042388916,0.031921387,-0.054260254,0.02432251,-0.11090088,0.16027832,0.042175293,0.017700195,-0.07714844,-0.0040664673,0.02949524,0.01158905,0.0030708313,0.02999878,0.0569458,-0.045532227,-0.0030059814,0.09881592,-0.060668945,-0.06719971,0.009468079,0.051239014,-0.020233154,-0.08068848,-0.056854248,0.16235352,-0.011314392,-0.054534912,0.030731201,-0.0463562,0.008056641,-0.0019245148,0.009140015,0.044036865,-0.0073051453,-0.020492554,0.093566895,0.022064209,-0.07342529,0.048675537,-0.079833984,0.03591919,-0.13049316,-0.09637451,0.12939453,-0.041870117,0.000035881996,-0.007774353,0.09637451,-0.018814087,0.038513184,0.036834717,-0.011650085,-0.06585693,0.0031337738,0.015602112,-0.10070801,-0.00623703,-0.018432617,-0.013969421,0.0011253357,-0.016586304,-0.058898926,-0.027572632,-0.023162842,0.06542969,0.02166748,0.0149002075,-0.0769043,-0.019210815,-0.047332764,0.08392334,0.0035133362,-0.04559326,0.0071258545,0.02558899,0.0006799698,-0.0748291,0.044189453,-0.035125732,0.1295166,-0.05444336,-0.023666382,0.08190918,0.008003235,0.06185913,-0.014862061,0.08270264,-0.07763672,0.016799927,0.01109314,0.05041504,0.00091695786,-0.028564453,0.010856628,-0.005897522,0.04046631,0.051696777,-0.0597229,0.14660645,0.05267334,0.007850647,-0.035095215,-0.032043457,-0.068115234,-0.01525116,0.02142334,-0.055267334,-0.04046631,-0.01928711,-0.0029144287,-0.002084732,-0.007572174,0.040039062,0.0680542,0.077941895,0.054779053,0.015327454,-0.02822876,-0.026504517,-0.025802612,0.09515381,0.012634277,0.03161621,-0.03540039,-0.019515991,-0.01991272,0.029907227,-0.023162842,-0.04638672,-0.023223877,-0.058807373,-0.0014705658,-0.089660645,-0.015960693,-0.019958496,-0.06970215,0.04156494,-0.0055351257,-0.040252686,0.029815674,0.13867188,0.06488037,-0.08026123,-0.060180664,-0.046173096,-0.020462036,-0.02180481,0.11065674,-0.021972656,0.048950195,0.07312012,-0.02810669,0.014854431,-0.022277832,-0.057373047,0.080078125,0.095458984,-0.047424316,0.02041626,-0.019073486,-0.06210327,0.13232422,0.031799316,0.04257202,-0.051361084,0.026794434,0.034301758,0.10601807,0.03086853,-0.09857178,-0.04107666,-0.087646484,-0.0049743652,0.11315918,0.002412796,0.017120361,0.03488159,0.014297485,0.05105591,0.03781128,0.023391724,0.0026950836,-0.010749817,-0.09082031,0.0126571655,0.0015525818,0.014785767,0.023712158,-0.005470276,-0.002105713,-0.02281189,0.0026474,0.00059080124,0.007499695,-0.038116455,0.074401855,0.027801514,-0.03527832,-0.0016946793,-0.041900635,-0.06964111,0.013412476,-0.088256836,-0.029891968,-0.039215088,-0.058044434,0.118652344,0.02784729,-0.061462402,-0.09692383,0.009887695,-0.04269409,0.026550293,-0.042419434,-0.11035156,-0.0054473877,-0.07507324,-0.0077056885,-0.033691406,0.065979004,-0.015548706,0.06085205,0.018417358,-0.019927979,-0.074157715,-0.05996704,0.06756592,-0.012428284,-0.03933716,-0.047821045,-0.11627197,-0.027297974,0.009086609,-0.029067993,-0.026229858,-0.045532227,0.064453125,0.0033493042,-0.11779785,0.015388489,-0.008964539,-0.0395813,-0.10107422,-0.02784729,-0.016479492,0.027542114,0.046813965,0.044189453,0.014328003,0.025360107,-0.03414917,0.035827637,0.06213379,0.05368042,0.01889038,0.028045654,0.036499023,0.039398193,0.03930664,0.032104492,0.049102783,0.043121338,-0.022140503],"created_at":1735875660539,"nchars":2667},"31":{"title":"25.실패율","path":"1. Project/이것이 취업을 위한 코딩테스트다/25.실패율.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735623340904,"mtime":1735625267385,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 14:35:40","modified":"2024/12/31 15:07:47"},"id":"6aac7b121dc7c2f68c2e1d83be48a5cb","content":"\n\nNOTE TITLE: [[25.실패율]]\n\nMETADATA:{\"created\":\"2024/12/31 14:35:40\",\"modified\":\"2024/12/31 15:07:47\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/42889\n\n### 시간 복잡도\n- `O(NlogN)`\n- 정렬 시간 복잡도가 가장 큼\n\n### 풀이\n- int[] stoped = 플레이어가 멈춘 스테이지별로 카운트 누적\n- 플레이어 수 = stages.length\n- 실패율 = 스테이지에 도달 했으나 클리어 하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어의 수\n\t- 스테이지에 도달한 플레이어 수 = 전체 플레이어 수 - 현재 스테이지 클리어 하지 못한 플레이어 수\n- 실패율이 **double 타입**이므로 if 조건문으로 내림차순 정의\n\n### 제출 코드\n```java hl:7,13,16\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] solution(int N, int[] stages) {\n        \n        int[] stoped = new int[N + 2]; // 마지막 스테이지 클리어 경우 고려\n        for(int s : stages) {\n            stoped[s] += 1;\n        }\n        \n        List<Stage> list = new ArrayList<>();\n        int players = stages.length; // 전체 플레이어 수\n        for(int i = 1; i <= N; i++) {\n            int stop = stoped[i];\n            double failRate = (double) stop / players;\n            \n            list.add(new Stage(i, failRate));\n            players -= stop;\n            \n        }\n        \n        Collections.sort(list);\n        \n        int[] answer = new int[N];\n        for(int i = 0; i < list.size(); i++) {\n            answer[i] = list.get(i).no;\n        }\n        \n        return answer;\n    }\n    \n    private static class Stage implements Comparable<Stage>{\n        private final int no;\n        private final double failRate;\n        \n        public Stage(int no, double failRate) {\n            this.no = no;\n            this.failRate = failRate;\n        }\n\n        public int compareTo(Stage o) {\n            if(this.failRate < o.failRate) {\n                return 1;\n            } else if(this.failRate > o.failRate) {\n                return -1;\n            } else if(this.failRate == o.failRate) {\n                return 0;\n            }\n            \n            return this.no - o.no; \n        }\n    }\n}\n```","embedding":[-0.01586914,0.010093689,0.06341553,0.036621094,0.04168701,-0.0109939575,-0.032440186,0.019302368,0.051452637,0.14904785,0.02696228,-0.043029785,-0.0055122375,0.0061035156,0.03111267,-0.03366089,0.08514404,-0.013046265,-0.025314331,-0.031982422,0.0019874573,-0.031707764,-0.0053977966,0.059051514,0.028396606,0.06365967,0.0368042,0.08343506,-0.09100342,-0.058685303,0.050964355,0.008049011,-0.029937744,-0.029342651,0.078308105,0.02961731,0.0025520325,0.039093018,0.029510498,-0.106933594,0.08441162,-0.016479492,0.017745972,0.003419876,0.050567627,0.0041389465,0.014862061,0.00806427,-0.09613037,0.049621582,0.011688232,-0.019348145,0.10437012,0.0035362244,0.037719727,-0.030731201,0.04937744,-0.028747559,-0.04626465,0.029342651,0.06774902,0.04232788,-0.03137207,0.06329346,0.09716797,-0.0065994263,-0.10040283,0.021087646,0.027908325,-0.09161377,0.015335083,0.00920105,-0.060577393,0.016098022,-0.0050239563,0.06591797,0.0949707,-0.011299133,-0.07513428,-0.0031433105,-0.03250122,-0.07287598,-0.02607727,0.010322571,-0.027145386,0.008430481,-0.0007658005,0.040802002,-0.0385437,-0.010643005,0.13000488,0.031188965,-0.042541504,-0.037750244,-0.09881592,0.0385437,0.028427124,-0.034606934,0.10046387,0.11810303,-0.033416748,-0.045928955,0.04550171,-0.0184021,-0.0021018982,0.088012695,0.0010852814,-0.011634827,-0.021820068,0.037872314,-0.021575928,-0.00012290478,-0.0064849854,0.023422241,0.016113281,0.02444458,0.020202637,-0.17077637,0.050964355,-0.056640625,0.01436615,0.008743286,-0.051757812,-0.035491943,-0.04650879,0.103149414,0.047027588,0.09161377,-0.087524414,-0.027664185,0.010772705,-0.05331421,-0.06561279,0.016098022,0.1394043,-0.001461029,0.017150879,0.17211914,-0.088012695,0.013626099,0.03012085,-0.01826477,0.038635254,0.006389618,-0.023254395,0.045043945,0.045135498,-0.076660156,0.03668213,-0.056793213,-0.0031719208,-0.03173828,-0.007419586,0.07196045,-0.014350891,0.017501831,0.056274414,0.04827881,-0.017593384,-0.011703491,-0.04837036,-0.005290985,-0.12976074,-0.14929199,0.044708252,-0.09082031,0.02331543,0.004688263,0.0027046204,-0.0033836365,0.103881836,0.05340576,-0.013763428,-0.04534912,-0.0011768341,0.059631348,-0.02949524,0.0043563843,0.05633545,0.036132812,-0.034118652,0.013168335,-0.02357483,-0.049316406,0.037078857,0.07446289,-0.015991211,-0.010749817,0.012664795,-0.04937744,-0.05618286,-0.017196655,0.03643799,0.023971558,0.028839111,-0.025115967,-0.015945435,-0.053009033,0.046539307,-0.055114746,0.0552063,-0.06781006,0.013504028,0.021392822,0.008453369,0.026535034,-0.0137786865,0.035888672,-0.08642578,-0.035491943,-0.035461426,-0.0023384094,-0.01637268,0.022659302,0.032165527,-0.012626648,-0.03286743,-0.039215088,-0.01701355,0.12585449,0.07867432,-0.027923584,-0.068847656,-0.041046143,0.0073165894,0.028579712,0.04522705,-0.053222656,0.052093506,0.01828003,0.099975586,-0.043304443,-0.0032081604,-0.01852417,0.024917603,0.007843018,0.046203613,0.011657715,-0.08239746,-0.057250977,-0.00749588,-0.01953125,0.043426514,-0.04901123,0.015914917,-0.046936035,0.04296875,0.053466797,-0.025939941,-0.007801056,-0.013664246,-0.10144043,-0.06427002,-0.15722656,-0.08129883,-0.040527344,-0.00014734268,-0.03314209,-0.050354004,-0.06463623,0.03262329,0.043762207,0.024414062,-0.024612427,0.023773193,-0.13146973,-0.030517578,-0.011985779,-0.0015058517,0.047088623,-0.022415161,0.038208008,0.078063965,0.0020313263,0.0184021,-0.008300781,0.028701782,0.038726807,-0.023025513,0.023162842,-0.048583984,-0.044281006,0.12432861,0.052459717,0.023406982,0.026382446,-0.08227539,0.09906006,0.0010766983,0.0046310425,-0.04562378,0.012176514,-0.034484863,0.011940002,0.04171753,0.0015220642,0.04446411,0.058013916,0.039489746,0.021438599,0.046875,-0.070129395,0.03062439,-0.024642944,-0.037109375,-0.057891846,0.02230835,-0.013931274,-0.04510498,0.0231781,-0.028335571,-0.027938843,0.027145386,-0.03527832,0.021514893,0.07922363,0.003189087,0.05206299,-0.019714355,-0.048797607,-0.041412354,-0.042266846,0.038085938,-0.0055236816,0.023727417,-0.079589844,-0.074401855,0.055267334,0.010726929,-0.0016012192,0.0007901192,0.033325195,-0.09436035,-0.043395996,-0.0060577393,-0.07525635,-0.011329651,-0.11975098,-0.04107666,0.02029419,0.050964355,0.044525146,-0.026504517,-0.03314209,-0.0001001358,-0.024841309,-0.057159424,0.002588272,-0.053497314,-0.05041504,-0.011909485,-0.103515625,0.036743164,-0.0023155212,-0.09674072,-0.057556152,-0.04196167,-0.030029297,-0.023330688,0.01826477,0.06463623,-0.020309448,0.014961243,-0.050323486,-0.08709717,-0.0016298294,-0.024246216,0.022460938,0.025512695,-0.058441162,-0.011047363,0.027313232,0.014831543,-0.006164551,0.0061531067,0.013175964,-0.046417236,0.036376953,0.037109375,0.056274414,0.0635376,0.10961914,0.08660889,-0.02456665],"created_at":1735875660540,"nchars":1932},"32":{"title":"24.안테나","path":"1. Project/이것이 취업을 위한 코딩테스트다/24.안테나.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735621667549,"mtime":1735625272996,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 14:07:47","modified":"2024/12/31 15:07:52"},"id":"234b7fc3a4936b769256c9380326a0fc","content":"\n\nNOTE TITLE: [[24.안테나]]\n\nMETADATA:{\"created\":\"2024/12/31 14:07:47\",\"modified\":\"2024/12/31 15:07:52\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/18310\n\n### 시간 복잡도 \n`O(NlogN)`\n\n### 풀이\n- n이 최대 20만이기 때문에 2중 for문으로 풀이할 경우 **시간초과**\n- 정렬 후 *중간 위치에 있는 집*이 가장 거리의 총합이 짧음\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[] house;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        house = new int[n];\n        for(int i = 0; i < n; i++) {\n            house[i] = inputProcessor.nextInt();\n        }\n    }\n\n    private static void pro() {\n        Arrays.sort(house);\n\n        int mid = (n - 1) / 2;\n        sb.append(house[mid]);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw \n        = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.032104492,0.050323486,0.026351929,0.07043457,0.05517578,-0.028518677,-0.06689453,0.0178833,0.03869629,0.09411621,0.0066337585,-0.031234741,0.040863037,-0.00068187714,-0.00459671,-0.033325195,0.0155181885,0.0046577454,0.011985779,-0.03363037,-0.00019299984,0.029434204,-0.06976318,-0.01348114,0.07574463,0.0473938,-0.05609131,0.10107422,0.060424805,0.000121831894,-0.013664246,-0.0236969,-0.017105103,-0.018966675,0.09008789,0.055358887,0.015396118,-0.010475159,-0.01260376,-0.10638428,0.027679443,-0.04840088,0.06451416,0.030792236,-0.029571533,0.06124878,0.05429077,0.08117676,-0.07116699,0.022201538,-0.09631348,-0.009651184,0.07220459,-0.07922363,0.01184845,0.07543945,0.02709961,-0.0072669983,-0.029510498,0.029571533,0.11529541,-0.013763428,-0.07989502,0.022750854,0.10369873,-0.08996582,-0.056274414,-0.035705566,0.06173706,-0.044433594,0.00043344498,0.05206299,-0.0013103485,-0.011650085,-0.038848877,-0.0024433136,0.12670898,-0.11328125,0.011619568,-0.017822266,0.014160156,0.0132369995,-0.031555176,-0.001373291,-0.047821045,0.092285156,-0.009216309,0.027023315,-0.057922363,0.034606934,0.040008545,0.061157227,-0.008094788,-0.0035095215,0.005832672,0.019729614,-0.015914917,-0.023773193,0.049865723,0.06274414,-0.043640137,-0.072021484,0.023864746,-0.02532959,-0.06964111,0.039367676,0.014511108,-0.053100586,0.03878784,-0.034332275,-0.09326172,-0.032806396,-0.048187256,-0.0069274902,-0.040649414,0.005126953,0.03744507,-0.09259033,0.0039405823,-0.060028076,-0.04360962,-0.007511139,-0.013381958,0.009399414,-0.070007324,0.0770874,0.054138184,0.027816772,-0.07659912,0.064208984,0.059753418,-0.0087890625,-0.05886841,0.07952881,-0.014923096,-0.062164307,0.034210205,0.09039307,-0.086364746,-0.086364746,0.03314209,-0.004459381,0.0026664734,0.013626099,-0.04751587,0.11859131,0.008148193,-0.07080078,-0.0043029785,-0.0024967194,-0.01663208,0.052978516,-0.0028247833,0.06890869,-0.08618164,-0.032806396,0.027038574,-0.020584106,-0.10546875,0.10687256,-0.09716797,0.09100342,-0.086120605,-0.10321045,0.07897949,0.068115234,0.04248047,0.05630493,0.04876709,0.002067566,0.0004143715,0.1282959,-0.002298355,0.013900757,-0.014122009,0.036102295,-0.088134766,0.04147339,0.045532227,0.07043457,-0.03970337,-0.021911621,-0.03579712,-0.009178162,0.046325684,0.019699097,-0.040161133,-0.008224487,-0.0077056885,-0.016799927,-0.06939697,0.05996704,0.03942871,-0.051727295,0.02180481,0.06774902,-0.04159546,-0.07470703,0.016082764,-0.046325684,0.015670776,-0.00415802,0.019241333,0.061309814,0.046203613,0.012649536,0.05404663,0.030960083,-0.017929077,0.03515625,-0.008453369,0.018630981,0.014320374,0.02809143,-0.019973755,-0.014549255,-0.023422241,0.048980713,-0.054138184,0.09088135,0.019989014,-0.04296875,-0.036102295,-0.109436035,-0.08947754,-0.028701782,0.025238037,-0.13354492,-0.06427002,0.0020160675,0.08392334,0.053649902,0.073913574,-0.008590698,0.048614502,0.05984497,0.037139893,-0.029525757,-0.02859497,-0.10571289,0.06903076,0.05432129,0.05407715,-0.0016956329,-0.030578613,-0.101623535,-0.0049934387,-0.020431519,0.014373779,0.057617188,-0.0826416,-0.065979004,-0.037475586,-0.09661865,-0.017364502,0.02748108,-0.033203125,0.054138184,-0.0770874,-0.06842041,0.006549835,0.004470825,0.080322266,-0.048828125,-0.006351471,-0.016998291,-0.014533997,-0.082092285,0.0048294067,0.08203125,-0.000041544437,0.08508301,-0.0030384064,-0.0067749023,0.015022278,-0.007713318,0.10064697,0.09320068,-0.0045280457,0.0385437,0.024383545,-0.015434265,0.10784912,0.029922485,-0.024871826,-0.008674622,-0.008712769,-0.022521973,0.08654785,0.03768921,-0.1083374,-0.00058555603,-0.0019464493,-0.040771484,0.10443115,-0.038513184,0.01763916,0.016937256,0.011230469,-0.031402588,0.046295166,-0.04309082,0.03967285,0.045318604,0.011138916,-0.0018377304,0.03543091,-0.03881836,-0.019577026,0.01309967,-0.007789612,-0.07397461,-0.037506104,0.0635376,0.04449463,0.057617188,0.079711914,-0.0014228821,-0.08874512,0.0082092285,-0.02027893,0.032226562,-0.021438599,-0.040039062,-0.030960083,-0.011566162,-0.038848877,0.075927734,-0.02558899,-0.049591064,-0.022033691,0.016830444,-0.075683594,-0.033325195,-0.02507019,-0.116760254,-0.049102783,-0.05496216,-0.0037002563,0.012992859,0.06298828,-0.020553589,-0.018844604,0.05239868,0.0035915375,-0.051361084,-0.13977051,0.043151855,-0.051086426,0.0046653748,0.013923645,-0.0748291,-0.004673004,0.0013036728,-0.03555298,-0.040374756,0.031799316,0.0021343231,0.0039711,-0.015350342,0.011764526,-0.015975952,-0.051696777,-0.11364746,-0.006313324,-0.03955078,0.016967773,0.008682251,0.051971436,0.046325684,0.036224365,-0.0040893555,-0.00019598007,0.02670288,-0.006755829,-0.051818848,0.007259369,0.030517578,-0.022537231,0.019332886,-0.014228821,0.03125,0.03390503,-0.015045166],"created_at":1735875660540,"nchars":2317},"33":{"title":"23.국영수","path":"1. Project/이것이 취업을 위한 코딩테스트다/23.국영수.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735620958896,"mtime":1735625276702,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 13:55:58","modified":"2024/12/31 15:07:56"},"id":"7dc0c6c0e4de0046d154ca8d61f0ba6c","content":"\n\nNOTE TITLE: [[23.국영수]]\n\nMETADATA:{\"created\":\"2024/12/31 13:55:58\",\"modified\":\"2024/12/31 15:07:56\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/10825\n\n### 시간 복잡도\n`O(NlogN)`\n\n### 풀이\n요구사항 대로 Comparable 인터페이스 구현하여 정렬 후 출력\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static List<Student> students;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        students = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            String name = inputProcessor.next();\n            int ko = inputProcessor.nextInt();\n            int eng = inputProcessor.nextInt();\n            int math = inputProcessor.nextInt();\n\n            students.add(new Student(name, ko, eng, math));\n        }\n    }\n\n    private static class Student implements Comparable<Student>{\n        private final String name;\n        private final int ko;\n        private final int eng;\n        private final int math;\n\n        public Student(String name, int ko, int eng, int math) {\n            this.name = name;\n            this.ko = ko;\n            this.eng = eng;\n            this.math = math;\n        }\n\n        public int compareTo(Student o) {\n            if(this.ko != o.ko) {\n                return o.ko - this.ko;\n            } else if(this.eng != o.eng) {\n                return this.eng - o.eng;\n            } else if (this.math != o.math) {\n                return o.math - this.math;\n            }\n\n            return this.name.compareTo(o.name);\n        }\n    }\n\n    private static void pro() {\n        Collections.sort(students);\n\n        for(Student student : students) {\n            sb.append(student.name).append(\"\\n\");\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.011749268,-0.02633667,0.046325684,0.10687256,0.09503174,-0.02116394,-0.023910522,0.06323242,0.0690918,0.049102783,0.05126953,0.016555786,0.040649414,0.021728516,0.07366943,-0.01600647,0.04748535,0.032073975,-0.027908325,-0.029937744,0.045166016,-0.013252258,-0.055358887,0.03375244,0.03955078,0.0039100647,0.0026988983,0.04373169,-0.04046631,0.0012283325,-0.008895874,-0.029205322,-0.033599854,-0.033416748,0.028167725,0.08331299,0.032958984,0.03262329,0.005630493,-0.15234375,0.06173706,-0.02684021,0.08972168,0.055786133,-0.047058105,0.050628662,0.059814453,0.049316406,-0.07537842,0.060546875,-0.028839111,-0.0032806396,0.089904785,-0.08270264,0.0054244995,0.0033874512,-0.014793396,-0.05105591,-0.03793335,-0.01727295,0.17260742,0.032806396,-0.03363037,0.06958008,0.080078125,-0.111572266,-0.035491943,-0.029830933,-0.005859375,-0.057739258,0.03353882,-0.020248413,-0.05050659,0.02243042,-0.017684937,0.007446289,0.10498047,-0.091552734,0.07757568,-0.048919678,-0.018554688,-0.03567505,-0.035827637,0.011909485,-0.04425049,-0.0047035217,-0.033477783,-0.0129852295,0.0033683777,0.019943237,0.024612427,0.057739258,-0.04763794,-0.030426025,-0.02130127,0.011619568,-0.029785156,0.012802124,0.04837036,0.06161499,-0.025268555,-0.079589844,-0.0025081635,-0.09802246,-0.036010742,0.032196045,0.009689331,-0.021820068,0.00242424,0.015792847,-0.10644531,0.033325195,-0.001285553,-0.016906738,-0.05114746,-0.006679535,0.05633545,-0.0847168,0.032806396,-0.06524658,-0.0070343018,-0.020477295,-0.006214142,0.042297363,-0.035186768,0.15466309,0.06347656,0.00090026855,-0.021881104,0.03994751,0.03564453,-0.013847351,-0.051208496,0.053100586,0.03829956,-0.008781433,-0.00075387955,0.06021118,-0.09069824,-0.06384277,0.032470703,-0.032928467,0.013580322,0.0023231506,-0.034851074,0.08807373,-0.035461426,-0.111450195,0.03378296,-0.05645752,-0.0047187805,0.06896973,0.006427765,0.078552246,-0.029891968,-0.015602112,0.062194824,0.018234253,-0.059783936,0.039154053,-0.07128906,0.051513672,-0.07537842,-0.10986328,0.061645508,-0.029190063,0.0062789917,0.01737976,0.06774902,-0.014579773,-0.04916382,0.07476807,-0.06585693,-0.021987915,0.0026893616,-0.0019054413,-0.06738281,0.064941406,0.053375244,0.041503906,-0.016662598,0.04663086,-0.08734131,0.0052108765,0.000182271,0.08453369,0.031433105,-0.02180481,0.036071777,-0.019515991,-0.049560547,0.029846191,0.05014038,-0.07977295,-0.037384033,0.05505371,-0.066345215,-0.02557373,0.03353882,-0.059783936,0.0037899017,0.044281006,-0.0037155151,0.03262329,0.056427002,0.052490234,-0.10058594,-0.022033691,0.015266418,-0.016555786,0.029251099,0.032989502,-0.024551392,0.05795288,0.02507019,-0.03048706,-0.015670776,-0.013366699,-0.08081055,0.11077881,0.032714844,-0.03564453,-0.026062012,-0.09552002,-0.118896484,0.033843994,0.070495605,-0.12841797,-0.02722168,-0.015602112,0.02935791,0.031463623,0.028869629,-0.064575195,0.026351929,0.049438477,0.04534912,-0.007965088,-0.07165527,-0.031234741,0.013580322,0.003955841,0.010971069,-0.030761719,-0.052764893,-0.026062012,-0.010673523,0.04663086,0.019683838,-0.011505127,-0.020874023,-0.09741211,0.040252686,-0.05645752,-0.03756714,0.061187744,0.0065574646,0.030075073,-0.05142212,-0.084472656,0.05657959,0.0619812,0.060333252,-0.015823364,-0.014572144,-0.012962341,-0.053588867,-0.0009074211,0.008911133,0.017333984,0.036834717,0.04135132,0.04083252,0.0011835098,0.028930664,-0.030319214,0.061431885,0.046417236,0.04373169,0.014350891,0.0054244995,-0.024032593,0.107543945,0.037109375,-0.013389587,0.033691406,-0.033691406,0.08001709,-0.0064888,0.007396698,-0.06262207,-0.037750244,-0.022323608,-0.011161804,0.08496094,-0.028869629,0.022247314,0.019729614,-0.023269653,0.020751953,0.08117676,-0.037475586,0.04220581,0.008430481,-0.070495605,-0.030349731,0.034454346,0.016281128,-0.0044670105,0.01058197,-0.09295654,0.003709793,-0.030075073,0.038604736,0.040771484,0.05279541,0.03314209,0.009170532,-0.05126953,-0.0033054352,-0.045440674,-0.026550293,-0.00043845177,-0.016052246,-0.042053223,-0.03186035,-0.05947876,0.057769775,0.047607422,-0.08483887,-0.045135498,0.025161743,-0.08807373,-0.030715942,-0.04244995,-0.1274414,-0.087890625,-0.032989502,0.021072388,-0.049987793,0.0748291,0.05810547,-0.028411865,-0.0035266876,-0.037902832,-0.08300781,-0.15783691,0.017501831,-0.0259552,0.045074463,0.03048706,-0.090026855,0.013977051,-0.0027656555,-0.011833191,-0.036376953,-0.09820557,0.06298828,-0.018005371,-0.008293152,0.055786133,-0.095703125,-0.053466797,-0.10192871,-0.03591919,-0.034301758,0.02684021,0.013198853,0.051605225,0.02909851,0.059143066,0.038391113,-0.0026416779,-0.009750366,0.018936157,-0.04550171,-0.010520935,0.060424805,0.062683105,0.051605225,0.010917664,0.08026123,0.11273193,0.012290955],"created_at":1735875660541,"nchars":3293},"34":{"title":"22.블록 이동하기 (🔺)","path":"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714653012,"mtime":1735787375865,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:33","modified":"2025/01/02 12:09:35"},"id":"53cc96bf262039586a88ab17ac076858","content":"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60063\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이\n- BFS\n- 로봇이 움직일 수 있는 경우는 최대 `12`가지\n\t- 상하좌우 : `4`가지\n\t- 수평 상태인 경우 : `4`가지 (`{java}x1 == x2`)\n\t- 수직 상태인 경우 : `4`가지 (`{java}y1 == y2`)\n- **회전 관련**\n\t- 로봇은 `수평`, `수직`  상태 중 하나를 가진다\n\t- 로봇 상태마다 4가지 회전 경우의 수를 가짐\n\t- 회전 경로에 하나라도 `1`이면 둘 다 회전하지 못함 - `(B)` 이미지  \n\t- 회전 위치를 구할 때 단순히 `(x, y)` 좌표 기준으로 행과 열에 `+1, -1` 해주는게 편함\n\n![[스크린샷 2025-01-02 오후 12.02.23.png]]\n\n\n**실수1.** 범위 조건 검사를 쉽게 하기 위해 테두리를 `1`로 채운 기존 데이터를 채운 신규 보드를 생성\n데이터 초기화시 `0 ~ (row + 1)` 범위를 순회하면서 전체를 1로 채우고, 기존 보드의 데이터를 채운다\n```text\n[1, 1, 1, 1, 1, 1, 1]\n[1, 0, 0, 0, 1, 1, 1]\n[1, 0, 0, 0, 1, 0, 1]\n[1, 0, 1, 0, 1, 1, 1]\n[1, 1, 1, 0, 0, 1, 1]\n[1, 0, 0, 0, 0, 0, 1]\n[1, 1, 1, 1, 1, 1, 1]\n```\n\n**실수2**. 중복 방문 여부를 처리하기 위해 `Set`을 사용했으나 equals, hashCode 재정의하지 않는 경우 확인하는 방법을 생각하지 못함\n```java\nboolean isPossible = true;\nfor(Robot v : visited) {\n\tif(v.visited(next)) {\n\t\tisPossible = false;\n\t\tbreak;\n\t}\n}\n```\n\n**실수3**. 로봇의 상태가 `수직`, `수평`인 경우를 고려하지 못하여 <u>회전 가능한 경로를 일부 누락</u>함\n```java\n# 제출 코드를 리팩토링\nint[] nums = new int[] {-1, 1};\nif(robot.isHosizontal()) {  // 수평 상태\n\t// 위, 아래로 회전(4가지 경우)\n\tfor(int i = 0; i < 2; i++) {\n\t   if(maps[x1 + nums[i]][y1] == 0 && maps[x2 + nums[i]][y2] == 0) {\n\t\t result.add(new Robot(x1 + nums[i], y1, x1, y1, dist + 1));\n\t\t result.add(new Robot(x2 + nums[i], y2, x2, y2, dist + 1));   \n\t   }\n\t}\n}\n\nif(robot.isVertical()) { // 수직 상태\n    // 왼쪽, 오른쪽으로 회전(4가지 경우)\n\tfor(int i = 0; i < 2; i++) {\n\t   if(maps[x1][y1 + nums[i]] == 0 && maps[x2][y2 + nums[i]] == 0) {\n\t\t result.add(new Robot(x1, y1 + nums[i], x1, y1, dist + 1));\n\t\t result.add(new Robot(x2, y2 + nums[i], x2, y2, dist + 1));   \n\t   }\n\t}\n}\n```","embedding":[-0.012290955,-0.024978638,-0.0040626526,0.03704834,0.10864258,-0.014373779,-0.013458252,0.019317627,0.014289856,0.06854248,-0.027938843,-0.004398346,0.0070877075,0.0063972473,0.042297363,-0.04208374,0.022262573,0.0440979,-0.047088623,0.013664246,-0.023880005,0.008201599,-0.043640137,0.02142334,0.074523926,0.04421997,-0.07141113,0.06732178,0.0758667,0.018753052,0.06829834,-0.047729492,-0.016799927,-0.0036010742,0.15441895,0.017211914,-0.02381897,-0.051208496,0.0116119385,-0.113098145,0.048065186,-0.03945923,0.02432251,0.043304443,0.0012264252,0.015945435,0.007774353,0.029022217,-0.041870117,-0.07727051,-0.010574341,-0.065979004,0.061798096,-0.07354736,-0.05105591,-0.007106781,0.066223145,0.00749588,-0.013908386,0.046325684,0.08239746,0.01360321,-0.03515625,0.07684326,0.09234619,-0.1104126,-0.01638794,-0.050109863,0.089782715,-0.07354736,-0.004966736,-0.07922363,-0.06677246,0.021987915,-0.024215698,0.030532837,0.076293945,0.03781128,0.04345703,-0.047851562,-0.026657104,-0.059814453,-0.013763428,-0.05432129,-0.006095886,0.05142212,-0.027252197,-0.03805542,-0.020706177,0.0690918,0.025527954,0.066223145,-0.11663818,-0.034973145,-0.005355835,-0.0038433075,-0.052337646,-0.000034868717,0.043182373,0.036712646,-0.058502197,-0.08477783,0.0124435425,-0.06665039,-0.044769287,0.04248047,0.035186768,0.021591187,-0.030593872,0.06402588,-0.03704834,0.0012178421,0.017440796,-0.00178051,0.027801514,0.009338379,0.07861328,-0.06390381,-0.016586304,-0.05065918,0.023422241,0.055419922,-0.078186035,0.005432129,-0.07623291,0.05142212,-0.009094238,0.043670654,-0.088256836,0.05316162,-0.030090332,0.03161621,-0.015159607,0.058654785,0.05505371,0.014785767,0.06829834,0.12145996,-0.04324341,-0.06097412,0.06213379,0.0046539307,-0.040405273,-0.011016846,-0.05050659,0.011474609,0.05218506,-0.10290527,-0.064208984,-0.057922363,0.014076233,-0.019088745,0.017456055,0.07751465,-0.04940796,-0.029876709,0.03656006,0.061309814,-0.06921387,0.11590576,-0.053222656,0.06286621,-0.09576416,-0.0960083,0.07110596,-0.08996582,0.0107421875,0.0385437,-0.0031986237,0.04397583,0.033050537,0.07928467,0.011581421,-0.04208374,0.0075263977,0.040374756,-0.06488037,-0.046417236,-0.003566742,0.076293945,-0.05206299,-0.0030975342,-0.08093262,0.01108551,0.012863159,0.03427124,-0.023330688,0.013046265,-0.024108887,0.009475708,-0.04058838,0.06616211,0.017181396,-0.10675049,-0.061431885,0.041259766,-0.019577026,0.033447266,0.039001465,-0.031021118,0.01689148,-0.074523926,0.03189087,0.1394043,0.034423828,0.025268555,0.01424408,0.010757446,-0.024383545,-0.004878998,0.021606445,0.080200195,-0.029968262,0.0236969,0.0030727386,-0.03668213,-0.05596924,-0.020431519,-0.041137695,0.125,-0.04296875,-0.05166626,-0.049621582,-0.05505371,-0.0597229,0.041137695,0.02709961,-0.12359619,0.023162842,-0.012817383,0.067993164,0.022613525,-0.033843994,0.06085205,0.054840088,0.010864258,0.101989746,0.07672119,-0.0027370453,-0.08325195,-0.023498535,-0.026977539,0.02949524,0.017059326,-0.036254883,-0.019592285,0.020019531,0.095947266,0.012199402,-0.02722168,0.032440186,-0.012908936,-0.06225586,-0.045806885,0.014427185,0.006099701,-0.018218994,0.04852295,-0.025665283,-0.06390381,0.03314209,-0.012084961,0.05596924,0.018432617,0.021102905,-0.07220459,-0.0524292,0.044067383,0.034942627,0.027267456,0.023544312,0.03665161,-0.078063965,-0.022705078,-0.03466797,-0.023895264,0.10333252,0.061035156,-0.016662598,-0.053710938,-0.049682617,-0.08618164,0.107543945,0.03604126,-0.01737976,-0.0069847107,-0.0814209,0.10479736,0.09375,-0.021820068,-0.08685303,0.040374756,-0.018493652,-0.045776367,0.08288574,0.00028443336,0.051208496,0.05984497,-0.0079574585,-0.006038666,0.083984375,-0.016586304,0.057769775,-0.031982422,-0.056152344,-0.053955078,0.04663086,0.010269165,-0.0038776398,0.06707764,-0.031951904,-0.0143966675,-0.015151978,0.03353882,0.049224854,0.03881836,0.05899048,0.062042236,-0.078308105,-0.049743652,-0.008094788,-0.027877808,0.08496094,-0.027816772,-0.058624268,-0.040802002,-0.09136963,0.08050537,0.0055122375,0.052947998,0.026275635,0.033081055,-0.054626465,-0.0037727356,0.013252258,-0.045196533,0.020462036,0.07537842,-0.01360321,-0.020324707,-0.03488159,0.0031986237,-0.043762207,0.0015096664,-0.0236969,-0.105529785,-0.14196777,0.027313232,-0.010093689,0.03704834,-0.033416748,-0.082336426,0.0036354065,-0.025878906,-0.06817627,0.0113220215,-0.00088071823,-0.04562378,-0.064331055,-0.06311035,0.027023315,0.003019333,0.05227661,-0.031280518,-0.06365967,-0.012763977,0.008117676,0.047424316,0.03765869,-0.043762207,-0.0011396408,-0.058654785,0.027023315,-0.0262146,-0.034423828,-0.040100098,0.036132812,-0.022399902,0.03665161,0.040252686,0.06896973,-0.018493652,0.06964111,-0.027145386],"created_at":1735875660541,"nchars":1813},"35":{"title":"22.블록 이동하기 (🔺)","path":"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714653012,"mtime":1735787375865,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:33","modified":"2025/01/02 12:09:35"},"id":"c5480db69876dbe696397144d9796e2f","content":"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java hl:8-10,36-41,116-140\nimport java.util.*;","embedding":[-0.00881958,0.024810791,0.0030174255,-0.03213501,-0.014770508,-0.012771606,-0.041381836,0.09661865,-0.019638062,0.010498047,-0.022232056,0.039855957,0.036254883,-0.022262573,0.058166504,0.010002136,0.03842163,0.057281494,0.05569458,-0.016082764,-0.014801025,0.061065674,-0.082092285,-0.035949707,0.10217285,0.07409668,-0.058929443,0.11206055,0.030593872,0.0048217773,0.0138549805,0.00094795227,-0.056030273,-0.006378174,0.076049805,0.013244629,0.03857422,0.010887146,0.0149002075,-0.06008911,0.005077362,-0.0069999695,0.07373047,0.05822754,0.04638672,-0.05960083,0.03793335,-0.016357422,-0.021713257,0.00039243698,0.039367676,-0.017837524,0.023162842,-0.12768555,0.020904541,-0.02078247,0.043640137,0.0026302338,0.0006136894,-0.021636963,0.060028076,0.08428955,-0.07824707,0.034240723,0.06008911,-0.09674072,0.020767212,-0.04928589,0.076293945,-0.017333984,0.034942627,-0.02104187,0.036468506,0.0022888184,0.03982544,-0.020095825,0.016586304,-0.040893555,0.015556335,-0.04360962,-0.07763672,-0.0124435425,-0.029708862,-0.024505615,-0.03186035,0.0513916,0.0071792603,-0.030349731,-0.037475586,0.11444092,0.025985718,0.027359009,-0.026367188,-0.011695862,-0.028701782,0.025238037,0.005214691,-0.0020923615,0.030334473,0.013420105,-0.07598877,-0.050628662,0.00073099136,-0.06726074,-0.014724731,0.0061149597,-0.007686615,-0.034332275,0.00022935867,0.08331299,-0.033294678,0.020812988,-0.078125,-0.023361206,0.03756714,0.021514893,0.11706543,-0.078125,-0.0015878677,-0.029266357,0.015220642,0.010192871,0.030532837,0.024932861,-0.031402588,0.03692627,0.07336426,0.02355957,-0.11553955,0.017166138,-0.009536743,-0.008308411,-0.10205078,0.050811768,0.06335449,-0.025115967,0.009841919,0.07751465,0.007724762,-0.038146973,0.06317139,-0.036102295,-0.04421997,-0.007671356,-0.050109863,0.070495605,0.06555176,-0.07495117,-0.004432678,-0.05291748,0.034820557,-0.011680603,-0.0069122314,0.14807129,-0.061309814,-0.0010509491,0.042907715,-0.0054092407,-0.026565552,0.074645996,-0.04095459,0.016052246,-0.06762695,-0.053833008,0.08135986,-0.02960205,0.050476074,0.027450562,0.0052948,0.025543213,-0.01134491,0.14355469,0.012825012,0.02973938,0.02041626,0.10961914,-0.008155823,0.010421753,0.014320374,0.05908203,-0.095458984,0.02305603,-0.09320068,0.03225708,-0.022766113,0.06866455,0.03074646,-0.025558472,-0.022857666,0.0034732819,-0.042877197,0.07446289,-0.02268982,0.015533447,-0.103637695,0.030761719,-0.03277588,-0.084472656,0.0068893433,-0.03363037,0.048309326,-0.038269043,0.017990112,0.097961426,0.0018434525,0.047729492,-0.07543945,-0.009162903,0.021087646,-0.07867432,-0.02784729,0.109802246,-0.031280518,-0.03567505,-0.041290283,-0.01828003,-0.059906006,-0.027786255,-0.0060539246,0.026260376,-0.014076233,-0.011528015,-0.15161133,-0.03967285,-0.10144043,0.040924072,0.022460938,-0.14807129,-0.045898438,-0.035827637,0.060516357,-0.010154724,0.037078857,0.029388428,0.03314209,-0.058776855,0.18798828,0.018310547,0.037719727,-0.05218506,0.021881104,-0.0579834,0.07824707,-0.03161621,-0.014381409,-0.053894043,-0.036071777,0.09875488,-0.0027332306,-0.043273926,-0.112854004,-0.015716553,-0.043029785,-0.07055664,-0.059173584,-0.032440186,-0.031951904,0.0022354126,-0.04055786,-0.0519104,0.023635864,0.06903076,0.104003906,0.033111572,0.016311646,-0.029541016,-0.05706787,0.018585205,0.0018854141,-0.03152466,0.036376953,0.0051002502,-0.018737793,-0.023864746,0.03842163,-0.031585693,0.005596161,0.0758667,-0.032684326,0.053619385,-0.07531738,-0.015808105,0.14050293,0.06933594,0.016738892,0.038146973,-0.013130188,0.004798889,0.017211914,-0.02734375,-0.0836792,0.016494751,-0.01638794,-0.03366089,0.10797119,0.031829834,0.022018433,-0.053833008,-0.07696533,-0.035949707,0.011772156,-0.06365967,-0.0034980774,-0.02835083,-0.13769531,-0.111450195,0.060028076,-0.072265625,-0.007171631,0.031677246,-0.008392334,-0.0023899078,-0.020599365,0.09100342,0.025909424,0.1015625,0.045776367,0.00013840199,-0.06695557,-0.029907227,-0.023498535,-0.010017395,0.061828613,0.029586792,-0.037109375,-0.008735657,-0.07696533,0.023452759,-0.02696228,0.021087646,0.029403687,-0.014144897,-0.032989502,-0.020309448,0.04928589,-0.050079346,0.056365967,0.042419434,0.042175293,0.09094238,0.022201538,-0.01096344,0.008728027,0.055999756,0.00046491623,-0.0826416,-0.11706543,-0.006351471,-0.021896362,0.037506104,-0.013427734,-0.068237305,-0.00756073,-0.041900635,0.03668213,0.06591797,0.018310547,-0.005065918,-0.022766113,-0.06854248,-0.010375977,0.0041542053,-0.024139404,0.028060913,-0.075927734,0.005153656,0.059692383,0.004611969,0.023406982,-0.037384033,-0.0032310486,-0.0074386597,0.015670776,-0.062683105,-0.06262207,-0.05923462,0.008522034,-0.022659302,0.032470703,0.07562256,0.031188965,0.008232117,-0.012382507,-0.03765869],"created_at":1735875660542,"nchars":201},"36":{"title":"22.블록 이동하기 (🔺)","path":"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714653012,"mtime":1735787375865,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:33","modified":"2025/01/02 12:09:35"},"id":"8231cc476f6fbc72323236bc60d781ab","content":"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) class Solution {\n    public int solution(int[][] board) {\n        int row = board.length;\n        int col = board[0].length;\n        int[][] newBoard = new int[row + 2][col + 2];\n        for(int i = 0; i <= row + 1; i++) {\n            Arrays.fill(newBoard[i], 1);\n        }\n        \n        for(int i = 1; i <= row; i++) {\n            for(int j = 1; j <= col; j++) {\n                newBoard[i][j] = board[i - 1][j - 1];\n            }\n        }\n        \n        Deque<Robot> que = new ArrayDeque<>();\n        Robot start = new Robot(1, 1, 1, 2, 0);\n        que.add(start);\n        \n        Set<Robot> visited = new HashSet<>();\n        visited.add(start);\n        \n        int answer = -1;\n        while(!que.isEmpty()) {\n            Robot cur = que.poll();\n            \n            if(cur.isFinish(row, col)) {\n                answer = cur.dist;\n                break; \n            }\n            \n            List<Robot> nexts = findNexts(cur, newBoard);\n            for(Robot next : nexts) {         \n                boolean isPossible = true;\n                for(Robot v : visited) {\n                    if(v.visited(next)) {\n                        isPossible = false;\n                        break;\n                    }\n                }\n                \n                if(isPossible) {\n                  que.add(next);\n                  visited.add(next);\n                }\n            }\n        }\n        \n        return answer;\n    }\n    \n    private static class Robot {\n        private final int x1;\n        private final int y1;\n        private final int x2;\n        private final int y2;\n        private final int dist;\n        \n        public Robot(int x1, int y1, int x2, int y2, int dist) {\n            this.x1 = x1;\n            this.y1 = y1;\n            this.x2 = x2;\n            this.y2 = y2;\n            this.dist = dist;\n        }\n        \n        public boolean isFinish(int x, int y) {\n            return (x1 == x && y1 == y)\n                || (x2 == x && y2 == y);\n        }\n       \n        public boolean visited(Robot o) {\n            return this.x1 == o.x1\n                && this.y1 == o.y1\n                && this.x2 == o.x2\n                && this.y2 == o.y2;\n        }\n        \n        public boolean isHosizontal() {\n            return this.x1 == this.x2;\n        }\n        \n        public boolean isVertical() {\n            return this.y1 == this.y2;\n        }\n    }\n    \n    private final int[][] DIR = {\n        {1, 0},\n        {0, 1},\n        {-1, 0},\n        {0, -1}\n    };\n    \n    private List<Robot> findNexts(Robot robot, int[][] maps) {\n        List<Robot> result = new ArrayList<>();\n        \n        int x1 = robot.x1;\n        int y1 = robot.y1;\n        int x2 = robot.x2;\n        int y2 = robot.y2;\n        int dist = robot.dist;\n        for(int i = 0; i < 4; i++) {\n            int dx1 = x1 + DIR[i][0];\n            int dy1 = y1 + DIR[i][1];\n            int dx2 = x2 + DIR[i][0];\n            int dy2 = y2 + DIR[i][1];\n            \n            if(maps[dx1][dy1] == 1 || maps[dx2][dy2] == 1) continue;\n            \n            result.add(new Robot(dx1, dy1, dx2, dy2, dist + 1));\n        }\n        \n        if(robot.isHosizontal()) { // 수평 상태 (x축이 같으면)\n            // 위, 아래로 회전 가능(4가지 경우)\n            if(maps[x1 - 1][y1] == 0 && maps[x2 - 1][y2] == 0) {\n                result.add(new Robot(x1 - 1, y1, x1, y1, dist + 1));\n                result.add(new Robot(x2 - 1, y2, x2, y2, dist + 1));\n            }\n            \n            if(maps[x1 + 1][y1] == 0 && maps[x2 + 1][y2] == 0) {\n                result.add(new Robot(x1, y1, x1 + 1, y1, dist + 1));\n                result.add(new Robot(x2, y2, x2 + 1, y2, dist + 1));\n            }\n        }\n        \n        if(robot.isVertical()) { // 수직 상태 (y축이 같으면)\n            // 왼쪽, 오른쪽 회전 가능 (4가지 경우)\n            if(maps[x1][y1 - 1] == 0 && maps[x2][y2 - 1] == 0) {\n                result.add(new Robot(x1, y1 - 1, x1, y1, dist + 1));\n                result.add(new Robot(x2, y2 - 1, x2, y2, dist + 1));","embedding":[0.015068054,-0.030288696,0.018341064,0.15563965,0.11694336,-0.04660034,-0.000032365322,0.0016441345,0.036376953,0.066711426,0.005935669,-0.0116119385,0.0234375,0.016677856,0.0892334,-0.022720337,0.04034424,-0.035064697,-0.058654785,-0.02772522,0.027328491,0.005935669,0.041381836,-0.032684326,0.05709839,0.08618164,-0.075927734,0.101623535,-0.01134491,-0.024871826,0.0496521,-0.080566406,0.028152466,-0.039978027,0.062805176,0.0435791,-0.01953125,-0.020126343,-0.041503906,-0.05569458,0.010726929,-0.0713501,0.0010986328,0.023513794,-0.012001038,0.023422241,0.024749756,0.039642334,-0.09387207,0.010910034,-0.024276733,-0.015457153,0.032440186,-0.093933105,0.01638794,0.00016188622,0.015113831,-0.042907715,-0.04248047,0.09112549,0.055236816,0.07757568,-0.015823364,0.07104492,0.060150146,-0.0713501,0.014854431,-0.01928711,0.021896362,-0.07775879,0.014778137,0.0048675537,-0.014289856,0.01209259,-0.00484848,-0.0079574585,0.0993042,-0.014167786,0.024108887,-0.04949951,-0.045898438,0.030700684,0.05303955,-0.034851074,-0.08898926,0.020111084,-0.0057373047,-0.009094238,0.040161133,0.031402588,0.018753052,0.03164673,-0.10626221,0.00084638596,-0.061401367,0.042999268,-0.11602783,-0.030776978,0.06402588,0.026947021,-0.097351074,-0.02482605,-0.009796143,-0.08441162,-0.07128906,0.020828247,0.0413208,0.025344849,-0.05508423,0.044433594,-0.010719299,0.0007119179,0.016571045,0.02947998,-0.044952393,-0.0076828003,0.068847656,-0.05987549,-0.006416321,-0.016326904,0.020462036,0.03765869,-0.08843994,-0.0039901733,-0.09222412,0.097717285,0.020690918,0.05609131,-0.045562744,0.009025574,-0.017959595,0.028320312,0.0024490356,0.05203247,0.11791992,-0.03616333,0.020080566,0.13085938,-0.05886841,-0.083862305,0.020263672,-0.024597168,-0.0012302399,-0.022506714,-0.038116455,0.04031372,0.054748535,-0.1071167,-0.08538818,-0.085998535,0.019607544,0.021987915,0.049865723,0.12915039,0.01979065,-0.009338379,0.04901123,0.022827148,-0.10974121,0.09240723,-0.030761719,0.055603027,-0.07672119,-0.10601807,0.008255005,-0.027877808,0.060058594,0.023849487,0.07086182,0.028213501,-0.011917114,0.06298828,0.015777588,-0.05847168,0.06585693,-0.019256592,-0.008125305,-0.021331787,-0.016784668,0.07873535,-0.015777588,0.0335083,-0.058776855,0.03250122,-0.008300781,0.044433594,-0.025772095,-0.010520935,-0.064575195,0.017333984,-0.03451538,0.06109619,-0.008811951,-0.09240723,-0.036315918,0.08569336,-0.0031147003,-0.0068244934,0.036590576,-0.026290894,-0.010726929,-0.09289551,0.0077171326,0.07220459,0.06506348,0.0814209,0.005748749,-0.019134521,-0.021743774,0.032440186,0.010894775,0.057250977,-0.05441284,0.044799805,-0.004673004,-0.036499023,-0.06359863,0.023864746,-0.06768799,0.06903076,0.012832642,-0.03527832,0.029907227,-0.026016235,-0.042663574,-0.029754639,0.06854248,-0.14941406,-0.013183594,-0.04031372,0.06237793,-0.010498047,-0.0061798096,0.019241333,0.028167725,-0.02619934,0.0011463165,0.019317627,0.01675415,-0.077941895,0.022476196,-0.035125732,0.031829834,0.066101074,0.0055389404,0.0501709,-0.029449463,0.092163086,-0.016448975,-0.036895752,-0.0031757355,-0.025375366,-0.064941406,-0.064819336,-0.041290283,0.036743164,0.0017271042,0.053466797,-0.030380249,-0.04611206,0.029449463,-0.08129883,0.08001709,-0.03390503,0.049835205,-0.062286377,-0.07714844,0.040527344,0.045684814,0.06112671,0.026290894,0.03125,-0.03161621,0.036865234,-0.019897461,-0.02684021,0.058746338,0.041778564,-0.029266357,-0.064086914,-0.036346436,-0.026290894,0.12817383,0.03692627,0.019866943,-0.0028305054,-0.057495117,0.043029785,-0.0008339882,0.03866577,-0.13122559,-0.0046195984,0.015823364,-0.0345459,0.028808594,0.060058594,0.023757935,0.058563232,-0.030395508,0.02468872,0.011238098,-0.020721436,-0.016036987,-0.027252197,-0.11035156,-0.05267334,0.022140503,-0.0395813,0.0018043518,0.0574646,0.00020420551,0.02268982,0.016601562,0.057739258,0.02798462,0.078186035,0.057525635,-0.042236328,-0.078430176,-0.00052165985,-0.019470215,-0.023223877,0.057617188,0.0051727295,-0.057678223,-0.0010480881,-0.039733887,0.13195801,0.0050239563,0.0021953583,-0.025375366,0.06237793,-0.060668945,-0.011367798,0.034820557,-0.061401367,0.0118255615,0.06640625,-0.02130127,-0.04284668,-0.048980713,0.0034484863,0.008506775,-0.008171082,0.0035190582,-0.14221191,-0.07055664,0.04748535,-0.025115967,0.028869629,-0.00554657,-0.08404541,0.010826111,-0.052947998,-0.059417725,0.03149414,-0.033996582,-0.07904053,0.0019359589,-0.07800293,0.020858765,-0.054504395,0.063964844,-0.082458496,0.011955261,-0.035247803,0.0021762848,0.04031372,0.09429932,-0.05407715,-0.0082092285,-0.002986908,0.0019683838,-0.0016479492,0.012565613,-0.06365967,-0.0022277832,-0.023895264,0.005508423,0.019226074,0.047576904,0.062316895,0.095458984,-0.09991455],"created_at":1735875660542,"nchars":4134},"37":{"title":"22.블록 이동하기 (🔺)","path":"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714653012,"mtime":1735787375865,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:33","modified":"2025/01/02 12:09:35"},"id":"515ae74151efa1ff92687e7d52343ac5","content":"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) result.add(new Robot(x1, y1 - 1, x1, y1, dist + 1));\n                result.add(new Robot(x2, y2 - 1, x2, y2, dist + 1));\n            }\n            \n            if(maps[x1][y1 + 1] == 0 && maps[x2][y2 + 1] == 0) {\n                result.add(new Robot(x1, y1, x1, y1 + 1, dist + 1));\n                result.add(new Robot(x2, y2, x2, y2 + 1, dist + 1));\n            }\n        }\n        \n        return result;\n    }\n}\n```","embedding":[-0.018081665,0.027252197,0.0037651062,0.037475586,0.120788574,0.015266418,0.012550354,0.032470703,0.021850586,0.023162842,-0.0105896,0.014846802,0.029922485,-0.019943237,0.07006836,-0.01360321,0.015571594,0.0026283264,-0.010322571,-0.035339355,0.008728027,0.028518677,-0.03466797,-0.06640625,0.09460449,0.050354004,-0.10827637,0.07720947,0.039978027,0.012123108,0.002008438,-0.04776001,0.012771606,0.0013923645,0.066467285,0.009605408,-0.00440979,-0.02708435,-0.014099121,-0.10522461,0.033050537,-0.04031372,0.044677734,0.007675171,-0.018157959,-0.042816162,-0.006893158,0.015304565,-0.027069092,-0.05130005,0.03265381,-0.04473877,0.038116455,-0.08502197,-0.013267517,-0.0793457,0.0037994385,-0.02281189,-0.019836426,0.06347656,0.029052734,0.080322266,-0.035980225,0.012016296,0.07556152,-0.05404663,0.04574585,-0.066101074,0.033935547,-0.08270264,0.010231018,-0.015670776,-0.0005674362,-0.012023926,-0.024719238,-0.03363037,0.0770874,0.010482788,0.037139893,-0.0395813,-0.043914795,0.00007671118,-0.009590149,-0.02671814,-0.07531738,0.064941406,0.010116577,-0.02998352,0.040924072,0.055358887,0.05432129,0.027496338,-0.105163574,-0.017318726,-0.049621582,0.05114746,-0.044433594,-0.015449524,0.031082153,-0.042022705,-0.043914795,-0.07269287,0.0014286041,-0.066223145,-0.026306152,0.060516357,-0.004837036,-0.024520874,-0.07208252,0.09832764,-0.0048332214,0.060272217,0.03250122,0.007511139,-0.0018186569,0.010688782,0.12030029,-0.054840088,-0.005756378,-0.025650024,0.03729248,0.03555298,-0.077819824,-0.02192688,-0.0287323,0.04522705,0.059448242,0.053253174,-0.09020996,0.016204834,0.021743774,0.010559082,-0.05392456,0.103027344,0.06842041,0.012145996,0.019363403,0.08666992,-0.056549072,-0.08691406,0.058013916,-0.02142334,-0.020935059,-0.012893677,-0.038848877,0.03527832,0.12609863,-0.041748047,-0.029769897,-0.054626465,0.052246094,-0.021194458,0.036254883,0.11340332,0.011634827,-0.048095703,0.017868042,0.006504059,-0.06793213,0.101989746,-0.028335571,0.041107178,-0.06549072,-0.08905029,0.033843994,-0.09881592,0.072631836,0.042266846,0.031051636,0.008934021,-0.054504395,0.076171875,0.05441284,-0.026733398,0.059326172,0.050628662,-0.027069092,-0.030227661,0.060150146,0.07165527,-0.04031372,0.07006836,-0.12164307,0.050445557,-0.010398865,0.04522705,0.03149414,-0.0066375732,-0.032409668,0.015159607,0.030670166,0.052459717,-0.039733887,-0.052581787,-0.08526611,0.11828613,-0.03250122,-0.004524231,0.046539307,-0.001200676,0.0017309189,-0.087890625,-0.0012388229,0.103393555,0.06237793,0.007835388,-0.031188965,0.008903503,0.016555786,-0.0446167,-0.022460938,0.08758545,-0.03729248,-0.033325195,-0.08355713,0.013839722,-0.06384277,0.024154663,-0.024215698,0.11450195,0.018035889,-0.02180481,-0.04751587,-0.085876465,-0.026168823,0.02810669,0.07897949,-0.14318848,-0.051208496,-0.046081543,0.018722534,0.00034236908,-0.022872925,0.05441284,0.0051841736,-0.06317139,0.07720947,0.032287598,0.042510986,-0.0748291,0.028259277,-0.081726074,0.058898926,-0.0018701553,-0.0015697479,-0.02923584,-0.0680542,0.06781006,-0.010185242,-0.023284912,-0.052703857,-0.0027751923,-0.05883789,-0.09613037,-0.01550293,-0.03729248,-0.0022068024,0.006855011,-0.0362854,-0.057128906,-0.01928711,-0.012718201,0.09161377,0.017044067,-0.0025138855,-0.050811768,-0.099487305,0.05392456,0.03378296,-0.005126953,-0.0070533752,0.046783447,-0.010482788,-0.033966064,0.012077332,-0.04736328,0.057037354,0.07122803,-0.037597656,0.049987793,-0.02319336,-0.050811768,0.0859375,0.08062744,0.02041626,0.0025348663,-0.0071029663,0.044158936,0.015319824,0.0010929108,-0.10601807,-0.0154800415,-0.015853882,-0.057861328,0.12963867,0.039367676,0.061340332,0.017730713,-0.09094238,0.032226562,-0.0146102905,-0.058441162,-0.0015630722,-0.03112793,-0.1427002,-0.055755615,0.07409668,-0.044128418,0.015701294,0.071777344,0.048309326,0.00182724,-0.044311523,0.06390381,0.039916992,0.08325195,0.07043457,-0.017913818,-0.06817627,-0.039489746,-0.0020503998,-0.020584106,0.07043457,0.0024871826,-0.051940918,-0.03164673,-0.054992676,0.08502197,-0.020095825,-0.0073394775,-0.00036120415,0.0041236877,0.014976501,0.010856628,0.0063934326,-0.066711426,0.07409668,0.04638672,0.051879883,0.000008761883,-0.03375244,-0.025787354,-0.04849243,0.019302368,0.023468018,-0.13244629,-0.07940674,0.007232666,-0.025665283,0.043914795,-0.017959595,-0.042419434,0.016464233,-0.05532837,-0.0007557869,0.050079346,-0.02909851,-0.11834717,0.024307251,-0.033355713,-0.000521183,-0.011520386,0.064575195,-0.035064697,-0.031982422,-0.02168274,0.033050537,0.00087833405,0.078186035,-0.056793213,0.0045051575,-0.031677246,0.012763977,-0.019729614,-0.010032654,-0.09564209,0.04876709,-0.043945312,-0.027786255,0.039855957,0.05999756,0.026794434,0.073913574,-0.054626465],"created_at":1735875660543,"nchars":561},"38":{"title":"21.인구 이동","path":"1. Project/이것이 취업을 위한 코딩테스트다/21.인구 이동.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714647765,"mtime":1735739934088,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:27","modified":"2025/01/01 22:58:54"},"id":"68760701d145a45add658a5b60e81709","content":"\n\nNOTE TITLE: [[21.인구 이동]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:27\",\"modified\":\"2025/01/01 22:58:54\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/16234\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이\n- BFS (깊이 우선 탐색)\n- 문제 요구사항과 같이 인구 차이가 `L`이상 `R` 이하 인 경우 두 나라는 공유하는 국경선을 하루 연다 (**연합**)\n- `groupNo` 가 `N * N` 과 동일하면 종료하고, 그 전까지는 그룹별로 평균을 구해 값을 갱신한다\n- `BFS` 탐색시\n\t- `{java}List<int[]> union` : 연합 좌표 정보 기록 \n\t- `{java} int sum` : 연합 총 인구 수 합산","embedding":[0.04699707,0.0184021,0.0022201538,0.04598999,0.09106445,0.00029921532,-0.018569946,0.11187744,0.012893677,0.05630493,0.072387695,0.04043579,-0.08557129,0.03062439,0.014533997,0.0079574585,0.033966064,-0.008636475,0.041992188,-0.021209717,-0.08215332,0.05392456,-0.16491699,0.03125,0.07165527,0.00472641,-0.07861328,0.16699219,-0.012870789,0.008979797,-0.064819336,-0.07531738,-0.08099365,-0.057495117,-0.004070282,0.02267456,0.060058594,-0.0015487671,0.0048675537,-0.11175537,-0.013122559,0.042236328,0.040496826,0.0031719208,-0.040618896,0.029266357,0.010520935,0.031036377,-0.028198242,-0.023330688,0.037200928,-0.0014467239,0.025024414,-0.07922363,-0.009643555,-0.0030212402,0.0423584,-0.04888916,-0.066345215,0.048950195,0.023040771,0.05810547,-0.03567505,0.043884277,0.021102905,-0.18920898,-0.0031967163,-0.07312012,0.085876465,-0.005115509,-0.054351807,-0.001917839,-0.05154419,-0.010269165,0.020187378,0.019134521,0.045928955,-0.034423828,0.011924744,0.010360718,-0.014167786,-0.042144775,0.032043457,-0.051696777,-0.039031982,-0.02168274,-0.020645142,-0.0043563843,0.018035889,0.06567383,0.033325195,0.008476257,-0.02746582,-0.027816772,0.04776001,0.035888672,0.0116119385,0.04925537,0.024871826,0.06781006,-0.010345459,-0.053375244,0.058288574,-0.05419922,-0.0496521,0.07928467,-0.0039901733,-0.061553955,-0.015220642,0.097839355,-0.053375244,0.0054016113,-0.104003906,0.0070724487,0.03338623,0.04159546,0.140625,-0.075805664,-0.024917603,-0.062072754,-0.0038166046,0.036132812,-0.08538818,0.022369385,-0.009109497,0.034484863,0.003921509,-0.012046814,-0.01373291,0.0013132095,0.084350586,0.049346924,-0.0446167,0.07531738,0.07519531,0.02255249,0.0149383545,0.10675049,0.0035552979,-0.07702637,0.03414917,0.024032593,-0.083862305,0.0018024445,-0.041656494,0.06347656,0.042053223,-0.027374268,-0.005844116,-0.10131836,-0.0036449432,-0.004180908,0.022888184,0.10296631,-0.055145264,-0.0056533813,0.051361084,0.017791748,-0.019622803,0.06707764,-0.045318604,-0.00048661232,-0.103149414,-0.0904541,0.13916016,-0.12359619,-0.010032654,0.06768799,0.036224365,-0.0317688,-0.026504517,0.12792969,0.0032253265,0.017547607,0.03640747,0.09454346,0.055236816,-0.007785797,0.08532715,0.020721436,-0.117492676,-0.059509277,-0.06903076,-0.04699707,0.028701782,0.022125244,-0.0051116943,-0.01663208,-0.025543213,-0.0063171387,-0.01651001,0.1026001,-0.055755615,-0.061462402,-0.003370285,0.060668945,-0.0071105957,-0.009788513,0.061065674,0.016952515,0.0008420944,-0.043548584,-0.026824951,0.085632324,-0.014892578,0.04486084,0.021896362,-0.00207901,-0.0385437,0.001074791,0.035308838,0.05593872,0.029724121,-0.028121948,0.058288574,-0.044799805,-0.06536865,0.0050201416,-0.07519531,0.076660156,-0.01524353,-0.023880005,-0.049804688,-0.054229736,-0.064453125,-0.019546509,0.047790527,-0.10559082,-0.021194458,-0.010719299,0.05618286,-0.01449585,0.0151901245,-0.008674622,0.0054740906,0.0043945312,0.081848145,-0.046966553,-0.060150146,-0.06573486,-0.026550293,0.02330017,0.11553955,0.0020256042,-0.11553955,-0.02722168,0.028915405,0.02508545,0.015960693,-0.027374268,-0.08892822,-0.01789856,-0.10168457,-0.11187744,-0.015014648,-0.035369873,-0.032440186,0.030731201,0.005962372,-0.046569824,-0.0690918,0.06573486,0.097229004,-0.0064582825,0.0012245178,-0.041137695,-0.025390625,-0.06689453,-0.0065078735,-0.018173218,0.05105591,-0.028427124,0.019485474,-0.028121948,-0.013633728,-0.033111572,0.01007843,0.049316406,-0.046447754,0.03857422,0.0013427734,-0.1295166,0.03314209,0.017227173,0.012863159,-0.017440796,0.0037670135,0.05593872,0.035186768,0.03842163,-0.036834717,0.06652832,-0.031280518,-0.027664185,0.07183838,-0.010971069,0.021606445,-0.010269165,-0.07928467,0.0010490417,0.081726074,-0.015991211,0.002122879,-0.005771637,-0.007827759,0.026000977,0.12219238,-0.042266846,-0.0053977966,0.005443573,-0.026809692,-0.014167786,0.01663208,0.04901123,0.051574707,0.08880615,0.06713867,0.0015983582,-0.056793213,-0.0037765503,-0.04107666,0.006549835,0.012763977,-0.030227661,-0.011772156,-0.014907837,-0.047912598,0.028640747,-0.02861023,-0.013839722,0.056854248,0.010910034,-0.03363037,-0.09399414,-0.061676025,-0.027770996,-0.06665039,-0.027374268,0.045776367,0.026855469,0.070251465,-0.026229858,0.0035495758,0.032440186,0.020095825,-0.044067383,-0.070617676,-0.033294678,-0.048339844,0.022766113,-0.022155762,-0.07281494,0.07293701,-0.038269043,0.056365967,0.03878784,0.0703125,0.038848877,-0.022994995,0.0015106201,0.016845703,-0.018814087,-0.025924683,-0.023727417,-0.03933716,-0.055145264,0.0692749,-0.043426514,0.061065674,0.0037136078,-0.006942749,0.018356323,0.017120361,-0.0047187805,-0.009681702,-0.044708252,0.01701355,0.031829834,0.01576233,0.03756714,0.009315491,-0.0061149597,0.062072754,0.018753052],"created_at":1735875660543,"nchars":448},"39":{"title":"21.인구 이동","path":"1. Project/이것이 취업을 위한 코딩테스트다/21.인구 이동.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714647765,"mtime":1735739934088,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:27","modified":"2025/01/01 22:58:54"},"id":"6d1fc0583ca584a225bd01072fcd1b16","content":"\n\nNOTE TITLE: [[21.인구 이동]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:27\",\"modified\":\"2025/01/01 22:58:54\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N, L, R;\n    private static int[][] country;\n    \n    private static void input() {\n        N = inputProcessor.nextInt();\n        L = inputProcessor.nextInt();\n        R = inputProcessor.nextInt();\n\n        country = new int[N + 1][N + 1];\n        for(int i = 1; i <= N; i++) {\n            for(int j = 1; j <= N; j++) {\n                country[i][j] = inputProcessor.nextInt();\n            }\n        }\n    }\n\n    private static void pro() {\n        int result = 0;\n        while(true) {\n            int groupNo = 0;\n            int[][] groups = new int[N + 1][N + 1];\n            for(int i = 1; i <= N; i++) {\n                for(int j = 1; j <= N; j++) {\n                    if(groups[i][j] == 0) {\n                        groupNo += 1;\n                        bfs(i, j, groupNo, groups);\n                    }\n                }\n            }\n\n            if(groupNo == N * N) break;\n\n            result += 1;\n        }\n\n        // 결과 출력\n        sb.append(result);\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n    \n    private static void bfs(int startX, int startY, int groupNo, int[][] groups) {\n        Deque<int[]> que = new ArrayDeque<>();\n        que.add(new int[] {startX, startY});\n\n        groups[startX][startY] = groupNo;\n\n        List<int[]> union = new ArrayList<>();\n        union.add(new int[] {startX, startY});\n\n        int sum = country[startX][startY];\n        while(!que.isEmpty()) {\n            int[] cur = que.poll();\n            int x = cur[0];\n            int y = cur[1];\n\n            for(int i = 0; i < 4; i++) {\n                int dx = x + DIR[i][0];\n                int dy = y + DIR[i][1];\n\n                if(dx < 1 || dy < 1 || dx > N || dy > N) continue;\n                if(groups[dx][dy] != 0) continue;\n\n                int diff = Math.abs(country[x][y] - country[dx][dy]);\n                if(L <= diff && diff <= R) {\n                    int[] next = new int[] {dx, dy};\n                    que.add(next);\n\n                    union.add(next);\n                    sum += country[dx][dy];\n                    groups[dx][dy] = groupNo;\n                }\n            }\n        }\n\n        if(union.size() == 1) return;\n\n        int avg = sum / union.size();\n        for(int[] u : union) {\n            country[u[0]][u[1]] = avg;\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }","embedding":[0.0047416687,-0.022567749,0.023101807,0.10046387,0.049346924,-0.027679443,0.023727417,0.07647705,-0.008773804,0.07727051,0.04019165,0.014129639,-0.0016021729,0.000500679,0.10510254,0.036193848,0.0065460205,0.009864807,-0.009788513,-0.024627686,0.026351929,0.034332275,-0.06951904,0.018981934,0.05697632,0.031677246,-0.045928955,0.11303711,-0.004688263,0.0011281967,-0.07922363,-0.058258057,-0.005077362,-0.0073776245,0.0513916,0.0657959,0.05206299,-0.0057411194,-0.013442993,-0.125,0.059448242,-0.038391113,0.034484863,0.02722168,-0.035949707,0.002691269,0.044311523,0.04559326,-0.05621338,0.025650024,-0.027877808,-0.012260437,0.07330322,-0.07757568,-0.028167725,0.01965332,0.015434265,-0.059783936,-0.10101318,0.06536865,0.09625244,0.061798096,-0.040039062,0.04333496,0.03491211,-0.15734863,-0.020950317,-0.052764893,0.05670166,-0.015731812,0.020751953,-0.00605011,-0.06173706,-0.021774292,0.02772522,0.013916016,0.046539307,-0.06512451,0.078063965,-0.0141067505,-0.08416748,-0.042022705,-0.0065078735,-0.017227173,-0.06951904,0.017654419,0.0038909912,-0.011871338,0.054748535,0.04019165,0.024734497,0.035369873,-0.016601562,-0.0079574585,-0.057006836,0.07299805,-0.008811951,0.004245758,0.093322754,0.031829834,-0.013137817,-0.094055176,-0.010398865,-0.035980225,-0.07110596,0.031951904,0.011161804,-0.08105469,-0.05569458,0.060821533,-0.105773926,0.005958557,-0.018875122,0.035247803,-0.0046539307,-0.04736328,0.041015625,-0.09283447,0.004142761,-0.014381409,0.008995056,0.009849548,-0.07861328,0.010765076,-0.08251953,0.06585693,0.08972168,0.055999756,-0.04611206,-0.02658081,0.010826111,0.04360962,-0.024810791,0.09490967,0.06713867,-0.017410278,0.015213013,0.033569336,-0.040618896,-0.07702637,0.042419434,-0.035980225,-0.016921997,0.020248413,-0.0357666,0.0859375,-0.020492554,-0.08880615,0.015640259,-0.05444336,0.006378174,0.0725708,0.033599854,0.06695557,-0.0017528534,-0.029067993,0.049468994,0.022888184,-0.089782715,0.09851074,-0.042907715,0.078430176,-0.081970215,-0.080078125,0.061065674,-0.025405884,0.062561035,-0.0035705566,0.036071777,0.00868988,-0.027053833,0.1071167,-0.0068626404,-0.0046806335,-0.028656006,0.090148926,-0.03677368,0.007381439,0.053619385,0.052490234,-0.04031372,0.015563965,-0.056793213,-0.016998291,0.016342163,0.055786133,-0.005874634,-0.0035495758,0.07897949,-0.008644104,-0.056640625,0.06335449,-0.014709473,-0.085632324,-0.077819824,0.088256836,-0.05230713,-0.023040771,0.07800293,-0.023468018,-0.0075187683,-0.0680542,0.01638794,0.053375244,0.054656982,0.055999756,-0.044403076,0.0046844482,-0.02973938,0.05029297,-0.007575989,0.029754639,-0.016174316,0.00705719,0.026245117,0.015808105,-0.021713257,-0.0022411346,-0.058044434,0.12731934,0.04660034,-0.04840088,-0.058135986,-0.034942627,-0.103759766,-0.040740967,0.05831909,-0.14233398,-0.08380127,-0.02154541,0.088012695,0.08093262,-0.017837524,-0.033569336,-0.015014648,0.035858154,0.058441162,0.023071289,-0.017242432,-0.046081543,0.061065674,-0.0340271,0.1027832,-0.01689148,-0.0881958,-0.011924744,-0.06829834,0.06591797,0.04144287,0.012489319,-0.08666992,-0.081848145,-0.025650024,-0.08685303,-0.090270996,0.032226562,-0.031555176,0.028717041,-0.060455322,-0.042663574,-0.017944336,0.05722046,0.06726074,-0.015045166,-0.004032135,-0.044555664,-0.048919678,-0.04385376,-0.018112183,-0.0025405884,0.055847168,0.028045654,0.026687622,0.027496338,0.06414795,-0.029220581,0.02470398,0.032409668,0.03918457,0.014808655,0.028884888,-0.040527344,0.095214844,0.066101074,-0.008506775,0.0021438599,-0.027816772,0.036590576,-0.017501831,0.01852417,-0.13745117,-0.024139404,-0.027267456,-0.027893066,0.051757812,0.00063943863,0.06549072,0.053955078,-0.01550293,0.02053833,0.056640625,-0.037628174,0.04937744,-0.0059776306,-0.009353638,0.0027256012,-0.015335083,-0.011451721,0.018630981,0.060150146,-0.046691895,-0.027526855,0.019851685,0.1048584,0.024841309,0.029678345,0.011672974,0.016815186,-0.085754395,-0.000521183,-0.06921387,-0.028884888,0.012504578,0.017120361,0.022201538,-0.049591064,-0.045410156,0.059906006,0.011817932,-0.05496216,-0.038085938,0.021453857,-0.057434082,-0.03717041,0.0149002075,-0.048706055,-0.049713135,0.009010315,0.027648926,0.025985718,0.10620117,0.0062294006,-0.020553589,0.060272217,0.029663086,-0.1026001,-0.12561035,0.023239136,-0.018569946,0.036346436,-0.0287323,-0.10723877,0.03805542,-0.052703857,0.02519226,0.027786255,-0.044555664,-0.03074646,-0.017364502,-0.040283203,0.03955078,-0.097473145,-0.028182983,-0.117370605,-0.012016296,-0.03390503,0.052947998,-0.017654419,0.031341553,0.034088135,0.033477783,0.045410156,0.033081055,-0.020385742,-0.043548584,-0.060943604,0.002986908,0.04888916,0.031402588,0.011634827,-0.05569458,0.066101074,0.021118164,-0.03616333],"created_at":1735875660543,"nchars":4051},"40":{"title":"21.인구 이동","path":"1. Project/이것이 취업을 위한 코딩테스트다/21.인구 이동.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714647765,"mtime":1735739934088,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:27","modified":"2025/01/01 22:58:54"},"id":"4803ad84843e046af3b33d47d032359b","content":"\n\nNOTE TITLE: [[21.인구 이동]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:27\",\"modified\":\"2025/01/01 22:58:54\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n\n```","embedding":[0.020980835,0.038391113,0.0335083,0.040771484,0.044677734,-0.020248413,-0.084350586,0.10046387,0.052337646,0.032440186,0.0031871796,0.01739502,0.027999878,0.022750854,0.05596924,0.039733887,0.026306152,0.011131287,0.00094795227,-0.0063591003,-0.05822754,0.09790039,-0.11260986,-0.024032593,0.101257324,0.062286377,-0.086120605,0.15551758,0.015625,0.005268097,-0.036224365,-0.020446777,-0.02519226,0.022369385,0.04260254,0.032226562,0.053771973,-0.008666992,0.003709793,-0.109436035,-0.016860962,0.0037231445,0.029953003,-0.010726929,0.035736084,-0.019805908,-0.017547607,0.04650879,-0.003156662,-0.07183838,-0.0030097961,0.024017334,0.03552246,-0.093688965,0.02734375,-0.012123108,0.036499023,-0.06628418,-0.07574463,0.015991211,0.06451416,0.066467285,-0.015335083,0.02658081,0.039489746,-0.092041016,-0.016983032,-0.011749268,0.046539307,-0.012496948,0.018035889,0.000323534,-0.029403687,-0.03552246,0.048187256,0.0050086975,0.055511475,-0.07434082,-0.018371582,0.0054969788,-0.07019043,-0.0625,0.0018615723,-0.003900528,-0.082092285,0.05291748,0.009933472,-0.055114746,0.018615723,0.09490967,0.031463623,0.0758667,0.019927979,-0.01108551,-0.008010864,0.06652832,0.0011587143,0.00009661913,0.045959473,0.008560181,-0.008666992,-0.07086182,0.01512146,-0.06085205,-0.05279541,0.029342651,-0.02861023,-0.05895996,-0.015670776,0.036499023,-0.056396484,0.034240723,-0.08081055,0.05026245,0.025604248,-0.006313324,0.07611084,-0.107910156,-0.026046753,-0.11053467,0.021560669,0.048187256,-0.06793213,-0.018920898,-0.02746582,0.045013428,0.031082153,0.053497314,-0.05227661,-0.016616821,0.055419922,0.00737381,-0.05029297,0.059020996,0.08721924,-0.024383545,0.009292603,0.101501465,-0.03579712,-0.08520508,0.00021278858,-0.017944336,-0.0970459,-0.008255005,-0.06201172,0.0814209,0.021057129,-0.047332764,-0.003583908,-0.124938965,0.0018911362,-0.00041556358,0.018615723,0.117126465,-0.020828247,-0.027328491,0.037902832,0.01852417,-0.06616211,0.09686279,-0.057281494,-0.01235199,-0.09210205,-0.04095459,0.03378296,-0.08459473,0.02671814,0.03704834,0.012382507,0.023269653,-0.06829834,0.10986328,-0.005054474,0.028060913,0.010246277,0.057373047,-0.006023407,-0.007724762,0.04171753,0.0592041,-0.09576416,-0.0071105957,-0.093444824,0.010299683,0.029907227,0.062347412,-0.011688232,0.008003235,-0.020629883,-0.044677734,-0.027511597,0.10772705,-0.04940796,0.021438599,-0.07354736,0.09509277,-0.028518677,-0.027267456,0.07116699,0.028869629,0.019363403,-0.051574707,-0.011711121,0.087524414,0.016189575,0.023254395,-0.04812622,-0.026535034,0.0075531006,0.021057129,-0.0115737915,0.03338623,-0.015419006,-0.0024585724,-0.027267456,-0.0035629272,-0.107788086,0.018508911,-0.0011615753,0.056427002,0.039154053,-0.011924744,-0.1348877,-0.026000977,-0.11517334,0.029891968,0.046844482,-0.16040039,-0.001074791,-0.024032593,0.06488037,-0.016342163,0.047729492,0.012649536,-0.0077400208,-0.044433594,0.033355713,-0.022735596,-0.0129776,-0.063964844,0.046203613,-0.05307007,0.055725098,0.002210617,-0.05529785,-0.03253174,0.000582695,0.078308105,0.0062789917,-0.037750244,-0.13049316,-0.056762695,-0.07141113,-0.0793457,-0.02607727,-0.072143555,-0.006137848,0.05130005,-0.027694702,-0.060394287,-0.03616333,0.043151855,0.16491699,0.030822754,0.058532715,-0.01878357,-0.03540039,-0.02079773,-0.04800415,-0.03390503,0.046447754,0.022460938,0.003025055,0.021118164,0.01084137,-0.014221191,0.0038318634,0.032226562,-0.057159424,0.04928589,-0.0077705383,-0.12365723,0.08343506,0.072143555,0.008995056,0.04940796,-0.021575928,0.006729126,0.013381958,-0.061187744,-0.0793457,0.0040283203,0.0029945374,-0.037261963,0.08306885,0.047912598,0.030380249,-0.0104904175,-0.05493164,-0.012390137,0.020690918,-0.052215576,0.03717041,-0.009552002,-0.06628418,-0.040618896,0.03491211,-0.062561035,0.03967285,0.010879517,0.023086548,-0.04824829,-0.0023593903,0.10241699,0.058166504,0.11193848,-0.0019721985,0.009597778,-0.01914978,-0.0014791489,-0.05911255,0.0064888,0.056915283,0.011054993,-0.016906738,-0.005645752,-0.056884766,0.04724121,-0.061828613,-0.023544312,0.052124023,0.05633545,-0.0018625259,-0.011039734,-0.022338867,-0.050567627,-0.0060310364,0.040527344,0.06402588,0.07922363,0.03111267,0.05441284,-0.012504578,0.059509277,0.0031967163,-0.101379395,-0.08807373,-0.02508545,-0.048065186,0.019546509,0.012542725,-0.06304932,0.0020484924,-0.07952881,0.03375244,0.078552246,-0.006298065,-0.05432129,0.0418396,-0.062164307,0.0440979,-0.07550049,0.005710602,0.0184021,-0.029693604,-0.0413208,0.07861328,-0.00459671,-0.0008149147,0.0061073303,0.048706055,0.02583313,0.028701782,-0.04486084,-0.03173828,-0.036712646,-0.0018100739,-0.0062332153,0.062683105,0.057037354,0.039733887,0.021575928,0.02267456,-0.019454956],"created_at":1735875660543,"nchars":351},"41":{"title":"20.감시 피하기","path":"1. Project/이것이 취업을 위한 코딩테스트다/20.감시 피하기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714644214,"mtime":1735738327318,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:24","modified":"2025/01/01 22:32:07"},"id":"bf70ec7050d709f367edaf3c865b8597","content":"\n\nNOTE TITLE: [[20.감시 피하기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:24\",\"modified\":\"2025/01/01 22:32:07\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18428\n\n### 시간 복잡도 \n- 벽을 3개 세우는 조합 : `O(36C3)`\n- 선생님이 탐색하는 시간복잡도 : `O(V + E)`\n\t- V = 최대 36개, E는 `4(상하좌우) * 36`\n\n### 풀이\n- 백트래킹, BFS\n- 초기화 시 빈공간(`X`)과 선생님(`T`) 좌표 정보를 기록한다\n- 백트래킹으로 벽을 3개 세우고, BFS 수행하여 선생님이 상하좌우 이동하여 학생(`S`)를 찾는지 확인\n\t- 학생을 찾는 경우 **false** 반환\n\t- 학생을 못 찾는 경우 **true** 반화","embedding":[0.055358887,0.0041503906,0.033325195,0.04208374,0.12890625,-0.024902344,-0.097229004,0.04449463,0.07647705,0.037353516,-0.00844574,0.0004940033,0.08630371,-0.040527344,0.017166138,0.022994995,0.029266357,0.0022830963,-0.07763672,-0.019729614,0.042388916,-0.06652832,-0.091430664,0.022903442,0.041046143,0.0024604797,-0.05996704,0.042114258,0.04373169,0.007396698,0.025970459,-0.019378662,-0.07873535,-0.15026855,0.0099487305,0.008911133,0.054840088,-0.0033836365,0.0037136078,-0.07836914,0.033935547,0.00049209595,0.086364746,0.074645996,0.027999878,0.023529053,-0.00217247,0.039520264,-0.06402588,0.004512787,-0.02178955,-0.058532715,0.068481445,-0.09106445,0.019256592,-0.014190674,0.003408432,-0.026260376,-0.029724121,0.033447266,0.080444336,0.020401001,-0.09436035,0.05709839,0.088378906,-0.042419434,-0.044525146,0.01890564,0.060150146,-0.10888672,-0.051605225,0.0013875961,-0.0050621033,-0.036895752,-0.01826477,0.032928467,0.066833496,-0.008399963,0.010292053,-0.0107803345,0.0090408325,-0.04724121,-0.014007568,-0.02861023,-0.004043579,-0.0013694763,-0.024780273,-0.042999268,-0.03262329,0.018066406,0.03704834,0.03149414,0.0135650635,-0.09899902,0.025665283,0.040405273,0.029052734,0.005077362,0.002155304,0.031280518,-0.07910156,-0.054840088,-0.02659607,-0.07147217,-0.01876831,0.09436035,0.04776001,0.006385803,0.079956055,0.002450943,-0.082458496,0.022949219,-0.0066490173,0.018661499,-0.011756897,0.083984375,0.10040283,-0.047790527,0.015426636,-0.030212402,-0.05810547,0.024230957,-0.03878784,0.011329651,0.0021572113,0.036071777,0.06100464,0.040618896,-0.038360596,0.095336914,0.07421875,0.010597229,-0.040222168,0.07385254,0.13366699,0.018447876,-0.02760315,0.1463623,-0.06842041,0.013069153,0.02180481,0.026824951,-0.03326416,-0.034179688,0.022949219,0.030838013,0.012008667,-0.09429932,-0.04623413,-0.08178711,0.052825928,-0.006023407,0.07940674,0.095703125,-0.06665039,-0.06317139,0.04736328,-0.02798462,0.059692383,0.10650635,-0.11468506,-0.012489319,-0.075805664,-0.09301758,0.018676758,-0.12463379,0.010360718,0.095825195,0.036132812,-0.01663208,0.014533997,0.07800293,-0.044891357,0.033294678,0.019866943,0.036987305,-0.04147339,0.011856079,-0.014625549,0.050476074,0.008895874,0.019241333,-0.09100342,-0.022979736,-0.010848999,0.045043945,0.00027108192,-0.10424805,0.068603516,-0.0036964417,-0.050872803,0.034362793,-0.012672424,-0.036895752,0.04498291,0.030471802,-0.048461914,-0.0049209595,0.076660156,-0.06549072,-0.052520752,-0.07171631,0.020980835,0.114990234,-0.03201294,0.11883545,-0.025466919,-0.03149414,-0.0143966675,-0.059631348,-0.013832092,0.029205322,0.034362793,0.0050811768,-0.02859497,0.009292603,-0.040130615,0.041809082,0.003293991,0.12939453,0.016830444,-0.043395996,-0.09698486,-0.051330566,-0.03353882,-0.010597229,0.13427734,-0.088256836,0.006542206,0.005115509,0.039093018,-0.003780365,0.019088745,-0.06958008,0.06829834,-0.04159546,0.057647705,-0.026931763,-0.10266113,-0.031036377,-0.045776367,0.052459717,0.083496094,-0.009521484,-0.031799316,-0.06732178,0.024429321,0.07501221,-0.03286743,-0.000120699406,-0.022247314,-0.015007019,-0.038024902,-0.080078125,-0.0027198792,0.040527344,0.040527344,0.04208374,-0.024093628,-0.015022278,-0.016204834,0.05331421,0.07067871,-0.044769287,0.057739258,-0.047058105,-0.070739746,0.021270752,-0.059417725,0.011016846,0.02229309,-0.012313843,-0.041137695,-0.0058288574,-0.083618164,-0.04272461,0.09106445,0.02960205,0.01184845,-0.012817383,0.03967285,-0.029022217,0.10723877,0.06427002,0.024841309,-0.027801514,0.01864624,0.07299805,0.041015625,0.01322937,-0.088134766,-0.0074539185,0.0103302,0.023391724,0.05255127,-0.011260986,0.019805908,-0.03024292,-0.06652832,-0.025146484,0.05895996,-0.07269287,0.0010004044,-0.0098724365,-0.056365967,-0.033111572,0.025375366,0.036987305,-0.009094238,0.07489014,0.008598328,-0.0020542145,-0.017730713,0.047180176,0.028823853,0.034484863,0.059692383,0.02116394,-0.121276855,0.016113281,-0.034057617,0.006454468,0.012077332,-0.052459717,0.032287598,-0.00046229362,-0.07366943,0.055664062,-0.018722534,-0.04043579,-0.00024747849,-0.003293991,-0.033355713,-0.061340332,-0.070617676,-0.059570312,-0.039245605,-0.032073975,0.043151855,-0.010467529,0.022460938,-0.012588501,-0.003320694,-0.03475952,-0.056427002,-0.019729614,-0.055358887,0.028793335,-0.025024414,-0.020935059,0.012451172,-0.094055176,0.08465576,-0.0066184998,-0.035339355,0.02230835,-0.055358887,-0.038635254,0.0029449463,0.017868042,0.032684326,-0.03579712,0.046173096,-0.017196655,-0.08660889,-0.0524292,0.008010864,0.012886047,0.031829834,0.04650879,0.05230713,-0.010620117,0.008102417,-0.017868042,-0.024810791,-0.057495117,0.017730713,-0.015701294,-0.038909912,0.01927185,0.12200928,-0.02520752,0.088256836,-0.01374054],"created_at":1735875660544,"nchars":451},"42":{"title":"20.감시 피하기","path":"1. Project/이것이 취업을 위한 코딩테스트다/20.감시 피하기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714644214,"mtime":1735738327318,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:24","modified":"2025/01/01 22:32:07"},"id":"163113acc2627c112602577a83b6edac","content":"\n\nNOTE TITLE: [[20.감시 피하기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:24\",\"modified\":\"2025/01/01 22:32:07\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n     private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N;\n    private static String[][] school;\n    private static List<Blank> blanks;\n    private static List<Teacher> teachers;\n    private static boolean result;\n\n    private static void input() {\n        N = inputProcessor.nextInt();\n        school = new String[N + 1][N + 1];\n\n        blanks = new ArrayList<>();\n        teachers = new ArrayList<>();\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= N; j++) {\n                String v = inputProcessor.next();\n                school[i][j] = v;\n\n                if (\"T\".equals(v)) {\n                    teachers.add(new Teacher(i, j, -1));\n                } else if (\"X\".equals(v)) {\n                    blanks.add(new Blank(i, j));\n                }\n            }\n        }\n    }\n\n    private static class Blank {\n        private final int x;\n        private final int y;\n\n        public Blank(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static class Teacher {\n        private final int x;\n        private final int y;\n        private final int dir;\n\n        public Teacher(int x, int y, int dir) {\n            this.x = x;\n            this.y = y;\n            this.dir = dir;\n        }\n    }\n\n    private static void pro() {\n        createDummy(0, 0);\n        sb.append(result ? \"YES\" : \"NO\");\n    }\n\n    private static void createDummy(int idx, int cnt) {\n        if (result) return;\n        if (cnt == 3) {\n            result = survive();\n            return;\n        }\n\n        if (idx >= blanks.size()) return;\n\n        Blank blank = blanks.get(idx);\n        school[blank.x][blank.y] = \"O\";\n        createDummy(idx + 1, cnt + 1);\n\n        school[blank.x][blank.y] = \"X\";\n        createDummy(idx + 1, cnt);\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n\n    private static boolean survive() {\n        Deque<Teacher> queue = new ArrayDeque<>();\n        for (Teacher t : teachers) {\n            for (int i = 0; i < 4; i++) {\n                queue.add(new Teacher(t.x, t.y, i));\n            }\n        }\n\n        while (!queue.isEmpty()) {\n            Teacher cur = queue.poll();\n            int x = cur.x;\n            int y = cur.y;\n            int i = cur.dir;\n\n            int dx = x + DIR[i][0];\n            int dy = y + DIR[i][1];\n\n            if (dx < 1 || dy < 1 || dx > N || dy > N) continue;\n            if (\"S\".equals(school[dx][dy])) return false;\n            if (\"O\".equals(school[dx][dy])) continue;\n\n            queue.add(new Teacher(dx, dy, i));\n        }\n\n        return true;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";","embedding":[-0.016738892,0.045959473,0.018112183,0.049621582,0.041503906,-0.050231934,-0.04147339,0.068237305,0.04486084,0.082336426,-0.0007305145,0.03942871,0.09069824,-0.017318726,0.06100464,0.041625977,0.04727173,-0.0059051514,-0.038391113,-0.036376953,0.07220459,-0.013572693,-0.05847168,0.037231445,0.022994995,0.012756348,0.017608643,0.026245117,0.008285522,-0.015068054,-0.029678345,0.026763916,0.007904053,-0.061340332,0.060455322,0.054382324,0.058135986,0.016555786,-0.045013428,-0.081970215,0.054992676,-0.029815674,0.07373047,0.032470703,-0.0041236877,0.003156662,0.043670654,0.06878662,-0.06781006,0.017456055,-0.026565552,-0.038726807,0.09503174,-0.08270264,0.022109985,0.005344391,0.03765869,-0.00026583672,-0.04953003,0.01374054,0.15612793,0.053375244,-0.042388916,0.0949707,0.09466553,-0.049957275,-0.046539307,-0.0725708,0.031707764,0.012184143,0.01928711,0.00038790703,-0.0011720657,-0.053710938,-0.04458618,0.011878967,0.080200195,-0.111694336,0.037139893,-0.10107422,0.0289917,-0.05935669,-0.030303955,0.017715454,-0.0725708,-0.013038635,-0.0513916,-0.022888184,0.01234436,-0.010520935,0.010322571,0.00598526,-0.06048584,-0.05053711,-0.12561035,0.043792725,-0.025314331,0.008590698,0.06866455,0.062408447,-0.048919678,-0.070617676,-0.0055732727,-0.062561035,-0.058654785,0.053863525,0.0057754517,-0.032287598,0.032440186,0.0259552,-0.043151855,0.02305603,0.015007019,0.015945435,-0.02029419,-0.008865356,-0.035461426,-0.10247803,0.014427185,-0.07458496,-0.00712204,0.029571533,-0.05596924,0.017333984,-0.06854248,0.11566162,0.101501465,0.0345459,-0.06378174,0.06652832,-0.0027103424,0.011398315,-0.036224365,0.070373535,0.111816406,-0.0003528595,-0.0021820068,0.061523438,-0.038970947,-0.021835327,0.03665161,-0.023254395,-0.028915405,0.02583313,-0.012458801,0.006828308,-0.013908386,-0.09979248,-0.03640747,-0.09979248,0.059295654,0.09625244,0.0184021,0.06085205,-0.03189087,-0.005558014,0.037200928,0.025543213,-0.026824951,0.11621094,-0.052337646,0.013290405,-0.05795288,-0.07330322,0.038970947,-0.042236328,0.05303955,0.011947632,0.047546387,-0.010848999,-0.05154419,0.06854248,-0.07232666,-0.0031700134,-0.021484375,0.05859375,-0.030929565,-0.012664795,0.02204895,0.047607422,0.00554657,0.040863037,-0.09100342,0.022323608,-0.0050735474,0.06213379,0.0211792,-0.033935547,0.07531738,-0.02027893,-0.074279785,0.04324341,0.062164307,-0.06384277,-0.024978638,0.02949524,-0.059020996,0.014411926,0.018920898,-0.04751587,-0.0046195984,0.009498596,0.0619812,0.05142212,0.029754639,0.10430908,-0.07244873,0.009468079,-0.016082764,-0.028137207,-0.050354004,0.018676758,0.01247406,-0.00043678284,-0.0022525787,-0.013801575,-0.02217102,0.0154800415,-0.10345459,0.16491699,0.09741211,-0.007904053,-0.09893799,0.0065574646,-0.08618164,-0.016677856,0.06616211,-0.114990234,-0.050109863,-0.029830933,0.0579834,0.012519836,0.021728516,-0.029296875,0.012413025,0.00052404404,0.03756714,0.038604736,-0.058258057,-0.037902832,0.030166626,-0.031555176,0.03540039,-0.030929565,-0.076416016,-0.07873535,-0.023986816,0.07330322,-0.010650635,-0.005268097,0.023239136,-0.079589844,-0.010688782,-0.031921387,-0.071777344,0.026245117,-0.005470276,0.0065727234,-0.094055176,-0.002380371,0.04937744,0.064941406,0.032470703,-0.012634277,0.035980225,-0.027191162,-0.064575195,-0.017730713,-0.04626465,0.043640137,0.044647217,0.03741455,0.00881958,0.052520752,0.066589355,-0.02658081,0.0670166,0.057159424,0.061157227,-0.027557373,-0.039978027,0.003648758,0.08050537,0.10498047,-0.0062675476,0.0007891655,-0.032562256,0.07159424,0.027740479,-0.010848999,-0.09033203,-0.060028076,-0.01625061,-0.009803772,0.13171387,-0.059265137,0.029205322,0.07727051,-0.03527832,0.031951904,0.002216339,-0.07086182,0.030944824,0.0121154785,-0.06036377,-0.043151855,-0.02357483,-0.0345459,0.030227661,0.035705566,-0.05960083,-0.009132385,-0.029693604,0.06756592,0.05496216,0.093444824,0.00043439865,0.021621704,-0.08123779,-0.013381958,-0.048095703,-0.0040779114,-0.016677856,0.02861023,-0.017929077,-0.021575928,-0.087524414,0.033966064,0.04598999,-0.04623413,-0.029815674,-0.045715332,-0.041870117,-0.0149383545,0.033081055,-0.10479736,-0.026489258,-0.031402588,0.080566406,0.025177002,0.06738281,0.054382324,0.0048332214,0.016983032,0.014160156,-0.08996582,-0.13781738,0.041656494,-0.0096206665,-0.02218628,-0.0055274963,-0.08666992,0.052001953,-0.024765015,-0.07879639,-0.033294678,-0.06311035,-0.013832092,-0.025360107,-0.01876831,0.015197754,-0.04586792,-0.0008687973,-0.060272217,-0.057281494,-0.055603027,0.027740479,-0.0019683838,0.0287323,0.060913086,0.08905029,0.05911255,-0.042236328,-0.072509766,-0.0011663437,-0.053375244,-0.030166626,0.027023315,-0.008712769,0.026733398,0.02420044,0.023132324,0.06591797,-0.033447266],"created_at":1735875660544,"nchars":4011},"43":{"title":"20.감시 피하기","path":"1. Project/이것이 취업을 위한 코딩테스트다/20.감시 피하기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714644214,"mtime":1735738327318,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:24","modified":"2025/01/01 22:32:07"},"id":"5883ef0265c795329291772ad145f25f","content":"\n\nNOTE TITLE: [[20.감시 피하기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:24\",\"modified\":\"2025/01/01 22:32:07\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.016723633,0.026000977,0.07904053,0.019042969,0.061523438,-0.0262146,-0.072021484,0.02885437,0.046447754,0.02357483,-0.03527832,0.0206604,0.09185791,-0.02859497,0.025619507,0.09637451,0.029373169,-0.0028324127,-0.037200928,0.024597168,0.026473999,0.030731201,-0.077697754,-0.018051147,0.06048584,0.049835205,-0.051483154,0.1274414,0.04272461,-0.0395813,-0.0045166016,-0.04360962,-0.03152466,-0.06738281,0.062286377,0.028411865,0.06048584,0.0028038025,0.016342163,-0.09429932,0.044433594,-0.0024852753,0.029022217,0.031707764,0.02708435,-0.039093018,0.0063171387,0.060302734,-0.026535034,-0.018585205,-0.020935059,0.00983429,0.034851074,-0.1270752,0.051574707,0.04220581,0.019546509,-0.0043792725,-0.0051727295,-0.0066947937,0.099853516,0.050750732,-0.045684814,0.08605957,0.08880615,-0.032714844,-0.085510254,-0.011108398,-0.010551453,-0.0069351196,-0.011543274,-0.029708862,0.052947998,-0.03149414,0.020980835,-0.021209717,0.04977417,-0.07702637,-0.05267334,-0.05871582,-0.045318604,-0.051849365,-0.047851562,0.010803223,-0.08618164,0.042755127,0.017425537,0.0011997223,-0.0069770813,0.037322998,0.04067993,0.09307861,0.03062439,-0.024963379,-0.062927246,0.07324219,0.010475159,-0.029190063,0.072143555,0.039764404,-0.06222534,-0.021331787,-0.0072402954,-0.026916504,0.005531311,0.06274414,-0.05368042,-0.07940674,0.05670166,-0.013587952,-0.047424316,-0.008392334,-0.043548584,0.040496826,-0.019042969,0.025253296,0.038604736,-0.095458984,0.033203125,-0.12121582,0.057769775,0.03567505,-0.06463623,-0.045684814,-0.056732178,0.040985107,0.030899048,0.0181427,-0.042175293,-0.011405945,0.08850098,-0.023788452,-0.014984131,0.038360596,0.08465576,-0.05441284,0.007484436,0.11047363,-0.06311035,-0.04360962,-0.024307251,0.027542114,-0.09967041,0.0003144741,0.004261017,0.04864502,0.027420044,-0.058013916,0.010948181,-0.14404297,0.0017766953,-0.028915405,0.05343628,0.058258057,-0.041503906,-0.061523438,0.044281006,0.023361206,-0.04324341,0.16418457,-0.1282959,0.020629883,-0.079956055,0.012931824,0.06652832,-0.054626465,0.0647583,0.074401855,0.0040359497,-0.0018472672,-0.04626465,0.1104126,-0.048950195,0.022613525,0.042785645,0.0184021,-0.003364563,-0.014480591,-0.0115737915,0.09039307,-0.05404663,0.06750488,-0.0692749,0.043273926,0.033447266,0.08618164,-0.0027103424,-0.0134887695,0.046295166,-0.02885437,-0.09210205,0.083618164,-0.06329346,0.03967285,-0.019607544,0.06958008,-0.030410767,-0.007926941,0.027175903,0.008377075,0.023269653,-0.037109375,0.00016188622,0.06298828,0.041656494,0.08569336,-0.052001953,-0.031555176,-0.050842285,0.005466461,-0.03640747,0.03149414,-0.028411865,-0.0045814514,-0.047454834,0.011192322,-0.09899902,0.008010864,-0.008201599,0.07910156,0.0871582,-0.016403198,-0.14611816,0.009246826,-0.07067871,0.024658203,0.041931152,-0.14208984,-0.07446289,-0.030197144,0.07208252,-0.0055122375,0.039154053,0.05722046,-0.014968872,-0.040740967,0.08123779,-0.0006971359,-0.06903076,-0.030410767,0.014930725,0.014175415,0.04220581,-0.024139404,-0.028030396,-0.049682617,0.013832092,0.11071777,0.018447876,-0.023361206,-0.062561035,-0.08087158,-0.097351074,-0.025512695,-0.05807495,-0.057250977,0.0134887695,0.024398804,-0.09466553,-0.033325195,-0.01713562,0.042663574,0.109558105,0.013572693,0.033813477,-0.043029785,-0.07519531,0.007888794,-0.040252686,0.010017395,0.045928955,-0.009262085,-0.015556335,0.02671814,0.01222229,0.018661499,0.06652832,0.0066871643,0.0043258667,0.030380249,0.08050537,-0.07116699,0.101989746,0.047576904,0.015556335,0.03314209,-0.08673096,-0.023147583,-0.019699097,-0.055908203,-0.09442139,-0.004272461,-0.0209198,-0.026535034,0.058746338,-0.013771057,0.020874023,-0.007911682,0.010505676,-0.018585205,0.0413208,-0.084228516,0.03427124,0.010818481,-0.046417236,-0.08087158,-0.004550934,-0.030181885,-0.02130127,0.027908325,0.0045814514,-0.030410767,-0.0027217865,0.07757568,0.021575928,0.04119873,0.0072250366,0.015655518,-0.041809082,-0.013946533,-0.060394287,0.025665283,0.02557373,-0.036743164,0.006023407,0.017211914,-0.04135132,0.053710938,-0.0072402954,-0.020629883,-0.030441284,-0.0026950836,0.005592346,-0.020874023,0.019058228,-0.042144775,-0.04547119,0.026748657,0.081604004,0.030776978,0.00289917,0.03540039,-0.013412476,0.06628418,-0.0574646,-0.09069824,-0.10803223,0.0033798218,0.006385803,-0.020629883,0.004146576,-0.040618896,-0.008041382,-0.06829834,-0.033813477,0.07409668,-0.103881836,-0.008613586,0.03527832,-0.039916992,0.005596161,-0.10620117,-0.007911682,-0.017700195,-0.03262329,-0.012420654,0.074645996,0.05218506,-0.012832642,0.020584106,0.009895325,0.036712646,-0.026184082,-0.039154053,0.027801514,-0.045196533,-0.015716553,-0.035614014,0.059295654,0.09112549,0.08050537,0.013458252,0.03503418,-0.009849548],"created_at":1735875660544,"nchars":623},"44":{"title":"19.연산자 끼워 넣기","path":"1. Project/이것이 취업을 위한 코딩테스트다/19.연산자 끼워 넣기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714640509,"mtime":1735736597522,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:20","modified":"2025/01/01 22:03:17"},"id":"a7e82c4eb3e192f780bb2fbe19411782","content":"\n\nNOTE TITLE: [[19.연산자 끼워 넣기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:20\",\"modified\":\"2025/01/01 22:03:17\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/14888\n\n### 시간 복잡도 \n- `O(4^(N - 1))`\n\t- 최대 수열의 길이가 11이므로 `O(4^10)`으로 풀이 가능\n\t- `4^10 = 1,048,576`\n\n### 풀이\n- DFS (깊이 우선 탐색)\n- 초기값과 다음 인덱스 번호를 재귀호출 하여 풀이\n\t- `{java}int[] selected` 와 같은 추가 배열을 사용하지 않아도 되므로 간결함\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n   private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, min, max;\n    private static int[] nums, operator;\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        nums = new int[n + 1];\n        for(int i = 1; i <= n; i++) {\n            nums[i] = inputProcessor.nextInt();\n        }\n\n        operator = new int[5];\n        for(int i = 1; i <= 4; i++) {\n            operator[i] = inputProcessor.nextInt();\n        }\n\n        min = Integer.MAX_VALUE;\n        max = Integer.MIN_VALUE;\n    }\n\n    private static void pro() {\n        int[] selected = new int[n - 1];\n        rec(2, nums[1]);\n\n        sb.append(max).append(\"\\n\").append(min);\n    }\n\n    private static void rec(int idx, int value) {\n        if(idx == n + 1) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n            return;\n        }\n\n        // 덧셈\n        if(operator[1] > 0) {\n            operator[1] -= 1;\n            rec(idx + 1, value + nums[idx]);\n            operator[1] += 1;\n        }\n\n        // 뺄셈\n        if(operator[2] > 0) {\n            operator[2] -= 1;\n            rec(idx + 1, value - nums[idx]);\n            operator[2] += 1;\n        }\n\n        // 곱셈\n        if(operator[3] > 0) {\n            operator[3] -= 1;\n            rec(idx + 1, value * nums[idx]);\n            operator[3] += 1;\n        }\n\n        // 나눗셈\n        if(operator[4] > 0) {\n            operator[4] -= 1;\n            rec(idx + 1, value / nums[idx]);\n            operator[4] += 1;\n        }\n    }\n\n    private static int calculate(int v1, int op, int v2) {\n        if(op == 1) {\n            return v1 + v2;\n        } else if(op == 2) {\n            return v1 - v2;\n        } else if(op == 3) {\n            return v1 * v2;\n        } else if(op == 4) {\n            return v2 == 0 ? 0 : (v1 / v2);\n        }\n\n        return 0;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[-0.020721436,-0.013847351,0.006668091,0.11010742,0.06616211,-0.060516357,-0.07055664,0.08404541,0.026733398,0.09307861,0.022903442,0.0021629333,0.04901123,0.021362305,0.01537323,-0.028274536,0.03970337,-0.007221222,-0.030273438,-0.057159424,0.043884277,0.010284424,-0.066711426,-0.019607544,0.033599854,0.029510498,-0.011161804,0.0670166,0.04522705,0.04058838,-0.033813477,-0.033416748,-0.109680176,-0.011009216,0.019638062,0.07910156,0.012527466,-0.02027893,-0.023956299,-0.035247803,0.04711914,-0.08508301,0.04034424,0.018814087,-0.037475586,-0.0049743652,-0.004676819,0.04510498,-0.011734009,0.009277344,-0.06719971,-0.053100586,0.11029053,-0.097595215,-0.0345459,0.015457153,0.019973755,-0.04360962,-0.039398193,0.04937744,0.11444092,0.03366089,-0.05178833,0.061828613,0.10760498,-0.085632324,-0.022155762,-0.04458618,0.032409668,-0.085754395,-0.023208618,-0.044799805,-0.02116394,-0.033569336,-0.0008816719,0.03652954,0.04953003,-0.041992188,0.013534546,-0.057617188,-0.03845215,-0.059753418,-0.023468018,0.017608643,-0.06561279,-0.030471802,0.005973816,-0.013717651,-0.0362854,0.01651001,0.029769897,0.03744507,-0.036834717,0.0022602081,-0.035827637,-0.009140015,0.008255005,-0.006210327,0.03668213,0.060791016,0.009437561,-0.097229004,-0.045440674,-0.039794922,-0.02848816,0.022583008,0.013320923,-0.08959961,0.028366089,0.021591187,-0.086120605,0.021438599,0.0014009476,0.038970947,0.009925842,0.006259918,0.015640259,-0.13977051,0.03753662,-0.009643555,0.022109985,0.07470703,-0.06011963,-0.00096702576,-0.083740234,0.10571289,0.0769043,0.043884277,-0.095214844,0.056243896,0.0574646,0.09942627,0.013420105,0.058898926,-0.030548096,0.018325806,0.027130127,0.045837402,-0.018844604,-0.0869751,0.00027155876,0.0317688,-0.013763428,-0.033355713,-0.027664185,0.10797119,-0.0043258667,-0.11413574,-0.03479004,-0.061523438,-0.048828125,0.055389404,0.050872803,0.07092285,-0.033966064,-0.09979248,0.08892822,0.014129639,-0.07635498,0.06323242,-0.07171631,0.08148193,-0.09820557,-0.10180664,0.0025730133,-0.041137695,0.029663086,0.066223145,0.011352539,-0.009552002,-0.020187378,0.06329346,-0.02406311,-0.0079422,-0.017105103,0.044067383,-0.097595215,-0.026306152,0.059509277,0.009101868,-0.018692017,0.047943115,-0.103759766,0.03137207,0.020248413,0.057434082,-0.0028209686,-0.04071045,0.04031372,-0.01890564,-0.113708496,0.048980713,0.057617188,-0.09265137,-0.0592041,0.07366943,-0.0435791,-0.02381897,0.04434204,-0.058044434,0.07128906,-0.016601562,0.050994873,0.04522705,0.074035645,0.06854248,-0.02355957,0.018753052,-0.009475708,0.054382324,0.02619934,0.04525757,0.022155762,-0.0059280396,-0.011230469,-0.019012451,-0.0049438477,-0.0011491776,-0.032165527,0.124572754,0.036315918,0.013198853,-0.08300781,-0.047058105,-0.07940674,0.0090408325,0.0019664764,-0.1361084,-0.06842041,0.022949219,0.06689453,0.037597656,0.008453369,-0.013000488,0.0015773773,0.060943604,0.08648682,0.03994751,0.017593384,-0.0064201355,0.0012702942,-0.027023315,0.0014066696,-0.036071777,-0.008598328,0.008911133,-0.061523438,0.038970947,0.009399414,0.035491943,-0.07373047,-0.048034668,-0.0021018982,-0.058013916,-0.09539795,0.006916046,0.0054092407,0.0018138885,-0.083862305,-0.058532715,0.013244629,0.08734131,0.07739258,-0.005268097,0.021835327,-0.040374756,-0.059295654,-0.012924194,0.029327393,-0.00097322464,0.04373169,0.019607544,0.003534317,0.032043457,-0.04324341,0.02619934,0.09503174,0.0473938,0.0013952255,0.031188965,0.012145996,-0.06665039,0.12445068,0.005218506,-0.03692627,0.027328491,0.042663574,-0.016662598,0.066223145,-0.011833191,-0.092285156,-0.041503906,-0.038513184,-0.01058197,0.12286377,-0.014656067,0.052581787,0.03955078,0.05078125,-0.018661499,0.11114502,0.027877808,0.022155762,0.043670654,0.039001465,-0.04336548,-0.016738892,-0.005432129,-0.03265381,0.044189453,-0.06573486,-0.04525757,0.0012598038,0.06970215,-0.018585205,0.011291504,0.017150879,0.07385254,-0.08062744,0.026397705,-0.055755615,0.0011949539,0.021820068,-0.025146484,-0.010726929,-0.08270264,-0.058441162,0.050109863,-0.00013649464,-0.021362305,-0.05596924,0.01751709,-0.048431396,-0.033203125,-0.023345947,-0.03540039,-0.010879517,0.06237793,-0.025344849,0.0043258667,0.06677246,0.02659607,0.0022945404,-0.026382446,-0.0048332214,-0.03640747,-0.119628906,0.02470398,-0.05999756,0.0070648193,-0.023849487,-0.098083496,-0.029159546,-0.045806885,-0.008071899,0.006126404,-0.06173706,-0.034423828,-0.035247803,-0.036132812,0.047943115,-0.11383057,0.007575989,-0.07879639,-0.066711426,-0.025878906,0.05517578,-0.001039505,0.027389526,0.053009033,0.062072754,0.038360596,0.06939697,0.0038318634,0.03805542,-0.018417358,-0.0076522827,0.08294678,0.038635254,0.07757568,0.055725098,0.026977539,0.042388916,-0.020126343],"created_at":1735875660545,"nchars":3807},"45":{"title":"18.괄호 변환","path":"1. Project/이것이 취업을 위한 코딩테스트다/18.괄호 변환.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714636919,"mtime":1735782778984,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:16","modified":"2025/01/02 10:52:58"},"id":"a6fb16ab6210e4e160e6e4c54afbb948","content":"\n\nNOTE TITLE: [[18.괄호 변환]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:16\",\"modified\":\"2025/01/02 10:52:58\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60058\n\n### 시간 복잡도 \n\n### 풀이\n- 백트래킹 (완전 탐색) 사용\n- 요구사항대로 그대로 구현하면 되는 문제\n- `\"균형 잡힌 괄호 문자열\" != \"올바른 괄호 문자열\"`\n\t- `균형 잡힌 괄호 문자열` : `{java}parentheses` 합게가 `0` 이 되는 구간 \n\n### 제출 코드\n```java\nimport java.io.*;\n\nclass Solution {\n    public String solution(String p) {\n        return rec(p);\n    }\n    \n    private String rec(String w) {\n        if(w.equals(\"\")) return w;\n        \n        int idx = 0;\n        int parentheses = 0;\n        for(char c : w.toCharArray()) {\n            if(c == '(') parentheses += 1;\n            else parentheses -= 1;\n            \n            if(parentheses == 0) {\n                break;\n            }\n            \n            idx += 1;\n        }\n        \n        String u = w.substring(0, idx + 1);\n        String v = rec(w.substring(idx + 1));\n        \n        // 문자열 u가 올바른 괄호 문자열이라면\n        if(check(u)) {\n            return u + v;\n        } \n        \n        // 문자열 u가 올바른 괄호 문자열이 아니라면\n        return convertText(u, v);\n    }\n    \n    private boolean check(String u) {\n        if(u.isEmpty()) return true;\n        \n        int count = 0;\n        for(char c : u.toCharArray()) {\n            if(c == '(') count += 1;\n            else if(--count < 0) return false;\n        }\n        \n        return true;\n    }\n    \n    private String convertText(String u, String v) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"(\")\n            .append(v)\n            .append(\")\");\n    \n        for(int i = 1; i < u.length() - 1; i++) {\n            char c = u.charAt(i);\n            sb.append(c == '(' ? \")\" : \"(\");\n        }\n        \n        return sb.toString();\n    }\n}\n```","embedding":[-0.0067214966,0.0012025833,-0.010185242,0.07714844,0.08129883,0.008506775,-0.009414673,0.052215576,0.032226562,0.05456543,0.014846802,-0.0019836426,0.10394287,0.006088257,0.0036506653,0.07965088,0.045043945,-0.0152282715,-0.013923645,0.045043945,0.04525757,-0.009788513,-0.0657959,0.015594482,0.027801514,0.021148682,-0.018997192,0.12854004,0.031982422,-0.0023651123,0.019744873,-0.053863525,0.0023441315,0.016067505,0.04296875,0.04660034,0.055419922,0.050811768,-0.05807495,-0.13012695,0.002155304,-0.03704834,0.07702637,-0.007801056,-0.039215088,0.03137207,0.057922363,-0.0044288635,-0.06994629,0.025924683,-0.021896362,-0.007259369,0.034729004,-0.09820557,0.019042969,-0.016448975,0.00970459,-0.041290283,-0.037628174,-0.064453125,0.09576416,0.021316528,-0.11218262,0.060272217,0.13891602,-0.09472656,-0.041381836,0.006023407,0.024536133,-0.06097412,0.059692383,-0.02973938,0.029083252,0.0046653748,0.002866745,-0.028656006,0.048675537,-0.13549805,0.041992188,-0.039031982,-0.036590576,-0.055603027,-0.09259033,-0.02532959,0.0022964478,0.039093018,0.037963867,-0.02192688,-0.0013875961,0.015403748,0.026885986,0.08312988,-0.028747559,-0.049713135,-0.046844482,0.0041542053,0.011390686,-0.0115737915,0.09576416,0.076171875,-0.0038814545,-0.1529541,-0.006259918,-0.03527832,-0.043273926,-0.008552551,-0.1184082,-0.0012760162,0.017044067,0.07104492,-0.055786133,-0.045043945,-0.0040893555,0.012313843,-0.008544922,-0.036621094,0.014671326,-0.04727173,-0.020385742,-0.06463623,-0.049865723,0.055114746,0.0011386871,-0.021759033,-0.08709717,0.056610107,0.054473877,0.009407043,-0.04776001,0.005619049,-0.04067993,-0.015525818,-0.048187256,0.09918213,0.060516357,-0.060699463,0.02822876,0.06964111,-0.037231445,-0.038269043,0.01689148,-0.033416748,-0.021347046,0.02835083,-0.027709961,0.059692383,0.023773193,-0.084472656,-0.03338623,-0.09698486,0.0345459,0.08026123,0.020095825,0.04937744,-0.042053223,-0.019760132,0.01260376,0.087524414,-0.055358887,0.12597656,-0.02519226,0.08294678,-0.04574585,-0.15771484,0.05886841,0.026046753,0.057861328,0.022384644,0.009208679,0.0062713623,-0.042266846,0.13171387,-0.0069389343,0.017333984,-0.013916016,0.0041503906,-0.007980347,0.014144897,0.070251465,-0.011711121,0.005710602,-0.021743774,-0.06149292,-0.07324219,-0.02758789,0.065979004,0.0028972626,-0.013595581,0.056488037,0.036987305,-0.03375244,0.075927734,-0.003162384,-0.0546875,-0.061828613,0.039794922,-0.012992859,-0.024993896,-0.017684937,-0.058776855,0.09295654,0.0024757385,0.0132751465,0.034484863,0.061065674,0.03717041,-0.030410767,-0.0077590942,-0.018463135,-0.010421753,-0.038513184,-0.00073862076,-0.06323242,0.045043945,0.018814087,-0.06964111,-0.011520386,0.0067214966,-0.0625,0.07067871,0.0052757263,-0.022140503,-0.10882568,-0.0048599243,-0.09832764,0.032348633,0.026641846,-0.09777832,-0.040039062,-0.04650879,0.08605957,0.03475952,0.013702393,-0.04324341,0.028701782,-0.0032348633,0.09118652,-0.013000488,-0.010887146,0.022354126,0.108947754,-0.020843506,0.06286621,-0.010475159,0.008804321,-0.070495605,-0.005859375,0.059173584,-0.0053100586,-0.021224976,-0.08416748,-0.08288574,-0.015106201,-0.03778076,0.0032978058,0.019836426,-0.05105591,0.051879883,-0.09490967,-0.06915283,0.07122803,0.05718994,0.11212158,0.058776855,0.02470398,-0.03036499,-0.039886475,-0.035095215,0.034362793,0.061309814,0.023101807,0.017150879,0.019317627,0.0074653625,0.050750732,-0.000049948692,0.06915283,0.03918457,0.050811768,0.008346558,-0.019638062,-0.043151855,0.05770874,0.029159546,-0.03744507,0.008338928,-0.019805908,0.040008545,0.06210327,-0.03778076,-0.09436035,-0.025039673,-0.031280518,-0.039642334,0.13195801,-0.05340576,0.037628174,0.011260986,-0.015045166,-0.007659912,0.113220215,-0.05657959,-0.004497528,0.015068054,-0.005970001,-0.058410645,-0.032348633,0.0044555664,0.0014305115,0.023849487,-0.009002686,-0.049072266,0.004142761,0.05847168,0.05709839,0.01828003,0.03652954,0.016189575,-0.0871582,0.00548172,-0.015686035,0.064697266,-0.023101807,-0.02029419,-0.06365967,-0.055877686,-0.07196045,0.11242676,0.015670776,-0.04550171,-0.019088745,-0.017913818,-0.050109863,-0.05380249,0.0064888,-0.02319336,-0.042419434,-0.019165039,0.005332947,0.018966675,0.013145447,-0.019042969,0.026184082,0.004108429,-0.02128601,-0.034729004,-0.09790039,0.03555298,-0.028335571,0.051757812,-0.008094788,-0.12878418,0.03302002,-0.0033569336,0.013725281,-0.05517578,-0.04208374,0.051483154,-0.0067253113,-0.07147217,0.026641846,-0.057495117,-0.006095886,-0.036712646,-0.064208984,-0.08166504,-0.014190674,0.05227661,0.039093018,-0.013671875,0.07220459,0.05206299,0.05819702,-0.037322998,-0.042999268,0.01876831,-0.057525635,0.036102295,0.050109863,0.10656738,0.041168213,0.040740967,0.02658081,-0.019454956],"created_at":1735875660545,"nchars":1799},"46":{"title":"17.경쟁적 전염","path":"1. Project/이것이 취업을 위한 코딩테스트다/17.경쟁적 전염.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714632485,"mtime":1735716871955,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:12","modified":"2025/01/01 16:34:31"},"id":"a3e3a9298cc139f91ba0f4e801a8954d","content":"\n\nNOTE TITLE: [[17.경쟁적 전염]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:12\",\"modified\":\"2025/01/01 16:34:31\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18405\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이\n- 격자형 그래프 탐색 문제 \n- 단, 번호가 낮은 순으로 바이러스가 전파되야 하므로 `우선 순위 큐`를 사용\n\n### 제출 코드\n```java hl:88-94\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, k, s, x, y;\n    private static int[][] maps;\n    \n    private static void input() {\n        n = inputProcessor.nextInt();\n        k = inputProcessor.nextInt(); // k 이하의 자연수로만 주어짐\n\n        maps = new int[n + 1][n + 1];\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                maps[i][j] = inputProcessor.nextInt();\n            }\n        }\n\n\t\t// s초 뒤에 (x,y)에 존재하는 바이러스 종류를 출력\n        s = inputProcessor.nextInt(); \n        x = inputProcessor.nextInt();\n        y = inputProcessor.nextInt();\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n\n    private static void pro() {\n        Queue<Virus> que = new PriorityQueue<>();\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                if(maps[i][j] != 0) {\n                    que.add(new Virus(maps[i][j], i, j, 0));\n                }\n            }\n        }\n\n        while(!que.isEmpty()) {\n            Virus cur = que.poll();\n\n            if(cur.time == s) {\n                break;\n            }\n\n            for(int i = 0; i < 4; i++) {\n                int dx = cur.x + DIR[i][0];\n                int dy = cur.y + DIR[i][1];\n\n                if(dx < 1 || dy < 1 || dx > n || dy > n) continue;\n                if(maps[dx][dy] != 0) continue;\n\n                maps[dx][dy] = maps[cur.x][cur.y];\n                que.add(new Virus(cur.no, dx, dy, cur.time + 1));\n            }\n        }\n\n        // 결과 출력, 없으면 0\n        sb.append(maps[x][y]);\n    }\n\n    private static class Virus implements Comparable<Virus> {\n        private final int no;\n        private final int x;\n        private final int y;\n        private final int time;\n\n        public Virus(int no, int x, int y, int time) {\n            this.no = no;\n            this.x = x;\n            this.y = y;\n            this.time = time;\n        }\n\n        public int compareTo(Virus o) {\n            if(this.time != o.time) {\n                return this.time - o.time;\n            }\n\n            return this.no - o.no;\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.08654785,-0.025619507,-0.048736572,0.050567627,0.14160156,0.0032653809,0.0037384033,0.059051514,0.030639648,0.02053833,-0.024520874,-0.0118637085,0.03555298,-0.042938232,0.026275635,0.020858765,0.029953003,0.02128601,-0.070373535,-0.035247803,0.052520752,-0.07891846,-0.045318604,0.025909424,0.0021820068,0.014167786,-0.03277588,0.11077881,0.07110596,-0.05041504,-0.036315918,-0.08154297,-0.05105591,-0.02532959,0.03778076,0.08203125,0.0026817322,0.014137268,0.04574585,-0.12634277,0.088256836,-0.041900635,0.08807373,0.034240723,-0.028793335,0.0057525635,0.046142578,-0.0028381348,-0.08660889,0.07550049,-0.015625,0.0058937073,0.095458984,-0.068359375,-0.01902771,-0.01348114,0.0005302429,-0.03540039,-0.034851074,0.033935547,0.052581787,-0.0119018555,-0.007713318,0.05859375,0.035095215,-0.12792969,0.0014543533,-0.040863037,0.059051514,0.005340576,0.015602112,-0.008300781,-0.037597656,-0.072509766,0.0039367676,-0.034484863,0.07244873,-0.045928955,0.04611206,-0.056884766,0.021636963,-0.036895752,-0.009407043,-0.038482666,-0.09387207,-0.0023708344,-0.009010315,0.03567505,-0.03262329,-0.011253357,0.07281494,0.024734497,-0.08013916,0.014625549,0.035705566,-0.02960205,-0.05706787,0.031829834,0.09063721,0.0769043,0.025009155,-0.028442383,0.0011234283,-0.016281128,0.009902954,0.072143555,-0.0063056946,-0.05569458,-0.052246094,0.029342651,-0.09222412,0.03201294,-0.008522034,-0.020614624,-0.016494751,-0.044647217,0.066711426,-0.049346924,0.033325195,-0.07208252,-0.028198242,0.02482605,-0.063964844,-0.00730896,-0.08465576,0.07763672,0.058898926,0.045806885,0.019958496,0.024780273,0.038391113,0.019302368,-0.068359375,0.012687683,0.045928955,0.018814087,0.016082764,0.09008789,-0.0692749,-0.14489746,-0.015792847,0.026168823,-0.060699463,0.0073509216,0.0012922287,0.050872803,0.016845703,-0.044433594,0.015792847,-0.011436462,0.014701843,0.06951904,0.057861328,-0.013458252,-0.0005993843,-0.03250122,-0.021362305,0.029953003,-0.08514404,0.11187744,-0.06817627,0.05670166,-0.07861328,-0.075683594,0.047729492,-0.04107666,0.032928467,0.07659912,-0.08557129,-0.09527588,0.09710693,0.12200928,0.01411438,0.04232788,-0.026626587,0.06750488,-0.11541748,-0.02166748,0.0025291443,0.0102005005,-0.05630493,0.0071105957,-0.053771973,-0.0064048767,0.03945923,0.07550049,0.020889282,0.012763977,0.02166748,-0.018981934,-0.07080078,0.036621094,-0.018249512,-0.047607422,-0.08685303,0.0345459,-0.020767212,-0.018371582,0.036102295,-0.05834961,0.04208374,-0.03652954,0.004989624,0.10992432,0.055877686,0.012428284,0.004535675,-0.026184082,-0.072509766,-0.07293701,-0.038970947,-0.015640259,-0.027038574,0.039367676,0.023498535,0.020507812,-0.024383545,0.0129852295,-0.1003418,0.13195801,0.04486084,0.01626587,-0.07501221,-0.09020996,-0.045135498,-0.036987305,0.0024261475,-0.113342285,-0.014419556,0.060058594,0.06750488,0.052856445,0.0030384064,-0.0009293556,0.033996582,0.034240723,0.11553955,-0.06365967,-0.04598999,-0.05819702,-0.025512695,-0.022140503,-0.008720398,0.042663574,-0.024169922,-0.033569336,-0.09118652,0.026763916,-0.004852295,-0.025360107,-0.051971436,-0.047698975,-0.051116943,-0.103881836,-0.0496521,0.06890869,-0.01448822,-0.0041999817,-0.042144775,0.04171753,0.03970337,0.045288086,0.02998352,0.009811401,-0.008155823,-0.020355225,-0.059814453,-0.028640747,0.04360962,0.04675293,0.025863647,0.055236816,-0.012512207,0.008033752,-0.032440186,-0.06524658,0.044067383,0.0021305084,-0.038085938,0.007385254,0.059692383,0.009483337,0.13830566,-0.04824829,0.041381836,0.007507324,-0.030654907,0.039764404,0.06097412,0.06585693,-0.10614014,0.0066223145,-0.0904541,-0.02772522,0.033416748,0.0005259514,0.021331787,0.055786133,0.06768799,-0.013069153,-0.01020813,-0.01852417,0.0029506683,0.0032291412,0.031951904,-0.03466797,0.049224854,-0.03692627,-0.012107849,0.005306244,-0.0211792,-0.0031147003,-0.0031147003,0.039978027,0.005207062,-0.028793335,0.093811035,0.088134766,-0.037902832,-0.02973938,-0.017807007,-0.029693604,0.044677734,-0.027893066,-0.023269653,-0.056854248,-0.02507019,0.068603516,0.020477295,-0.07824707,-0.0077590942,0.0014314651,-0.01550293,-0.034301758,-0.026687622,-0.11071777,-0.043426514,-0.048614502,0.0021781921,-0.05166626,0.0619812,0.041778564,-0.03753662,0.031707764,0.0058135986,-0.04812622,-0.0960083,-0.014472961,-0.038604736,0.06561279,0.039611816,-0.10107422,0.05505371,-0.049346924,-0.03552246,-0.02558899,-0.014472961,-0.039916992,-0.012458801,-0.020141602,0.023422241,-0.040283203,0.03982544,-0.05114746,0.032440186,-0.039916992,0.040618896,0.018249512,0.08544922,-0.0031585693,0.076416016,0.059051514,-0.009628296,0.002714157,0.009101868,0.01940918,0.03265381,0.12792969,0.067871094,0.05328369,0.072265625,-0.0067214966,0.04598999,-0.051361084],"created_at":1735875660546,"nchars":4037},"47":{"title":"16.연구소","path":"1. Project/이것이 취업을 위한 코딩테스트다/16.연구소.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714628696,"mtime":1735715991619,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:08","modified":"2025/01/01 16:19:51"},"id":"edd334388e5b767324da496afca10cff","content":"\n\nNOTE TITLE: [[16.연구소]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:08\",\"modified\":\"2025/01/01 16:19:51\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/14502\n\n### 시간 복잡도 \n- 풀이 참고\n\n### 풀이\n- **완전 탐색**과 **그래프 탐색** 사용\n- 최대 `8 * 8` 지도에서 \n\t- 벽을 3개 세우는 조합은 `64C3`\n\t- 바이러스 전파 : BFS/DFS든 `O(V + E)`\n\t- 안전 지역 카운팅 : `O(NM)`","embedding":[0.022521973,-0.028503418,-0.025253296,-0.016357422,0.10656738,-0.027450562,-0.08483887,0.08282471,0.021591187,0.031921387,-0.054260254,-0.019821167,0.0209198,-0.04989624,0.022613525,0.04660034,0.0014705658,-0.032714844,-0.056427002,-0.027999878,0.028808594,-0.06036377,-0.034942627,-0.023605347,0.026184082,-0.02293396,-0.04324341,0.051940918,0.110961914,0.009063721,0.015731812,-0.054870605,-0.1307373,-0.06719971,-0.030471802,0.041381836,-0.003786087,-0.095336914,0.032958984,-0.09295654,-0.009048462,-0.00856781,0.051239014,0.030349731,-0.028045654,0.022109985,0.05731201,-0.02456665,-0.0059509277,0.014503479,-0.009483337,0.036499023,0.0770874,-0.013771057,0.022232056,-0.034820557,-0.021469116,-0.050445557,0.012863159,0.046691895,0.020431519,0.031585693,-0.10107422,-0.008895874,0.09625244,-0.11236572,-0.012710571,0.04736328,0.10772705,-0.11187744,-0.021499634,-0.0032577515,0.0020313263,-0.043151855,0.02720642,0.011711121,0.056427002,-0.007713318,0.023956299,0.04727173,-0.008224487,-0.045043945,-0.03050232,0.010070801,0.004886627,0.027755737,-0.010299683,0.003540039,-0.024398804,0.039001465,0.0064697266,0.06222534,-0.010360718,-0.033569336,0.09863281,-0.004962921,0.046783447,-0.0039520264,0.054870605,0.12060547,-0.009605408,-0.031280518,0.05621338,-0.07269287,-0.008964539,0.11114502,0.01512146,-0.0541687,0.006477356,0.023590088,-0.08905029,0.027816772,-0.068847656,0.015640259,0.085632324,0.036712646,0.12573242,-0.030883789,0.023849487,-0.009765625,-0.027862549,0.017929077,-0.0027503967,0.05935669,-0.01727295,-0.011329651,0.05328369,0.032714844,-0.015319824,0.090148926,0.032440186,0.01939392,-0.070373535,0.0055732727,0.06124878,0.033691406,-0.004924774,0.14135742,-0.035949707,-0.049072266,0.008491516,0.04748535,-0.08465576,-0.014907837,-0.01222229,0.04940796,0.0099105835,-0.055419922,0.024032593,-0.008110046,-0.060638428,-0.029846191,0.06756592,0.09576416,-0.055999756,-0.0031852722,0.0095825195,-0.0110321045,0.0031585693,0.09051514,-0.042785645,0.048736572,-0.079956055,-0.103637695,0.015541077,-0.12237549,-0.0011062622,0.08459473,-0.035308838,-0.054901123,0.06304932,0.10241699,-0.007419586,0.0033721924,0.010169983,0.053863525,-0.07952881,-0.024749756,0.0112838745,-0.011138916,-0.04248047,-0.03024292,-0.06304932,-0.035583496,0.010894775,0.06976318,0.028823853,-0.074523926,-0.031234741,0.038970947,0.00053453445,0.08532715,-0.06384277,-0.015579224,-0.012496948,0.002462387,-0.01902771,-0.020141602,0.07067871,-0.040100098,0.03955078,-0.13427734,-0.0463562,0.12384033,-0.04196167,0.04949951,0.0390625,-0.030151367,-0.05831909,-0.01676941,-0.02468872,0.05166626,-0.00076436996,0.026748657,-0.00047898293,0.044036865,-0.07800293,0.0071640015,-0.022201538,0.10144043,-0.044525146,-0.038635254,-0.060791016,-0.10180664,-0.010246277,0.035858154,0.035003662,-0.103149414,0.01625061,0.045166016,0.008163452,0.0008277893,0.021118164,0.00078964233,0.06933594,-0.030899048,0.06817627,-0.042144775,-0.09277344,-0.06365967,-0.023117065,-0.020248413,0.068847656,0.0075950623,-0.04345703,-0.041259766,-0.014450073,0.09008789,-0.046691895,-0.02142334,-0.06719971,-0.057647705,-0.07171631,-0.14416504,-0.04827881,0.042022705,0.042175293,0.0231781,-0.015571594,-0.0076446533,-0.016433716,0.01184082,0.022415161,-0.023269653,0.0033416748,-0.109802246,-0.07623291,0.046539307,0.029510498,0.01940918,-0.0051460266,0.00062036514,0.009216309,-0.07849121,-0.03111267,-0.05090332,0.015899658,0.030548096,-0.031829834,0.033966064,0.0552063,-0.013412476,0.16503906,0.06378174,-0.00058841705,-0.04647827,-0.008514404,-0.0043907166,0.084350586,0.03149414,-0.048614502,0.04574585,-0.04776001,-0.011795044,0.04727173,0.001039505,0.009063721,0.008956909,0.025009155,-0.03729248,0.02760315,-0.015991211,-0.04147339,-0.013389587,-0.03817749,-0.037475586,0.0637207,0.068237305,-0.0064048767,0.015777588,-0.0049819946,0.013549805,-0.030151367,0.09051514,0.019744873,0.003074646,0.08392334,0.0236969,-0.10913086,0.04260254,-0.058013916,0.006965637,0.002658844,-0.070007324,0.025604248,-0.02810669,-0.050201416,0.09313965,-0.028869629,0.020629883,0.073913574,0.024108887,-0.016143799,-0.0546875,-0.03753662,-0.11834717,-0.027404785,-0.080200195,-0.0036792755,0.048065186,0.051452637,0.009605408,-0.003578186,-0.0019187927,-0.035888672,-0.087768555,-0.07220459,-0.013870239,-0.02999878,0.062927246,0.043914795,-0.073913574,0.036346436,-0.020202637,-0.007511139,-0.061767578,0.036254883,-0.06274414,0.027542114,0.057861328,0.031036377,-0.024658203,-0.016799927,0.040802002,-0.0803833,-0.022232056,0.016571045,0.05682373,0.03189087,0.08251953,0.040985107,0.025009155,0.0234375,-0.00011771917,0.0034675598,-0.052581787,0.049713135,0.04067993,-0.019927979,0.017440796,0.08483887,-0.03643799,0.06732178,0.010238647],"created_at":1735875660546,"nchars":327},"48":{"title":"16.연구소","path":"1. Project/이것이 취업을 위한 코딩테스트다/16.연구소.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714628696,"mtime":1735715991619,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:08","modified":"2025/01/01 16:19:51"},"id":"815f570fed7f3502fc6402c73d009860","content":"\n\nNOTE TITLE: [[16.연구소]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:08\",\"modified\":\"2025/01/01 16:19:51\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n\n    private static int N, M;\n    private static int[][] FIELDS;\n    private static List<BLANK> BLANKS;\n    private static List<Virus> VIRUSES;\n    private static int RESULT;\n\n    private static void input() {\n        N = inputProcessor.nextInt();\n        M = inputProcessor.nextInt();\n        RESULT = 0;\n\n        FIELDS = new int[N + 1][M + 1];\n        BLANKS = new ArrayList<>();\n        VIRUSES = new ArrayList<>();\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= M; j++) {\n                int v = inputProcessor.nextInt();\n                FIELDS[i][j] = v;\n\n                if (v == 0) { // 빈칸\n                    BLANKS.add(new BLANK(i, j));\n                } else if (v == 2) { // 바이러스\n                    VIRUSES.add(new Virus(i, j));\n                }\n            }\n        }\n    }\n\n    private static class BLANK {\n        private final int x;\n        private final int y;\n\n        public BLANK(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static class Virus {\n        private final int x;\n        private final int y;\n\n        public Virus(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static void pro() {\n        createWall(0, 0);\n        sb.append(RESULT);\n    }\n\n    private static void createWall(int count, int idx) {\n        if (count == 3) {\n            boolean[][] virus = spread();\n            int safety = 0;\n            for (int i = 1; i <= N; i++) {\n                for (int j = 1; j <= M; j++) {\n                    if (FIELDS[i][j] == 0 && !virus[i][j]) {\n                        safety += 1;\n                    }\n                }\n            }\n\n            RESULT = Math.max(RESULT, safety);\n            return;\n        }\n\n        if (idx >= BLANKS.size()) return;\n\n        BLANK cur = BLANKS.get(idx);\n        FIELDS[cur.x][cur.y] = 1;\n        createWall(count + 1, idx + 1);\n\n        FIELDS[cur.x][cur.y] = 0;\n        createWall(count, idx + 1);\n    }\n\n    private static boolean[][] spread() {\n        boolean[][] visited = new boolean[N + 1][M + 1];\n        for (Virus v : VIRUSES) {\n            if (visited[v.x][v.y]) continue;\n            \n            dfs(v.x, v.y, visited);\n        }\n\n        return visited;\n    }\n\n    private static void dfs(int x, int y, boolean[][] visited) {\n        visited[x][y] = true;\n\n        for (int i = 0; i < 4; i++) {\n            int dx = DIR[i][0] + x;\n            int dy = DIR[i][1] + y;\n\n            if (dx < 1 || dy < 1 || dx > N || dy > M) continue;\n            if (visited[dx][dy]) continue;\n            if (FIELDS[dx][dy] != 0) continue;\n\n            dfs(dx, dy, visited);\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }","embedding":[0.023666382,-0.005393982,-0.04348755,0.023849487,0.10028076,-0.035217285,-0.017684937,0.09832764,0.011947632,0.026321411,-0.023361206,0.012519836,0.026245117,0.0022029877,0.11663818,0.054016113,0.035339355,-0.0066223145,-0.027175903,-0.04525757,0.002035141,0.0069770813,-0.0037059784,0.055511475,0.048095703,0.05718994,-0.014328003,0.02067566,0.039978027,-0.026977539,-0.035491943,-0.08276367,-0.07409668,-0.05859375,0.05215454,0.07159424,0.0009675026,0.0004515648,0.027755737,-0.11553955,0.053009033,-0.06945801,0.046813965,-0.0026893616,-0.030212402,-0.033447266,0.09295654,0.0022087097,-0.042510986,0.06329346,-0.033294678,0.04623413,0.06744385,-0.085754395,0.034973145,-0.037261963,-0.0026435852,-0.040222168,0.004917145,0.024398804,0.101745605,0.03543091,-0.03845215,0.06762695,0.08782959,-0.12756348,0.06365967,-0.057403564,0.038970947,-0.008300781,-0.038238525,-0.0001821518,-0.019104004,-0.034423828,0.010421753,-0.021697998,0.030090332,-0.074157715,0.053100586,-0.03302002,-0.031143188,-0.0770874,-0.07312012,0.018539429,-0.06060791,-0.011795044,-0.016159058,0.022918701,0.02053833,-0.04550171,0.0072898865,-0.0036239624,-0.033416748,-0.009590149,0.008270264,0.020706177,-0.059051514,0.0052986145,0.11529541,0.06915283,0.00078201294,-0.06048584,0.033172607,-0.08654785,-0.026641846,0.07574463,-0.0028743744,-0.07122803,0.017471313,0.058166504,-0.04550171,0.06463623,-0.0026741028,0.024230957,0.044158936,-0.027374268,0.017593384,-0.0715332,0.022109985,-0.044403076,-0.018005371,-0.03527832,-0.053527832,-0.051757812,-0.06726074,0.036315918,0.13549805,0.07873535,0.019515991,-0.028518677,-0.057861328,-0.016204834,-0.115112305,0.033935547,0.0335083,0.046875,0.028411865,0.08312988,-0.062561035,-0.09893799,-0.029159546,0.013999939,-0.008804321,0.02482605,-0.018753052,-0.016479492,0.029296875,-0.068359375,0.040496826,-0.004890442,0.018539429,0.07849121,0.081848145,0.07879639,0.07519531,-0.053466797,0.012084961,0.032440186,-0.02407837,0.095825195,-0.05014038,0.058929443,-0.05810547,-0.051818848,-0.007133484,0.0099487305,0.08843994,0.05718994,-0.03074646,-0.02355957,0.059387207,0.08459473,0.0178833,-0.00141716,-0.016326904,0.056549072,-0.118652344,0.008079529,0.025375366,0.013305664,-0.07659912,-0.019424438,-0.06878662,-0.005153656,-0.0146102905,0.11187744,0.04486084,-0.013626099,0.07684326,-0.00091362,-0.041900635,0.05014038,0.01763916,-0.0519104,-0.057525635,0.045837402,-0.053009033,-0.06188965,0.059387207,-0.095703125,0.07574463,-0.05722046,0.03237915,0.059326172,0.03289795,0.05883789,-0.06060791,-0.04534912,-0.055236816,-0.058654785,-0.037261963,0.014137268,-0.03213501,0.041168213,-0.011146545,-0.014671326,-0.04119873,0.027450562,-0.07733154,0.09490967,-0.0037002563,-0.0067749023,-0.06488037,-0.007972717,-0.048858643,-0.013336182,0.021514893,-0.12182617,-0.036987305,0.0012512207,0.10083008,0.058929443,-0.0026512146,-0.008995056,0.0019760132,-0.0129852295,0.027252197,-0.02520752,-0.058044434,-0.08557129,0.04046631,-0.04336548,0.044403076,-0.025161743,-0.018508911,-0.026794434,-0.10601807,0.095825195,0.024917603,-0.012138367,-0.029785156,-0.08679199,-0.0259552,-0.038513184,-0.089538574,0.07141113,0.010765076,-0.0011100769,-0.04586792,0.015686035,0.052734375,-0.038604736,0.021026611,-0.028274536,0.0029029846,-0.030807495,-0.14331055,-0.036743164,0.030517578,0.07366943,0.0075149536,0.02947998,0.006690979,0.015014648,0.046203613,-0.012290955,0.039093018,0.0057754517,0.012145996,0.02909851,0.00919342,-0.03616333,0.16711426,0.024368286,0.008522034,0.027572632,-0.07196045,0.036102295,0.058898926,-0.0038070679,-0.07470703,0.037506104,-0.09661865,-0.11175537,0.053131104,0.012908936,0.008888245,0.04537964,0.037628174,0.06317139,0.0065307617,-0.059783936,-0.023483276,0.035705566,0.026123047,0.015182495,0.016738892,-0.01473999,0.01675415,0.040374756,-0.015060425,-0.050445557,-0.019622803,0.047607422,-0.009765625,-0.012886047,0.048614502,-0.01574707,-0.047302246,-0.036956787,-0.059265137,-0.035705566,-0.006214142,0.029418945,-0.023849487,0.016113281,-0.03878784,0.10827637,-0.022384644,-0.03012085,-0.00012946129,0.026504517,-0.035186768,-0.04232788,0.057037354,-0.12133789,-0.01876831,-0.015464783,0.016647339,0.022262573,0.05114746,0.051361084,0.0050086975,0.06311035,0.037353516,-0.083496094,-0.096191406,-0.029083252,-0.073913574,0.058654785,-0.05831909,-0.07739258,0.03527832,-0.034362793,-0.013557434,-0.062469482,-0.020263672,-0.05026245,0.023239136,-0.049560547,-0.019638062,-0.072753906,0.024856567,-0.019302368,-0.03326416,-0.006259918,0.0021476746,0.031402588,0.05883789,0.045654297,0.0647583,0.1227417,-0.05154419,-0.027557373,0.00037884712,-0.035614014,0.039093018,0.10247803,-0.011703491,0.019744873,0.036254883,0.01576233,0.05279541,0.013801575],"created_at":1735875660546,"nchars":4122},"49":{"title":"16.연구소","path":"1. Project/이것이 취업을 위한 코딩테스트다/16.연구소.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714628696,"mtime":1735715991619,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:57:08","modified":"2025/01/01 16:19:51"},"id":"6faffddc81ef57b2fa941ed3226a91b4","content":"\n\nNOTE TITLE: [[16.연구소]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:08\",\"modified\":\"2025/01/01 16:19:51\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.0042381287,0.050201416,0.072265625,0.019897461,0.039764404,-0.0027542114,-0.07824707,0.0602417,0.06768799,-0.012825012,-0.05328369,0.01474762,0.06768799,0.0054092407,0.011253357,0.07409668,0.04309082,-0.017669678,-0.06225586,0.020065308,-0.012161255,0.064453125,-0.045013428,-0.042022705,0.04510498,0.004108429,-0.06732178,0.12719727,0.059295654,-0.025939941,0.021896362,-0.076293945,-0.030151367,-0.04244995,0.044311523,0.04034424,0.013748169,-0.039154053,0.020141602,-0.111206055,-0.0077819824,-0.026412964,0.049468994,0.00969696,0.007045746,0.021255493,0.0524292,0.0134887695,-0.019317627,0.0009126663,-0.025894165,0.056427002,0.034729004,-0.109680176,0.020812988,-0.028121948,0.008277893,-0.0026855469,0.0030288696,-0.013618469,0.06518555,0.06274414,-0.052215576,0.058532715,0.0982666,-0.07714844,-0.0126571655,0.023010254,-0.009178162,-0.045288086,0.016494751,-0.039398193,0.032470703,-0.031188965,0.038330078,-0.0262146,0.03640747,-0.044799805,-0.012435913,-0.027755737,-0.05899048,-0.070007324,-0.05206299,0.040374756,-0.08013916,0.034362793,0.034484863,0.026412964,-0.012901306,0.04937744,-0.010848999,0.10736084,0.010498047,-0.008369446,-0.00623703,0.044311523,0.0075950623,-0.028060913,0.0826416,0.09259033,-0.047912598,-0.028793335,0.020248413,-0.08093262,0.026870728,0.061157227,-0.033172607,-0.09887695,0.03591919,-0.045898438,-0.041625977,0.043395996,-0.040130615,0.08355713,0.043762207,0.01007843,0.036712646,-0.15539551,0.05819702,-0.09869385,0.07891846,0.036071777,-0.00083732605,-0.046081543,-0.08416748,0.030731201,0.062683105,0.02142334,-0.013832092,-0.022155762,0.044708252,-0.01776123,-0.027557373,0.008262634,0.0748291,-0.023468018,0.014961243,0.104003906,-0.05001831,-0.051849365,-0.0023555756,-0.009437561,-0.09307861,0.0072021484,-0.0057373047,0.068481445,0.01739502,-0.08050537,0.034973145,-0.15783691,-0.038085938,-0.013031006,0.037322998,0.09637451,-0.021713257,-0.08074951,0.04248047,0.030578613,-0.013046265,0.09283447,-0.08734131,0.047088623,-0.09460449,-0.020446777,0.022384644,-0.009780884,0.030670166,0.048980713,-0.017440796,-0.000998497,-0.029724121,0.118774414,-0.018173218,-0.017059326,0.024124146,0.046936035,-0.046142578,-0.009353638,-0.00060749054,0.09259033,-0.05758667,-0.007282257,-0.07550049,0.032348633,-0.02104187,0.08325195,0.044433594,-0.0035324097,-0.0039634705,0.02142334,-0.015701294,0.08459473,-0.07122803,0.050689697,-0.057434082,0.0390625,-0.004753113,-0.004787445,0.03756714,0.001698494,0.060455322,-0.05267334,0.006603241,0.07330322,0.05368042,0.058013916,-0.067993164,-0.053619385,-0.06506348,0.03970337,-0.02267456,0.055267334,-0.004360199,0.0024337769,-0.029083252,-0.0096206665,-0.113586426,-0.038635254,0.021728516,0.04675293,0.003156662,-0.017425537,-0.11981201,-0.0032367706,-0.06439209,0.078063965,0.025726318,-0.09295654,-0.06561279,-0.025421143,0.07891846,-0.034210205,0.035339355,0.043548584,-0.006450653,-0.06347656,0.044769287,-0.004524231,-0.06036377,-0.04168701,0.07165527,-0.015487671,0.0143585205,-0.04626465,-0.022445679,-0.037902832,0.005580902,0.10394287,0.022979736,0.023712158,-0.07305908,-0.09454346,-0.050079346,-0.034942627,-0.05783081,-0.05508423,0.0440979,0.044830322,-0.09320068,-0.054138184,0.0047454834,-0.005744934,0.103515625,0.021484375,0.031021118,-0.03741455,-0.13879395,0.017715454,-0.029556274,0.037963867,0.0602417,-0.006137848,-0.002084732,-0.0045166016,0.043151855,0.0012693405,0.023071289,0.044677734,-0.0077438354,0.062805176,0.042297363,-0.06958008,0.10467529,0.018798828,0.00030970573,0.021316528,-0.09466553,-0.037231445,0.0078086853,-0.06225586,-0.07141113,0.027709961,-0.036895752,-0.06390381,0.07183838,0.001156807,-0.006252289,0.020187378,0.004558563,-0.0072402954,0.019546509,-0.06561279,0.036834717,-0.005508423,-0.083740234,-0.048461914,0.04949951,-0.006072998,0.020385742,0.031982422,0.015930176,-0.011520386,-0.015396118,0.07678223,-0.02671814,0.046295166,0.029663086,-0.048309326,-0.036956787,0.013824463,-0.066101074,-0.0002259016,0.005996704,-0.02003479,0.0049095154,0.03515625,-0.042510986,0.08782959,-0.012741089,0.034301758,-0.018615723,0.05001831,-0.0034046173,-0.008171082,0.019348145,-0.06124878,-0.042510986,0.019317627,0.033843994,0.059783936,0.009353638,0.08166504,-0.034332275,0.07965088,-0.022109985,-0.10809326,-0.11401367,-0.0061950684,-0.010826111,0.004432678,0.010047913,-0.06982422,-0.011962891,-0.09118652,0.0060310364,0.060455322,-0.08001709,-0.005126953,0.06951904,-0.037261963,0.0011434555,-0.1348877,-0.02861023,-0.0071983337,-0.064331055,-0.034088135,0.030181885,0.04257202,-0.025177002,-0.032043457,0.009490967,0.047210693,-0.015991211,-0.02281189,0.0073394775,-0.03515625,-0.014228821,0.02154541,0.086120605,0.097595215,0.074279785,0.058166504,0.05596924,0.0059280396],"created_at":1735875660547,"nchars":620},"50":{"title":"15.특정 거리의 도시 찾기","path":"1. Project/이것이 취업을 위한 코딩테스트다/15.특정 거리의 도시 찾기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735714479219,"mtime":1735714598239,"tags":[],"extension":"md","metadata":{"created":"2025/01/01 15:54:39","modified":"2025/01/01 15:56:38"},"id":"ef586c0a890322cc0d74e2410f35bbd1","content":"\n\nNOTE TITLE: [[15.특정 거리의 도시 찾기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:54:39\",\"modified\":\"2025/01/01 15:56:38\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18352\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이 \n- BFS (너비 우선 탐색) \n- 단방향 그래프이고, 시작점`x`가 주어졌을때 최단 거리 `k`인 노드 번호를 구하는 문제\n\t- 최단거리가 `k`인 도시가 없다면 `-1` 출력\n\n### 제출 코드 \n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, m, k, x;\n    private static List<List<Integer>> adj;\n    \n    private static void input() {\n        n = inputProcessor.nextInt(); // 도시의 개수 (노드)\n        m = inputProcessor.nextInt(); // 도로의 개수 (간선)\n        k = inputProcessor.nextInt(); // 거리가 K인 도시를 찾는다\n        x = inputProcessor.nextInt(); // 출발 도시\n\n        adj = new ArrayList<>();\n        for(int i = 0; i <= n; i++) {\n            adj.add(new ArrayList<>());\n        }\n\n        for(int i = 1; i <= m; i++) {\n            int a = inputProcessor.nextInt();\n            int b = inputProcessor.nextInt();\n\n            adj.get(a).add(b);\n        }\n    }\n\n    private static void pro() {\n        Deque<Integer> que = new ArrayDeque<>();\n        que.add(x);\n\n        int[] dist = new int[n + 1];\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[x] = 0;\n\n        while(!que.isEmpty()) {\n            int cur = que.poll();\n\n            for(int next : adj.get(cur)) {\n                if(dist[next] != Integer.MAX_VALUE) continue;\n\n                dist[next] = dist[cur] + 1;\n                que.add(next);\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(dist[i] == k) result.add(i);\n        }\n\n        if(result.isEmpty()) {\n            sb.append(-1);\n        } else {\n            for (int v : result) {\n               sb.append(v).append(\"\\n\");\n            }\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.04522705,-0.046020508,0.011695862,0.08679199,0.0925293,-0.028564453,-0.02973938,0.009803772,0.013557434,0.10003662,0.04043579,-0.010826111,-0.06097412,0.01574707,-0.023925781,-0.017211914,0.035980225,0.007423401,-0.03378296,0.002948761,0.068725586,0.0032997131,-0.110961914,0.051574707,-0.0074806213,0.0068244934,-0.09869385,0.14331055,-0.008628845,-0.007247925,-0.030838013,-0.050872803,-0.044036865,-0.010040283,0.018600464,0.07446289,0.06097412,-0.038024902,0.055480957,-0.08380127,0.03677368,-0.036712646,0.07208252,0.06036377,-0.0071868896,0.012306213,0.054107666,0.043304443,-0.04046631,0.08166504,-0.029327393,-0.016159058,0.058288574,-0.120666504,0.05480957,-0.00013625622,0.05609131,0.005279541,0.009063721,0.028717041,0.08514404,0.049835205,-0.044403076,0.09899902,0.070007324,-0.0925293,0.0015058517,-0.031204224,0.037200928,-0.06750488,0.0030212402,0.00051021576,0.012687683,-0.047821045,0.027816772,0.0064811707,-0.016342163,-0.03451538,0.000910759,-0.05218506,0.027908325,-0.09655762,0.026657104,-0.0064353943,0.0011873245,-0.01638794,-0.0048179626,0.021026611,-0.049224854,-0.0065994263,0.034698486,0.05960083,0.0012197495,0.04699707,-0.03479004,0.03286743,-0.018951416,0.05307007,0.0904541,0.047546387,-0.03189087,0.011787415,0.007980347,-0.044433594,-0.077941895,0.07116699,0.063964844,-0.045959473,-0.056121826,-0.00030493736,-0.093933105,-0.002216339,-0.04840088,0.021102905,-0.088256836,0.095336914,0.06695557,-0.030090332,-0.034240723,0.015640259,-0.06347656,0.034729004,-0.050354004,0.015670776,-0.032592773,0.06866455,0.020248413,0.025360107,-0.062805176,0.007167816,0.010406494,0.04660034,-0.006000519,0.024993896,0.08227539,-0.054626465,0.021087646,0.10827637,0.014305115,-0.03189087,-0.032165527,-0.0074043274,-0.052246094,-0.0105896,-0.029006958,0.07354736,-0.083618164,-0.107910156,0.021438599,-0.01574707,-0.00076818466,0.017120361,-0.13012695,0.042938232,-0.11053467,-0.018157959,0.041168213,0.02268982,-0.0859375,0.10675049,-0.10070801,0.06512451,-0.054718018,-0.14990234,0.04559326,0.007045746,0.011451721,0.056549072,0.03277588,-0.011413574,0.054595947,0.05291748,-0.036621094,-0.050567627,-0.010307312,0.040161133,-0.035308838,-0.0184021,-0.008598328,-0.0039482117,0.05722046,0.01876831,-0.073913574,-0.03439331,0.0126953125,0.08276367,-0.036376953,-0.04989624,-0.033813477,0.0011606216,-0.029037476,0.05984497,-0.0524292,-0.025756836,-0.012962341,0.035186768,-0.010353088,-0.0015869141,-0.011932373,-0.029174805,0.060150146,-0.09429932,0.0018825531,0.08392334,0.045562744,0.014572144,0.024139404,0.0085372925,-0.058929443,0.049713135,0.08666992,0.02609253,0.021728516,0.045715332,-0.01424408,-0.053009033,-0.1003418,0.021118164,-0.045135498,0.07684326,0.01977539,-0.05291748,-0.019958496,-0.05947876,-0.086242676,-0.011306763,-0.025131226,-0.11187744,-0.06109619,0.008277893,0.076049805,0.0000113248825,0.025741577,-0.0077209473,0.06707764,0.024627686,0.095336914,-0.026229858,-0.057525635,-0.07128906,-0.01550293,0.054016113,0.019882202,-0.029846191,-0.055725098,-0.043304443,0.025939941,0.02508545,-0.038330078,-0.042785645,0.007118225,-0.04171753,-0.1071167,-0.07336426,-0.013130188,0.0073509216,-0.022964478,0.035308838,-0.0925293,-0.0034255981,-0.028289795,0.041900635,0.03289795,-0.016555786,-0.0030593872,-0.111083984,-0.052886963,-0.044677734,0.10583496,0.007083893,0.025985718,0.03338623,0.019195557,-0.041992188,-0.0073432922,-0.07141113,0.11035156,0.068847656,0.03286743,-0.032348633,0.005001068,-0.010391235,0.08416748,-0.059783936,-0.015686035,0.030822754,-0.008346558,0.0034942627,0.02935791,0.0569458,-0.08441162,0.021652222,-0.09112549,-0.016784668,0.018356323,-0.032409668,-0.0018005371,0.0289917,0.064331055,0.003408432,0.08679199,-0.012336731,-0.0069999695,-0.024963379,-0.028198242,0.008171082,0.07928467,-0.056030273,0.03652954,0.013885498,0.012718201,-0.03225708,-0.024398804,0.10827637,-0.012641907,0.044891357,0.03439331,-0.035827637,-0.052825928,0.008964539,0.043823242,0.0058174133,0.04034424,-0.013153076,0.009933472,-0.016082764,-0.00242424,0.10992432,-0.04385376,-0.0904541,-0.0079574585,0.048797607,-0.022613525,-0.030075073,-0.07232666,-0.06939697,-0.01713562,-0.022720337,0.09527588,-0.040527344,-0.00038909912,0.0007929802,0.052703857,-0.0022945404,-0.011932373,-0.040405273,-0.121398926,0.07885742,-0.064941406,-0.02796936,-0.019241333,-0.059509277,0.03237915,0.023040771,0.02243042,-0.052825928,0.03378296,0.012519836,0.043273926,0.04473877,0.020523071,-0.028198242,-0.00982666,-0.11743164,-0.05142212,0.026123047,0.05026245,-0.025222778,0.058624268,0.064208984,0.048950195,0.015853882,-0.0087509155,-0.008460999,0.02230835,-0.07147217,0.058380127,0.029647827,0.07928467,0.060516357,0.014755249,0.007663727,0.054901123,-0.09509277],"created_at":1735875660547,"nchars":3384},"51":{"title":"14.외벽점검 (🔺)","path":"1. Project/이것이 취업을 위한 코딩테스트다/14.외벽점검 (🔺).md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794036137,"mtime":1735825130515,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:36","modified":"2025/01/02 22:38:50"},"id":"78c4f8d9eab3431ad61ce0f242ab5415","content":"\n\nNOTE TITLE: [[14.외벽점검 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:36\",\"modified\":\"2025/01/02 22:38:50\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60062\n\n### 시간 복잡도 \n- weak 최대 길이 15,\bdist 최대 8길이일때 \n\t- 최악의 경우 각 자리마다 모든 인원을 써서 탐색 가능하다면 `O(8^15)` 걸릴 수 있지만, 백트래킹으로 인해 <u>이보다 훨씬 적게 걸림</u>\n\n### 풀이 \n- 구현, 비트 마스킹, 완전 탐색\n- 시계 방향만 고려\n\t- `현재 위치 < 다음 위치` 인 경우 `{java} diff += n` 을 하면 차이를 구할 수 있다\n\t-  예로 n = 12이고 cur = 10, next = 1인 경우 `diff = -8 + 12` 가 되어 거리 차이를 구할 수 있다\n- `weak`의 길이가 최대 15이하 이므로 `{java}int visited` (32bit)로 충분하게 **방문 표시** 가능\n- <u>각 weak 시작점 별로 재귀 탐색을 수행하고, dist는 오름차순 정렬 후 역방향으로 소비</u> \n- 현재 작업자의 dist보다 diff가 더 큰 경우 (`dist < diff`) 반복문 종료\n\t- 전부 방문 했을 경우 answer 갱신 후 return\n\t- 아직 방문 하지 않은 곳이 있는 경우 재귀 방식으로 재호출\n\n**틀린 부분**.  아직 방문하지 않은 곳을 처리하기 위해 pointer를 사용하여 다음 노드 처리 재귀 호출하였는데, 그럴 필요 없이 아래와 같이 반복문 순회하면서 추가 인원 할당하면 되었음\n```java\nfor(int i = 0; i < len; i++) {\n\tif((visited & (1 << i)) != 0) continue;\n\t\n\trec(i, used + 1, visited);\n}\n```\n### 제출 코드\n```java hl:50-54\nimport java.util.*;\n\nclass Solution {\n    private int answer, len, _n;\n    private int[] WEAK, DIST;\n    \n    public int solution(int n, int[] weak, int[] dist) {\n        answer = Integer.MAX_VALUE;\n        \n        _n = n;\n        WEAK = weak;\n        len = WEAK.length;\n        DIST = dist;\n        Arrays.sort(DIST);\n        \n        for(int i = 0; i < WEAK.length; i++) {\n            rec(i, 1, 0);\n        }\n        \n        return answer == Integer.MAX_VALUE ? -1 : answer;\n    }\n    \n    private void rec(int cur, int used, int visited) {\n        if(used > DIST.length) return; // 모든 사람을 다 써도 안 되는 경우 \n        if(used >= answer) return; // 결과값보다 크다면\n        \n        for(int i = 0; i < len; i++) {\n            int next = (cur + i) % len;\n            int diff = WEAK[next] - WEAK[cur];\n            \n            if(cur > next) {\n                diff += _n;\n            }\n            \n            if(DIST[DIST.length - used] < diff) {\n                break;\n            }            \n                \n            visited |= (1 << next); // 방문 표시\n        }\n        \n        \n        // 다 방문한 경우\n        if(visited == (1 << len) - 1) {\n            answer = Math.min(answer, used);\n            return;\n        }\n        \n        // 아직 방문이 필요한 경우\n        for(int i = 0; i < len; i++) {\n            if((visited & (1 << i)) != 0) continue;\n            \n            rec(i, used + 1, visited);\n        }\n    }\n}\n```","embedding":[0.018997192,-0.066345215,-0.0115356445,0.06561279,0.09753418,-0.045837402,-0.059448242,-0.008361816,0.025604248,0.12634277,-0.04547119,0.011009216,-0.014541626,0.083496094,0.022415161,-0.02861023,0.07879639,-0.02571106,-0.09008789,-0.029586792,0.025939941,-0.05178833,-0.068115234,0.0129776,0.008987427,-0.014282227,-0.055664062,0.06640625,0.0015106201,-0.012893677,0.071899414,-0.038848877,-0.07043457,-0.0021629333,-0.029327393,0.058044434,0.027801514,0.052825928,-0.01953125,-0.16027832,0.0085372925,-0.044403076,0.0680542,0.121520996,-0.03656006,0.017654419,0.022232056,0.06970215,-0.0076141357,0.0036334991,-0.015342712,-0.025787354,-0.0023841858,-0.057037354,0.004173279,-0.03414917,0.07208252,0.03591919,0.015541077,0.07623291,0.08312988,0.07897949,-0.028182983,0.060058594,0.1005249,-0.050872803,-0.05493164,-0.010887146,0.021972656,-0.101135254,-0.010948181,0.0031871796,0.02746582,0.0018043518,0.0014162064,0.018630981,0.091430664,-0.051208496,-0.016799927,-0.034179688,-0.022247314,-0.06921387,-0.05859375,0.050720215,-0.038208008,0.071777344,0.039916992,-0.085754395,-0.04937744,-0.032836914,0.034454346,0.05682373,-0.029418945,0.009880066,-0.032104492,0.033966064,-0.013435364,-0.025741577,0.053588867,0.004463196,-0.057525635,-0.04864502,0.03274536,-0.041046143,-0.040283203,0.028213501,0.044281006,0.022827148,0.029525757,0.05239868,-0.10595703,0.041778564,-0.02444458,-0.013298035,0.051696777,0.0072402954,0.029296875,-0.03640747,0.04940796,-0.014572144,0.004108429,0.017150879,-0.05734253,-0.022262573,-0.060394287,0.045837402,0.10900879,0.054748535,-0.10864258,0.09466553,0.042022705,-0.020858765,-0.049468994,0.060272217,0.10809326,-0.047180176,0.051208496,0.07904053,-0.07910156,-0.033203125,-0.019882202,0.012275696,0.04107666,0.03552246,-0.07727051,0.026855469,-0.021743774,-0.10461426,0.05621338,-0.05078125,-0.026306152,0.054107666,0.009918213,0.042785645,-0.023590088,-0.0770874,0.06567383,0.036224365,-0.04425049,0.098083496,-0.09472656,0.0259552,-0.083862305,-0.081848145,-0.01411438,-0.008483887,0.052093506,0.0513916,0.060180664,0.0129470825,0.06488037,0.08959961,0.04522705,-0.0004274845,-0.013801575,0.038116455,-0.02029419,-0.06188965,-0.020690918,-0.00756073,-0.028320312,-0.03753662,-0.06222534,-0.093566895,-0.010444641,0.015975952,-0.05065918,-0.06726074,0.004501343,0.044281006,-0.09069824,0.030899048,-0.034942627,-0.02192688,-0.009597778,0.06738281,0.010040283,-0.04159546,0.027160645,-0.06512451,0.02407837,-0.025390625,0.049804688,0.09857178,0.046844482,-0.0041160583,0.05117798,-0.04385376,-0.056610107,0.0025577545,-0.015342712,0.002067566,-0.015365601,0.030288696,-0.00573349,0.0149002075,-0.09637451,-0.010620117,0.006526947,0.0357666,0.01751709,-0.011199951,-0.022766113,-0.074157715,-0.052215576,0.025360107,0.04837036,-0.09655762,-0.024749756,0.024902344,0.04260254,-0.023590088,0.022872925,0.0011854172,0.05706787,0.058746338,0.082458496,0.051696777,-0.017654419,-0.033996582,-0.02053833,-0.023086548,0.018157959,-0.051513672,0.018310547,-0.028366089,0.04244995,0.067993164,-0.076660156,-0.030029297,-0.022583008,-0.07904053,-0.05581665,-0.05758667,-0.023330688,-0.00043940544,-0.03289795,0.08703613,-0.076293945,-0.017074585,0.10638428,0.050689697,0.124938965,0.0002579689,-0.072631836,-0.052520752,-0.06903076,-0.08496094,0.022354126,0.05392456,0.030090332,-0.002527237,-0.020858765,0.0004246235,-0.076293945,-0.0234375,0.10784912,0.043670654,-0.027404785,-0.001086235,-0.045532227,-0.012039185,0.15344238,0.01838684,0.0035266876,-0.02494812,-0.003004074,0.055541992,0.04324341,0.06616211,-0.07788086,-0.00030851364,-0.050079346,-0.0385437,0.0021324158,-0.042236328,-0.027526855,0.026748657,-0.009033203,-0.012649536,0.08496094,-0.048065186,-0.025787354,-0.031143188,-0.049194336,-0.021591187,0.09790039,-0.029388428,-0.053344727,0.015449524,0.016342163,-0.045410156,-0.0017604828,0.04058838,-0.0052833557,0.03756714,0.018508911,0.0047416687,-0.0020999908,0.004299164,0.039916992,-0.030807495,0.052001953,-0.068115234,0.029037476,-0.008140564,-0.06365967,0.096069336,-0.052215576,-0.07055664,-0.010154724,0.07501221,-0.03152466,-0.026245117,-0.03756714,-0.029327393,-0.088012695,-0.021850586,0.03475952,0.046783447,0.048675537,-0.013977051,-0.010765076,0.007675171,-0.07507324,-0.027404785,-0.09655762,0.101745605,-0.055541992,-0.000039875507,-0.014564514,-0.092285156,0.05065918,-0.019119263,0.047058105,-0.0051116943,0.021392822,-0.051605225,0.03857422,-0.077819824,0.032928467,-0.044433594,-0.048858643,-0.032287598,0.05886841,0.019195557,0.020126343,0.022216797,0.050476074,0.020050049,0.07879639,0.035583496,0.047668457,-0.049682617,0.044403076,-0.08862305,0.08520508,0.038757324,0.037841797,0.030654907,0.06726074,0.0029411316,0.03137207,-0.025527954],"created_at":1735875660547,"nchars":2434},"52":{"title":"13.치킨배달","path":"1. Project/이것이 취업을 위한 코딩테스트다/13.치킨배달.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794032355,"mtime":1735808082787,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:32","modified":"2025/01/02 17:54:42"},"id":"8fa3ccb0db0015e5729678bf219423a0","content":"\n\nNOTE TITLE: [[13.치킨배달]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:32\",\"modified\":\"2025/01/02 17:54:42\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/15686\n\n### 시간 복잡도 \n- 치킨집 조합 : `O(xCm)`\n\t- x는 N * N 배열에서 치킨집의 총 개수\n- 도시의 치킨 거리 : `O(h * m)`\n\t- h : 모든 집의 개수 (1)\n\t- m : 최대 선택 가능한 치킨집 개수 \n\n### 풀이 \n- 백트래킹, 구현 \n- 치킨집을 최대 M개 선택한다\n\t- `치킨 거리` : 집과 가장 가까운 치킨집 사이의 거리\n\t- `도시의 치킨 거리` : 모든 집의 치킨 거리의 합\n- `도시의 치킨 거리`의 최소값을 구한다","embedding":[0.032104492,-0.0062217712,0.006526947,-0.002456665,0.10852051,-0.06100464,-0.06732178,-0.015808105,0.041778564,0.123046875,0.0065994263,0.0037403107,0.072265625,-0.027816772,-0.054840088,-0.018798828,-0.044311523,-0.014274597,0.01701355,-0.037963867,0.12225342,0.04562378,0.011833191,-0.017105103,0.029342651,0.016937256,0.0046844482,0.09698486,0.033477783,-0.025817871,-0.038024902,-0.024871826,-0.15454102,-0.05407715,0.032714844,0.034942627,0.022232056,-0.058502197,0.0030536652,-0.100097656,0.008964539,-0.0072517395,0.079956055,-0.019241333,0.03237915,0.024337769,0.08709717,0.011688232,-0.033935547,0.07525635,-0.026107788,-0.015731812,0.05114746,-0.09429932,0.07104492,0.010017395,0.025375366,-0.010360718,-0.05493164,0.05508423,0.069885254,0.06762695,-0.08691406,-0.01637268,0.09991455,-0.099121094,0.031188965,-0.016296387,0.09869385,-0.06970215,-0.07183838,0.007896423,0.06414795,0.02166748,0.008285522,-0.04611206,-0.006122589,-0.08502197,0.051239014,-0.0049591064,0.0004851818,-0.028884888,0.019470215,-0.035461426,-0.0418396,0.027709961,0.046722412,-0.018478394,-0.06329346,0.052703857,0.051605225,-0.008644104,0.02406311,-0.0037574768,0.0006685257,0.015037537,0.008735657,0.020751953,0.029037476,0.04916382,0.026046753,-0.070373535,0.004169464,-0.0413208,0.0033855438,0.07183838,0.03314209,-0.0519104,0.050079346,-0.057434082,-0.046661377,-0.029388428,-0.06933594,0.03036499,-0.0031967163,0.053588867,0.105407715,-0.03591919,0.048034668,-0.038482666,-0.028686523,0.030761719,-0.052490234,0.014572144,0.03062439,0.07397461,-0.026947021,0.041168213,-0.121032715,0.04360962,0.050567627,-0.026977539,-0.07104492,0.051116943,0.0011587143,0.011665344,0.053375244,0.10986328,-0.06866455,-0.06121826,-0.039276123,-0.008346558,-0.048309326,-0.019592285,-0.010810852,0.066833496,0.07342529,-0.049560547,0.041748047,0.026611328,-0.02444458,-0.054656982,0.036315918,0.019317627,-0.08343506,-0.018127441,-0.011726379,0.03744507,0.014518738,0.10699463,-0.052001953,0.025650024,-0.11126709,-0.14526367,0.08013916,-0.091430664,0.032318115,0.060760498,0.018966675,-0.008392334,-0.039215088,0.070129395,-0.0059127808,-0.004711151,-0.00687027,0.04333496,0.06274414,0.0013847351,0.020965576,0.01838684,-0.019500732,-0.05831909,-0.11010742,-0.07019043,0.03729248,0.025238037,0.009117126,-0.10522461,-0.038024902,0.00034451485,0.012321472,0.03552246,-0.02041626,-0.043945312,0.02609253,0.047424316,-0.08154297,-0.009628296,0.07672119,-0.016815186,0.011405945,-0.09362793,0.037902832,0.045715332,0.0340271,0.066467285,0.010047913,0.03161621,-0.025817871,0.032928467,0.0118255615,0.04272461,0.030914307,0.03479004,0.024627686,0.048309326,-0.05505371,0.033355713,-0.060913086,0.053466797,0.014945984,-0.028213501,-0.038635254,-0.086242676,-0.04788208,0.04522705,-0.0064201355,-0.13098145,0.024749756,-0.032562256,-0.047424316,0.027145386,-0.01423645,0.07116699,0.089416504,0.0038146973,0.036987305,-0.027267456,-0.11114502,-0.08685303,-0.01802063,0.06896973,0.08129883,0.042633057,-0.023513794,-0.100097656,0.007030487,0.012359619,-0.017532349,0.033294678,-0.0473938,-0.026412964,-0.020431519,-0.06756592,-0.01676941,0.04272461,0.03643799,0.021850586,0.033477783,-0.110839844,-0.027191162,0.056915283,0.072265625,-0.05142212,-0.039398193,-0.11505127,0.017242432,-0.028457642,0.01625061,-0.01977539,0.0178833,0.013031006,0.025283813,-0.059387207,0.0024776459,-0.03201294,0.07672119,0.08416748,0.001499176,-0.072265625,-0.0060653687,-0.09802246,0.09362793,0.0546875,0.010719299,0.02357483,0.012031555,0.08068848,0.020339966,0.06222534,-0.12030029,0.03994751,0.0033493042,-0.06842041,0.05230713,-0.04385376,-0.026000977,-0.03616333,-0.061706543,-0.005207062,0.053100586,-0.021759033,-0.020965576,-0.011367798,-0.04067993,-0.019943237,0.033233643,-0.01914978,-0.06341553,-0.004173279,-0.032287598,-0.035736084,-0.010597229,0.07208252,0.042297363,-0.03274536,0.04046631,-0.03366089,-0.02658081,0.03375244,-0.033477783,0.0015697479,0.029144287,-0.03640747,0.13256836,-0.0063591003,-0.07775879,0.09503174,-0.047088623,0.025131226,0.0031051636,0.033294678,0.0012025833,-0.027923584,-0.07067871,-0.08105469,0.037475586,-0.1071167,-0.010154724,0.0013542175,0.023742676,-0.030822754,0.044708252,0.014671326,-0.050567627,0.00059986115,-0.10107422,0.020462036,-0.064697266,-0.022018433,0.029693604,-0.08081055,0.07385254,-0.03225708,0.0039405823,0.009223938,0.0008568764,-0.04272461,0.061920166,0.021636963,0.06677246,-0.052490234,0.021316528,0.00010752678,-0.0005950928,-0.034210205,0.06149292,-0.010574341,0.020370483,0.064453125,-0.014442444,-0.004878998,0.019470215,-0.027191162,-0.023742676,0.0047721863,0.03970337,-0.022613525,-0.060455322,0.022857666,0.072265625,-0.017059326,0.057037354,-0.018005371],"created_at":1735875660548,"nchars":432},"53":{"title":"13.치킨배달","path":"1. Project/이것이 취업을 위한 코딩테스트다/13.치킨배달.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794032355,"mtime":1735808082787,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:32","modified":"2025/01/02 17:54:42"},"id":"cc49432675423864851bf22df8d3012e","content":"\n\nNOTE TITLE: [[13.치킨배달]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:32\",\"modified\":\"2025/01/02 17:54:42\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 풀이 \n- 백트래킹, 구현 \n- 치킨집을 최대 M개 선택한다\n\t- `치킨 거리` : 집과 가장 가까운 치킨집 사이의 거리\n\t- `도시의 치킨 거리` : 모든 집의 치킨 거리의 합\n- `도시의 치킨 거리`의 최소값을 구한다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static List<Chicken> chickenList;\n    private static List<House> houseList;\n    private static int n, m, result;\n    private static void input() {\n        n = inputProcessor.nextInt(); // N * N 도시\n        m = inputProcessor.nextInt(); // 폐업하지 않을 치킨집 최대 M개\n\n        chickenList = new ArrayList<>();\n        houseList = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                int v = inputProcessor.nextInt();\n\n                if(v == 1) { // 집\n                    houseList.add(new House(i, j));\n                } else if(v == 2) { // 치킨집\n                    chickenList.add(new Chicken(i, j));\n                }\n            }\n        }\n\n        result = Integer.MAX_VALUE;\n    }\n\n    private static class Chicken {\n        private final int x;\n        private final int y;\n\n        public Chicken(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static class House {\n        private final int x;\n        private final int y;\n\n        public House(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static void pro() {\n        combination(0, 0, new int[m]);\n\n        sb.append(result);\n    }\n\n    private static void combination(int idx, int count, int[] selected) {\n        if(count == m) {\n            int distance = 0; // 도시의 치킨 거리 = 모든 집의 치킨 거리의 합\n            for(House h : houseList) {\n                 // 치킨 거리 = 집과 가장 가까운 치킨집 사이의 거리\n                int minDiff = Integer.MAX_VALUE; \n\n                for(int i : selected) {\n                    Chicken c = chickenList.get(i);\n                    int diff = Math.abs(h.x - c.x) + Math.abs(h.y - c.y);\n                    if(diff < minDiff) {\n                        minDiff = diff;\n                    }\n                }\n\n                distance += minDiff;\n            }\n\n            result = Math.min(result, distance);\n            return;\n        }\n        if(idx >= chickenList.size()) return;\n\n        // 현재 치킨집(idx)을 선택한다\n        selected[count] = idx;\n        combination(idx + 1, count + 1, selected);\n        selected[count] = -1;\n\t\t\n\t\t// 현재 치킨집(idx)을 선택하지 않는다\n\t\tcombination(idx + 1, count, selected);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.00046348572,0.0011177063,0.010864258,0.02444458,0.062469482,-0.08984375,-0.0009584427,0.006454468,-0.0015506744,0.111450195,0.009170532,0.029953003,0.047210693,-0.01838684,0.007987976,-0.036865234,0.0015668869,-0.032806396,0.015342712,-0.02029419,0.11077881,0.03579712,0.0014858246,0.0070152283,0.013748169,0.027191162,0.0021476746,0.1003418,0.009979248,-0.040252686,-0.066833496,-0.05722046,-0.093688965,-0.01436615,0.051452637,0.06573486,0.033843994,-0.009185791,-0.023956299,-0.12915039,0.02658081,-0.03375244,0.11151123,-0.029769897,0.015808105,0.0060806274,0.09857178,0.034484863,-0.043426514,0.09484863,-0.057281494,-0.020828247,0.066101074,-0.07373047,0.10961914,-0.02218628,0.05645752,0.005344391,-0.086120605,0.050354004,0.09674072,0.070007324,-0.019729614,0.037902832,0.07299805,-0.082214355,0.038635254,-0.027404785,0.08227539,-0.026412964,-0.05429077,0.0055999756,0.039794922,0.032409668,0.0005569458,-0.076049805,0.012390137,-0.10620117,0.054351807,-0.06555176,-0.02798462,-0.05230713,0.0058555603,0.012771606,-0.056243896,0.041625977,0.029083252,-0.035095215,-0.05218506,-0.047668457,0.058746338,0.0038928986,0.00040245056,0.026550293,-0.003622055,0.026062012,-0.047210693,0.014335632,0.08306885,0.012252808,-0.001168251,-0.08544922,-0.017440796,-0.019454956,-0.012145996,0.051452637,-0.0017719269,-0.07788086,0.06781006,0.007156372,-0.059570312,-0.014633179,-0.03942871,0.011947632,-0.03918457,0.029312134,0.04776001,-0.06817627,0.056793213,-0.03378296,-0.020065308,-0.008163452,-0.085754395,-0.03366089,0.008834839,0.11236572,0.042297363,0.025375366,-0.12335205,0.021011353,0.013969421,-0.029022217,-0.04916382,0.0793457,0.0019454956,-0.011474609,0.05645752,0.059631348,-0.058380127,-0.08630371,-0.055877686,-0.03466797,-0.00016629696,-0.020141602,-0.06542969,0.023132324,0.054504395,-0.0848999,0.016189575,0.024215698,0.019836426,-0.0027618408,0.034729004,-0.0070724487,-0.011260986,-0.05633545,-0.017807007,0.015853882,-0.050933838,0.14111328,-0.01777649,0.060302734,-0.09399414,-0.13635254,0.054870605,-0.016143799,0.11151123,0.022323608,0.0065574646,0.022262573,-0.024810791,0.066345215,-0.006412506,0.018798828,-0.041259766,0.05682373,0.007865906,0.022460938,0.036376953,0.029144287,-0.020935059,-0.03338623,-0.113586426,-0.054718018,0.04046631,0.07019043,0.0020542145,-0.06225586,-0.025543213,-0.058532715,-0.024520874,0.039398193,0.0151901245,-0.091552734,-0.023254395,0.109313965,-0.06915283,-0.025756836,0.050964355,0.014335632,0.049682617,-0.06707764,0.0657959,0.028869629,0.111083984,0.05999756,-0.00730896,0.048980713,-0.048461914,0.079589844,0.02772522,-0.0028438568,0.015449524,0.02192688,0.05496216,0.03201294,-0.022491455,0.050689697,-0.078552246,0.06628418,0.034729004,-0.021148682,-0.04525757,-0.062561035,-0.07366943,0.02949524,-0.05053711,-0.12414551,-0.0079574585,-0.009651184,-0.0017328262,0.047332764,-0.03475952,0.057891846,0.036468506,0.040802002,0.042419434,0.004852295,-0.04510498,-0.101501465,0.022857666,0.049591064,0.09320068,0.017501831,-0.036132812,-0.101745605,-0.019836426,-0.032226562,0.02746582,0.055511475,-0.009742737,-0.004234314,-0.0022029877,-0.030944824,-0.095581055,0.047180176,-0.002128601,0.021575928,0.00021994114,-0.06713867,0.008407593,0.05392456,0.074523926,-0.02017212,-0.038330078,-0.07977295,-0.054718018,-0.038635254,-0.009300232,0.021347046,-0.019470215,0.05014038,0.024154663,-0.021591187,0.03439331,-0.028900146,0.093688965,0.0814209,0.02960205,-0.051849365,-0.05795288,-0.032073975,0.11010742,0.0592041,0.009803772,0.027404785,-0.030944824,0.0859375,0.0066223145,0.057800293,-0.11218262,0.04852295,-0.048339844,-0.08782959,0.070495605,-0.078186035,-0.04156494,0.02192688,-0.034179688,0.032470703,0.03704834,-0.04257202,0.01134491,0.0056610107,-0.0004248619,-0.013801575,0.044769287,-0.02935791,-0.04397583,0.02748108,-0.037719727,-0.06665039,0.026382446,0.08508301,0.06506348,-0.019897461,0.03274536,-0.05001831,-0.03378296,0.04284668,-0.061035156,-0.012825012,0.021011353,-0.01838684,0.06842041,-0.014129639,-0.0440979,0.08166504,-0.013160706,-0.026565552,-0.0067367554,0.054840088,-0.06347656,0.0061798096,-0.01940918,-0.062561035,0.046875,-0.064941406,-0.008079529,-0.047729492,0.03173828,-0.011917114,0.015457153,0.058135986,-0.03555298,-0.037597656,-0.15686035,0.025985718,-0.036132812,-0.036010742,0.004348755,-0.067871094,0.061462402,-0.023361206,0.020553589,-0.00869751,-0.018692017,-0.06512451,0.0056419373,-0.0524292,0.012863159,-0.060791016,0.0024051666,-0.06738281,0.019073486,-0.017837524,0.0670166,-0.013404846,0.0335083,0.08544922,-0.008415222,0.030090332,0.006629944,-0.08312988,0.00012767315,-0.041168213,0.029891968,0.0013828278,-0.05343628,-0.003036499,0.0054397583,0.019439697,0.013191223,-0.042175293],"created_at":1735875660548,"nchars":4125},"54":{"title":"12.기둥과 보 설치","path":"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794028811,"mtime":1735818986940,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:28","modified":"2025/01/02 20:56:26"},"id":"49ff9486289f87cb0be0966e968f6b8d","content":"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60061\n\n### 시간 복잡도 \n- `O(N^2)`\n\t- 결과 배열만드는게 제일 오래 걸림 \n\t- build_frame은 최대 **1,000**\n### 풀이 \n- 구현\n- `{java}boolean[][] pole, boolean[][] bo` 선언하여 표시 처리\n\t- 이때 범위 조건 간소화를 위해 크기를 `n + 2` 로 초기화 한다 \n\t- 이렇게 할 경우 음수 조건만 신경쓰면 된다\n- 구조물이 몇개 설치했는지 알기 위해 `count` 를 선언하여 증감해준다\n- 구조물을 삭제할 때 현실적으로 조건식을 세우는 건 **불가능**하다\n\t- 그래서 현재 좌표에서 `-1, +1` 범위 내에 설치된 구조물이 있을 경우 유효성 검사를 수행한다\n\t- 만약 기존 설치된 구조물이 유효성 검사를 통과하지 못한다면 구조물을 삭제할 수 없다\n\t\t- 그러므로 삭제(**false**) 처리를 원복(**true**)한다 (`{java}boolean[][]`)\n\t- 구조물을 삭제할 수 있다면 `{java}count -= 1` \n\n\n**실수.** 기둥을 설치할 때 보의 한쪽 끝 부분 위에 있는지 확인하는 조건 하나 틀려서 찾지 못함\n```java hl:6\n// 수정 전\nprivate boolean buildablePole(int x, int y) {  \n\treturn y == 0  \n\t\t\t|| (0 < y && pole[x][y - 1])  \n\t\t\t|| (0 < x && bo[x - 1][y])  \n\t\t\t|| (bo[x + 1][y]);  // 보는 오른족 방향으로 설치*\n}  \n\n// 수정 후\nprivate boolean buildablePole(int x, int y) {  \n\treturn y == 0  \n\t\t\t|| (0 < y && pole[x][y - 1])  \n\t\t\t|| (0 < x && bo[x - 1][y])  \n\t\t\t|| (bo[x][y]);  \n}  \n```","embedding":[-0.013504028,-0.033477783,0.007247925,0.013175964,-0.011886597,-0.005004883,-0.0017728806,0.0036697388,0.030456543,0.057281494,0.03677368,-0.0027561188,0.077819824,0.057250977,0.031143188,-0.010215759,0.01159668,0.0041236877,-0.01776123,-0.019332886,0.030410767,-0.00907135,-0.016708374,0.04058838,0.02583313,0.011665344,-0.04309082,0.01876831,0.067993164,-0.030059814,-0.054504395,-0.061309814,-0.0027580261,-0.00084733963,0.10662842,0.022140503,0.027954102,0.020004272,-0.04638672,-0.08288574,0.008842468,-0.040802002,-0.024871826,0.06201172,-0.03277588,-0.04937744,-0.013832092,-0.00013923645,-0.014701843,-0.035125732,-0.0055503845,-0.0025100708,0.058166504,-0.09979248,-0.0020694733,0.03010559,0.082214355,0.013771057,0.02470398,0.071777344,0.057159424,0.020645142,-0.10876465,0.04296875,0.054901123,-0.061798096,-0.0039978027,-0.043914795,0.10443115,-0.09844971,0.020523071,-0.07495117,-0.03060913,0.035064697,0.044647217,-0.018203735,-0.009483337,0.023910522,0.05758667,-0.05105591,-0.021514893,0.024276733,-0.04208374,0.008773804,-0.108947754,0.044830322,-0.02116394,0.012588501,0.009140015,0.036895752,0.018096924,0.03353882,-0.09857178,0.01876831,-0.045654297,0.04083252,0.009788513,-0.0063323975,0.064575195,0.017440796,-0.009941101,-0.10241699,-0.005027771,-0.09918213,-0.019363403,0.057006836,0.014709473,-0.006916046,0.026321411,0.040008545,-0.02255249,-0.019424438,-0.0101623535,-0.043029785,0.060455322,0.016799927,0.02999878,-0.056884766,0.033599854,-0.08117676,-0.0076293945,0.027191162,-0.114746094,-0.05557251,-0.063964844,0.03829956,0.06561279,0.07556152,-0.094177246,0.059753418,-0.0063056946,0.0053863525,-0.040740967,0.15270996,0.09686279,-0.02822876,-0.041809082,0.09033203,-0.043670654,0.018692017,0.040649414,-0.042022705,-0.00057172775,0.000035703182,-0.03353882,0.06970215,-0.019332886,-0.13024902,0.06506348,-0.091674805,-0.0007247925,0.014282227,0.08154297,-0.027191162,-0.04724121,-0.029541016,0.04449463,0.049102783,-0.043762207,0.15478516,-0.054260254,0.03488159,-0.11065674,-0.0970459,0.091552734,-0.013473511,0.115234375,0.021224976,-0.012458801,0.014045715,0.035095215,0.14172363,0.022109985,0.0058784485,-0.021957397,0.09277344,-0.061401367,-0.05834961,0.023071289,0.011566162,0.008743286,0.025939941,-0.049102783,0.010673523,0.015365601,0.06604004,-0.0703125,0.049224854,-0.037628174,0.019638062,0.01524353,0.047698975,0.062683105,-0.080566406,-0.027664185,0.075805664,-0.039764404,-0.08831787,-0.00051259995,-0.022781372,0.08135986,-0.054534912,0.02368164,0.074157715,-0.009674072,-0.027801514,0.02330017,-0.027954102,-0.05758667,-0.00217247,0.017303467,-0.0034160614,-0.0703125,-0.008453369,0.0034732819,0.018966675,-0.09307861,0.0053253174,-0.085876465,0.08355713,0.01133728,-0.024856567,-0.029815674,0.013626099,-0.019699097,0.019958496,0.06854248,-0.16333008,-0.04864502,0.054626465,0.08355713,0.048309326,0.040985107,0.038238525,0.032440186,0.004322052,0.039916992,0.022781372,-0.019134521,-0.11578369,0.021759033,-0.021820068,0.038879395,-0.034484863,-0.022827148,-0.0446167,0.024276733,0.0597229,-0.015975952,-0.019973755,0.001709938,-0.051635742,-0.029418945,-0.07067871,-0.020507812,0.084472656,0.00013053417,0.030593872,-0.029678345,-0.02508545,-0.0014896393,-0.031341553,0.014213562,-0.009994507,-0.026763916,-0.09729004,-0.048339844,-0.004005432,0.08660889,0.045806885,0.01965332,0.034606934,-0.022964478,-0.004463196,0.0082092285,-0.04208374,0.040039062,0.05441284,0.01966858,-0.051605225,-0.052337646,-0.008987427,0.13427734,0.020706177,-0.07305908,0.06756592,-0.02470398,-0.03112793,0.11706543,-0.021896362,-0.07543945,0.055541992,0.053527832,-0.0024795532,0.06390381,-0.00032496452,0.0657959,-0.051727295,-0.03729248,0.010864258,0.08660889,-0.08416748,0.056762695,-0.032562256,0.012680054,0.02368164,0.02218628,0.0287323,-0.040039062,0.08404541,-0.0015869141,-0.008407593,-0.036590576,-0.010192871,-0.0602417,0.00095939636,-0.027008057,0.026824951,-0.051605225,-0.031829834,-0.011001587,-0.025527954,0.039886475,-0.060455322,-0.025665283,-0.013092041,-0.023040771,0.08868408,0.046020508,0.057037354,0.019424438,-0.0048561096,-0.059417725,0.015731812,-0.0234375,-0.06719971,-0.051757812,0.0440979,-0.026107788,-0.03277588,0.033996582,0.07092285,-0.014663696,0.045288086,0.014839172,-0.06011963,-0.10345459,0.040100098,-0.0362854,-0.002565384,-0.050964355,-0.09893799,0.066467285,-0.032684326,-0.04446411,0.03479004,-0.045410156,-0.099731445,-0.056671143,-0.080200195,-0.031921387,-0.06072998,0.050476074,0.01689148,-0.049865723,0.05029297,-0.01473999,0.03289795,0.0927124,-0.0036754608,0.032714844,-0.0027503967,0.08691406,-0.08618164,-0.013679504,-0.052703857,0.033233643,0.0058937073,-0.017608643,0.03250122,0.06695557,-0.008132935,0.016693115,0.015197754],"created_at":1735875660548,"nchars":1133},"55":{"title":"12.기둥과 보 설치","path":"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794028811,"mtime":1735818986940,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:28","modified":"2025/01/02 20:56:26"},"id":"a48169f8d45b497076fc671092c0a4b2","content":"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {","embedding":[-0.047973633,0.017623901,0.027511597,-0.06774902,-0.034942627,-0.06341553,0.01676941,0.0947876,0.01701355,0.031463623,0.0053253174,-0.008903503,0.06124878,-0.021087646,0.05847168,-0.0071868896,-0.020706177,0.012107849,0.05618286,-0.035064697,0.05545044,0.016448975,-0.0037078857,-0.0071525574,0.067871094,-0.008682251,-0.008270264,0.045898438,0.04473877,-0.0154800415,0.015670776,-0.03111267,-0.06591797,0.024414062,0.12347412,0.037109375,0.06756592,-0.007095337,0.0052261353,-0.08721924,-0.01676941,-0.016998291,0.05606079,0.07824707,-0.027053833,-0.04257202,0.019485474,-0.036743164,-0.0065307617,0.01928711,0.014595032,-0.058441162,0.049316406,-0.0970459,0.037872314,0.030227661,0.05441284,-0.0037174225,0.036895752,-0.014297485,0.11230469,0.054473877,-0.093322754,0.03744507,0.0062713623,-0.04800415,0.027862549,-0.025650024,0.09082031,-0.01826477,0.053619385,-0.07867432,-0.002626419,0.030410767,0.1161499,-0.070617676,0.043823242,-0.01826477,0.027526855,-0.08166504,-0.03753662,0.010269165,-0.049041748,-0.038757324,-0.0927124,0.0075912476,-0.0070610046,-0.03225708,-0.028656006,0.05606079,0.021652222,0.036499023,-0.010467529,0.013687134,-0.026062012,0.020126343,0.019012451,-0.024002075,0.052337646,-0.026016235,-0.006832123,-0.06793213,0.015670776,-0.07574463,-0.09875488,0.047332764,-0.018508911,-0.01612854,0.017074585,0.029266357,-0.030715942,0.028656006,-0.070739746,-0.03164673,0.04562378,-0.05117798,0.044281006,-0.07336426,-0.0023403168,-0.076416016,-0.031921387,-0.042297363,-0.022598267,-0.010063171,-0.057861328,-0.0017948151,0.09423828,0.041870117,-0.06512451,-0.0063171387,-0.0103302,-0.009239197,-0.11462402,0.06530762,0.08227539,-0.039489746,-0.01902771,0.09820557,0.0018844604,0.011734009,0.05987549,-0.01399231,-0.013923645,0.003929138,-0.026107788,0.058044434,0.05908203,-0.072387695,0.049102783,-0.07171631,-0.06512451,0.014312744,-0.0041999817,0.03994751,-0.06109619,0.0060424805,0.012779236,0.064331055,-0.070617676,0.11260986,-0.04937744,0.055236816,-0.061645508,-0.07611084,0.10107422,-0.002281189,0.019165039,0.029281616,0.010726929,0.03527832,-0.017333984,0.18200684,-0.047058105,-0.03363037,-0.011299133,0.117614746,-0.04067993,-0.06451416,-0.03375244,0.03656006,-0.01386261,0.014450073,-0.06500244,0.03768921,-0.0048446655,0.08459473,-0.012565613,0.006866455,-0.05718994,-0.022659302,-0.04269409,0.10369873,0.04852295,-0.04034424,-0.10534668,0.028884888,-0.0758667,-0.068847656,0.03692627,-0.035095215,0.057006836,-0.02027893,0.05532837,0.109191895,-0.07519531,0.047698975,-0.048736572,-0.012306213,-0.037963867,-0.035614014,-0.06109619,0.06311035,-0.044189453,-0.018249512,-0.030883789,0.00021255016,-0.1274414,-0.0045814514,-0.043701172,0.0357666,0.05279541,-0.03451538,-0.121398926,-0.025497437,-0.058441162,0.039855957,0.03555298,-0.12158203,-0.024505615,0.022445679,0.08782959,0.062683105,0.05328369,0.010437012,-0.0038337708,0.01625061,0.07556152,0.0076141357,0.016647339,-0.10949707,0.062194824,-0.010429382,0.05319214,-0.032958984,0.025680542,-0.006549835,0.009651184,0.09100342,0.02293396,0.0146865845,-0.08404541,-0.058044434,-0.037872314,-0.022750854,-0.009483337,0.019485474,-0.032165527,-0.030532837,0.031051636,-0.043670654,0.014022827,0.03930664,0.03829956,0.07397461,0.0065956116,-0.033843994,-0.068359375,0.009254456,0.027160645,0.047729492,0.02720642,0.05596924,-0.033081055,-0.022872925,0.09667969,-0.07714844,0.032928467,0.096191406,-0.0065727234,0.032073975,-0.044525146,-0.006324768,0.105895996,0.08843994,-0.024902344,0.049957275,-0.037719727,-0.00447464,0.004261017,-0.004863739,-0.09863281,0.061431885,-0.0046806335,-0.015701294,0.079589844,0.00019431114,0.030578613,-0.064331055,-0.06512451,-0.0015411377,0.028503418,-0.09674072,-0.01953125,-0.048461914,-0.025222778,-0.056549072,0.021347046,-0.010726929,0.0042533875,0.042907715,-0.0014190674,-0.0013437271,-0.07537842,0.023834229,0.0103302,0.06451416,0.011634827,-0.012046814,-0.05380249,-0.027755737,0.008972168,0.004840851,0.068725586,0.06311035,-0.033447266,-0.018844604,-0.033294678,0.067993164,0.012039185,0.060516357,0.020385742,0.022094727,-0.035217285,0.0012607574,0.072509766,-0.10974121,-0.04949951,0.06149292,0.052246094,0.07910156,0.041229248,0.042022705,-0.0005187988,0.058929443,0.00008535385,-0.13098145,-0.12756348,0.032806396,-0.057891846,0.018981934,-0.007549286,-0.043060303,-0.012107849,-0.022460938,-0.042541504,0.018035889,0.015991211,-0.0713501,-0.040374756,-0.11578369,-0.012519836,-0.018981934,0.03036499,0.038757324,-0.089660645,-0.0017347336,0.01374054,0.007408142,0.04348755,-0.0045928955,-0.034088135,0.016571045,0.05203247,-0.06982422,-0.061950684,-0.030822754,-0.007045746,-0.030410767,0.04550171,0.0082473755,0.027252197,-0.009811401,0.016860962,-0.012565613],"created_at":1735875660549,"nchars":214},"56":{"title":"12.기둥과 보 설치","path":"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794028811,"mtime":1735818986940,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:28","modified":"2025/01/02 20:56:26"},"id":"b5c9a556d8dbfcfe6a3b58bcf2fa86f6","content":"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) private static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\t/*\n\tprivate static final int n = 5;  \n\tprivate static final int[][] build_frame = {  \n\t        {1, 0, 0, 1},        {1, 1, 1, 1},        {2, 1, 0, 1},        {2, 2, 1, 1},        {5, 0, 0, 1},        {5, 1, 0, 1},        {4, 2, 1, 1},        {3, 2, 1, 1}};  \n\t  \n\tprivate static final int[][] result = {  \n\t        {1, 0, 0},        {1, 1, 1},        {2, 1, 0},        {2, 2, 1},        {3, 2, 1},        {4, 2, 1},        {5, 0, 0},        {5, 1, 0}};*/  \n\t  \n\tprivate static final int n = 5;  \n\tprivate static final int[][] build_frame = {  \n\t        {0, 0, 0, 1},  \n\t        {2, 0, 0, 1},  \n\t        {4, 0, 0, 1},  \n\t        {0, 1, 1, 1},  \n\t        {1, 1, 1, 1},  \n\t        {2, 1, 1, 1},  \n\t        {3, 1, 1, 1},  \n\t        {2, 0, 0, 0},  \n\t        {1, 1, 1, 0},  \n\t        {2, 2, 0, 1}  \n\t};  \n\t  \n\tprivate static final int[][] result = {  \n\t        {0, 0, 0},  \n\t        {0, 1, 1},  \n\t        {1, 1, 1},  \n\t        {2, 1, 1},  \n\t        {3, 1, 1},  \n\t        {4, 0, 0}  \n\t};  \n\t  \n\tprivate static void input() {  \n\t  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Board board = new Board(n);  \n\t  \n\t    for (int[] bf : build_frame) {  \n\t        int x = bf[0];  \n\t        int y = bf[1];  \n\t        int a = bf[2]; // 0 : 기둥, 1 : 보  \n\t        int b = bf[3]; // 0 : 삭제, 1 : 설치  \n\t  \n\t        board.execute(x, y, a, b);  \n\t    }  \n\t  \n\t    int[][] answer = new int[board.count][3];  \n\t    int idx = 0;  \n\t    boolean[][] pole = board.pole;  \n\t    boolean[][] bo = board.bo;  \n\t    for(int i = 0; i <= n; i++) {  \n\t        for(int j = 0; j <= n; j++) {  \n\t            if(pole[i][j]) {  \n\t                answer[idx++] = new int[]{i, j, 0};  \n\t            }  \n\t  \n\t            if(bo[i][j]) {  \n\t                answer[idx++] = new int[]{i, j, 1};  \n\t            }  \n\t        }  \n\t    }  \n\t  \n\t    for(int[] a : answer) {  \n\t        sb.append(Arrays.toString(a)).append(\"\\n\");  \n\t    }  \n\t}  \n\t  \n\t/**  \n\t * 기둥은 바닥 위에 있거나 보의 한쪽 끝부분 위에 있거나, 또는 다른 기둥 위에 있어야 한다  \n\t * 보는 한쪽 끝부분이 기둥 위에 있거나, 또는 양쪽 끝부분이 다른 보와 동시에 연결되어 있어야 한다  \n\t */  \n\tprivate static class Board {  \n\t    private final int n;  \n\t    private final boolean[][] pole;  \n\t    private final boolean[][] bo;  \n\t    private int count;  \n\t  \n\t    public Board(int n) {  \n\t        this.n = n;  \n\t        this.pole = new boolean[n + 2][n + 2];  \n\t        this.bo = new boolean[n + 2][n + 2];  \n\t    }  \n\t  \n\t    public void execute(int x, int y, int a, int b) {  \n\t        if(a == 0) { // 기둥  \n\t            if(b == 0) destroyPole(x, y);  \n\t            else if(b == 1) buildPole(x, y);  \n\t        } else if(a == 1){ // 보  \n\t            if(b == 0) destroyBo(x, y);  \n\t            else if(b == 1) buildBo(x, y);  \n\t        }  \n\t    }  \n\t  \n\t    private void buildPole(int x, int y) {  \n\t        if(buildablePole(x, y)) {  \n\t            pole[x][y] = true;  \n\t            count += 1;  \n\t        }  \n\t    }  \n\t  \n\t    // 바닥 위에 있거나, 다른 기등 위에 있거나, 보의 한쪽 끝에 있거나  \n\t    private boolean buildablePole(int x, int y) {  \n\t        return y == 0  \n\t                || (0 < y && pole[x][y - 1])  \n\t                || (0 < x && bo[x - 1][y])  \n\t                || (bo[x][y]);  \n\t    }  \n\t  \n\t    private void destroyPole(int x, int y) {  \n\t        pole[x][y] = false;  \n\t        if(invalid(x, y)) {  \n\t            pole[x][y] = true;  \n\t        } else {  \n\t            count -= 1;  \n\t        }  \n\t    }  \n\t  \n\t    private void buildBo(int x, int y) {  \n\t        if(buildableBo(x, y)) {  \n\t            bo[x][y] = true;  \n\t            count += 1;  \n\t        }  \n\t    }  \n\t  \n\t    // 한쪽 끝 부분이 기둥 위에 있거나, 또는 양쪽 끝부분이 다른 보와 동시에 연결되어 있는 경우  \n\t    private boolean buildableBo(int x, int y) {  \n\t        return (0 < y && pole[x][y - 1])  \n\t                || (0 < y && pole[x + 1][y - 1])","embedding":[-0.0058631897,-0.06732178,0.0058135986,0.05291748,0.09655762,-0.051116943,0.042663574,0.06311035,0.022964478,0.014579773,-0.023910522,-0.051879883,0.07922363,-0.021118164,0.050201416,-0.015945435,0.002653122,-0.0004553795,-0.027404785,-0.05014038,0.10028076,0.00045466423,0.012939453,-0.0231781,0.02973938,0.007003784,-0.009185791,0.049316406,0.043121338,-0.022537231,-0.091552734,-0.079711914,-0.004890442,0.0025501251,0.11480713,0.06317139,0.034240723,-0.013427734,0.009246826,-0.115722656,0.08270264,0.002494812,0.028045654,0.08123779,-0.048431396,-0.029571533,0.03753662,0.0035476685,-0.053710938,0.025161743,-0.02279663,-0.019882202,0.101623535,-0.10131836,0.021713257,0.01550293,0.0055007935,-0.059143066,-0.039123535,0.05807495,0.15014648,0.0423584,-0.06304932,0.02532959,0.068115234,-0.12731934,0.014518738,-0.0657959,0.05770874,-0.041259766,0.03137207,-0.047973633,-0.068847656,0.013214111,0.055877686,-0.021713257,0.019927979,-0.034973145,0.029388428,-0.075927734,-0.031585693,-0.016448975,-0.041778564,0.031066895,-0.080322266,0.03768921,-0.030883789,-0.018463135,0.008865356,0.021575928,0.015274048,0.042388916,-0.03439331,-0.006175995,-0.036346436,0.061828613,0.0002527237,-0.041137695,0.09881592,-0.0028018951,-0.017120361,-0.081604004,-0.015037537,-0.08288574,-0.09240723,0.07727051,0.024856567,-0.02255249,-0.036499023,0.009475708,-0.078430176,-0.005279541,-0.008682251,0.05496216,0.0042304993,-0.007797241,-0.013572693,-0.10192871,0.039367676,-0.07147217,0.021255493,0.03591919,-0.09460449,-0.02923584,-0.09484863,0.04638672,0.08581543,0.06817627,-0.010955811,0.021377563,-0.011993408,0.029785156,-0.042541504,0.1295166,0.09075928,-0.00907135,0.02192688,0.025939941,-0.109558105,-0.020370483,0.032592773,0.0071372986,0.01979065,0.008644104,0.0043907166,0.04510498,0.012214661,-0.10211182,0.017181396,-0.032348633,0.018875122,0.023498535,0.070495605,0.03491211,-0.011421204,-0.022705078,0.07550049,0.021072388,-0.08770752,0.12524414,-0.024017334,0.06866455,-0.13708496,-0.091552734,0.01977539,-0.005947113,0.057525635,0.039154053,-0.037475586,-0.011695862,-0.035064697,0.11584473,-0.017715454,-0.0018424988,-0.0051956177,0.052093506,-0.12780762,-0.055267334,0.060546875,0.03982544,-0.034454346,0.040374756,-0.0713501,-0.008232117,-0.006038666,0.031097412,-0.011932373,0.050964355,-0.006034851,0.023529053,-0.041107178,0.05307007,0.043884277,-0.07244873,-0.08477783,0.06085205,-0.064331055,-0.021575928,0.033966064,-0.054779053,0.015853882,-0.07849121,0.011009216,0.040771484,0.04336548,0.025924683,-0.024810791,0.02268982,-0.0284729,0.012992859,0.018814087,0.029449463,-0.02796936,-0.048187256,-0.0635376,0.062683105,-0.056671143,0.023025513,-0.057006836,0.121398926,0.060668945,-0.03540039,-0.034057617,-0.05029297,-0.029541016,-0.011550903,0.00856781,-0.13293457,-0.06427002,-0.0053634644,0.085632324,0.07757568,0.0149383545,-0.03161621,-0.039764404,0.019851685,-0.012290955,0.02684021,0.01159668,-0.06591797,0.08557129,-0.05166626,0.027709961,-0.062438965,0.0064697266,-0.06536865,-0.052825928,0.030456543,0.029632568,0.046691895,-0.017303467,-0.09057617,0.039001465,-0.06463623,-0.06085205,0.031158447,0.022079468,-0.0008664131,-0.011428833,-0.016113281,0.012992859,-0.005558014,0.0041618347,-0.0052108765,0.011932373,-0.03265381,-0.056365967,0.017456055,0.030639648,0.027862549,-0.028244019,0.08465576,0.010437012,0.01902771,0.05166626,-0.05557251,0.0836792,0.07208252,-0.013061523,0.005596161,0.06173706,0.0035629272,0.11730957,0.049560547,-0.039520264,-0.0010538101,-0.06347656,-0.046661377,0.016708374,-0.037231445,-0.12432861,0.000072181225,-0.0051574707,0.0017108917,0.09698486,-0.029220581,0.062805176,0.013580322,-0.00031256676,0.022994995,0.042388916,-0.027633667,0.04260254,-0.022140503,-0.034576416,-0.027923584,-0.04373169,0.0066833496,0.031173706,0.06008911,0.0047340393,-0.02494812,-0.020950317,0.04989624,-0.01159668,-0.010520935,0.034454346,-0.0036087036,-0.07305908,0.017028809,-0.027313232,-0.03225708,0.032470703,0.009414673,0.02003479,-0.012084961,-0.000521183,0.12335205,0.06109619,0.016525269,-0.026565552,-0.0052375793,-0.04046631,0.03652954,0.03479004,-0.10998535,-0.046173096,0.04309082,0.026306152,-0.0107040405,0.044525146,0.04937744,-0.027801514,0.08288574,0.018356323,-0.10961914,-0.11541748,0.038635254,-0.009216309,0.00592041,0.01725769,-0.07952881,0.0184021,-0.07086182,-0.020645142,0.008804321,-0.07531738,-0.13623047,0.024810791,-0.010429382,0.04623413,-0.0680542,0.037139893,-0.011917114,-0.04159546,-0.03302002,-0.017333984,0.051116943,0.036895752,-0.00082969666,0.0491333,0.0151901245,0.022155762,0.0052337646,-0.051757812,-0.03817749,0.017913818,0.014923096,-0.00548172,-0.019760132,0.013076782,0.017105103,0.08001709,0.029174805],"created_at":1735875660549,"nchars":4081},"57":{"title":"12.기둥과 보 설치","path":"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794028811,"mtime":1735818986940,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:28","modified":"2025/01/02 20:56:26"},"id":"ad3bde0ddbeba88edf74afebcabe8f72","content":"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) private boolean buildableBo(int x, int y) {  \n\t        return (0 < y && pole[x][y - 1])  \n\t                || (0 < y && pole[x + 1][y - 1])  \n\t                || ((0 < x && bo[x - 1][y]) && bo[x + 1][y]);  \n\t    }  \n\t  \n\t    private void destroyBo(int x, int y) {  \n\t        bo[x][y] = false;  \n\t        if(invalid(x, y)) {  \n\t            bo[x][y] = true;  \n\t        } else {  \n\t            count -= 1;  \n\t        }  \n\t    }  \n\t  \n\t    private boolean invalid(int x, int y) {  \n\t        int minX = Math.max(0, x - 1);  \n\t        int maxX = Math.min(x + 1, n);  \n\t        int minY = Math.max(0, y - 1);  \n\t        int maxY = Math.min(y + 1, n);  \n\t        for(int i = minX; i <= maxX; i++) {  \n\t            for(int j = minY; j <= maxY; j++) {  \n\t                if(pole[i][j] && !buildablePole(i, j)) return true;  \n\t  \n\t                if(bo[i][j] && !buildableBo(i, j)) return true;  \n\t            }  \n\t        }  \n\t  \n\t        return false;  \n\t    }  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}","embedding":[-0.040985107,-0.017593384,0.0079574585,0.09918213,0.0635376,-0.09118652,-0.0051994324,0.08459473,0.016021729,0.026275635,0.047210693,-0.050231934,0.14025879,-0.017166138,0.066101074,-0.03527832,0.028182983,0.034240723,-0.030563354,-0.024841309,0.036712646,-0.0051574707,-0.0287323,0.01939392,0.06774902,-0.008125305,-0.059814453,0.0390625,0.012779236,-0.022491455,-0.0491333,-0.050994873,0.0112838745,-0.013038635,0.09136963,0.074645996,0.049316406,-0.036621094,-0.017089844,-0.07727051,0.054138184,-0.021820068,0.014953613,0.059051514,-0.053710938,0.017929077,0.06335449,-0.0035152435,-0.04647827,0.026794434,0.0056152344,0.001783371,0.076049805,-0.13317871,-0.04147339,0.010635376,0.02255249,-0.018203735,0.011245728,0.045043945,0.113464355,0.053710938,-0.05078125,0.053894043,0.0680542,-0.05090332,0.023544312,-0.023406982,0.03857422,-0.03881836,0.06549072,-0.007881165,-0.021408081,-0.0018444061,-0.016281128,-0.0079422,0.04849243,-0.06488037,0.04800415,-0.08276367,-0.0079193115,0.048217773,-0.081726074,-0.021728516,-0.15649414,0.0069351196,0.0046539307,0.0004272461,0.0010137558,-0.06890869,-0.019348145,0.047607422,-0.058929443,0.0034389496,-0.056243896,0.07757568,0.029708862,-0.041381836,0.10131836,-0.009849548,0.022460938,-0.07543945,-0.03024292,-0.06530762,-0.05307007,0.048797607,-0.013595581,-0.06762695,-0.021560669,0.016036987,-0.051116943,-0.08300781,0.050567627,-0.011360168,0.033233643,-0.010192871,-0.021987915,-0.049804688,-0.042633057,-0.039398193,-0.012138367,0.013053894,-0.064208984,-0.053131104,-0.07196045,0.021377563,0.053009033,0.06915283,-0.099975586,0.06756592,0.022964478,0.018814087,-0.04071045,0.15783691,0.08392334,-0.022262573,-0.07342529,-0.0073661804,-0.07537842,-0.06756592,0.03086853,-0.01940918,0.0055999756,0.01512146,-0.046020508,0.036224365,-0.026916504,-0.078125,0.0047416687,-0.09448242,-0.0068244934,-0.025909424,0.11590576,0.07354736,-0.0035572052,-0.07318115,0.05203247,0.0002193451,-0.054626465,0.1427002,-0.04623413,0.031677246,-0.08581543,-0.07672119,0.053710938,-0.019241333,0.10656738,0.009056091,-0.039398193,-0.018508911,0.0069885254,0.11364746,-0.024749756,-0.032287598,0.008422852,0.06112671,-0.10131836,-0.033721924,0.052947998,0.059753418,-0.0736084,0.016296387,-0.045806885,-0.004131317,0.03338623,0.030136108,0.0018005371,0.006778717,0.034332275,-0.019088745,-0.021224976,0.06262207,0.024856567,-0.034332275,-0.079833984,0.059814453,-0.0040016174,-0.014122009,0.042541504,-0.005970001,0.0803833,-0.068725586,0.026733398,0.012496948,0.074035645,0.025238037,0.009712219,-0.03201294,-0.04296875,0.002248764,0.013084412,-0.016021729,0.011444092,-0.021469116,-0.011177063,0.022323608,-0.04446411,0.014083862,-0.09777832,0.10253906,0.066589355,-0.028137207,-0.027511597,-0.036499023,-0.062042236,0.005317688,0.07342529,-0.17175293,-0.09967041,0.01979065,0.058013916,0.030761719,0.006099701,0.020065308,0.01763916,0.018066406,0.016708374,0.04547119,-0.029525757,-0.023010254,0.077819824,-0.030090332,0.004863739,0.012161255,0.035217285,0.010437012,-0.05834961,0.06506348,0.015731812,0.06518555,-0.039794922,-0.09875488,-0.0008826256,-0.064941406,-0.03186035,0.047210693,-0.04849243,0.03552246,-0.038635254,-0.037750244,0.013977051,0.012336731,0.048461914,-0.012397766,-0.0074768066,-0.077697754,-0.077697754,-0.042022705,0.018997192,0.0637207,-0.007282257,0.06866455,0.009277344,0.02897644,0.04812622,-0.022842407,0.06427002,0.046875,0.008583069,-0.008926392,0.0030136108,-0.011230469,0.12585449,0.055664062,-0.057922363,0.018630981,0.0066719055,-0.010910034,0.065979004,-0.04309082,-0.12548828,-0.02116394,0.011947632,0.025726318,0.08917236,-0.008598328,0.062469482,-0.0077819824,0.0041885376,-0.040863037,0.045318604,-0.048431396,0.05444336,0.0073928833,-0.0004131794,0.015289307,0.0008029938,0.0079422,-0.027862549,0.04711914,0.0077400208,-0.03665161,0.01638794,-0.035125732,-0.019729614,0.008934021,-0.01789856,0.022613525,-0.061279297,-0.031143188,-0.02784729,-0.013145447,0.004283905,-0.0048980713,0.04486084,-0.046936035,-0.0074386597,0.10223389,0.029876709,-0.0017347336,-0.04937744,0.0075569153,-0.019348145,0.06112671,0.07171631,-0.107666016,-0.07965088,0.039123535,-0.041778564,-0.04989624,0.04272461,0.06225586,0.0063667297,0.055908203,-0.049804688,-0.08892822,-0.11413574,0.049316406,-0.046936035,-0.0041542053,-0.0007033348,-0.09069824,0.025604248,-0.0038108826,-0.02407837,0.031921387,-0.04788208,-0.11578369,-0.03262329,-0.025299072,-0.0093307495,-0.07055664,0.03378296,0.0008401871,-0.036895752,-0.017486572,0.017700195,0.06890869,0.091552734,0.025283813,0.021453857,0.055145264,0.06695557,0.013259888,-0.0048561096,-0.030685425,-0.019424438,-0.011756897,0.011245728,0.04336548,0.042816162,-0.011054993,0.04888916,-0.012084961],"created_at":1735875660549,"nchars":2388},"58":{"title":"12.기둥과 보 설치","path":"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794028811,"mtime":1735818986940,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:28","modified":"2025/01/02 20:56:26"},"id":"3456f0d3010850b0e090133d07c76718","content":"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) }\n```","embedding":[-0.06225586,-0.00856781,-0.018707275,-0.07385254,-0.03793335,-0.03933716,-0.00642395,0.0793457,0.032073975,0.006580353,-0.022003174,-0.06567383,0.08428955,0.006351471,0.041992188,-0.05001831,-0.023727417,-0.007160187,0.03189087,-0.035064697,0.055145264,0.032226562,-0.033081055,-0.016082764,0.045410156,-0.009674072,0.006023407,0.024246216,0.06567383,-0.027008057,0.0035381317,-0.042114258,-0.056793213,0.024932861,0.12963867,0.014228821,0.07421875,-0.0063667297,-0.008605957,-0.06304932,0.009536743,-0.0055503845,0.05682373,0.09503174,-0.016448975,-0.03945923,0.010414124,-0.049682617,-0.015975952,-0.02897644,0.02130127,-0.058898926,0.018676758,-0.107421875,0.030670166,0.0423584,0.052490234,-0.019088745,0.02230835,0.013648987,0.10217285,0.068847656,-0.09686279,0.008003235,0.016799927,-0.05911255,0.048339844,-0.032318115,0.122924805,-0.022842407,0.055236816,-0.06549072,-0.00022351742,0.06439209,0.11138916,-0.046325684,0.05114746,-0.04397583,0.02746582,-0.0569458,-0.025909424,0.010719299,-0.0692749,-0.03543091,-0.07098389,0.03137207,-0.03564453,0.0009236336,-0.04537964,0.06817627,0.0062789917,0.05343628,-0.0049819946,0.050201416,-0.008552551,0.04257202,0.03503418,-0.0019817352,0.048034668,-0.036743164,-0.011154175,-0.07318115,0.014762878,-0.08288574,-0.10064697,0.06335449,-0.024276733,-0.017791748,0.03616333,0.011260986,-0.055389404,0.036010742,-0.078186035,-0.017700195,0.04937744,-0.048187256,0.061309814,-0.08319092,-0.022201538,-0.05734253,-0.025909424,-0.017028809,0.00027418137,-0.024459839,-0.02709961,-0.0143585205,0.07421875,0.046569824,-0.057434082,0.02758789,-0.010971069,-0.00048971176,-0.080566406,0.08496094,0.043182373,-0.043823242,-0.04324341,0.097473145,0.0028839111,0.022644043,0.06298828,0.008422852,-0.024993896,0.008110046,-0.01789856,0.06530762,0.035888672,-0.031036377,0.078430176,-0.057647705,-0.058746338,-0.008880615,0.011268616,0.016815186,-0.055847168,0.019042969,0.021835327,0.050628662,-0.081604004,0.11364746,-0.05935669,0.030899048,-0.1126709,-0.05545044,0.074523926,-0.06970215,0.006542206,0.04260254,-0.004211426,0.016479492,-0.056732178,0.14440918,-0.018157959,-0.04675293,0.016082764,0.11444092,-0.05218506,-0.06347656,0.0056762695,0.042510986,-0.030532837,0.013389587,-0.064697266,0.02243042,0.028671265,0.084472656,-0.040527344,0.023727417,-0.080444336,0.01939392,0.019943237,0.1171875,0.014076233,-0.0362854,-0.12390137,0.028503418,-0.053649902,-0.06732178,0.043640137,-0.031585693,0.06317139,-0.03363037,0.03036499,0.0847168,-0.06262207,0.002275467,-0.03427124,-0.04135132,0.0005874634,-0.012893677,-0.029922485,0.07080078,-0.043884277,-0.031402588,-0.046966553,0.011100769,-0.1505127,0.002626419,-0.062927246,0.012954712,0.062469482,-0.017440796,-0.10839844,-0.021621704,-0.03643799,0.04345703,0.025894165,-0.11706543,0.004749298,0.019241333,0.069885254,0.025421143,0.075805664,0.05847168,0.0008416176,-0.0032444,0.050811768,0.00052690506,0.03744507,-0.0881958,0.066101074,-0.009353638,0.019622803,-0.068237305,0.025268555,-0.011741638,0.027999878,0.11114502,0.015411377,0.0036582947,-0.08215332,-0.057495117,-0.07458496,-0.06744385,0.023483276,0.00793457,-0.0010814667,-0.033325195,0.041137695,-0.033111572,0.011581421,0.026138306,0.045135498,0.059173584,-0.002445221,-0.034484863,-0.052947998,0.06506348,0.021362305,0.023635864,-0.016723633,0.04724121,-0.018508911,-0.049713135,0.07861328,-0.075805664,-0.017807007,0.06384277,-0.0155181885,0.07244873,-0.017044067,-0.03314209,0.076171875,0.12414551,-0.010971069,0.032226562,-0.032684326,-0.04421997,0.040100098,-0.022628784,-0.076049805,0.087646484,0.021240234,-0.008460999,0.018005371,0.021453857,0.024475098,-0.049926758,-0.05117798,-0.04220581,-0.024795532,-0.08892822,-0.009994507,-0.0440979,-0.030532837,-0.08843994,0.015838623,0.008659363,0.006904602,0.03805542,0.0071029663,-0.018035889,-0.083618164,0.042022705,0.00035381317,0.029525757,0.010292053,0.017288208,-0.044921875,-0.011917114,0.014320374,0.04864502,0.07159424,0.04196167,0.006385803,-0.023956299,0.010391235,0.047058105,-0.011505127,0.06561279,0.06390381,0.013374329,-0.002910614,-0.011817932,0.06842041,-0.111206055,-0.038757324,0.062469482,0.023361206,0.07366943,0.041778564,0.037109375,0.026885986,0.08050537,0.00072193146,-0.15759277,-0.101867676,0.03677368,-0.03616333,0.029571533,-0.03314209,-0.028396606,0.0040893555,-0.011314392,-0.03543091,0.017868042,0.004081726,-0.1027832,-0.02168274,-0.10101318,-0.01965332,0.01259613,0.06750488,0.07318115,-0.053863525,0.0053100586,0.01626587,0.017913818,0.048950195,0.00793457,-0.041778564,-0.0053596497,0.082092285,-0.059143066,-0.05822754,-0.044403076,0.00039052963,-0.05810547,0.0011548996,0.0044441223,0.025543213,-0.023101807,0.052703857,-0.010719299],"created_at":1735875660549,"nchars":143},"59":{"title":"11.뱀","path":"1. Project/이것이 취업을 위한 코딩테스트다/11.뱀.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794025749,"mtime":1735814718226,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:25","modified":"2025/01/02 19:45:18"},"id":"7862812dc01340fb2268e31c32332a93","content":"\n\nNOTE TITLE: [[11.뱀]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:25\",\"modified\":\"2025/01/02 19:45:18\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/3190\n\n### 시간 복잡도 \n\n### 풀이 \n- 구현\n- 큐를 사용하여 뱀의 꼬리 정보를 저장 (`multi source`)\n\t- 2차원 배열에 사과와 뱀의 정보를 기재함 `0: 빈칸, 1: 사과, 2: 뱀`\n- 이동 경로에 사과가 없는 경우 \n\t- 큐에서 꼬리 정보를 뽑아 `{java}maps[tailX][tailY] = 0` 마킹\n- 이동 경로에 사과가 있는 경우 \n\t- `{java}maps[x][y] = 2` 마킹하고 큐에 이동 정보 추가\n- 현재 `{java}time`에 해당하는 명령어가 있는 경우 Map에서 명령어 꺼내어 다음 방향 정보 갱신\n\t- `D` 의 경우 시계 방향으로 `(idx + 1) % 4` \n\t- `L`의 경우 반시계 방향으로 `(idx - 1) < 0 ? 3 : (idx - 1)`","embedding":[0.060394287,-0.0063476562,-0.021438599,-0.02659607,0.070251465,-0.046081543,0.02204895,0.061187744,-0.027053833,0.05911255,0.014549255,0.0015115738,0.055541992,-0.01914978,0.026321411,0.011306763,0.082458496,-0.0021018982,-0.0017251968,0.022644043,-0.046783447,0.06137085,-0.043182373,-0.028869629,0.016098022,0.011482239,-0.055114746,0.06878662,0.07714844,-0.055755615,0.003452301,-0.062561035,-0.14697266,-0.07531738,-0.009017944,0.024368286,0.03237915,0.023529053,0.023406982,-0.07556152,0.075683594,-0.040252686,0.0385437,0.021865845,-0.05331421,0.018936157,-0.0079956055,-0.007167816,-0.07696533,0.011207581,-0.024642944,0.007369995,0.048065186,-0.07556152,0.024658203,0.014045715,-0.011795044,0.008628845,-0.010948181,0.027633667,0.09484863,0.033691406,-0.051452637,0.037353516,0.08898926,-0.06829834,-0.05053711,0.07342529,0.072143555,-0.07098389,-0.08642578,-0.05545044,0.012718201,-0.03302002,0.0033359528,-0.021011353,0.047943115,-0.007865906,-0.03918457,0.042419434,-0.05709839,-0.047058105,-0.06958008,0.006542206,-0.059387207,0.014030457,0.08129883,-0.10992432,-0.029678345,-0.0362854,0.09954834,0.02973938,-0.026535034,-0.05834961,0.0019111633,0.005493164,0.0030384064,0.05960083,0.020828247,0.037475586,-0.026321411,-0.03768921,0.052124023,-0.021026611,-0.057281494,0.033996582,0.03186035,-0.04586792,0.05130005,0.038269043,-0.02935791,0.018981934,-0.009269714,0.008705139,0.024124146,-0.041259766,0.117126465,-0.06567383,-0.0007157326,-0.09680176,-0.06323242,0.017730713,-0.07373047,-0.014724731,0.05117798,0.023880005,0.034698486,0.006793976,-0.035186768,0.10247803,0.02218628,0.012489319,-0.10821533,0.06890869,0.08239746,0.059539795,0.050598145,0.08227539,-0.009651184,-0.10986328,0.04055786,-0.025863647,-0.061431885,-0.02330017,-0.03503418,-0.008224487,0.056640625,-0.039123535,0.017318726,-0.044830322,0.016693115,0.026275635,0.08483887,0.031921387,-0.0118255615,-0.038604736,-0.014549255,0.06903076,-0.035858154,0.00166893,-0.020736694,0.03857422,-0.06774902,-0.07904053,0.09448242,-0.09362793,0.097595215,-0.023849487,-0.02520752,-0.013572693,0.05731201,0.027511597,0.020629883,-0.037322998,-0.028259277,0.045532227,-0.09411621,0.008010864,0.00020778179,0.016418457,-0.026306152,-0.023422241,-0.10510254,0.01979065,0.018035889,0.0023479462,0.004299164,-0.0013208389,0.01083374,0.033996582,-0.12060547,0.0513916,0.0034179688,-0.02406311,-0.044769287,0.09490967,-0.0010404587,0.017669678,0.08721924,-0.040039062,0.049835205,-0.03643799,-0.005531311,0.07873535,0.018981934,0.05255127,-0.046813965,0.01878357,-0.044891357,-0.05026245,-0.0046463013,-0.0023651123,-0.019851685,0.017364502,-0.027023315,-0.005241394,-0.014640808,0.057281494,-0.06304932,0.13647461,0.083740234,0.033996582,-0.07342529,-0.055786133,-0.05291748,0.008621216,0.06616211,-0.061950684,-0.009963989,-0.011238098,0.050994873,0.034057617,0.02079773,0.029830933,-0.015167236,-0.040100098,0.09069824,0.023513794,-0.06713867,-0.0440979,-0.06109619,0.03363037,0.03302002,0.009391785,0.015213013,-0.0050086975,0.0071105957,0.0881958,0.0030899048,-0.043395996,-0.09338379,-0.026107788,-0.03881836,0.0016336441,-0.057403564,0.002029419,-0.06149292,0.048736572,-0.048614502,-0.021377563,0.07751465,0.035827637,0.11541748,-0.017974854,0.0093307495,-0.12054443,-0.103759766,0.038238525,0.033966064,0.05328369,0.00080013275,-0.031341553,-0.025009155,-0.023773193,-0.047851562,-0.11199951,0.09552002,0.059020996,-0.014190674,-0.013137817,0.010032654,-0.06173706,0.13110352,0.021026611,-0.051727295,0.004787445,-0.025161743,0.06738281,0.06732178,0.05810547,-0.11383057,0.07904053,-0.0181427,-0.04989624,0.056152344,-0.025817871,-0.021575928,-0.029037476,-0.0055656433,0.04626465,0.01612854,0.007671356,-0.035247803,-0.032043457,-0.03302002,0.022506714,0.0024662018,-0.005126953,-0.029647827,0.03414917,0.08721924,-0.051727295,-0.047302246,0.06201172,0.008285522,0.0026817322,0.088256836,0.0018348694,-0.039276123,-0.046539307,0.030548096,-0.04055786,0.04824829,-0.008682251,-0.010238647,-0.06500244,-0.070617676,0.043426514,-0.045562744,-0.023284912,0.05822754,0.12902832,0.008956909,-0.090026855,0.015075684,-0.09112549,-0.010055542,0.05859375,0.0077285767,-0.021011353,-0.03994751,-0.046173096,-0.06689453,0.06750488,-0.008857727,-0.13598633,-0.050567627,-0.007369995,-0.042175293,0.03213501,-0.095703125,-0.068359375,0.09515381,-0.005382538,-0.00283432,0.011352539,0.007209778,-0.01878357,-0.013961792,0.007133484,-0.0006542206,-0.003791809,0.034942627,-0.022445679,-0.06616211,-0.025650024,0.04650879,0.035491943,0.03086853,-0.038238525,-0.028076172,0.054595947,0.006046295,-0.043792725,-0.012062073,0.008964539,0.047851562,0.10430908,-0.022644043,0.013442993,0.0770874,-0.0011577606,0.096191406,-0.011512756],"created_at":1735875660550,"nchars":567},"60":{"title":"11.뱀","path":"1. Project/이것이 취업을 위한 코딩테스트다/11.뱀.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794025749,"mtime":1735814718226,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:25","modified":"2025/01/02 19:45:18"},"id":"e1a44fa3d221ff26146effd1fada3e62","content":"\n\nNOTE TITLE: [[11.뱀]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:25\",\"modified\":\"2025/01/02 19:45:18\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, k, l;\n    private static Map<Integer, String> commandMap = new HashMap<>();\n    private static int[][] maps;\n\n    private static void input() {\n        n = inputProcessor.nextInt(); // 맵의 크기\n        k = inputProcessor.nextInt(); // 사과 개수\n\n        maps = new int[n + 1][n + 1];\n        for(int i = 1; i <= k; i++) {\n            int x = inputProcessor.nextInt();\n            int y = inputProcessor.nextInt();\n            maps[x][y] = 1;\n        }\n\n        l = inputProcessor.nextInt(); // 방향 전환 개수\n        for(int i = 1; i <= l; i++) {\n            int time = inputProcessor.nextInt();\n            String dir = inputProcessor.next();\n            commandMap.put(time, dir);\n        }\n    }\n\n    // 오른쪽을 시작으로 시계 방향 기준\n    private static int[][] DIR = {\n            {0, 1},\n            {1, 0},\n            {0, -1},\n            {-1, 0}\n    };\n\n    private static void pro() {\n        Deque<Integer> que = new ArrayDeque<>(); // 뱀 몸통 정보 기록\n        que.add(1);\n        que.add(1);\n\n        int x = 1;\n        int y = 1;\n        maps[x][y] = 2;\n        int time = 0;\n        int i = 0;\n        while(true) {\n            time += 1;\n            x += DIR[i][0];\n            y += DIR[i][1];\n\n            if(x < 1 || y < 1 || x > n || y > n) break; // 맵을 나갔을 경우\n            if(maps[x][y] == 2) break; // 몸에 부딪혔을 경우\n\n\n            if(maps[x][y] != 1) {\n                int tailX = que.poll();\n                int tailY = que.poll();\n                maps[tailX][tailY] = 0;\n            }\n\n            maps[x][y] = 2;\n            que.add(x);\n            que.add(y);\n            \n            if(commandMap.containsKey(time)) {\n                i = nextDir(i, commandMap.remove(time));\n            }\n        }\n\n        sb.append(time);\n    }\n\n    private static int nextDir(int ix, String cmd) {\n        if(\"D\".equals(cmd)) { // 오른쪽 시계 방향 이동\n            return (ix + 1) % 4;\n        }\n\n        return (ix - 1) < 0 ? 3 : (ix - 1);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n}\n```","embedding":[0.042175293,-0.062164307,-0.0038452148,0.02609253,0.05178833,-0.022644043,0.009757996,0.050872803,-0.019744873,0.10595703,-0.015151978,-0.037109375,0.01751709,-0.036193848,0.03942871,0.017959595,0.09033203,0.018432617,-0.03277588,0.0068626404,-0.0029067993,0.037017822,0.0033035278,-0.027374268,0.029144287,0.025665283,-0.057769775,0.09729004,0.036193848,-0.07946777,-0.007888794,-0.07501221,-0.09625244,-0.074035645,0.03503418,0.049468994,0.07287598,-0.008087158,0.042785645,-0.099487305,0.07928467,-0.034973145,0.078430176,0.057037354,-0.053100586,0.010910034,0.024490356,-0.016983032,-0.10827637,-0.0059509277,-0.09490967,0.016906738,0.10253906,-0.07067871,0.018356323,0.03491211,0.051574707,0.0024299622,-0.04928589,0.024459839,0.12243652,0.016723633,-0.06665039,0.024627686,0.10345459,-0.07684326,-0.064697266,0.012672424,0.051727295,-0.034576416,0.0029830933,-0.042541504,-0.025115967,-0.06652832,0.021881104,-0.029159546,0.09039307,-0.020507812,-0.044647217,0.011581421,-0.038391113,-0.08319092,-0.059539795,0.0104904175,-0.022445679,0.0010604858,0.04812622,-0.11706543,-0.05859375,-0.03744507,0.08483887,0.06970215,-0.045318604,0.029067993,-0.046417236,0.010238647,-0.027191162,0.01399231,0.08203125,0.00730896,-0.0013093948,-0.10266113,-0.012863159,0.004611969,-0.10748291,0.0046806335,0.023239136,-0.03186035,-0.0040512085,0.074523926,-0.06951904,0.023925781,-0.019363403,0.039215088,-0.0016269684,-0.06149292,0.029449463,-0.010955811,-0.02053833,-0.03161621,-0.05026245,-0.003660202,-0.051971436,0.034942627,-0.015213013,-0.004673004,0.048736572,0.04800415,-0.050628662,0.025756836,0.031082153,0.024307251,-0.03692627,0.121398926,0.06549072,0.02470398,0.031677246,0.054107666,-0.020355225,-0.119384766,0.022583008,0.013504028,-0.072387695,-0.03677368,-0.033203125,-0.033203125,0.012420654,-0.08917236,0.044921875,-0.034179688,0.04272461,0.050048828,0.056762695,0.034606934,0.01663208,-0.041778564,0.037963867,0.054260254,-0.11303711,0.03451538,-0.023925781,0.054748535,-0.06915283,-0.10821533,0.04623413,-0.05279541,0.09741211,-0.004299164,-0.004787445,-0.013679504,0.017044067,0.05316162,0.03439331,-0.027496338,-0.0026950836,0.045440674,-0.070373535,0.013504028,-0.043823242,0.017028809,0.004688263,-0.0054130554,-0.08227539,-0.021255493,0.025009155,0.002752304,-0.03540039,-0.055877686,-0.027008057,-0.00027656555,-0.0703125,0.04067993,0.018966675,-0.0390625,-0.062805176,0.09234619,-0.0071868896,-0.0032958984,0.085754395,-0.016921997,0.015060425,-0.055145264,-0.008430481,0.06829834,0.025405884,-0.0073509216,0.032714844,0.006576538,-0.010604858,-0.015411377,0.049743652,-0.03186035,-0.04043579,0.019592285,-0.0116119385,0.04071045,-0.023361206,0.04699707,-0.05807495,0.14868164,0.07727051,0.03744507,-0.052703857,-0.045196533,-0.04840088,0.06726074,-0.028427124,-0.09576416,-0.016693115,-0.02482605,0.067993164,0.056671143,0.02444458,-0.018035889,-0.018127441,-0.06439209,0.07318115,-0.0256958,-0.014129639,-0.06652832,-0.06304932,0.0012321472,0.011077881,-0.004360199,-0.029785156,-0.026672363,-0.012451172,0.063964844,0.056915283,-0.0065193176,-0.034423828,-0.049346924,-0.044067383,-0.029281616,-0.062561035,0.02482605,-0.06585693,0.008277893,-0.08282471,-0.013053894,0.07067871,0.034729004,0.12219238,0.020751953,0.05126953,-0.06982422,-0.1340332,-0.024368286,0.06072998,0.042907715,-0.03942871,-0.010429382,-0.040130615,0.019119263,0.038116455,-0.10571289,0.08709717,0.07305908,0.010696411,0.007118225,0.01007843,-0.030563354,0.11505127,0.010856628,-0.019454956,0.033691406,-0.07348633,0.037078857,0.021850586,0.08319092,-0.10284424,0.031677246,-0.027709961,-0.057922363,0.012962341,-0.012008667,0.010871887,0.016738892,0.0418396,0.062408447,0.06021118,0.017745972,-0.03189087,-0.002336502,-0.016662598,0.033721924,0.021697998,-0.015411377,0.011070251,0.04019165,0.051635742,-0.07598877,-0.03652954,0.09448242,-0.0131073,0.018692017,0.07232666,0.0059928894,-0.012832642,-0.041412354,0.02420044,0.005382538,0.045715332,0.0048828125,-0.010032654,-0.07104492,-0.047576904,0.062561035,-0.038635254,-0.06536865,-0.015174866,0.07019043,-0.013618469,-0.07720947,0.03451538,-0.13891602,-0.029800415,0.086120605,0.03564453,-0.010437012,-0.028427124,-0.05279541,-0.06976318,0.11376953,-0.0062026978,-0.12225342,-0.06939697,-0.03161621,-0.0256958,0.02418518,-0.017501831,-0.06213379,0.099243164,-0.0138168335,-0.05117798,0.018371582,0.009880066,-0.02532959,0.012611389,0.0032806396,0.023849487,-0.020736694,0.009895325,-0.068481445,-0.02168274,0.013839722,0.08074951,0.019989014,0.023666382,0.016571045,-0.008903503,0.08886719,-0.0046958923,-0.015182495,0.030044556,-0.044433594,0.05303955,0.0769043,-0.0017147064,0.021011353,0.05038452,0.045654297,0.042510986,-0.021560669],"created_at":1735875660551,"nchars":3697},"61":{"title":"10.자물쇠와 열쇠","path":"1. Project/이것이 취업을 위한 코딩테스트다/10.자물쇠와 열쇠.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794022227,"mtime":1735806986404,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:22","modified":"2025/01/02 17:36:26"},"id":"755d007d5eea85cb2a3bbb8345fa97c4","content":"\n\nNOTE TITLE: [[10.자물쇠와 열쇠]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:22\",\"modified\":\"2025/01/02 17:36:26\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60059\n\n### 시간 복잡도 \n- `O(NM)`\n\n### 풀이 \n- 구현\n- 열쇠를 90도 회전한다\n- 열쇠를 shif (`-40 ~ 40`) 하면서 자물쇠에 끼운다\n\t- 이때 자물쇠(n) 범위를 벗어나면 무시\n\t- 열쇠의 shift한 좌표가 자물쇠의 범위 내인 경우 열쇠의 값을 자물쇠에 더한다 \n\t\t- `{java}lock[dx][dy] += key[row][col]`\n- `{java} int[][] lock` 의 <u>모든 필드가 1인 경우 자물쇠가 해체된 것을 뜻함</u> (**종료**)\n\t- 열쇠와 자물쇠의 돌기(1)이 만나면 안된다, 고로 lock의 필드 값이 2인 경우 잘못된 경우이다 \n- 자물쇠가 열리지 않은 경우 다시 반복문을 돌며 열쇠 값을 빼준다\n\t- `{java}lock[dx][dy] -= key[row][col]`\n\n### 제출 코드\n```java\nclass Solution {\n    private int[][] _key;\n    private int[][] _lock;\n    \n    public boolean solution(int[][] key, int[][] lock) {\n        _key = key;\n        _lock = lock;\n        int m = key.length; // key : m * m\n        int n = lock.length; // lock : n * n\n\n        boolean answer = false;\n        loop1 :\n        for(int i = 0; i < 4; i++) {\n\n            // 이동한다\n            for(int x = -40; x <= 40; x++) {\n                for(int y = -40; y <= 40; y++) {\n                    // 열쇠를 자물쇠에 끼워본다\n                    pushKey(x, y, m, n);\n\n                    if(unlock(n)) { // 모든 자물쇠 영역이 1인가\n                        answer = true;\n                        break loop1;\n                    }\n\n                    // 열쇠를 자물쇠에서 뺀다\n                    pollKey(x, y, m, n);\n                }\n            }\n\n            if(i < 3) {\n                _key = rotate(_key, m); // 회전한다\n            }\n        }\n\n        return answer;\n    }\n    \n    private void pushKey(int x, int y, int m, int n) {\n        for(int row = 0; row < m; row++) {\n            for(int col = 0; col < m; col++) {\n                int dx = row + x;\n                int dy = col + y;\n\n                // 자물쇠의 범위를 벗어나는 경우\n                if(dx < 0 || dy < 0 || dx >= n || dy >= n) continue;\n\n                _lock[dx][dy] += _key[row][col];\n            }\n        }\n    }\n\n    private boolean unlock(int n) {\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(_lock[i][j] != 1) return false;\n            }\n        }\n\n        return true;\n    }\n\n    private void pollKey(int x, int y, int m, int n) {\n        for(int row = 0; row < m; row++) {\n            for(int col = 0; col < m; col++) {\n                int dx = row + x;\n                int dy = col + y;\n\n                // 자물쇠의 범위를 벗어나는 경우\n                if(dx < 0 || dy < 0 || dx >= n || dy >= n) continue;\n\n                _lock[dx][dy] -= _key[row][col];\n            }\n        }\n    }\n\n    private int[][] rotate(int[][] key, int m) {\n        int[][] temp = new int[m][m];\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < m; j++) {\n                temp[i][j] = key[m - j - 1][i];\n            }\n        }\n\n        return temp;\n    }\n}\n```","embedding":[-0.014579773,-0.024276733,-0.013755798,-0.0030345917,-0.00014150143,-0.07086182,-0.054260254,-0.012298584,0.0602417,0.10284424,-0.04159546,0.036010742,0.03189087,0.059631348,0.066711426,0.010757446,0.031082153,0.010635376,0.05041504,0.017166138,0.026016235,-0.0021533966,-0.05819702,0.016433716,0.06402588,0.011512756,-0.067871094,0.06750488,0.08068848,-0.024719238,0.04611206,-0.0692749,-0.13452148,0.014266968,0.07043457,0.048553467,0.046051025,-0.0030136108,-0.038970947,-0.06640625,0.0005903244,-0.06793213,-0.0007452965,0.09887695,0.0010414124,-0.09094238,0.01713562,-0.01171875,-0.019760132,-0.012237549,-0.026016235,-0.062286377,-0.004207611,-0.038208008,0.056427002,-0.06890869,0.053466797,-0.0039253235,-0.029190063,-0.016311646,0.082336426,0.06274414,-0.053894043,0.08935547,0.0892334,-0.07952881,-0.027450562,0.0029888153,0.08325195,-0.027862549,-0.056640625,-0.037261963,-0.009597778,0.015975952,0.018127441,0.06427002,0.04071045,-0.07208252,0.010948181,0.038879395,-0.10217285,-0.072753906,-0.016738892,-0.02659607,-0.059387207,0.03363037,0.04473877,-0.06085205,-0.10510254,0.039978027,0.07489014,0.025253296,-0.045440674,-0.000061392784,-0.0019168854,-0.003829956,-0.065979004,-0.010169983,0.045135498,0.008705139,-0.04626465,-0.04876709,-0.06689453,-0.09112549,0.042053223,0.049041748,0.038391113,0.011360168,0.03186035,-0.017166138,-0.011932373,0.044525146,0.00016510487,0.02027893,0.087890625,-0.009109497,0.10076904,-0.08642578,0.0051651,-0.030929565,-0.022262573,0.012779236,-0.05429077,0.011398315,0.031188965,0.0016088486,0.050689697,0.033935547,-0.07751465,0.04864502,0.018096924,0.013679504,-0.043060303,-0.0065460205,0.038238525,-0.08087158,0.027496338,0.068115234,-0.01727295,-0.052734375,0.017364502,0.019851685,0.03286743,-0.029312134,-0.04498291,0.010475159,-0.020202637,-0.07537842,-0.030258179,-0.110839844,0.043395996,0.023956299,0.054016113,0.021499634,-0.07269287,-0.035095215,0.03942871,0.06719971,-0.03074646,0.15930176,-0.14648438,0.07507324,-0.08618164,-0.11932373,0.08947754,-0.06085205,-0.025390625,0.07043457,0.033966064,0.051635742,0.045166016,0.10748291,0.00737381,-0.009086609,-0.05316162,0.054382324,-0.06530762,-0.032318115,-0.030014038,0.06854248,0.015235901,0.010383606,-0.077697754,0.024337769,-0.003534317,0.032318115,-0.050720215,-0.038360596,0.018585205,0.0008597374,-0.09832764,0.011604309,0.008125305,-0.062561035,-0.01600647,0.11657715,-0.033325195,-0.085998535,0.03717041,-0.061645508,-0.015686035,-0.06011963,0.0074653625,0.06311035,0.05545044,0.101379395,-0.02848816,-0.06109619,0.059509277,0.018463135,0.026306152,-0.0036449432,-0.02456665,0.040618896,-0.0003809929,0.0118255615,-0.04660034,-0.05581665,-0.03010559,0.07489014,-0.0059013367,-0.08026123,-0.1184082,-0.0037155151,-0.056640625,0.043792725,0.05645752,-0.052734375,-0.014312744,0.022949219,0.034973145,0.036468506,-0.017181396,0.037841797,0.04928589,0.0181427,0.013961792,0.044128418,0.0029449463,-0.044769287,-0.05090332,0.008338928,0.007583618,-0.022384644,-0.027648926,-0.041229248,0.024520874,0.079833984,0.004261017,0.01461792,0.009735107,-0.044189453,-0.04168701,0.0053977966,-0.043060303,0.008903503,-0.12432861,0.07531738,-0.10522461,-0.06713867,-0.007789612,-0.011779785,0.04296875,0.012413025,-0.022369385,-0.04647827,-0.12176514,-0.003932953,0.040222168,0.047912598,0.038604736,0.051116943,-0.079589844,0.026672363,-0.021530151,0.0012235641,0.061462402,-0.014091492,0.04473877,0.018859863,-0.053375244,0.04559326,0.13757324,0.020126343,-0.009895325,0.040649414,-0.030426025,0.021835327,0.11468506,-0.039093018,-0.08203125,0.0053253174,-0.041900635,-0.053466797,0.05911255,-0.018844604,-0.0033607483,0.007019043,-0.022872925,-0.0024414062,0.0032138824,-0.07714844,0.00029158592,-0.025924683,-0.02166748,-0.05029297,0.022323608,-0.018676758,0.0079193115,0.068237305,-0.05682373,0.030944824,0.044158936,0.01007843,0.046081543,0.04260254,0.014373779,0.027236938,-0.010124207,0.04272461,0.009231567,0.0149383545,0.06677246,-0.006526947,0.0042915344,-0.1171875,-0.07775879,0.06604004,0.050628662,0.04748535,-0.038208008,0.14587402,-0.011238098,-0.021011353,0.007007599,0.037475586,-0.027664185,-0.052459717,0.0027770996,0.021774292,0.0949707,-0.010971069,-0.07141113,0.07702637,-0.03225708,-0.033843994,-0.086242676,0.052337646,-0.06958008,0.024734497,-0.010810852,-0.052825928,-0.006801605,-0.0055007935,-0.019119263,0.0256958,-0.05380249,0.04751587,-0.031051636,0.00548172,-0.010025024,-0.037994385,-0.010253906,-0.01802063,-0.05355835,0.008720398,0.095458984,0.021881104,0.0074691772,0.064819336,0.011962891,-0.014678955,0.059143066,-0.047790527,-0.020690918,-0.028076172,-0.010604858,0.017410278,0.030075073,0.056152344,0.087768555,0.004272461,0.019638062,-0.05984497],"created_at":1735875660551,"nchars":2859},"62":{"title":"09.문자열 압축","path":"1. Project/이것이 취업을 위한 코딩테스트다/09.문자열 압축.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794019049,"mtime":1735867952775,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:19","modified":"2025/01/03 10:32:32"},"id":"0836c208ec6065a3b8b001fd6c46d904","content":"\n\nNOTE TITLE: [[09.문자열 압축]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:19\",\"modified\":\"2025/01/03 10:32:32\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60057\n\n### 시간 복잡도 \n\n### 풀이 \n- 구현, 재귀\n- 예외 케이스로 길이가 `1`인 경우 주의\n- `len` : 문자열 길이의 절반만큼만 비교하며 압축\n-  압축은 재귀 호출을 사용하여 반복 횟수를 구함 \n\n### 제출 코드\n- 성능 요약 - 메모리: 83.2 MB, 시간: 83.38 ms\n```java\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    private StringBuilder sb = new StringBuilder();\n    private String S;\n    \n    public int solution(String s) {\n        if(s.length() == 1) return 1;\n        \n        int answer = 1001;\n        S = s;\n\n        int half = s.length() / 2;\n        for(int len = 1; len <= half; len++) {\n            String compressed = compress(len, sb);\n            \n            answer = Math.min(answer, compressed.length());\n\n            sb.setLength(0);\n        }\n        \n        return answer;\n    }\n    \n    private String compress(int len, StringBuilder stringBuilder) {\n        int L = 0;\n        while(L <= S.length() - len) {\n            int R = L + len;\n            String base = S.substring(L, R);\n            int repeated = 1 + count(base, R, len);\n\n            if(repeated == 1) {\n                sb.append(base);\n            } else {\n                sb.append(repeated + base);\n            }\n\n            L += repeated * len;\n        }\n\n        if(L < S.length()) {\n            sb.append(S.substring(L));\n        }\n\n        return sb.toString();\n    }\n\n    private int count(String t, int from, int len) {\n        if(from >= S.length()) return 0;\n\n        String remain = S.substring(from);\n        if(remain.startsWith(t)) {\n            return 1 + count(t, from + len, len);\n        }\n\n        return 0;\n    }\n}\n```\n\n\n\nStringBuilder와 백트래킹 풀이\n- 성능 요약 : 메모리: 85.8 MB, 시간: **5.57** ms\n\n```java\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    \n    private StringBuilder sb = new StringBuilder();\n    \n    public int solution(String s) {\n        int answer = s.length(); // 최대 길이\n        int half = s.length() / 2; // 절반만 탐색\n        for(int len = 1; len <= half; len++) {\n            String compressed = rec(s, len, 1);\n            \n            answer = Math.min(answer, compressed.length());  \n            \n            sb.setLength(0);\n        }\n        \n        return answer;\n    }\n    \n    private String rec(String s, int len, int repeat) {\n        if(s.length() < len) { // 종료 조건\n            sb.append(s);\n            return sb.toString();\n        }\n        \n        String pre = s.substring(0, len);\n        String post = s.substring(len);\n        \n        // 반복된다면\n        if(post.startsWith(pre)) {\n            return rec(post, len, repeat + 1); // 카운터 증가 후 뒷 문자열 탐색\n        }\n        \n        // 반복되지 않는다면\n        if(repeat == 1) sb.append(pre);\n        else sb.append(repeat).append(pre);\n        \n        return rec(post, len, 1);\n    }\n}\n```","embedding":[-0.032928467,-0.011077881,-0.016815186,0.001206398,0.06008911,-0.048187256,-0.016159058,0.07110596,0.050323486,0.051361084,-0.03262329,-0.1081543,0.05319214,-0.028121948,0.03149414,0.06161499,0.08276367,0.009552002,-0.04309082,-0.034973145,-0.00015044212,-0.03656006,-0.026321411,0.0051078796,0.04638672,0.037872314,-0.005695343,0.12805176,0.020828247,-0.038208008,0.055114746,-0.055908203,0.0057144165,0.032196045,-0.0000078082085,0.023406982,0.032928467,0.036499023,-0.0440979,-0.12548828,0.04458618,-0.025527954,0.014633179,0.0569458,-0.025924683,0.038024902,0.09033203,0.078552246,-0.019012451,-0.013923645,-0.041534424,0.05316162,0.11682129,-0.12854004,0.00642395,0.000110030174,0.026306152,-0.064086914,-0.0044898987,-0.048583984,0.08496094,0.052703857,-0.06414795,0.05871582,0.087524414,-0.12536621,-0.0715332,-0.002609253,0.052520752,-0.045135498,0.055664062,0.07861328,0.051635742,0.024551392,0.0008459091,-0.04425049,0.052978516,-0.16003418,0.018753052,-0.06878662,-0.034576416,-0.040008545,-0.12042236,-0.056152344,-0.075927734,0.021820068,0.0031833649,-0.035247803,0.04208374,0.06738281,0.011276245,0.099365234,0.00081157684,-0.040405273,-0.08325195,-0.03326416,-0.02684021,0.007003784,0.08331299,0.0546875,-0.019241333,-0.05340576,0.03213501,-0.031677246,-0.056121826,-0.03286743,-0.04876709,0.020065308,-0.023727417,-0.013587952,-0.05947876,0.054016113,0.010955811,-0.020187378,0.025741577,-0.07147217,0.0020160675,-0.050689697,-0.0131073,0.020996094,-0.004173279,0.037628174,-0.022247314,-0.022125244,-0.030532837,0.16479492,0.017990112,0.0072288513,-0.08135986,0.025283813,0.031066895,0.027496338,-0.05819702,0.09484863,0.0038223267,-0.049713135,0.07757568,0.092041016,-0.028961182,-0.10412598,0.020889282,0.0061531067,-0.048217773,-0.030349731,0.024780273,0.041381836,-0.0056533813,-0.06994629,-0.0010166168,-0.11340332,0.005340576,0.028686523,0.03326416,0.028533936,-0.037872314,-0.01576233,0.016174316,0.014663696,-0.052856445,0.1427002,-0.053894043,0.06628418,-0.035369873,-0.07342529,0.053009033,-0.021057129,-0.010917664,0.059539795,-0.016799927,-0.09240723,-0.0043411255,0.13391113,0.014480591,-0.03656006,0.033172607,-0.01878357,-0.08709717,-0.0011024475,0.06842041,0.025161743,0.011787415,0.014480591,-0.07519531,0.00013744831,-0.028060913,0.003168106,-0.030914307,0.0022563934,0.06665039,0.014259338,-0.09869385,0.06112671,0.057281494,-0.014434814,-0.07897949,0.007835388,0.005882263,-0.0262146,-0.015319824,-0.0335083,0.023727417,-0.010314941,-0.00079631805,0.01928711,0.033416748,0.005596161,-0.020858765,-0.0071868896,-0.009262085,0.03314209,0.0014028549,-0.034851074,0.0037670135,0.044036865,-0.0024032593,0.02079773,-0.004108429,-0.031677246,-0.07067871,0.032196045,0.038482666,-0.047943115,-0.08068848,-0.06390381,-0.057434082,0.030670166,0.04006958,-0.07922363,-0.03253174,-0.07501221,0.06335449,0.008110046,0.036193848,0.028396606,0.03378296,-0.0072631836,0.041748047,-0.032592773,-0.041931152,0.026931763,0.09490967,0.019195557,0.09967041,-0.0143585205,-0.07159424,-0.065979004,0.025177002,0.044891357,0.021224976,0.0053215027,0.01159668,-0.09411621,0.007633209,-0.03201294,-0.021499634,0.018630981,-0.050842285,0.055786133,-0.10394287,-0.0023956299,0.025314331,0.028701782,0.06628418,0.037872314,-0.06555176,-0.019256592,-0.027786255,-0.051239014,0.036590576,0.030014038,0.030700684,0.048065186,-0.016403198,0.014465332,-0.025131226,0.044433594,0.090026855,0.06298828,0.099975586,0.01713562,0.0019721985,-0.035858154,0.09283447,0.0020160675,0.01864624,0.05432129,-0.037750244,0.034606934,0.09033203,-0.057403564,-0.060150146,-0.027999878,-0.035980225,-0.0031738281,0.103271484,-0.07019043,0.0018033981,-0.05316162,-0.010223389,-0.0101623535,0.068359375,-0.030166626,0.031188965,0.03744507,-0.019012451,-0.067993164,-0.046173096,-0.007972717,-0.03741455,-0.000035226345,-0.046142578,-0.06036377,-0.007572174,0.03274536,0.023208618,-0.0074310303,0.046051025,0.0154800415,-0.07598877,-0.04159546,-0.0062942505,0.03942871,0.031555176,-0.05355835,-0.056518555,-0.04147339,0.0067100525,0.08190918,0.023895264,-0.0065956116,-0.010559082,-0.00047302246,-0.013092041,-0.0046653748,0.014312744,-0.03994751,-0.07232666,-0.009010315,-0.025802612,-0.011428833,0.014579773,0.023406982,0.06414795,0.07067871,-0.072753906,-0.032806396,-0.12597656,0.07269287,-0.01852417,0.030639648,-0.02017212,-0.08325195,0.023422241,-0.080566406,-0.050567627,-0.03729248,-0.046813965,0.0012483597,-0.013298035,0.0014352798,0.03326416,-0.09295654,-0.07507324,0.013549805,-0.020950317,-0.070495605,0.036468506,0.017700195,0.029083252,0.006626129,0.0791626,0.08850098,0.052642822,0.018569946,0.04135132,-0.01838684,-0.028915405,0.05218506,0.009750366,0.1159668,0.023483276,0.08782959,0.04019165,0.0024375916],"created_at":1735875660552,"nchars":2893},"63":{"title":"08.문자열 재정렬","path":"1. Project/이것이 취업을 위한 코딩테스트다/08.문자열 재정렬.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794015962,"mtime":1735804109360,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:15","modified":"2025/01/02 16:48:29"},"id":"9394eede642d233df07ba612ae4d1765","content":"\n\nNOTE TITLE: [[08.문자열 재정렬]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:15\",\"modified\":\"2025/01/02 16:48:29\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \n- Facebook 인터뷰\n\n### 시간 복잡도 \n- `O(NlogN)`\n\t- 문자열 정렬이 가장 시간이 오래 걸림\n\t\t- 문자열 길이가 최대 10,000이고 숫자가 없는 경우\n\n### 풀이 \n- 구현, 정렬\n- 알파벳은 따로 모아 오름차순 정렬, 숫자는 합산\n- 알파벳과 숫자를 연결한 결과 출력 \n\n```text\n입력\nK1KA5CB7\n\n출력\nABCKK13\n\n\n입력\nAJKDLSI412K4JSJ9D\n\n출력\nADDIJJJKKLSS20\n\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static String s;  \n\t  \n\tprivate static void input() {  \n\t    s = inputProcessor.nextLine().trim();  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    List<String> alphabet = new ArrayList<>();  \n\t    int sum = 0;  \n\t    for(char t : s.toCharArray()) {  \n\t        if(Character.isAlphabetic(t)) {  \n\t            alphabet.add(String.valueOf(t));  \n\t        } else {  \n\t            int v = t - '0';  \n\t            sum += v;  \n\t        }  \n\t    }  \n\t  \n\t    Collections.sort(alphabet);  \n\t  \n\t    for (String a : alphabet) {  \n\t        sb.append(a);  \n\t    }  \n\t    sb.append(sum);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```","embedding":[0.03643799,0.014259338,0.05206299,0.019226074,0.08178711,-0.024978638,-0.084472656,0.028167725,0.020706177,0.08178711,-0.0054893494,-0.01108551,0.005821228,0.03274536,0.033966064,-0.010444641,-0.0048332214,-0.008392334,0.004283905,0.00004196167,0.034118652,-0.012863159,-0.08111572,-0.014595032,0.036010742,0.017303467,-0.079956055,0.114746094,0.042510986,-0.049224854,0.046569824,-0.07128906,-0.08111572,0.017349243,-0.021011353,0.05532837,0.028884888,0.04196167,0.019332886,-0.10821533,0.015205383,0.006801605,0.06951904,0.060638428,-0.052093506,0.0079574585,0.062286377,0.061584473,-0.02798462,-0.020492554,0.015365601,0.025680542,0.030181885,-0.06738281,-0.014297485,0.006801605,0.048919678,-0.052337646,0.0138549805,0.03768921,0.10900879,0.05328369,-0.0519104,0.041229248,0.05633545,-0.12695312,-0.042907715,-0.017929077,-0.053741455,0.018447876,0.12890625,-0.013259888,0.07775879,-0.037841797,0.024734497,0.06573486,0.107910156,-0.11480713,0.099853516,-0.026733398,0.028457642,-0.05218506,-0.045898438,-0.03677368,-0.07952881,-0.015304565,-0.03414917,0.021270752,-0.012512207,0.0395813,-0.024169922,0.040252686,-0.06323242,-0.023254395,-0.019485474,-0.002866745,-0.008155823,-0.00818634,0.06732178,0.13366699,-0.012886047,-0.09063721,-0.04724121,-0.046844482,-0.024307251,0.02558899,-0.06719971,-0.021835327,0.009933472,0.023010254,-0.09564209,-0.021469116,-0.03894043,-0.05908203,0.008712769,-0.03378296,0.046569824,-0.039245605,0.0069389343,0.0076141357,0.018478394,0.08081055,-0.010620117,0.0055160522,-0.007801056,0.08734131,0.082092285,0.03652954,-0.09844971,0.023452759,-0.0035152435,-0.02279663,-0.02319336,0.12036133,0.028182983,-0.018615723,0.023864746,0.08703613,-0.03555298,-0.10876465,0.0065956116,0.020248413,0.036102295,-0.048339844,-0.04083252,0.09399414,-0.030090332,-0.04425049,-0.015899658,-0.07672119,-0.0234375,-0.022842407,0.021438599,0.052337646,-0.070617676,-0.014770508,0.063964844,-0.0011167526,-0.077697754,0.007484436,-0.072143555,0.032073975,-0.06842041,-0.10858154,0.10064697,-0.0047416687,-0.013130188,0.059417725,0.066101074,-0.05783081,-0.032714844,0.07965088,-0.07165527,0.000032782555,0.019607544,0.02407837,-0.12475586,0.032836914,0.056640625,-0.011390686,-0.007507324,0.043792725,-0.06439209,-0.04208374,-0.01259613,0.006450653,-0.040161133,-0.044128418,0.041229248,0.010429382,-0.031463623,0.02558899,0.087646484,-0.036071777,-0.021820068,0.024124146,-0.02255249,-0.017837524,0.031463623,-0.036895752,0.0546875,-0.012535095,-0.031341553,0.047729492,0.053833008,0.00041341782,-0.04006958,0.022628784,-0.025634766,-0.007659912,0.019973755,-0.020431519,-0.042114258,-0.0154800415,0.008331299,-0.028457642,0.029937744,0.00818634,-0.06311035,0.10736084,0.020126343,0.019729614,-0.062042236,-0.02267456,-0.062683105,0.054107666,0.07159424,-0.072387695,-0.0057754517,-0.02986145,0.060546875,0.0066871643,0.047790527,-0.016998291,0.02128601,0.088012695,0.060516357,-0.033081055,-0.017959595,-0.026351929,0.054138184,0.048828125,-0.011131287,-0.03378296,-0.031677246,-0.036315918,0.027679443,0.032806396,0.00793457,-0.025726318,-0.02482605,-0.0814209,-0.0044784546,-0.085754395,0.003063202,-0.020385742,-0.04699707,0.12390137,-0.08569336,-0.054901123,0.043548584,0.063964844,0.09631348,0.019058228,-0.06732178,0.0024280548,-0.041107178,-0.0075531006,0.06665039,0.024505615,0.06500244,0.06488037,-0.021438599,-0.008720398,0.034820557,0.0028591156,0.048339844,0.08105469,0.0769043,0.009391785,-0.059265137,-0.024230957,0.055725098,-0.04324341,-0.018447876,0.027008057,-0.031051636,0.052459717,0.046051025,0.032806396,-0.03137207,-0.03817749,-0.10217285,0.006263733,0.014305115,-0.0960083,0.015296936,0.008865356,0.009208679,-0.0034160614,0.16516113,0.0138549805,-0.009864807,-0.018676758,-0.026687622,-0.041412354,0.016174316,0.0071754456,0.053588867,-0.06210327,-0.05404663,-0.05718994,0.008407593,0.02130127,0.019454956,-0.0044784546,0.027450562,0.00027370453,-0.061767578,0.023635864,-0.03866577,0.033721924,0.06451416,-0.08026123,-0.04425049,0.003921509,-0.08569336,0.038848877,0.03704834,-0.060150146,-0.03805542,-0.00504303,0.002948761,-0.016952515,0.0011806488,-0.12854004,-0.08905029,-0.026779175,0.024139404,-0.05355835,0.07495117,-0.007255554,-0.046142578,0.03503418,-0.07733154,-0.005634308,-0.15075684,0.0758667,-0.019699097,0.016967773,-0.003660202,-0.111816406,-0.04458618,0.06298828,-0.0105896,-0.048858643,-0.027359009,0.115478516,0.038757324,-0.009933472,0.018356323,-0.07940674,-0.026779175,0.019454956,-0.070251465,-0.05041504,-0.009895325,-0.0033016205,0.064819336,0.013534546,-0.018356323,0.054229736,-0.00087451935,-0.008079529,0.02961731,-0.008361816,-0.020370483,0.09503174,0.022888184,0.07080078,0.011154175,0.050872803,0.02255249,0.03741455],"created_at":1735875660552,"nchars":2587},"64":{"title":"07.럭키 스트레이트","path":"1. Project/이것이 취업을 위한 코딩테스트다/07.럭키 스트레이트.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735794011359,"mtime":1735803616412,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 14:00:11","modified":"2025/01/02 16:40:16"},"id":"dc95b170c58a5910e62087acc07b3f99","content":"\n\nNOTE TITLE: [[07.럭키 스트레이트]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:11\",\"modified\":\"2025/01/02 16:40:16\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18406\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이 \n- 구현 문제\n- 절반을 기준으로 왼쪽, 오른쪽 구간을 나눴을 때 \n\t- 각 구간별 합이 같으면 `LUCKY`\n\t- 틀리면 `READY`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N;\n\n    private static void input() {\n        N = inputProcessor.nextInt();\n    }\n\n    private static void pro() {\n        String nums = String.valueOf(N);\n        int len = nums.length();\n        int half = len / 2;\n\n        int v1 = Integer.parseInt(nums.substring(0, half));\n        int v2 = Integer.parseInt(nums.substring(half));\n\n        String lucky = calculate(v1) == calculate(v2) ? \"LUCKY\" : \"READY\";\n        sb.append(lucky);\n    }\n\n    private static int calculate(int n) {\n        int result = 0;\n        int next = n;\n        while(next > 0) {\n            int mod = next % 10;\n            result += mod;\n            next /= 10;\n        }\n        return result;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.05407715,-0.020050049,-0.03427124,0.11602783,0.097229004,-0.057403564,-0.057281494,0.06903076,0.040649414,0.08453369,-0.006160736,-0.055725098,0.038726807,-0.016235352,0.027908325,0.035614014,0.05908203,0.0056648254,-0.05831909,0.0158844,0.046813965,0.014099121,-0.07470703,0.025100708,0.005191803,0.04650879,-0.02470398,0.07495117,0.080566406,-0.0057373047,-0.009338379,-0.030044556,-0.06262207,-0.0069274902,-0.01625061,0.07873535,0.05630493,0.03363037,-0.009880066,-0.11035156,0.025466919,-0.057891846,0.05090332,-0.017562866,-0.047027588,0.013198853,0.093444824,0.038116455,-0.078125,0.087768555,-0.03111267,-0.011291504,0.0146484375,-0.059173584,0.0069885254,-0.00041151047,0.020935059,-0.023345947,-0.06707764,0.024551392,0.06323242,-0.02041626,-0.10241699,0.09039307,0.11444092,-0.045166016,-0.07574463,0.0035820007,-0.03225708,-0.08917236,-0.009590149,-0.0040016174,0.00088119507,-0.01222229,-0.0047683716,0.056793213,0.05090332,-0.10522461,0.012931824,-0.021255493,-0.009590149,-0.072387695,-0.038146973,0.0016498566,-0.043060303,0.0127334595,-0.0006122589,0.002483368,-0.042663574,-0.028701782,0.06463623,0.07977295,-0.026153564,0.00049066544,-0.030441284,0.017288208,-0.012901306,0.029907227,0.07476807,0.06237793,0.016494751,-0.060516357,-0.051727295,-0.018112183,-0.041015625,0.011192322,-0.011001587,-0.05596924,-0.016326904,0.054718018,-0.10333252,-0.008728027,0.029205322,-0.012329102,-0.04800415,0.04522705,0.0385437,-0.06317139,0.02809143,-0.08660889,-0.018615723,-0.030639648,-0.09460449,0.076171875,0.070495605,0.08099365,0.05456543,0.019073486,-0.056518555,0.047607422,0.034179688,-0.0023517609,-0.016738892,0.07293701,-0.0065841675,-0.012054443,0.05279541,0.08416748,-0.021591187,-0.017547607,0.0046195984,0.0042533875,-0.0033130646,-0.061584473,-0.0010576248,0.07684326,0.028961182,-0.078430176,-0.0002641678,-0.115356445,0.028442383,0.044921875,0.07080078,0.12158203,-0.008354187,-0.06463623,0.097229004,0.012916565,-0.087768555,0.08917236,-0.11602783,0.0309906,-0.087402344,-0.058532715,0.046875,-0.041992188,0.038513184,0.07086182,-0.00806427,-0.032928467,0.021484375,0.06945801,-0.028060913,-0.033294678,-0.015098572,0.009254456,-0.07183838,0.07373047,0.0072517395,0.08972168,-0.0024299622,-0.014678955,-0.0703125,-0.035491943,0.050994873,0.056732178,-0.028457642,-0.10394287,0.022583008,0.011619568,-0.082092285,0.06958008,0.018188477,-0.07446289,-0.014381409,0.04550171,0.031463623,-0.03564453,0.027786255,-0.028259277,0.024154663,-0.0060272217,0.04928589,-0.0053520203,0.088256836,0.028945923,-0.05670166,-0.008842468,-0.0074653625,0.043762207,0.0020885468,-0.011756897,-0.08673096,0.015342712,-0.03729248,0.07556152,-0.0181427,-0.012130737,-0.030151367,0.099853516,0.07055664,-0.037994385,-0.06945801,-0.08508301,-0.0637207,0.031982422,0.046966553,-0.10296631,-0.070129395,-0.053100586,0.03729248,0.03591919,0.028961182,0.026290894,0.02609253,0.031204224,0.024902344,-0.0413208,-0.095581055,-0.006526947,0.034240723,-0.027313232,0.017623901,0.023666382,-0.04901123,-0.056518555,0.0127334595,0.054382324,0.018936157,-0.010116577,-0.06976318,-0.14086914,-0.0059127808,-0.12719727,-0.04067993,0.045318604,-0.038360596,0.04663086,-0.0892334,-0.028182983,0.040405273,0.0023174286,0.05432129,-0.022262573,-0.018875122,-0.068359375,-0.06011963,0.0014181137,0.010864258,0.06088257,0.029800415,0.018692017,-0.0063476562,0.03302002,0.019378662,-0.015144348,0.08465576,0.008293152,0.07788086,-0.002073288,0.06384277,0.03237915,0.1394043,-0.011680603,-0.030944824,0.047729492,-0.011817932,0.008155823,0.09399414,0.017288208,-0.074279785,-0.029403687,-0.07562256,-0.007045746,0.105407715,-0.06378174,0.018234253,0.0104599,-0.014717102,0.009895325,0.009941101,-0.031921387,-0.018341064,0.024612427,0.01084137,-0.037017822,0.024490356,0.016296387,-0.025756836,-0.00749588,-0.064575195,0.0031757355,0.017852783,0.07183838,0.028335571,-0.0029354095,0.06707764,0.017318726,-0.04510498,0.03942871,-0.03552246,-0.019042969,0.029190063,-0.003829956,-0.00047254562,-0.08074951,-0.029846191,0.08843994,0.042816162,-0.061401367,-0.060913086,0.046722412,-0.014717102,-0.028152466,0.0018186569,-0.0109939575,-0.0904541,0.022216797,0.028793335,-0.019363403,0.046081543,-0.0013456345,-0.024047852,0.023498535,-0.008544922,-0.082336426,-0.12036133,0.018447876,-0.08013916,-0.03074646,-0.024887085,-0.121398926,0.020324707,-0.007827759,-0.075927734,-0.0019893646,-0.05267334,0.015396118,0.010131836,-0.02659607,0.025665283,-0.020812988,-0.05419922,-0.072509766,-0.05368042,-0.037628174,-0.009559631,0.043762207,0.033233643,0.057403564,-0.00008070469,0.059387207,0.051330566,0.010543823,0.0390625,-0.050598145,-0.020385742,-0.0181427,0.037384033,0.04953003,0.05117798,0.051605225,0.09423828,-0.004890442],"created_at":1735875660553,"nchars":2622},"65":{"title":"06.무지의 먹방라이브","path":"1. Project/이것이 취업을 위한 코딩테스트다/06.무지의 먹방라이브.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735793908666,"mtime":1735800397329,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 13:58:28","modified":"2025/01/02 15:46:37"},"id":"94b4d16e6d81304783b6b01e1e08165b","content":"\n\nNOTE TITLE: [[06.무지의 먹방라이브]]\n\nMETADATA:{\"created\":\"2025/01/02 13:58:28\",\"modified\":\"2025/01/02 15:46:37\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/42891\n\n### 시간 복잡도 \n- `O(NlogN)`\n\t- 정렬 시간이 가장 크다\n### 풀이 \n- 그리드, 정렬 사용\n- `Food` 클래스를 정의하고, `번호`와 `시간` 정보를 담는다 \n\t- `시간` 오름차순으로 정렬\n- 높이와 너비를 구해 넓이를 계산하고`k`에서 뺴준다\n\t- 이때 높이 차이가 0이면 넘어간다\n\t- `넓이 > k` 인 경우 `(현재 위치, 마지막 위치)` 범위내에 서브 리스트를 구하고 **번호 순으로 정렬** 후 `k`번째 위치한 음식 번호를 출력한다\n- 더이상 음식이 없는 경우 `-1` 출력\n\n\n**효율성2. 오버플로우 이슈**\n- 높이 차를 나타내는 `diff` 의 경우 최대 1억이라 `int` 형으로 선언해도 문제 없음 \n- 반면, 넓이 `area` 구할 때 (하이라이트 `21`)\n\t- `{java} long area = diff * w` 할 경우 `int * int` 로 우변이 int범위 초과하여 **오버플로우 발생** \n\t- `{java} long area = (long)(diff * w)` 의 경우에도 마찬가지로 **오버플로우 발생** 후 long 캐스팅은 의미 없음\n\t- **해결** : `{java} long diff`로 선언하거나 `{java} long area = (long) diff * w` 하면 피연산자 하나를 long캐스팅하면 결과도 long으로 구해진다\n- 그리고 구간에서 인덱스를 구할 때 (하이라이트 `29`)\n\t- `{java} sub.get((int) k % sub.size()).no;` 에서 오버플로우가 발생\n\t- `k` 가 **long 타입**인데 **int** 캐스팅시 범위 초과하여 오버플로우가 발생\n\t\t- **해결1**. `{java} long idx = k % sub.size(); sub.get((int)idx).no`  안전하게 변수 분리하거나\n\t\t- **해결2**. `{java} sub.get((int)(k % sub.size())).no` , 나머지 연산 후 전체 캐스팅 하거나\n\n### 제출 코드\n```java hl:18,21,29\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    public int solution(int[] food_times, long k) {\n        List<Food> foods = new ArrayList<>();\n        for(int i = 0; i < food_times.length; i++) {\n            foods.add(new Food(i + 1, food_times[i]));\n        }\n\n        Collections.sort(foods);\n\n        int answer = -1;\n        int w = foods.size();\n        int prevTime = 0;\n        int i = 0;\n        for(Food f : foods) {\n            int diff = f.time - prevTime; // 높이\n\n            if(diff > 0) {\n                long area = (long) diff * w; // 넓이 = 높이 * 너비\n                if(area <= k) {\n                    k -= area;\n                    prevTime = f.time;\n                } else {\n                    List<Food> sub = foods.subList(i, food_times.length);\n                    sub.sort(Comparator.comparingInt(a -> a.no));\n                    \n                    answer = sub.get((int) (k % sub.size())).no;\n                    break;\n                }\n            }\n\n            i += 1;\n            w -= 1;\n        }\n\n        return answer;\n    }\n    \n    private static class Food implements Comparable<Food> {\n        private final int no;\n        private final int time;\n\n        public Food(int no, int time) {\n            this.no = no;\n            this.time = time;\n        }\n\n        public int compareTo(Food o) {\n            if(this.time != o.time) {\n                return this.time - o.time;\n            }\n            \n            return this.no - o.no;\n        }\n    }\n}\n```","embedding":[0.01071167,-0.007835388,0.032836914,0.020080566,0.12939453,-0.004917145,-0.03656006,0.047454834,0.06585693,0.13769531,-0.02368164,-0.050048828,0.020874023,0.022445679,-0.007205963,0.0054473877,0.048553467,0.020874023,-0.016723633,-0.013725281,0.046936035,0.0340271,-0.011512756,-0.015075684,0.002494812,0.025146484,-0.05279541,0.05496216,-0.021438599,-0.01637268,0.072143555,-0.048431396,-0.1003418,-0.034606934,0.08502197,0.060028076,0.016311646,-0.011489868,-0.010627747,-0.08282471,0.010169983,-0.0137786865,0.06317139,0.048583984,-0.029968262,-0.0040512085,0.04953003,-0.0064697266,-0.035858154,0.026855469,-0.056732178,0.06298828,-0.008476257,-0.10058594,-0.0096588135,-0.0914917,0.064697266,-0.0020599365,0.00687027,0.026885986,0.11444092,0.03253174,-0.002521515,0.03378296,0.0309906,-0.06652832,-0.020507812,-0.068847656,0.045288086,-0.0869751,0.008743286,0.017593384,0.041992188,0.004173279,0.07897949,0.013656616,0.099243164,-0.06506348,0.010238647,-0.010971069,-0.016418457,-0.058166504,-0.06738281,-0.00712204,-0.07330322,0.0070533752,0.0074920654,-0.048736572,-0.038848877,0.03878784,0.07946777,0.07714844,-0.057434082,-0.014144897,-0.052001953,0.017150879,-0.042663574,0.0041999817,0.039489746,0.05819702,-0.046691895,-0.10430908,0.045013428,-0.04244995,0.0107803345,0.019165039,0.07714844,-0.013648987,0.095336914,-0.002292633,-0.05923462,-0.00541687,-0.015434265,0.01625061,-0.011131287,-0.014533997,0.010597229,-0.04071045,0.06719971,-0.00020325184,0.04220581,-0.014480591,-0.01158905,-0.026535034,0.020370483,0.077819824,0.04257202,0.06732178,-0.16564941,0.012245178,0.047698975,0.00945282,-0.059814453,0.026611328,0.03933716,-0.06890869,0.0619812,0.119384766,-0.049621582,-0.07171631,0.055877686,-0.0035533905,-0.00712204,0.040100098,-0.0769043,0.06011963,0.024230957,-0.056915283,-0.013442993,-0.066711426,0.027679443,0.042297363,0.01914978,0.085754395,-0.06317139,-0.040618896,0.07531738,0.008407593,-0.019714355,0.11657715,-0.08782959,0.003818512,-0.123291016,-0.1307373,0.044128418,-0.003238678,0.049072266,0.059051514,-0.015434265,-0.0009613037,-0.015716553,0.11022949,-0.01424408,0.014266968,0.028274536,0.04397583,-0.050720215,-0.023910522,0.016830444,0.039489746,-0.027236938,-0.017196655,-0.062408447,-0.004558563,-0.012481689,0.042419434,-0.042938232,-0.022232056,-0.023880005,-0.03338623,-0.015579224,0.03765869,-0.017501831,-0.06878662,-0.02166748,0.05255127,-0.024337769,-0.017028809,0.022766113,-0.031311035,0.018829346,-0.09124756,0.00642395,0.093933105,0.011833191,-0.005344391,-0.03652954,-0.0032958984,-0.097351074,-0.0127334595,-0.008934021,0.013336182,0.0025901794,-0.036132812,-0.0064735413,-0.00667572,-0.0725708,-0.009048462,-0.04837036,0.10424805,0.060424805,0.0022144318,0.012710571,-0.09625244,-0.10601807,0.09552002,0.0075569153,-0.08843994,0.02519226,0.011787415,0.018295288,0.036468506,0.031463623,0.019714355,-0.067871094,0.06726074,0.0869751,-0.006793976,-0.064453125,-0.024536133,0.008033752,-0.0038585663,0.07293701,0.0028648376,-0.018936157,-0.021743774,0.11273193,0.06298828,0.0074653625,-0.04437256,0.027191162,-0.07165527,-0.06677246,-0.07519531,-0.05706787,0.0033855438,-0.018875122,0.0076904297,-0.09625244,-0.026168823,0.007858276,0.024124146,0.08673096,0.019104004,0.021224976,0.003929138,-0.0259552,-0.08441162,0.0095825195,0.0011558533,0.032562256,0.045074463,-0.04458618,-0.008003235,-0.074645996,0.027404785,0.10839844,0.085876465,0.021316528,-0.008590698,-0.11187744,-0.061553955,0.090148926,0.044555664,-0.022827148,0.00920105,-0.019622803,0.10144043,0.07305908,0.031280518,-0.0062408447,0.043273926,0.029556274,-0.055725098,0.04067993,-0.0026607513,0.020111084,0.0025196075,-0.05328369,0.02796936,0.023468018,-0.036315918,-0.007888794,-0.034240723,-0.056671143,-0.0060920715,0.07348633,-0.030258179,-0.06341553,0.011940002,-0.018188477,-0.040802002,0.027130127,0.036315918,0.037750244,0.034942627,-0.014320374,0.0016059875,-0.044006348,0.0061531067,-0.006958008,0.021621704,0.0703125,-0.07763672,-0.008361816,-0.022094727,-0.080200195,0.0904541,-0.035827637,-0.04647827,0.059387207,0.078063965,-0.06958008,0.0038318634,-0.09411621,-0.029830933,-0.043182373,-0.021133423,-0.033203125,0.0022010803,0.109069824,-0.04031372,-0.00004607439,0.06109619,0.017181396,-0.04812622,-0.10595703,-0.020858765,-0.042785645,-0.039764404,-0.042114258,-0.07598877,0.012687683,-0.017425537,-0.019866943,0.0068244934,0.0013217926,-0.015304565,0.04058838,-0.05517578,0.013320923,-0.12213135,-0.006793976,0.034942627,0.008911133,-0.05783081,-0.006717682,-0.00730896,0.0067977905,0.036193848,0.011924744,-0.006515503,0.15100098,-0.032989502,-0.002878189,0.015388489,0.059265137,-0.016418457,0.036895752,0.0340271,0.10626221,0.020248413,-0.009994507,-0.09057617],"created_at":1735875660850,"nchars":2728},"66":{"title":"05.볼링공 고르기","path":"1. Project/이것이 취업을 위한 코딩테스트다/05.볼링공 고르기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735793343392,"mtime":1735793800446,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 13:49:03","modified":"2025/01/02 13:56:40"},"id":"f5fd9fdc058615ed967acf9c9b838dd3","content":"\n\nNOTE TITLE: [[05.볼링공 고르기]]\n\nMETADATA:{\"created\":\"2025/01/02 13:49:03\",\"modified\":\"2025/01/02 13:56:40\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- 2019 SW 마에스트로 입학 테스트\n\n### 시간 복잡도 \n- `O(N)`\n\t- 데이터 입력 받는 시간이 가장 큼 (`N : 최대 1,000, M: 최대 10`)\n\t- 조합 계산하는 시간은 `O(M)` \n### 풀이\n- 그리디, 조합 문제\n- 서로 다른 무게를 가지는 공의 조합을 구하는 문제\n\t- 이때, 같은 무게의 공이 여러개 있을 수 있지만, 서로 다른 공으로 간주 \n\t- `1, 3, 3` 의 무게를 가진 공이 있을 때 `(1,3), (1,3)` 두 가지의 조합을 구할 수 있다\n- `{java}int[] count` 배열에 입력 받은 값을 인덱스로 하여 카운팅을 한다 \n\t- 이때 입력 받는 숫자의 최대 크기는 `m`\n- `1 ~ m` 까지 순차 순회하면서 조합을 계산한다\n\t- 전체 개수 `n`에 대해`{java}n -= count[i]` 하게 되면 조합 가능한 개수를 구할 수 있다\n\t- `{java} result += (count[i] * n)` 으로 현재 `i` 개수와 조합 가능한 개수를 곱한 결과를 합산  \n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n, m;  \n\tprivate static int[] count;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t    m = inputProcessor.nextInt(); // 공의 최대 무게  \n\t  \n\t    count = new int[m + 1];  \n\t    for(int i = 1; i <= n; i++) {  \n\t        int v = inputProcessor.nextInt();  \n\t        count[v] += 1;  \n\t    }  \n\t}  \n\t  \n\t// 서로 다른 두 무게의 조합  \n\tprivate static void pro() {  \n\t    int result = 0;  \n\t    for(int i = 1; i <= m; i++) {  \n\t        n -= count[i];  \n\t        result += (count[i] * n); // 현재 볼링공 개수 * 남은 볼링공 개수  \n\t    }  \n\t  \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```","embedding":[-0.015068054,-0.041778564,0.027175903,0.08282471,0.072387695,-0.05871582,-0.008323669,0.022705078,0.057891846,0.09741211,0.015975952,-0.0063056946,0.02331543,-0.039123535,0.07922363,-0.0006289482,-0.010597229,-0.013656616,-0.016433716,-0.025268555,0.08630371,0.0039043427,-0.0043029785,0.043182373,-0.005718231,0.090270996,0.0044136047,0.02532959,0.025177002,-0.025161743,0.066223145,-0.041259766,-0.06274414,-0.030136108,0.05783081,0.044830322,0.07977295,0.02645874,-0.012001038,-0.07537842,0.062194824,-0.043304443,0.07519531,-0.020935059,-0.00957489,0.030532837,0.023742676,0.018600464,-0.03729248,-0.024353027,-0.0035266876,-0.021102905,0.062072754,-0.06463623,-0.032989502,-0.026245117,-0.004295349,-0.04397583,-0.033233643,0.08959961,0.15148926,0.0345459,-0.01828003,0.066101074,0.058044434,-0.078552246,-0.065979004,-0.044403076,0.05908203,0.0043678284,0.005744934,-0.04638672,0.0115356445,-0.002216339,0.04019165,0.0029392242,0.13659668,-0.12408447,0.0047950745,-0.010665894,0.009407043,0.01675415,-0.07800293,-0.03793335,-0.07556152,-0.024307251,0.046081543,0.03262329,-0.023406982,0.046966553,0.04458618,0.033294678,-0.006210327,-0.034362793,-0.035827637,0.072021484,0.015548706,-0.005908966,0.008377075,0.07965088,-0.036468506,-0.064575195,0.001745224,-0.046966553,-0.063964844,0.0016489029,0.013412476,-0.014793396,0.0020656586,-0.025558472,-0.0635376,-0.018493652,-0.012680054,0.0072784424,0.05697632,0.024368286,0.03326416,-0.046813965,0.06829834,0.03237915,0.045715332,-0.011260986,-0.084106445,0.002904892,-0.082458496,0.07373047,-0.00667572,0.02368164,-0.050720215,0.048797607,0.01411438,-0.07940674,0.014457703,0.056854248,0.05645752,0.013725281,-0.0023612976,0.05911255,-0.030807495,-0.09277344,0.01259613,-0.048828125,-0.055999756,0.016830444,0.04650879,0.034057617,-0.0057678223,-0.06665039,0.012145996,-0.06982422,0.014266968,0.060546875,0.015129089,0.06109619,-0.04638672,-0.07092285,-0.0018501282,0.04727173,-0.034240723,0.07989502,-0.015075684,0.068603516,-0.08135986,-0.17492676,0.08441162,-0.05432129,0.009513855,0.06573486,0.034484863,-0.03967285,-0.0039482117,0.12597656,0.00045728683,-0.024139404,-0.0058135986,0.070617676,-0.07537842,0.008331299,0.09429932,0.036987305,-0.0021266937,0.017044067,-0.10144043,-0.0289917,0.032043457,0.07891846,0.033569336,-0.0206604,0.021118164,-0.00071430206,-0.033966064,0.006626129,0.0051651,-0.08959961,-0.036865234,0.039276123,-0.011520386,-0.092285156,0.016143799,-0.08630371,0.06542969,-0.057006836,0.051818848,0.04385376,0.018508911,0.054107666,0.022018433,0.04083252,-0.0039711,0.04449463,0.0013227463,0.02798462,-0.01727295,0.011291504,0.020309448,0.019500732,-0.038604736,0.016342163,-0.08148193,0.09387207,-0.016937256,0.024169922,-0.079833984,-0.038146973,-0.035583496,-0.016708374,0.037719727,-0.14953613,-0.077941895,-0.038909912,0.09765625,0.04748535,0.026611328,0.030914307,-0.003604889,0.026489258,0.023513794,0.029754639,-0.054656982,-0.05783081,-0.027450562,0.012275696,0.004878998,0.067871094,-0.012306213,-0.046295166,-0.052856445,-0.022125244,-0.035095215,0.05319214,-0.029708862,-0.10601807,0.00843811,-0.05496216,-0.024795532,-0.028533936,0.009559631,0.023727417,-0.023117065,-0.0003273487,0.011917114,0.06536865,0.062683105,-0.049438477,-0.032592773,-0.009178162,-0.05810547,-0.030441284,0.07043457,0.005306244,0.062805176,-0.016586304,0.037139893,0.0069732666,0.005783081,-0.061950684,0.1381836,0.10595703,-0.01399231,0.0045433044,0.0028381348,-0.11859131,0.1239624,0.05419922,-0.050720215,0.086364746,-0.064819336,0.10003662,0.08441162,0.027618408,-0.15515137,-0.00023627281,-0.020843506,-0.08496094,0.09490967,0.047576904,0.017730713,0.019134521,0.016860962,-0.012802124,0.061065674,0.048339844,-0.0031471252,0.044708252,-0.027770996,-0.05444336,-0.045013428,-0.017684937,-0.032684326,-0.010421753,-0.03994751,-0.05545044,-0.052215576,0.010772705,0.012954712,0.0071640015,0.013893127,0.06008911,-0.09887695,-0.03869629,-0.033081055,-0.0061035156,-0.024749756,-0.060943604,-0.011505127,-0.019012451,-0.109069824,0.07116699,0.038513184,-0.02519226,-0.06866455,0.039611816,-0.063964844,0.010444641,-0.043914795,-0.016662598,-0.013839722,-0.010650635,0.02243042,0.012397766,0.058746338,-0.00058841705,-0.018432617,0.051239014,-0.002614975,-0.04840088,-0.090148926,0.030639648,-0.01007843,-0.009185791,0.0005569458,-0.090026855,0.021209717,0.018463135,-0.053649902,-0.03729248,-0.121398926,-0.03640747,-0.031982422,-0.06085205,0.019699097,-0.08874512,-0.060272217,-0.05529785,0.011779785,0.016235352,0.021881104,-0.06213379,0.039794922,0.004764557,0.021072388,0.049102783,0.01008606,0.03857422,0.0345459,0.048461914,-0.0028686523,0.046783447,-0.0024967194,0.030532837,0.025054932,0.0069122314,0.06585693,-0.064697266],"created_at":1735875660851,"nchars":2857},"67":{"title":"04.만들 수 없는 금액 (💩)","path":"1. Project/이것이 취업을 위한 코딩테스트다/04.만들 수 없는 금액 (💩).md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735793918844,"mtime":1735874821570,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 13:58:38","modified":"2025/01/03 12:27:01"},"id":"6b7d2f8c17fb15fef149630a2d476e78","content":"\n\nNOTE TITLE: [[04.만들 수 없는 금액 (💩)]]\n\nMETADATA:{\"created\":\"2025/01/02 13:58:38\",\"modified\":\"2025/01/03 12:27:01\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \n- K 대회 기출\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이 \n- 그리디\n- `1부터 target - 1 까지의 모든 금액을 만들 수 있는 상태`라고 가정\n\t- 현재 확인하는 동전의 단위가 target 이하라면, target 값을 업데이트 \n\t- 반면, 현재 동전의 단위가 target보다 크다면 만들 수 없는 상태\n\t- 예로 1, 2, 3, 8 동전이 있을때 `{java}target = 1` 초기화하여 시작\n\t\t- 동전 = 1, `target = 2` 로 갱신 (1부터 1`(target - 1)`까지 만들 수 있다)\n\t\t- 동전 = 2, `target = 4`로 갱신 (1부터 3까지 만들 수 있다)\n\t\t- 동전 = 3, `target = 7`로 갱신 (1부터 6까지 만들 수 있다)\n\t\t- 동전 = 8,  `7 < 8`이므로 `target = 7` 은 만들 수 없다\n\n입출력 예시\n\n```text\n입력 \n5\n3 2 1 1 9\n\n출력\n8\n\n\n입력\n3\n3 5 7\n\n출력\n1\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] arr;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t    arr = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        arr[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(arr);  \n\t  \n\t    int target = 1;  \n\t    for(int a : arr) {  \n\t        if(target < a) {  \n\t            break;  \n\t        }  \n\t  \n\t        target += a;  \n\t    }  \n\t  \n\t    sb.append(target);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n\n```","embedding":[-0.029907227,0.00068950653,0.0096588135,0.01309967,0.04168701,-0.059936523,-0.039520264,0.07897949,0.036102295,0.06365967,0.03314209,-0.0062675476,0.037994385,-0.014976501,0.039520264,0.04724121,0.048034668,-0.0015859604,-0.017181396,-0.06652832,0.101257324,0.081970215,-0.011451721,0.024902344,0.04916382,0.051239014,0.017166138,0.03050232,0.088378906,0.046447754,0.005958557,-0.017700195,-0.03074646,-0.07312012,0.058532715,0.05038452,0.042877197,0.064697266,-0.007434845,-0.10772705,0.07232666,-0.07952881,0.036956787,-0.023834229,0.017074585,0.022369385,0.0423584,0.03817749,-0.008468628,0.009086609,-0.021469116,-0.027053833,0.049560547,-0.07965088,-0.0020637512,0.0059280396,0.034576416,0.037078857,-0.016830444,-0.0020427704,0.11138916,0.04598999,-0.050231934,0.073913574,0.06939697,-0.064941406,0.011528015,-0.0082092285,0.085998535,-0.030426025,0.015975952,-0.03878784,-0.008857727,-0.035217285,0.011642456,0.028381348,0.07141113,-0.054779053,0.016296387,-0.057647705,-0.042510986,-0.076416016,-0.06237793,-0.053985596,-0.071777344,-0.016464233,0.011047363,-0.007648468,0.0069885254,0.03555298,0.034942627,0.086364746,-0.03970337,0.055847168,-0.03866577,0.009124756,-0.018005371,0.014312744,0.04171753,0.04534912,0.015617371,-0.088256836,-0.033477783,-0.01386261,-0.0803833,-0.0035705566,-0.007320404,-0.0062408447,-0.014419556,0.03503418,-0.04837036,-0.021896362,-0.038879395,-0.008758545,0.028320312,-0.059570312,0.030456543,-0.13806152,0.057800293,-0.1060791,0.009338379,0.039886475,-0.092041016,-0.040985107,-0.06726074,0.06561279,0.066223145,0.03451538,-0.09869385,0.033966064,0.03173828,-0.014411926,-0.035614014,0.03338623,0.046539307,-0.035614014,0.062683105,0.045318604,-0.0234375,-0.013442993,-0.007572174,0.014007568,-0.041809082,0.039489746,-0.03564453,0.050933838,-0.010910034,-0.062286377,0.020828247,-0.09484863,0.022964478,0.021697998,0.041900635,0.107666016,-0.0103302,0.016677856,0.015396118,0.024169922,-0.031555176,0.054870605,-0.06161499,0.09539795,-0.066101074,-0.16455078,0.07611084,0.024978638,0.014343262,0.05230713,-0.013885498,-0.036132812,-0.008026123,0.07623291,-0.053833008,-0.042114258,-0.015258789,0.04208374,-0.10369873,-0.00020170212,-0.00018906593,0.04309082,0.000667572,0.022705078,-0.07556152,0.0066947937,-0.0037384033,0.028625488,-0.020767212,-0.022766113,0.049591064,-0.018722534,-0.073791504,0.022705078,0.028427124,-0.07373047,-0.07122803,-0.011360168,-0.07421875,-0.07354736,-0.006427765,-0.07397461,0.09429932,-0.046203613,0.04623413,0.04827881,0.051879883,-0.006462097,-0.010375977,0.05883789,-0.06213379,0.008560181,0.038635254,0.046661377,-0.032958984,0.0024490356,-0.004257202,0.04071045,0.022384644,0.041809082,0.011054993,0.13415527,0.043670654,-0.019638062,-0.034240723,-0.08276367,-0.1394043,0.0017700195,0.07006836,-0.12756348,-0.07171631,-0.012680054,0.03074646,0.052368164,-0.014221191,-0.04269409,-0.009307861,0.0048103333,0.030166626,0.047698975,-0.08227539,-0.026992798,0.056854248,-0.042053223,0.03930664,0.020477295,-0.048950195,-0.08947754,-0.07836914,0.029968262,-0.014808655,0.030349731,-0.059814453,-0.086120605,-0.02859497,-0.051757812,-0.07849121,-0.012229919,-0.068115234,0.015007019,-0.06137085,0.0013628006,0.060516357,0.05239868,0.027496338,-0.05883789,-0.025863647,-0.107788086,-0.07055664,-0.020462036,0.07312012,0.082214355,0.027648926,0.059661865,0.09094238,0.01574707,0.025802612,-0.042999268,0.09667969,0.035827637,-0.061462402,-0.024246216,0.007167816,-0.02104187,0.11035156,0.04373169,-0.0016412735,0.023498535,-0.026489258,0.06640625,0.07928467,-0.02659607,-0.13745117,-0.04058838,-0.052612305,-0.019851685,0.15258789,-0.014556885,0.031280518,0.06185913,0.026550293,0.020828247,0.06689453,-0.03527832,0.009124756,0.014640808,-0.022064209,-0.00970459,-0.022094727,-0.032684326,0.008918762,0.049224854,-0.052215576,-0.0049324036,-0.015602112,-0.00090265274,-0.00793457,0.021194458,0.051513672,0.009880066,-0.08343506,0.01890564,-0.061523438,0.025024414,-0.019592285,0.025131226,-0.009094238,-0.031280518,-0.028671265,0.11981201,0.06976318,-0.0011758804,0.00051641464,0.0022850037,-0.004295349,-0.016738892,-0.037384033,-0.009819031,-0.014793396,-0.015960693,0.040008545,0.059783936,0.031555176,-0.03616333,0.014259338,0.08123779,-0.0019874573,-0.07678223,-0.11071777,-0.0052261353,-0.04260254,0.0024681091,-0.03274536,-0.0848999,-0.041870117,-0.06982422,-0.051513672,-0.036315918,-0.11199951,-0.004951477,-0.034332275,0.03274536,0.06951904,-0.04421997,0.0030231476,-0.07043457,-0.07513428,0.0011453629,0.007247925,0.009887695,0.050750732,0.060516357,0.050598145,-0.0023918152,0.06378174,-0.010948181,-0.0038833618,-0.029052734,0.0010690689,0.02494812,0.03567505,0.07611084,0.037109375,0.03616333,0.06100464,-0.014953613],"created_at":1735875660852,"nchars":2757},"68":{"title":"03.문자열 뒤집기","path":"1. Project/이것이 취업을 위한 코딩테스트다/03.문자열 뒤집기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735793916686,"mtime":1735872568537,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 13:58:36","modified":"2025/01/03 11:49:28"},"id":"86ea582ff110d6ec650cbeb762dbbdbd","content":"\n\nNOTE TITLE: [[03.문자열 뒤집기]]\n\nMETADATA:{\"created\":\"2025/01/02 13:58:36\",\"modified\":\"2025/01/03 11:49:28\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/1439\n\n### 시간 복잡도 \n- `O(S)`\n\t- S의 길이는 최대 100만보다 작음\n\n### 풀이 \n- 그리디\n- 연속된 `0, 1`  그룹수를 각각 카운팅하여 최소값을 가지는 그룹을 대상으로 뒤집으면 최적의 해를 찾을 수 있다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static String s;\n\n    private static void input() {\n        s = inputProcessor.nextLine().trim();\n    }\n\n    private static void pro() {\n        int[] count = new int[2]; // 0, 1 그룹 카운팅\n        char prev = '2';\n        for(char c : s.toCharArray()) {\n            if(prev == c) continue;\n\n            // 그룹이 변경되면 카운팅\n            prev = c;\n            count[c - '0'] += 1;\n        }\n\n        int result = Math.min(count[0], count[1]);\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```","embedding":[0.023544312,-0.031280518,0.057159424,0.0625,0.08166504,-0.0019607544,-0.0063171387,0.037872314,0.033996582,0.1038208,-0.022155762,-0.07067871,0.013412476,0.015113831,0.03970337,0.06439209,0.0034618378,-0.0259552,-0.057617188,-0.028579712,0.056610107,-0.049957275,-0.0635376,0.015419006,0.018676758,0.014328003,-0.037139893,0.117248535,-0.012931824,-0.016418457,-0.00086021423,-0.06488037,-0.028213501,-0.037994385,0.009468079,0.047821045,0.0024147034,0.004272461,0.011123657,-0.08807373,0.010047913,-0.03289795,0.032470703,0.011039734,-0.03717041,0.04638672,0.10510254,0.050628662,-0.021224976,-0.00016891956,0.031677246,0.022628784,0.07470703,-0.031143188,-0.029678345,-0.010749817,0.011108398,-0.040252686,0.0017166138,0.05227661,0.1159668,0.050231934,-0.047210693,0.066467285,0.07312012,-0.092285156,-0.093688965,-0.013580322,0.035705566,-0.010124207,0.02861023,-0.041778564,0.011146545,-0.047668457,0.018615723,0.017486572,0.078063965,-0.109558105,0.06817627,-0.029174805,0.0067977905,-0.026260376,-0.043029785,-0.068725586,-0.034210205,0.014312744,-0.0184021,0.009361267,-0.022903442,0.07727051,-0.021102905,0.05505371,-0.02507019,-0.004360199,-0.00087594986,0.016601562,0.013847351,0.006187439,0.020843506,0.10290527,0.040130615,-0.12963867,-0.03933716,-0.0074424744,-0.024887085,-0.023773193,-0.06222534,0.009719849,0.005115509,0.0033931732,-0.10253906,0.006706238,-0.03086853,-0.0524292,0.0143585205,0.006175995,0.026046753,-0.061401367,0.026168823,-0.04095459,-0.0052223206,0.05883789,0.014122009,0.0231781,-0.017745972,0.059753418,0.025802612,-0.03463745,-0.07019043,0.043304443,0.02192688,0.004951477,-0.050354004,0.118774414,0.060668945,0.02243042,0.032470703,0.050231934,-0.0025672913,-0.055023193,-0.0018873215,-0.042114258,-0.02709961,0.0077781677,-0.011703491,0.025756836,-0.024337769,-0.061553955,0.025939941,-0.036376953,0.012214661,0.017028809,0.050231934,-0.0009832382,-0.07086182,-0.07342529,0.0592041,-0.022460938,-0.06439209,0.09552002,-0.13171387,0.006038666,-0.103393555,-0.13317871,0.13171387,-0.00082206726,0.009811401,0.116760254,0.061462402,-0.037902832,-0.05697632,0.073913574,-0.00466156,-0.030960083,0.03652954,0.012817383,-0.11395264,0.024337769,0.03125,0.0015382767,0.006706238,0.0016555786,-0.10394287,-0.030548096,0.03652954,0.02558899,-0.028121948,-0.00069618225,0.057128906,0.020645142,-0.1217041,0.032073975,0.051727295,-0.027053833,-0.074645996,0.00031018257,0.014442444,-0.024719238,0.11102295,-0.0692749,0.03552246,-0.0491333,0.037109375,0.06463623,0.053344727,0.034484863,-0.013000488,-0.010520935,-0.040252686,0.005596161,0.0104904175,-0.032348633,-0.0206604,-0.031234741,0.07305908,0.044891357,-0.005168915,0.0058555603,-0.03643799,0.11425781,0.0501709,-0.02973938,-0.0736084,-0.07312012,-0.091674805,-0.03237915,0.042236328,-0.10211182,-0.046569824,-0.07208252,0.04940796,0.0022220612,0.06732178,-0.012908936,0.018661499,0.023498535,0.06008911,-0.025894165,-0.06286621,-0.032836914,0.070373535,0.03213501,0.042755127,0.015930176,-0.06921387,-0.07745361,-0.01210022,0.022735596,-0.021743774,0.012283325,-0.060180664,-0.12408447,0.0024738312,-0.06744385,0.011329651,0.05343628,-0.07421875,0.039489746,-0.08721924,-0.010269165,-0.010643005,0.09716797,0.05795288,-0.027389526,-0.038604736,-0.0043296814,-0.007083893,-0.0390625,0.0592041,0.052886963,0.05343628,0.032348633,-0.010253906,0.028884888,-0.022003174,0.020339966,0.09094238,0.060394287,0.08123779,0.055023193,-0.00422287,0.008003235,0.08532715,0.037628174,-0.013092041,0.05758667,-0.0015897751,0.06365967,0.036712646,-0.006126404,-0.08355713,-0.045410156,-0.07305908,-0.020309448,0.06854248,-0.04840088,-0.010284424,-0.010894775,0.010543823,-0.015022278,0.09729004,-0.017074585,0.00052404404,0.026321411,-0.0035552979,-0.031280518,0.0143966675,0.011795044,-0.025360107,-0.022903442,-0.030960083,-0.08215332,0.024505615,0.0206604,0.070007324,-0.033447266,0.008399963,0.041290283,-0.07244873,0.005432129,-0.041625977,0.016952515,0.032318115,-0.08831787,-0.019760132,-0.048675537,-0.010253906,0.103393555,0.03543091,-0.016418457,-0.030426025,0.03845215,-0.0016975403,-0.052459717,-0.01725769,-0.06463623,-0.052001953,-0.11279297,-0.050598145,0.035369873,0.06921387,0.068481445,0.047912598,0.044677734,-0.03250122,-0.07141113,-0.11431885,0.043670654,-0.021911621,0.04925537,0.018035889,-0.12683105,0.0010681152,0.00674057,-0.036621094,-0.040924072,-0.059570312,-0.024749756,-0.004135132,-0.025390625,0.06939697,-0.12371826,-0.042022705,-0.025039673,-0.06781006,-0.0035324097,0.07086182,-0.0051727295,0.019943237,0.022064209,-0.0028476715,0.008476257,0.040100098,0.05279541,0.016677856,0.029312134,-0.0065994263,0.08483887,0.0871582,0.08001709,0.033477783,0.05355835,0.021026611,-0.054656982],"created_at":1735875660853,"nchars":2412},"69":{"title":"02.곱하기 혹은 더하기","path":"1. Project/이것이 취업을 위한 코딩테스트다/02.곱하기 혹은 더하기.md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735791380171,"mtime":1735791515138,"tags":[],"extension":"md","metadata":{"created":"2025/01/02 13:16:20","modified":"2025/01/02 13:18:35"},"id":"6ef08af3c4507048101e99c549d7b8e7","content":"\n\nNOTE TITLE: [[02.곱하기 혹은 더하기]]\n\nMETADATA:{\"created\":\"2025/01/02 13:16:20\",\"modified\":\"2025/01/02 13:18:35\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- Facebook 인터뷰\n\n### 시간 복잡도 \n- `O(N)`\n\t- N : 문자열 길이\n\n### 풀이 \n- 그리디\n- **결과값** 또는 **현재 숫자**가 `1 이하`인 경우 `더하기`를 하고, 그 외에는 `곱하기` 하면 최대값이 구해진다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static String s;  \n\t  \n\tprivate static void input() {  \n\t   s = inputProcessor.nextLine().trim();  \n\t}  \n\t  \n\tprivate static void pro(){  \n\t    char[] arr = s.toCharArray();  \n\t  \n\t    int result = 0;  \n\t    for(int i = 0; i < arr.length; i++) {  \n\t        int v = (arr[i] - '0');  \n\t        if(result <= 1 || v <= 1) {  \n\t            result += v;  \n\t        } else {  \n\t            result *= v;  \n\t        }  \n\t    }  \n\t  \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```","embedding":[-0.021408081,0.02432251,0.0149383545,-0.0033607483,0.082458496,-0.026779175,-0.08557129,0.11450195,-0.0032863617,0.055480957,-0.009651184,-0.07324219,0.05053711,-0.04232788,0.054107666,0.02571106,0.007419586,0.015083313,0.036102295,0.011741638,0.06021118,-0.0395813,-0.073913574,0.021408081,0.040283203,0.007255554,-0.052581787,0.085510254,0.011184692,0.0016965866,-0.008834839,-0.0435791,-0.024612427,-0.04498291,0.018478394,0.057739258,0.044525146,-0.00090265274,0.01751709,-0.11407471,-0.020202637,0.01890564,0.09423828,-0.023132324,-0.013298035,0.024658203,0.053894043,0.07940674,-0.0340271,-0.0041618347,0.04574585,0.032226562,0.08502197,-0.07897949,0.01927185,0.012275696,0.049621582,-0.040740967,-0.0440979,-0.002811432,0.13049316,0.039123535,-0.06854248,0.022994995,0.119628906,-0.07989502,-0.06323242,-0.05279541,0.026947021,0.06390381,0.0231781,-0.044403076,0.012359619,-0.025619507,0.05340576,0.025100708,0.04724121,-0.0713501,0.031143188,-0.048706055,0.008071899,0.0019950867,-0.016357422,0.0016508102,-0.01751709,-0.036132812,-0.017440796,0.072021484,-0.0335083,0.0020160675,0.03643799,0.04309082,-0.012077332,0.016479492,-0.04196167,0.05960083,-0.00182724,-0.037628174,0.015838623,0.1652832,0.00554657,-0.0925293,-0.06335449,0.00881958,-0.019058228,0.030807495,-0.082092285,-0.049224854,-0.026641846,0.077697754,-0.057159424,-0.034484863,-0.002149582,0.039794922,-0.05279541,-0.0016899109,0.015258789,-0.1071167,0.022323608,-0.053009033,0.032440186,0.030593872,-0.014930725,0.023513794,-0.05331421,0.05291748,0.015083313,0.0076141357,-0.084106445,0.07647705,0.020767212,-0.026535034,-0.06945801,0.13623047,0.012802124,0.008163452,0.0059432983,0.055847168,-0.03982544,-0.12536621,-0.036621094,0.00032401085,0.008773804,0.03036499,-0.038513184,0.08758545,-0.019989014,-0.07165527,-0.02911377,-0.052978516,-0.038909912,-0.0017557144,0.029418945,0.024215698,-0.06402588,-0.06329346,0.0914917,-0.031951904,-0.08325195,0.093444824,-0.04296875,0.06317139,-0.07336426,-0.1048584,0.13427734,-0.05230713,0.040649414,0.07281494,0.026016235,-0.04675293,0.0049743652,0.10601807,-0.07305908,-0.016723633,0.036865234,0.030303955,-0.103271484,0.07928467,0.03741455,0.029846191,-0.053588867,-0.0046577454,-0.071777344,-0.051696777,0.026611328,0.014381409,0.0025691986,0.012130737,-0.006214142,0.016082764,-0.060302734,0.06488037,0.042114258,-0.028869629,-0.09692383,-0.034118652,-0.018600464,-0.033691406,0.055541992,-0.024597168,0.03765869,-0.021057129,0.02784729,0.024856567,0.08312988,0.01725769,-0.013786316,0.020614624,-0.055541992,0.026733398,-0.017684937,0.00086069107,-0.015304565,-0.039642334,-0.00013542175,0.028625488,0.0012359619,0.028915405,-0.021255493,0.09869385,0.06591797,0.045776367,-0.04736328,-0.07067871,-0.072265625,0.0041389465,0.024398804,-0.080078125,-0.060516357,-0.0069351196,0.061584473,0.008285522,0.052764893,0.02368164,0.022827148,0.026947021,0.113342285,0.08465576,0.034454346,-0.022155762,0.024169922,0.0054130554,-0.018005371,-0.047821045,-0.032989502,-0.042236328,-0.0017137527,0.00415802,0.047912598,-0.020767212,-0.04547119,-0.10876465,-0.023773193,-0.087402344,-0.05340576,0.0031013489,-0.03375244,0.00390625,-0.13122559,-0.008071899,0.014762878,0.047821045,0.036743164,-0.03024292,-0.02067566,-0.0025577545,-0.048706055,-0.016921997,0.030303955,0.03930664,0.017532349,0.07562256,-0.029464722,0.03930664,0.028015137,-0.048339844,0.093566895,0.042938232,0.0056495667,-0.013206482,-0.0029716492,-0.07501221,0.08300781,0.02180481,-0.0024719238,0.02923584,-0.079956055,-0.00016725063,0.06719971,-0.012298584,-0.07147217,-0.041381836,-0.08013916,-0.042114258,0.095947266,-0.058746338,0.028076172,0.017333984,0.08477783,-0.031555176,0.101379395,-0.01826477,-0.040924072,0.00014531612,-0.011940002,-0.052520752,0.05911255,0.00024795532,0.048828125,-0.0335083,-0.01637268,-0.03189087,-0.039642334,0.029754639,0.008476257,-0.008460999,0.03982544,0.021224976,-0.08520508,0.0345459,-0.019683838,0.022460938,0.054840088,-0.09185791,-0.05911255,-0.013786316,-0.018478394,0.067993164,0.02784729,-0.03375244,-0.034942627,0.03729248,-0.055664062,-0.017684937,0.061584473,-0.103149414,-0.05029297,-0.06274414,0.01689148,-0.011039734,0.09057617,0.010421753,0.016052246,0.080566406,-0.056884766,-0.048706055,-0.13598633,0.095703125,0.016555786,-0.00085401535,0.0048217773,-0.09295654,-0.03845215,-0.023773193,-0.025787354,-0.0027942657,-0.041870117,0.07171631,-0.035461426,-0.014518738,-0.004459381,-0.065979004,-0.06793213,-0.09033203,-0.0362854,-0.017486572,0.023513794,0.0020885468,0.032348633,-0.0027542114,-0.007080078,0.06555176,0.02748108,0.009132385,0.041229248,-0.0063285828,-0.000218153,0.040130615,-0.0022602081,0.08325195,0.050231934,0.015533447,0.06512451,-0.025253296],"created_at":1735875660854,"nchars":2353},"70":{"title":"01. 모험가 길드 (🔺)","path":"1. Project/이것이 취업을 위한 코딩테스트다/01. 모험가 길드 (🔺).md","embeddingModel":"embed-multilingual-light-v3.0","ctime":1735616310157,"mtime":1735875569790,"tags":[],"extension":"md","metadata":{"created":"2024/12/31 12:38:30","modified":"2025/01/03 12:39:29"},"id":"bb24e2b75d91cdcdabe91b918c2e0b38","content":"\n\nNOTE TITLE: [[01. 모험가 길드 (🔺)]]\n\nMETADATA:{\"created\":\"2024/12/31 12:38:30\",\"modified\":\"2025/01/03 12:39:29\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- 핵심 유형\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 그리디, 정렬\n- `'현재 그룹에 포함된 모험가의 수'가 '현재 확인하고 있는 공포도'보다 크거나 같다면 그룹을 형성`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] fear;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t  \n\t    fear = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        fear[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(fear);  \n\t  \n\t    int result = 0;  \n\t    int count = 0;  \n\t    for(int f : fear) {  \n\t        count += 1;  \n\t        if(count >= f) { // 인원수가 팀원의 공포도 이상이면 그룹 형성 \n\t            result += 1;  \n\t            count = 0;  \n\t        }  \n\t    }  \n\t    \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n}\n```","embedding":[0.036010742,-0.0039711,-0.0043640137,0.07330322,0.107543945,-0.023132324,-0.0001026392,0.091552734,-0.0024795532,0.14880371,-0.002588272,-0.07299805,0.028320312,-0.064331055,0.07873535,-0.016418457,-0.010620117,0.0690918,-0.030914307,-0.044891357,0.09136963,0.0066566467,0.02330017,0.050750732,0.0041923523,0.08728027,-0.03274536,0.08911133,0.026382446,-0.03427124,0.025848389,-0.044158936,-0.08642578,-0.03164673,0.0124053955,0.0395813,0.05709839,0.023040771,-0.008880615,-0.08087158,0.05645752,-0.09423828,0.0418396,0.04486084,0.010398865,0.026184082,0.01751709,0.047027588,-0.087402344,0.045196533,0.019699097,0.045715332,0.036865234,0.0020618439,-0.02809143,0.013000488,-0.0035057068,-0.03869629,-0.0491333,0.05895996,0.08111572,0.030914307,-0.08081055,0.029785156,0.014221191,-0.10223389,-0.08605957,-0.036712646,0.042633057,0.006504059,0.0021648407,-0.008277893,-0.0035266876,-0.07733154,0.011932373,0.0073051453,0.123413086,-0.049316406,0.030593872,-0.06945801,0.07720947,0.004180908,-0.047698975,-0.020492554,-0.04119873,-0.00409317,-0.016342163,-0.0073432922,0.006340027,0.03543091,0.03439331,0.028945923,-0.0023288727,0.017425537,-0.015197754,0.036254883,0.003326416,0.016952515,0.091918945,0.1270752,0.017501831,-0.03717041,0.07165527,-0.041259766,-0.046783447,0.03677368,-0.020141602,0.052215576,0.019058228,0.009277344,-0.113342285,-0.009162903,-0.0013580322,0.0040397644,0.027709961,0.049224854,0.017623901,-0.06121826,0.066711426,-0.015304565,-0.0044021606,-0.0079422,-0.043701172,-0.008148193,-0.050811768,0.040161133,0.07055664,-0.016708374,-0.04067993,0.045776367,0.0021514893,0.06866455,-0.010498047,-0.016921997,0.038757324,-0.04788208,0.03668213,0.051116943,-0.025466919,-0.11932373,0.019561768,-0.045806885,-0.064575195,-0.040893555,-0.010055542,-0.037109375,-0.000024199486,-0.09686279,0.03338623,-0.064575195,-0.03427124,0.09680176,0.043823242,0.047332764,-0.03338623,0.024856567,0.075683594,0.01689148,-0.06677246,0.04345703,-0.07373047,-0.0010614395,-0.09112549,-0.09967041,0.119384766,-0.007434845,0.035095215,0.030044556,-0.006843567,-0.0146865845,-0.0096206665,0.10211182,-0.00920105,-0.010528564,0.017868042,0.024414062,-0.08843994,0.031433105,0.037872314,-0.015525818,-0.018478394,0.00018310547,-0.028076172,-0.03213501,-0.07330322,0.06311035,-0.008834839,-0.002412796,0.042175293,-0.0690918,-0.06958008,0.049102783,0.021575928,-0.028793335,-0.04296875,0.013664246,0.003293991,-0.08569336,0.037322998,-0.07165527,0.06488037,-0.03010559,0.011329651,0.0435791,0.0012769699,0.018356323,-0.015167236,-0.020996094,-0.043395996,0.07836914,0.016036987,-0.014953613,-0.06677246,-0.060760498,-0.042541504,-0.043029785,-0.0012493134,0.04840088,-0.08703613,0.072631836,0.03967285,0.006587982,-0.1227417,-0.0019435883,-0.026809692,-0.06518555,-0.0013561249,-0.058288574,0.018981934,-0.056762695,0.039093018,0.044403076,0.042755127,-0.06488037,0.03186035,0.018218994,0.045166016,0.0045204163,-0.024353027,-0.023391724,-0.007282257,-0.015975952,0.042510986,-0.020263672,-0.035339355,-0.039642334,-0.06427002,0.04537964,0.012634277,-0.029220581,-0.12658691,-0.113708496,-0.060516357,-0.1262207,-0.105407715,0.0345459,0.00037646294,0.01171875,-0.1239624,-0.021972656,0.013641357,0.037475586,0.06414795,-0.017822266,-0.091430664,0.018127441,-0.074035645,0.025817871,0.041137695,0.12817383,0.033996582,-0.025665283,0.07965088,-0.002981186,0.076538086,-0.012962341,0.096191406,0.029556274,-0.0011959076,0.0146865845,-0.012069702,-0.0869751,0.07836914,0.050933838,-0.009628296,0.058044434,0.0044784546,-0.011817932,0.032684326,0.038726807,-0.097839355,-0.030441284,-0.101867676,-0.029953003,0.0736084,0.033721924,0.01361084,0.05050659,0.039031982,0.047088623,0.048736572,-0.014862061,-0.007286072,-0.03439331,-0.0395813,-0.06121826,0.03414917,0.008460999,-0.014701843,0.009132385,-0.010810852,-0.018005371,-0.011878967,0.0146102905,0.08929443,-0.009971619,-0.0039367676,0.029541016,-0.11419678,-0.06542969,0.022155762,0.00074386597,0.04196167,-0.018539429,0.016998291,-0.023406982,-0.12524414,0.007858276,0.04324341,-0.01109314,0.02003479,0.014465332,-0.023101807,-0.029953003,-0.05505371,-0.08850098,-0.02355957,-0.022598267,0.035186768,0.047821045,0.08660889,0.026306152,-0.01977539,0.01991272,-0.032196045,-0.07458496,-0.10107422,0.046173096,-0.047210693,0.009216309,-0.023391724,-0.109436035,0.012779236,0.0284729,-0.020706177,-0.05911255,-0.056793213,-0.012626648,-0.025878906,-0.010887146,0.019348145,-0.026626587,0.0046195984,-0.051635742,-0.09869385,0.03149414,0.024749756,0.012413025,0.06365967,0.019165039,-0.007320404,0.0579834,0.030960083,0.020736694,0.006263733,0.030181885,0.08074951,0.017044067,0.08105469,0.049713135,0.057373047,0.021713257,0.115356445,0.021575928],"created_at":1735875660855,"nchars":2442}},"count":50},"sorting":{"language":"english","sortableProperties":["id","title","path","content","embeddingModel","created_at","ctime","mtime","extension"],"sortablePropertiesWithTypes":{"id":"string","title":"string","path":"string","content":"string","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","extension":"string"},"sorts":{"id":{"docs":{"2":46,"22":23,"23":52,"24":3,"25":4,"26":16,"27":13,"28":57,"29":35,"30":50,"31":20,"32":5,"33":31,"34":14,"35":59,"36":34,"37":12,"38":19,"39":22,"40":9,"41":56,"42":2,"43":15,"44":48,"45":47,"46":44,"47":67,"48":32,"49":25,"50":68,"51":30,"52":38,"53":61,"54":11,"55":45,"56":53,"57":49,"58":8,"59":28,"60":65,"61":26,"62":0,"63":41,"64":64,"65":42,"66":69,"67":21,"68":36,"69":24,"70":55},"orderedDocs":[[62,"0836c208ec6065a3b8b001fd6c46d904"],[42,"163113acc2627c112602577a83b6edac"],[24,"17de5b758025908c586c7e78eae6436c"],[25,"230d347e717fcc2bd8f88d8be27c615b"],[32,"234b7fc3a4936b769256c9380326a0fc"],[58,"3456f0d3010850b0e090133d07c76718"],[40,"4803ad84843e046af3b33d47d032359b"],[54,"49ff9486289f87cb0be0966e968f6b8d"],[37,"515ae74151efa1ff92687e7d52343ac5"],[27,"532c9bb532e6991b4193a08168972611"],[34,"53cc96bf262039586a88ab17ac076858"],[43,"5883ef0265c795329291772ad145f25f"],[26,"5f81d58a12bbe25ea80fc3dbe9d6fdd8"],[38,"68760701d145a45add658a5b60e81709"],[31,"6aac7b121dc7c2f68c2e1d83be48a5cb"],[67,"6b7d2f8c17fb15fef149630a2d476e78"],[39,"6d1fc0583ca584a225bd01072fcd1b16"],[22,"6dedc5ab0aa727885ec51dae14131b24"],[69,"6ef08af3c4507048101e99c549d7b8e7"],[49,"6faffddc81ef57b2fa941ed3226a91b4"],[61,"755d007d5eea85cb2a3bbb8345fa97c4"],[59,"7862812dc01340fb2268e31c32332a93"],[51,"78c4f8d9eab3431ad61ce0f242ab5415"],[33,"7dc0c6c0e4de0046d154ca8d61f0ba6c"],[48,"815f570fed7f3502fc6402c73d009860"],[36,"8231cc476f6fbc72323236bc60d781ab"],[29,"83987152e332f1ea34e67bb329483d46"],[68,"86ea582ff110d6ec650cbeb762dbbdbd"],[52,"8fa3ccb0db0015e5729678bf219423a0"],[63,"9394eede642d233df07ba612ae4d1765"],[65,"94b4d16e6d81304783b6b01e1e08165b"],[46,"a3e3a9298cc139f91ba0f4e801a8954d"],[55,"a48169f8d45b497076fc671092c0a4b2"],[2,"a4f0df752e644510136309e8e2065ade"],[45,"a6fb16ab6210e4e160e6e4c54afbb948"],[44,"a7e82c4eb3e192f780bb2fbe19411782"],[57,"ad3bde0ddbeba88edf74afebcabe8f72"],[30,"ae161ed1a029574975fc16d0abfe2e2d"],[23,"b36d72facd0568e122323e7ee01d1d07"],[56,"b5c9a556d8dbfcfe6a3b58bcf2fa86f6"],[70,"bb24e2b75d91cdcdabe91b918c2e0b38"],[41,"bf70ec7050d709f367edaf3c865b8597"],[28,"c35863a93434be8a523a4e575dfa9992"],[35,"c5480db69876dbe696397144d9796e2f"],[53,"cc49432675423864851bf22df8d3012e"],[64,"dc95b170c58a5910e62087acc07b3f99"],[60,"e1a44fa3d221ff26146effd1fada3e62"],[47,"edd334388e5b767324da496afca10cff"],[50,"ef586c0a890322cc0d74e2410f35bbd1"],[66,"f5fd9fdc058615ed967acf9c9b838dd3"]],"type":"string"},"title":{"docs":{"2":68,"22":48,"23":47,"24":46,"25":45,"26":44,"27":43,"28":42,"29":41,"30":40,"31":39,"32":38,"33":37,"34":33,"35":34,"36":35,"37":36,"38":30,"39":31,"40":32,"41":27,"42":28,"43":29,"44":26,"45":25,"46":24,"47":21,"48":22,"49":23,"50":20,"51":19,"52":17,"53":18,"54":12,"55":13,"56":14,"57":15,"58":16,"59":10,"60":11,"61":9,"62":8,"63":7,"64":6,"65":5,"66":4,"67":3,"68":2,"69":1,"70":0},"orderedDocs":[[70,"01. 모험가 길드 (🔺)"],[69,"02.곱하기 혹은 더하기"],[68,"03.문자열 뒤집기"],[67,"04.만들 수 없는 금액 (💩)"],[66,"05.볼링공 고르기"],[65,"06.무지의 먹방라이브"],[64,"07.럭키 스트레이트"],[63,"08.문자열 재정렬"],[62,"09.문자열 압축"],[61,"10.자물쇠와 열쇠"],[59,"11.뱀"],[60,"11.뱀"],[54,"12.기둥과 보 설치"],[55,"12.기둥과 보 설치"],[56,"12.기둥과 보 설치"],[57,"12.기둥과 보 설치"],[58,"12.기둥과 보 설치"],[52,"13.치킨배달"],[53,"13.치킨배달"],[51,"14.외벽점검 (🔺)"],[50,"15.특정 거리의 도시 찾기"],[47,"16.연구소"],[48,"16.연구소"],[49,"16.연구소"],[46,"17.경쟁적 전염"],[45,"18.괄호 변환"],[44,"19.연산자 끼워 넣기"],[41,"20.감시 피하기"],[42,"20.감시 피하기"],[43,"20.감시 피하기"],[38,"21.인구 이동"],[39,"21.인구 이동"],[40,"21.인구 이동"],[34,"22.블록 이동하기 (🔺)"],[35,"22.블록 이동하기 (🔺)"],[36,"22.블록 이동하기 (🔺)"],[37,"22.블록 이동하기 (🔺)"],[33,"23.국영수"],[32,"24.안테나"],[31,"25.실패율"],[30,"26.카드 정렬하기"],[29,"27.정렬된 배열에서 특정 수의 개수 구하기"],[28,"28.고정점 찾기"],[27,"29.공유기 설치"],[26,"30.가사 검색"],[25,"31.금광"],[24,"32.정수 삼각형"],[23,"33.퇴사"],[22,"34.병사 배치하기"],[2,"kanban dashboard"]],"type":"string"},"path":{"docs":{"2":68,"22":48,"23":47,"24":46,"25":45,"26":44,"27":43,"28":42,"29":41,"30":40,"31":39,"32":38,"33":37,"34":33,"35":34,"36":35,"37":36,"38":30,"39":31,"40":32,"41":27,"42":28,"43":29,"44":26,"45":25,"46":24,"47":21,"48":22,"49":23,"50":20,"51":19,"52":17,"53":18,"54":12,"55":13,"56":14,"57":15,"58":16,"59":10,"60":11,"61":9,"62":8,"63":7,"64":6,"65":5,"66":4,"67":3,"68":2,"69":1,"70":0},"orderedDocs":[[70,"1. Project/이것이 취업을 위한 코딩테스트다/01. 모험가 길드 (🔺).md"],[69,"1. Project/이것이 취업을 위한 코딩테스트다/02.곱하기 혹은 더하기.md"],[68,"1. Project/이것이 취업을 위한 코딩테스트다/03.문자열 뒤집기.md"],[67,"1. Project/이것이 취업을 위한 코딩테스트다/04.만들 수 없는 금액 (💩).md"],[66,"1. Project/이것이 취업을 위한 코딩테스트다/05.볼링공 고르기.md"],[65,"1. Project/이것이 취업을 위한 코딩테스트다/06.무지의 먹방라이브.md"],[64,"1. Project/이것이 취업을 위한 코딩테스트다/07.럭키 스트레이트.md"],[63,"1. Project/이것이 취업을 위한 코딩테스트다/08.문자열 재정렬.md"],[62,"1. Project/이것이 취업을 위한 코딩테스트다/09.문자열 압축.md"],[61,"1. Project/이것이 취업을 위한 코딩테스트다/10.자물쇠와 열쇠.md"],[59,"1. Project/이것이 취업을 위한 코딩테스트다/11.뱀.md"],[60,"1. Project/이것이 취업을 위한 코딩테스트다/11.뱀.md"],[54,"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md"],[55,"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md"],[56,"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md"],[57,"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md"],[58,"1. Project/이것이 취업을 위한 코딩테스트다/12.기둥과 보 설치.md"],[52,"1. Project/이것이 취업을 위한 코딩테스트다/13.치킨배달.md"],[53,"1. Project/이것이 취업을 위한 코딩테스트다/13.치킨배달.md"],[51,"1. Project/이것이 취업을 위한 코딩테스트다/14.외벽점검 (🔺).md"],[50,"1. Project/이것이 취업을 위한 코딩테스트다/15.특정 거리의 도시 찾기.md"],[47,"1. Project/이것이 취업을 위한 코딩테스트다/16.연구소.md"],[48,"1. Project/이것이 취업을 위한 코딩테스트다/16.연구소.md"],[49,"1. Project/이것이 취업을 위한 코딩테스트다/16.연구소.md"],[46,"1. Project/이것이 취업을 위한 코딩테스트다/17.경쟁적 전염.md"],[45,"1. Project/이것이 취업을 위한 코딩테스트다/18.괄호 변환.md"],[44,"1. Project/이것이 취업을 위한 코딩테스트다/19.연산자 끼워 넣기.md"],[41,"1. Project/이것이 취업을 위한 코딩테스트다/20.감시 피하기.md"],[42,"1. Project/이것이 취업을 위한 코딩테스트다/20.감시 피하기.md"],[43,"1. Project/이것이 취업을 위한 코딩테스트다/20.감시 피하기.md"],[38,"1. Project/이것이 취업을 위한 코딩테스트다/21.인구 이동.md"],[39,"1. Project/이것이 취업을 위한 코딩테스트다/21.인구 이동.md"],[40,"1. Project/이것이 취업을 위한 코딩테스트다/21.인구 이동.md"],[34,"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md"],[35,"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md"],[36,"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md"],[37,"1. Project/이것이 취업을 위한 코딩테스트다/22.블록 이동하기 (🔺).md"],[33,"1. Project/이것이 취업을 위한 코딩테스트다/23.국영수.md"],[32,"1. Project/이것이 취업을 위한 코딩테스트다/24.안테나.md"],[31,"1. Project/이것이 취업을 위한 코딩테스트다/25.실패율.md"],[30,"1. Project/이것이 취업을 위한 코딩테스트다/26.카드 정렬하기.md"],[29,"1. Project/이것이 취업을 위한 코딩테스트다/27.정렬된 배열에서 특정 수의 개수 구하기.md"],[28,"1. Project/이것이 취업을 위한 코딩테스트다/28.고정점 찾기.md"],[27,"1. Project/이것이 취업을 위한 코딩테스트다/29.공유기 설치.md"],[26,"1. Project/이것이 취업을 위한 코딩테스트다/30.가사 검색.md"],[25,"1. Project/이것이 취업을 위한 코딩테스트다/31.금광.md"],[24,"1. Project/이것이 취업을 위한 코딩테스트다/32.정수 삼각형.md"],[23,"1. Project/이것이 취업을 위한 코딩테스트다/33.퇴사.md"],[22,"1. Project/이것이 취업을 위한 코딩테스트다/34.병사 배치하기.md"],[2,"1. Project/이것이 취업을 위한 코딩테스트다/kanban dashboard.md"]],"type":"string"},"content":{"docs":{"2":68,"22":48,"23":47,"24":46,"25":45,"26":44,"27":43,"28":42,"29":41,"30":40,"31":39,"32":38,"33":37,"34":36,"35":33,"36":34,"37":35,"38":32,"39":30,"40":31,"41":29,"42":27,"43":28,"44":26,"45":25,"46":24,"47":23,"48":21,"49":22,"50":20,"51":19,"52":18,"53":17,"54":16,"55":13,"56":15,"57":14,"58":12,"59":11,"60":10,"61":9,"62":8,"63":7,"64":6,"65":5,"66":4,"67":3,"68":2,"69":1,"70":0},"orderedDocs":[[70,"\n\nNOTE TITLE: [[01. 모험가 길드 (🔺)]]\n\nMETADATA:{\"created\":\"2024/12/31 12:38:30\",\"modified\":\"2025/01/03 12:39:29\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- 핵심 유형\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 그리디, 정렬\n- `'현재 그룹에 포함된 모험가의 수'가 '현재 확인하고 있는 공포도'보다 크거나 같다면 그룹을 형성`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] fear;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t  \n\t    fear = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        fear[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(fear);  \n\t  \n\t    int result = 0;  \n\t    int count = 0;  \n\t    for(int f : fear) {  \n\t        count += 1;  \n\t        if(count >= f) { // 인원수가 팀원의 공포도 이상이면 그룹 형성 \n\t            result += 1;  \n\t            count = 0;  \n\t        }  \n\t    }  \n\t    \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n}\n```"],[69,"\n\nNOTE TITLE: [[02.곱하기 혹은 더하기]]\n\nMETADATA:{\"created\":\"2025/01/02 13:16:20\",\"modified\":\"2025/01/02 13:18:35\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- Facebook 인터뷰\n\n### 시간 복잡도 \n- `O(N)`\n\t- N : 문자열 길이\n\n### 풀이 \n- 그리디\n- **결과값** 또는 **현재 숫자**가 `1 이하`인 경우 `더하기`를 하고, 그 외에는 `곱하기` 하면 최대값이 구해진다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static String s;  \n\t  \n\tprivate static void input() {  \n\t   s = inputProcessor.nextLine().trim();  \n\t}  \n\t  \n\tprivate static void pro(){  \n\t    char[] arr = s.toCharArray();  \n\t  \n\t    int result = 0;  \n\t    for(int i = 0; i < arr.length; i++) {  \n\t        int v = (arr[i] - '0');  \n\t        if(result <= 1 || v <= 1) {  \n\t            result += v;  \n\t        } else {  \n\t            result *= v;  \n\t        }  \n\t    }  \n\t  \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```"],[68,"\n\nNOTE TITLE: [[03.문자열 뒤집기]]\n\nMETADATA:{\"created\":\"2025/01/02 13:58:36\",\"modified\":\"2025/01/03 11:49:28\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/1439\n\n### 시간 복잡도 \n- `O(S)`\n\t- S의 길이는 최대 100만보다 작음\n\n### 풀이 \n- 그리디\n- 연속된 `0, 1`  그룹수를 각각 카운팅하여 최소값을 가지는 그룹을 대상으로 뒤집으면 최적의 해를 찾을 수 있다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static String s;\n\n    private static void input() {\n        s = inputProcessor.nextLine().trim();\n    }\n\n    private static void pro() {\n        int[] count = new int[2]; // 0, 1 그룹 카운팅\n        char prev = '2';\n        for(char c : s.toCharArray()) {\n            if(prev == c) continue;\n\n            // 그룹이 변경되면 카운팅\n            prev = c;\n            count[c - '0'] += 1;\n        }\n\n        int result = Math.min(count[0], count[1]);\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[67,"\n\nNOTE TITLE: [[04.만들 수 없는 금액 (💩)]]\n\nMETADATA:{\"created\":\"2025/01/02 13:58:38\",\"modified\":\"2025/01/03 12:27:01\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \n- K 대회 기출\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이 \n- 그리디\n- `1부터 target - 1 까지의 모든 금액을 만들 수 있는 상태`라고 가정\n\t- 현재 확인하는 동전의 단위가 target 이하라면, target 값을 업데이트 \n\t- 반면, 현재 동전의 단위가 target보다 크다면 만들 수 없는 상태\n\t- 예로 1, 2, 3, 8 동전이 있을때 `{java}target = 1` 초기화하여 시작\n\t\t- 동전 = 1, `target = 2` 로 갱신 (1부터 1`(target - 1)`까지 만들 수 있다)\n\t\t- 동전 = 2, `target = 4`로 갱신 (1부터 3까지 만들 수 있다)\n\t\t- 동전 = 3, `target = 7`로 갱신 (1부터 6까지 만들 수 있다)\n\t\t- 동전 = 8,  `7 < 8`이므로 `target = 7` 은 만들 수 없다\n\n입출력 예시\n\n```text\n입력 \n5\n3 2 1 1 9\n\n출력\n8\n\n\n입력\n3\n3 5 7\n\n출력\n1\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] arr;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t    arr = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        arr[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(arr);  \n\t  \n\t    int target = 1;  \n\t    for(int a : arr) {  \n\t        if(target < a) {  \n\t            break;  \n\t        }  \n\t  \n\t        target += a;  \n\t    }  \n\t  \n\t    sb.append(target);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n\n```"],[66,"\n\nNOTE TITLE: [[05.볼링공 고르기]]\n\nMETADATA:{\"created\":\"2025/01/02 13:49:03\",\"modified\":\"2025/01/02 13:56:40\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- 2019 SW 마에스트로 입학 테스트\n\n### 시간 복잡도 \n- `O(N)`\n\t- 데이터 입력 받는 시간이 가장 큼 (`N : 최대 1,000, M: 최대 10`)\n\t- 조합 계산하는 시간은 `O(M)` \n### 풀이\n- 그리디, 조합 문제\n- 서로 다른 무게를 가지는 공의 조합을 구하는 문제\n\t- 이때, 같은 무게의 공이 여러개 있을 수 있지만, 서로 다른 공으로 간주 \n\t- `1, 3, 3` 의 무게를 가진 공이 있을 때 `(1,3), (1,3)` 두 가지의 조합을 구할 수 있다\n- `{java}int[] count` 배열에 입력 받은 값을 인덱스로 하여 카운팅을 한다 \n\t- 이때 입력 받는 숫자의 최대 크기는 `m`\n- `1 ~ m` 까지 순차 순회하면서 조합을 계산한다\n\t- 전체 개수 `n`에 대해`{java}n -= count[i]` 하게 되면 조합 가능한 개수를 구할 수 있다\n\t- `{java} result += (count[i] * n)` 으로 현재 `i` 개수와 조합 가능한 개수를 곱한 결과를 합산  \n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n, m;  \n\tprivate static int[] count;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t    m = inputProcessor.nextInt(); // 공의 최대 무게  \n\t  \n\t    count = new int[m + 1];  \n\t    for(int i = 1; i <= n; i++) {  \n\t        int v = inputProcessor.nextInt();  \n\t        count[v] += 1;  \n\t    }  \n\t}  \n\t  \n\t// 서로 다른 두 무게의 조합  \n\tprivate static void pro() {  \n\t    int result = 0;  \n\t    for(int i = 1; i <= m; i++) {  \n\t        n -= count[i];  \n\t        result += (count[i] * n); // 현재 볼링공 개수 * 남은 볼링공 개수  \n\t    }  \n\t  \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```"],[65,"\n\nNOTE TITLE: [[06.무지의 먹방라이브]]\n\nMETADATA:{\"created\":\"2025/01/02 13:58:28\",\"modified\":\"2025/01/02 15:46:37\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/42891\n\n### 시간 복잡도 \n- `O(NlogN)`\n\t- 정렬 시간이 가장 크다\n### 풀이 \n- 그리드, 정렬 사용\n- `Food` 클래스를 정의하고, `번호`와 `시간` 정보를 담는다 \n\t- `시간` 오름차순으로 정렬\n- 높이와 너비를 구해 넓이를 계산하고`k`에서 뺴준다\n\t- 이때 높이 차이가 0이면 넘어간다\n\t- `넓이 > k` 인 경우 `(현재 위치, 마지막 위치)` 범위내에 서브 리스트를 구하고 **번호 순으로 정렬** 후 `k`번째 위치한 음식 번호를 출력한다\n- 더이상 음식이 없는 경우 `-1` 출력\n\n\n**효율성2. 오버플로우 이슈**\n- 높이 차를 나타내는 `diff` 의 경우 최대 1억이라 `int` 형으로 선언해도 문제 없음 \n- 반면, 넓이 `area` 구할 때 (하이라이트 `21`)\n\t- `{java} long area = diff * w` 할 경우 `int * int` 로 우변이 int범위 초과하여 **오버플로우 발생** \n\t- `{java} long area = (long)(diff * w)` 의 경우에도 마찬가지로 **오버플로우 발생** 후 long 캐스팅은 의미 없음\n\t- **해결** : `{java} long diff`로 선언하거나 `{java} long area = (long) diff * w` 하면 피연산자 하나를 long캐스팅하면 결과도 long으로 구해진다\n- 그리고 구간에서 인덱스를 구할 때 (하이라이트 `29`)\n\t- `{java} sub.get((int) k % sub.size()).no;` 에서 오버플로우가 발생\n\t- `k` 가 **long 타입**인데 **int** 캐스팅시 범위 초과하여 오버플로우가 발생\n\t\t- **해결1**. `{java} long idx = k % sub.size(); sub.get((int)idx).no`  안전하게 변수 분리하거나\n\t\t- **해결2**. `{java} sub.get((int)(k % sub.size())).no` , 나머지 연산 후 전체 캐스팅 하거나\n\n### 제출 코드\n```java hl:18,21,29\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    public int solution(int[] food_times, long k) {\n        List<Food> foods = new ArrayList<>();\n        for(int i = 0; i < food_times.length; i++) {\n            foods.add(new Food(i + 1, food_times[i]));\n        }\n\n        Collections.sort(foods);\n\n        int answer = -1;\n        int w = foods.size();\n        int prevTime = 0;\n        int i = 0;\n        for(Food f : foods) {\n            int diff = f.time - prevTime; // 높이\n\n            if(diff > 0) {\n                long area = (long) diff * w; // 넓이 = 높이 * 너비\n                if(area <= k) {\n                    k -= area;\n                    prevTime = f.time;\n                } else {\n                    List<Food> sub = foods.subList(i, food_times.length);\n                    sub.sort(Comparator.comparingInt(a -> a.no));\n                    \n                    answer = sub.get((int) (k % sub.size())).no;\n                    break;\n                }\n            }\n\n            i += 1;\n            w -= 1;\n        }\n\n        return answer;\n    }\n    \n    private static class Food implements Comparable<Food> {\n        private final int no;\n        private final int time;\n\n        public Food(int no, int time) {\n            this.no = no;\n            this.time = time;\n        }\n\n        public int compareTo(Food o) {\n            if(this.time != o.time) {\n                return this.time - o.time;\n            }\n            \n            return this.no - o.no;\n        }\n    }\n}\n```"],[64,"\n\nNOTE TITLE: [[07.럭키 스트레이트]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:11\",\"modified\":\"2025/01/02 16:40:16\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18406\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이 \n- 구현 문제\n- 절반을 기준으로 왼쪽, 오른쪽 구간을 나눴을 때 \n\t- 각 구간별 합이 같으면 `LUCKY`\n\t- 틀리면 `READY`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N;\n\n    private static void input() {\n        N = inputProcessor.nextInt();\n    }\n\n    private static void pro() {\n        String nums = String.valueOf(N);\n        int len = nums.length();\n        int half = len / 2;\n\n        int v1 = Integer.parseInt(nums.substring(0, half));\n        int v2 = Integer.parseInt(nums.substring(half));\n\n        String lucky = calculate(v1) == calculate(v2) ? \"LUCKY\" : \"READY\";\n        sb.append(lucky);\n    }\n\n    private static int calculate(int n) {\n        int result = 0;\n        int next = n;\n        while(next > 0) {\n            int mod = next % 10;\n            result += mod;\n            next /= 10;\n        }\n        return result;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[63,"\n\nNOTE TITLE: [[08.문자열 재정렬]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:15\",\"modified\":\"2025/01/02 16:48:29\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \n- Facebook 인터뷰\n\n### 시간 복잡도 \n- `O(NlogN)`\n\t- 문자열 정렬이 가장 시간이 오래 걸림\n\t\t- 문자열 길이가 최대 10,000이고 숫자가 없는 경우\n\n### 풀이 \n- 구현, 정렬\n- 알파벳은 따로 모아 오름차순 정렬, 숫자는 합산\n- 알파벳과 숫자를 연결한 결과 출력 \n\n```text\n입력\nK1KA5CB7\n\n출력\nABCKK13\n\n\n입력\nAJKDLSI412K4JSJ9D\n\n출력\nADDIJJJKKLSS20\n\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static String s;  \n\t  \n\tprivate static void input() {  \n\t    s = inputProcessor.nextLine().trim();  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    List<String> alphabet = new ArrayList<>();  \n\t    int sum = 0;  \n\t    for(char t : s.toCharArray()) {  \n\t        if(Character.isAlphabetic(t)) {  \n\t            alphabet.add(String.valueOf(t));  \n\t        } else {  \n\t            int v = t - '0';  \n\t            sum += v;  \n\t        }  \n\t    }  \n\t  \n\t    Collections.sort(alphabet);  \n\t  \n\t    for (String a : alphabet) {  \n\t        sb.append(a);  \n\t    }  \n\t    sb.append(sum);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```"],[62,"\n\nNOTE TITLE: [[09.문자열 압축]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:19\",\"modified\":\"2025/01/03 10:32:32\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60057\n\n### 시간 복잡도 \n\n### 풀이 \n- 구현, 재귀\n- 예외 케이스로 길이가 `1`인 경우 주의\n- `len` : 문자열 길이의 절반만큼만 비교하며 압축\n-  압축은 재귀 호출을 사용하여 반복 횟수를 구함 \n\n### 제출 코드\n- 성능 요약 - 메모리: 83.2 MB, 시간: 83.38 ms\n```java\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    private StringBuilder sb = new StringBuilder();\n    private String S;\n    \n    public int solution(String s) {\n        if(s.length() == 1) return 1;\n        \n        int answer = 1001;\n        S = s;\n\n        int half = s.length() / 2;\n        for(int len = 1; len <= half; len++) {\n            String compressed = compress(len, sb);\n            \n            answer = Math.min(answer, compressed.length());\n\n            sb.setLength(0);\n        }\n        \n        return answer;\n    }\n    \n    private String compress(int len, StringBuilder stringBuilder) {\n        int L = 0;\n        while(L <= S.length() - len) {\n            int R = L + len;\n            String base = S.substring(L, R);\n            int repeated = 1 + count(base, R, len);\n\n            if(repeated == 1) {\n                sb.append(base);\n            } else {\n                sb.append(repeated + base);\n            }\n\n            L += repeated * len;\n        }\n\n        if(L < S.length()) {\n            sb.append(S.substring(L));\n        }\n\n        return sb.toString();\n    }\n\n    private int count(String t, int from, int len) {\n        if(from >= S.length()) return 0;\n\n        String remain = S.substring(from);\n        if(remain.startsWith(t)) {\n            return 1 + count(t, from + len, len);\n        }\n\n        return 0;\n    }\n}\n```\n\n\n\nStringBuilder와 백트래킹 풀이\n- 성능 요약 : 메모리: 85.8 MB, 시간: **5.57** ms\n\n```java\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    \n    private StringBuilder sb = new StringBuilder();\n    \n    public int solution(String s) {\n        int answer = s.length(); // 최대 길이\n        int half = s.length() / 2; // 절반만 탐색\n        for(int len = 1; len <= half; len++) {\n            String compressed = rec(s, len, 1);\n            \n            answer = Math.min(answer, compressed.length());  \n            \n            sb.setLength(0);\n        }\n        \n        return answer;\n    }\n    \n    private String rec(String s, int len, int repeat) {\n        if(s.length() < len) { // 종료 조건\n            sb.append(s);\n            return sb.toString();\n        }\n        \n        String pre = s.substring(0, len);\n        String post = s.substring(len);\n        \n        // 반복된다면\n        if(post.startsWith(pre)) {\n            return rec(post, len, repeat + 1); // 카운터 증가 후 뒷 문자열 탐색\n        }\n        \n        // 반복되지 않는다면\n        if(repeat == 1) sb.append(pre);\n        else sb.append(repeat).append(pre);\n        \n        return rec(post, len, 1);\n    }\n}\n```"],[61,"\n\nNOTE TITLE: [[10.자물쇠와 열쇠]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:22\",\"modified\":\"2025/01/02 17:36:26\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60059\n\n### 시간 복잡도 \n- `O(NM)`\n\n### 풀이 \n- 구현\n- 열쇠를 90도 회전한다\n- 열쇠를 shif (`-40 ~ 40`) 하면서 자물쇠에 끼운다\n\t- 이때 자물쇠(n) 범위를 벗어나면 무시\n\t- 열쇠의 shift한 좌표가 자물쇠의 범위 내인 경우 열쇠의 값을 자물쇠에 더한다 \n\t\t- `{java}lock[dx][dy] += key[row][col]`\n- `{java} int[][] lock` 의 <u>모든 필드가 1인 경우 자물쇠가 해체된 것을 뜻함</u> (**종료**)\n\t- 열쇠와 자물쇠의 돌기(1)이 만나면 안된다, 고로 lock의 필드 값이 2인 경우 잘못된 경우이다 \n- 자물쇠가 열리지 않은 경우 다시 반복문을 돌며 열쇠 값을 빼준다\n\t- `{java}lock[dx][dy] -= key[row][col]`\n\n### 제출 코드\n```java\nclass Solution {\n    private int[][] _key;\n    private int[][] _lock;\n    \n    public boolean solution(int[][] key, int[][] lock) {\n        _key = key;\n        _lock = lock;\n        int m = key.length; // key : m * m\n        int n = lock.length; // lock : n * n\n\n        boolean answer = false;\n        loop1 :\n        for(int i = 0; i < 4; i++) {\n\n            // 이동한다\n            for(int x = -40; x <= 40; x++) {\n                for(int y = -40; y <= 40; y++) {\n                    // 열쇠를 자물쇠에 끼워본다\n                    pushKey(x, y, m, n);\n\n                    if(unlock(n)) { // 모든 자물쇠 영역이 1인가\n                        answer = true;\n                        break loop1;\n                    }\n\n                    // 열쇠를 자물쇠에서 뺀다\n                    pollKey(x, y, m, n);\n                }\n            }\n\n            if(i < 3) {\n                _key = rotate(_key, m); // 회전한다\n            }\n        }\n\n        return answer;\n    }\n    \n    private void pushKey(int x, int y, int m, int n) {\n        for(int row = 0; row < m; row++) {\n            for(int col = 0; col < m; col++) {\n                int dx = row + x;\n                int dy = col + y;\n\n                // 자물쇠의 범위를 벗어나는 경우\n                if(dx < 0 || dy < 0 || dx >= n || dy >= n) continue;\n\n                _lock[dx][dy] += _key[row][col];\n            }\n        }\n    }\n\n    private boolean unlock(int n) {\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(_lock[i][j] != 1) return false;\n            }\n        }\n\n        return true;\n    }\n\n    private void pollKey(int x, int y, int m, int n) {\n        for(int row = 0; row < m; row++) {\n            for(int col = 0; col < m; col++) {\n                int dx = row + x;\n                int dy = col + y;\n\n                // 자물쇠의 범위를 벗어나는 경우\n                if(dx < 0 || dy < 0 || dx >= n || dy >= n) continue;\n\n                _lock[dx][dy] -= _key[row][col];\n            }\n        }\n    }\n\n    private int[][] rotate(int[][] key, int m) {\n        int[][] temp = new int[m][m];\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < m; j++) {\n                temp[i][j] = key[m - j - 1][i];\n            }\n        }\n\n        return temp;\n    }\n}\n```"],[60,"\n\nNOTE TITLE: [[11.뱀]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:25\",\"modified\":\"2025/01/02 19:45:18\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, k, l;\n    private static Map<Integer, String> commandMap = new HashMap<>();\n    private static int[][] maps;\n\n    private static void input() {\n        n = inputProcessor.nextInt(); // 맵의 크기\n        k = inputProcessor.nextInt(); // 사과 개수\n\n        maps = new int[n + 1][n + 1];\n        for(int i = 1; i <= k; i++) {\n            int x = inputProcessor.nextInt();\n            int y = inputProcessor.nextInt();\n            maps[x][y] = 1;\n        }\n\n        l = inputProcessor.nextInt(); // 방향 전환 개수\n        for(int i = 1; i <= l; i++) {\n            int time = inputProcessor.nextInt();\n            String dir = inputProcessor.next();\n            commandMap.put(time, dir);\n        }\n    }\n\n    // 오른쪽을 시작으로 시계 방향 기준\n    private static int[][] DIR = {\n            {0, 1},\n            {1, 0},\n            {0, -1},\n            {-1, 0}\n    };\n\n    private static void pro() {\n        Deque<Integer> que = new ArrayDeque<>(); // 뱀 몸통 정보 기록\n        que.add(1);\n        que.add(1);\n\n        int x = 1;\n        int y = 1;\n        maps[x][y] = 2;\n        int time = 0;\n        int i = 0;\n        while(true) {\n            time += 1;\n            x += DIR[i][0];\n            y += DIR[i][1];\n\n            if(x < 1 || y < 1 || x > n || y > n) break; // 맵을 나갔을 경우\n            if(maps[x][y] == 2) break; // 몸에 부딪혔을 경우\n\n\n            if(maps[x][y] != 1) {\n                int tailX = que.poll();\n                int tailY = que.poll();\n                maps[tailX][tailY] = 0;\n            }\n\n            maps[x][y] = 2;\n            que.add(x);\n            que.add(y);\n            \n            if(commandMap.containsKey(time)) {\n                i = nextDir(i, commandMap.remove(time));\n            }\n        }\n\n        sb.append(time);\n    }\n\n    private static int nextDir(int ix, String cmd) {\n        if(\"D\".equals(cmd)) { // 오른쪽 시계 방향 이동\n            return (ix + 1) % 4;\n        }\n\n        return (ix - 1) < 0 ? 3 : (ix - 1);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n}\n```"],[59,"\n\nNOTE TITLE: [[11.뱀]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:25\",\"modified\":\"2025/01/02 19:45:18\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/3190\n\n### 시간 복잡도 \n\n### 풀이 \n- 구현\n- 큐를 사용하여 뱀의 꼬리 정보를 저장 (`multi source`)\n\t- 2차원 배열에 사과와 뱀의 정보를 기재함 `0: 빈칸, 1: 사과, 2: 뱀`\n- 이동 경로에 사과가 없는 경우 \n\t- 큐에서 꼬리 정보를 뽑아 `{java}maps[tailX][tailY] = 0` 마킹\n- 이동 경로에 사과가 있는 경우 \n\t- `{java}maps[x][y] = 2` 마킹하고 큐에 이동 정보 추가\n- 현재 `{java}time`에 해당하는 명령어가 있는 경우 Map에서 명령어 꺼내어 다음 방향 정보 갱신\n\t- `D` 의 경우 시계 방향으로 `(idx + 1) % 4` \n\t- `L`의 경우 반시계 방향으로 `(idx - 1) < 0 ? 3 : (idx - 1)`"],[58,"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) }\n```"],[55,"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {"],[57,"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) private boolean buildableBo(int x, int y) {  \n\t        return (0 < y && pole[x][y - 1])  \n\t                || (0 < y && pole[x + 1][y - 1])  \n\t                || ((0 < x && bo[x - 1][y]) && bo[x + 1][y]);  \n\t    }  \n\t  \n\t    private void destroyBo(int x, int y) {  \n\t        bo[x][y] = false;  \n\t        if(invalid(x, y)) {  \n\t            bo[x][y] = true;  \n\t        } else {  \n\t            count -= 1;  \n\t        }  \n\t    }  \n\t  \n\t    private boolean invalid(int x, int y) {  \n\t        int minX = Math.max(0, x - 1);  \n\t        int maxX = Math.min(x + 1, n);  \n\t        int minY = Math.max(0, y - 1);  \n\t        int maxY = Math.min(y + 1, n);  \n\t        for(int i = minX; i <= maxX; i++) {  \n\t            for(int j = minY; j <= maxY; j++) {  \n\t                if(pole[i][j] && !buildablePole(i, j)) return true;  \n\t  \n\t                if(bo[i][j] && !buildableBo(i, j)) return true;  \n\t            }  \n\t        }  \n\t  \n\t        return false;  \n\t    }  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}"],[56,"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) private static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\t/*\n\tprivate static final int n = 5;  \n\tprivate static final int[][] build_frame = {  \n\t        {1, 0, 0, 1},        {1, 1, 1, 1},        {2, 1, 0, 1},        {2, 2, 1, 1},        {5, 0, 0, 1},        {5, 1, 0, 1},        {4, 2, 1, 1},        {3, 2, 1, 1}};  \n\t  \n\tprivate static final int[][] result = {  \n\t        {1, 0, 0},        {1, 1, 1},        {2, 1, 0},        {2, 2, 1},        {3, 2, 1},        {4, 2, 1},        {5, 0, 0},        {5, 1, 0}};*/  \n\t  \n\tprivate static final int n = 5;  \n\tprivate static final int[][] build_frame = {  \n\t        {0, 0, 0, 1},  \n\t        {2, 0, 0, 1},  \n\t        {4, 0, 0, 1},  \n\t        {0, 1, 1, 1},  \n\t        {1, 1, 1, 1},  \n\t        {2, 1, 1, 1},  \n\t        {3, 1, 1, 1},  \n\t        {2, 0, 0, 0},  \n\t        {1, 1, 1, 0},  \n\t        {2, 2, 0, 1}  \n\t};  \n\t  \n\tprivate static final int[][] result = {  \n\t        {0, 0, 0},  \n\t        {0, 1, 1},  \n\t        {1, 1, 1},  \n\t        {2, 1, 1},  \n\t        {3, 1, 1},  \n\t        {4, 0, 0}  \n\t};  \n\t  \n\tprivate static void input() {  \n\t  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Board board = new Board(n);  \n\t  \n\t    for (int[] bf : build_frame) {  \n\t        int x = bf[0];  \n\t        int y = bf[1];  \n\t        int a = bf[2]; // 0 : 기둥, 1 : 보  \n\t        int b = bf[3]; // 0 : 삭제, 1 : 설치  \n\t  \n\t        board.execute(x, y, a, b);  \n\t    }  \n\t  \n\t    int[][] answer = new int[board.count][3];  \n\t    int idx = 0;  \n\t    boolean[][] pole = board.pole;  \n\t    boolean[][] bo = board.bo;  \n\t    for(int i = 0; i <= n; i++) {  \n\t        for(int j = 0; j <= n; j++) {  \n\t            if(pole[i][j]) {  \n\t                answer[idx++] = new int[]{i, j, 0};  \n\t            }  \n\t  \n\t            if(bo[i][j]) {  \n\t                answer[idx++] = new int[]{i, j, 1};  \n\t            }  \n\t        }  \n\t    }  \n\t  \n\t    for(int[] a : answer) {  \n\t        sb.append(Arrays.toString(a)).append(\"\\n\");  \n\t    }  \n\t}  \n\t  \n\t/**  \n\t * 기둥은 바닥 위에 있거나 보의 한쪽 끝부분 위에 있거나, 또는 다른 기둥 위에 있어야 한다  \n\t * 보는 한쪽 끝부분이 기둥 위에 있거나, 또는 양쪽 끝부분이 다른 보와 동시에 연결되어 있어야 한다  \n\t */  \n\tprivate static class Board {  \n\t    private final int n;  \n\t    private final boolean[][] pole;  \n\t    private final boolean[][] bo;  \n\t    private int count;  \n\t  \n\t    public Board(int n) {  \n\t        this.n = n;  \n\t        this.pole = new boolean[n + 2][n + 2];  \n\t        this.bo = new boolean[n + 2][n + 2];  \n\t    }  \n\t  \n\t    public void execute(int x, int y, int a, int b) {  \n\t        if(a == 0) { // 기둥  \n\t            if(b == 0) destroyPole(x, y);  \n\t            else if(b == 1) buildPole(x, y);  \n\t        } else if(a == 1){ // 보  \n\t            if(b == 0) destroyBo(x, y);  \n\t            else if(b == 1) buildBo(x, y);  \n\t        }  \n\t    }  \n\t  \n\t    private void buildPole(int x, int y) {  \n\t        if(buildablePole(x, y)) {  \n\t            pole[x][y] = true;  \n\t            count += 1;  \n\t        }  \n\t    }  \n\t  \n\t    // 바닥 위에 있거나, 다른 기등 위에 있거나, 보의 한쪽 끝에 있거나  \n\t    private boolean buildablePole(int x, int y) {  \n\t        return y == 0  \n\t                || (0 < y && pole[x][y - 1])  \n\t                || (0 < x && bo[x - 1][y])  \n\t                || (bo[x][y]);  \n\t    }  \n\t  \n\t    private void destroyPole(int x, int y) {  \n\t        pole[x][y] = false;  \n\t        if(invalid(x, y)) {  \n\t            pole[x][y] = true;  \n\t        } else {  \n\t            count -= 1;  \n\t        }  \n\t    }  \n\t  \n\t    private void buildBo(int x, int y) {  \n\t        if(buildableBo(x, y)) {  \n\t            bo[x][y] = true;  \n\t            count += 1;  \n\t        }  \n\t    }  \n\t  \n\t    // 한쪽 끝 부분이 기둥 위에 있거나, 또는 양쪽 끝부분이 다른 보와 동시에 연결되어 있는 경우  \n\t    private boolean buildableBo(int x, int y) {  \n\t        return (0 < y && pole[x][y - 1])  \n\t                || (0 < y && pole[x + 1][y - 1])"],[54,"\n\nNOTE TITLE: [[12.기둥과 보 설치]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:28\",\"modified\":\"2025/01/02 20:56:26\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60061\n\n### 시간 복잡도 \n- `O(N^2)`\n\t- 결과 배열만드는게 제일 오래 걸림 \n\t- build_frame은 최대 **1,000**\n### 풀이 \n- 구현\n- `{java}boolean[][] pole, boolean[][] bo` 선언하여 표시 처리\n\t- 이때 범위 조건 간소화를 위해 크기를 `n + 2` 로 초기화 한다 \n\t- 이렇게 할 경우 음수 조건만 신경쓰면 된다\n- 구조물이 몇개 설치했는지 알기 위해 `count` 를 선언하여 증감해준다\n- 구조물을 삭제할 때 현실적으로 조건식을 세우는 건 **불가능**하다\n\t- 그래서 현재 좌표에서 `-1, +1` 범위 내에 설치된 구조물이 있을 경우 유효성 검사를 수행한다\n\t- 만약 기존 설치된 구조물이 유효성 검사를 통과하지 못한다면 구조물을 삭제할 수 없다\n\t\t- 그러므로 삭제(**false**) 처리를 원복(**true**)한다 (`{java}boolean[][]`)\n\t- 구조물을 삭제할 수 있다면 `{java}count -= 1` \n\n\n**실수.** 기둥을 설치할 때 보의 한쪽 끝 부분 위에 있는지 확인하는 조건 하나 틀려서 찾지 못함\n```java hl:6\n// 수정 전\nprivate boolean buildablePole(int x, int y) {  \n\treturn y == 0  \n\t\t\t|| (0 < y && pole[x][y - 1])  \n\t\t\t|| (0 < x && bo[x - 1][y])  \n\t\t\t|| (bo[x + 1][y]);  // 보는 오른족 방향으로 설치*\n}  \n\n// 수정 후\nprivate boolean buildablePole(int x, int y) {  \n\treturn y == 0  \n\t\t\t|| (0 < y && pole[x][y - 1])  \n\t\t\t|| (0 < x && bo[x - 1][y])  \n\t\t\t|| (bo[x][y]);  \n}  \n```"],[53,"\n\nNOTE TITLE: [[13.치킨배달]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:32\",\"modified\":\"2025/01/02 17:54:42\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 풀이 \n- 백트래킹, 구현 \n- 치킨집을 최대 M개 선택한다\n\t- `치킨 거리` : 집과 가장 가까운 치킨집 사이의 거리\n\t- `도시의 치킨 거리` : 모든 집의 치킨 거리의 합\n- `도시의 치킨 거리`의 최소값을 구한다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static List<Chicken> chickenList;\n    private static List<House> houseList;\n    private static int n, m, result;\n    private static void input() {\n        n = inputProcessor.nextInt(); // N * N 도시\n        m = inputProcessor.nextInt(); // 폐업하지 않을 치킨집 최대 M개\n\n        chickenList = new ArrayList<>();\n        houseList = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                int v = inputProcessor.nextInt();\n\n                if(v == 1) { // 집\n                    houseList.add(new House(i, j));\n                } else if(v == 2) { // 치킨집\n                    chickenList.add(new Chicken(i, j));\n                }\n            }\n        }\n\n        result = Integer.MAX_VALUE;\n    }\n\n    private static class Chicken {\n        private final int x;\n        private final int y;\n\n        public Chicken(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static class House {\n        private final int x;\n        private final int y;\n\n        public House(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static void pro() {\n        combination(0, 0, new int[m]);\n\n        sb.append(result);\n    }\n\n    private static void combination(int idx, int count, int[] selected) {\n        if(count == m) {\n            int distance = 0; // 도시의 치킨 거리 = 모든 집의 치킨 거리의 합\n            for(House h : houseList) {\n                 // 치킨 거리 = 집과 가장 가까운 치킨집 사이의 거리\n                int minDiff = Integer.MAX_VALUE; \n\n                for(int i : selected) {\n                    Chicken c = chickenList.get(i);\n                    int diff = Math.abs(h.x - c.x) + Math.abs(h.y - c.y);\n                    if(diff < minDiff) {\n                        minDiff = diff;\n                    }\n                }\n\n                distance += minDiff;\n            }\n\n            result = Math.min(result, distance);\n            return;\n        }\n        if(idx >= chickenList.size()) return;\n\n        // 현재 치킨집(idx)을 선택한다\n        selected[count] = idx;\n        combination(idx + 1, count + 1, selected);\n        selected[count] = -1;\n\t\t\n\t\t// 현재 치킨집(idx)을 선택하지 않는다\n\t\tcombination(idx + 1, count, selected);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[52,"\n\nNOTE TITLE: [[13.치킨배달]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:32\",\"modified\":\"2025/01/02 17:54:42\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/15686\n\n### 시간 복잡도 \n- 치킨집 조합 : `O(xCm)`\n\t- x는 N * N 배열에서 치킨집의 총 개수\n- 도시의 치킨 거리 : `O(h * m)`\n\t- h : 모든 집의 개수 (1)\n\t- m : 최대 선택 가능한 치킨집 개수 \n\n### 풀이 \n- 백트래킹, 구현 \n- 치킨집을 최대 M개 선택한다\n\t- `치킨 거리` : 집과 가장 가까운 치킨집 사이의 거리\n\t- `도시의 치킨 거리` : 모든 집의 치킨 거리의 합\n- `도시의 치킨 거리`의 최소값을 구한다"],[51,"\n\nNOTE TITLE: [[14.외벽점검 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/02 14:00:36\",\"modified\":\"2025/01/02 22:38:50\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60062\n\n### 시간 복잡도 \n- weak 최대 길이 15,\bdist 최대 8길이일때 \n\t- 최악의 경우 각 자리마다 모든 인원을 써서 탐색 가능하다면 `O(8^15)` 걸릴 수 있지만, 백트래킹으로 인해 <u>이보다 훨씬 적게 걸림</u>\n\n### 풀이 \n- 구현, 비트 마스킹, 완전 탐색\n- 시계 방향만 고려\n\t- `현재 위치 < 다음 위치` 인 경우 `{java} diff += n` 을 하면 차이를 구할 수 있다\n\t-  예로 n = 12이고 cur = 10, next = 1인 경우 `diff = -8 + 12` 가 되어 거리 차이를 구할 수 있다\n- `weak`의 길이가 최대 15이하 이므로 `{java}int visited` (32bit)로 충분하게 **방문 표시** 가능\n- <u>각 weak 시작점 별로 재귀 탐색을 수행하고, dist는 오름차순 정렬 후 역방향으로 소비</u> \n- 현재 작업자의 dist보다 diff가 더 큰 경우 (`dist < diff`) 반복문 종료\n\t- 전부 방문 했을 경우 answer 갱신 후 return\n\t- 아직 방문 하지 않은 곳이 있는 경우 재귀 방식으로 재호출\n\n**틀린 부분**.  아직 방문하지 않은 곳을 처리하기 위해 pointer를 사용하여 다음 노드 처리 재귀 호출하였는데, 그럴 필요 없이 아래와 같이 반복문 순회하면서 추가 인원 할당하면 되었음\n```java\nfor(int i = 0; i < len; i++) {\n\tif((visited & (1 << i)) != 0) continue;\n\t\n\trec(i, used + 1, visited);\n}\n```\n### 제출 코드\n```java hl:50-54\nimport java.util.*;\n\nclass Solution {\n    private int answer, len, _n;\n    private int[] WEAK, DIST;\n    \n    public int solution(int n, int[] weak, int[] dist) {\n        answer = Integer.MAX_VALUE;\n        \n        _n = n;\n        WEAK = weak;\n        len = WEAK.length;\n        DIST = dist;\n        Arrays.sort(DIST);\n        \n        for(int i = 0; i < WEAK.length; i++) {\n            rec(i, 1, 0);\n        }\n        \n        return answer == Integer.MAX_VALUE ? -1 : answer;\n    }\n    \n    private void rec(int cur, int used, int visited) {\n        if(used > DIST.length) return; // 모든 사람을 다 써도 안 되는 경우 \n        if(used >= answer) return; // 결과값보다 크다면\n        \n        for(int i = 0; i < len; i++) {\n            int next = (cur + i) % len;\n            int diff = WEAK[next] - WEAK[cur];\n            \n            if(cur > next) {\n                diff += _n;\n            }\n            \n            if(DIST[DIST.length - used] < diff) {\n                break;\n            }            \n                \n            visited |= (1 << next); // 방문 표시\n        }\n        \n        \n        // 다 방문한 경우\n        if(visited == (1 << len) - 1) {\n            answer = Math.min(answer, used);\n            return;\n        }\n        \n        // 아직 방문이 필요한 경우\n        for(int i = 0; i < len; i++) {\n            if((visited & (1 << i)) != 0) continue;\n            \n            rec(i, used + 1, visited);\n        }\n    }\n}\n```"],[50,"\n\nNOTE TITLE: [[15.특정 거리의 도시 찾기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:54:39\",\"modified\":\"2025/01/01 15:56:38\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18352\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이 \n- BFS (너비 우선 탐색) \n- 단방향 그래프이고, 시작점`x`가 주어졌을때 최단 거리 `k`인 노드 번호를 구하는 문제\n\t- 최단거리가 `k`인 도시가 없다면 `-1` 출력\n\n### 제출 코드 \n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, m, k, x;\n    private static List<List<Integer>> adj;\n    \n    private static void input() {\n        n = inputProcessor.nextInt(); // 도시의 개수 (노드)\n        m = inputProcessor.nextInt(); // 도로의 개수 (간선)\n        k = inputProcessor.nextInt(); // 거리가 K인 도시를 찾는다\n        x = inputProcessor.nextInt(); // 출발 도시\n\n        adj = new ArrayList<>();\n        for(int i = 0; i <= n; i++) {\n            adj.add(new ArrayList<>());\n        }\n\n        for(int i = 1; i <= m; i++) {\n            int a = inputProcessor.nextInt();\n            int b = inputProcessor.nextInt();\n\n            adj.get(a).add(b);\n        }\n    }\n\n    private static void pro() {\n        Deque<Integer> que = new ArrayDeque<>();\n        que.add(x);\n\n        int[] dist = new int[n + 1];\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[x] = 0;\n\n        while(!que.isEmpty()) {\n            int cur = que.poll();\n\n            for(int next : adj.get(cur)) {\n                if(dist[next] != Integer.MAX_VALUE) continue;\n\n                dist[next] = dist[cur] + 1;\n                que.add(next);\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(dist[i] == k) result.add(i);\n        }\n\n        if(result.isEmpty()) {\n            sb.append(-1);\n        } else {\n            for (int v : result) {\n               sb.append(v).append(\"\\n\");\n            }\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[48,"\n\nNOTE TITLE: [[16.연구소]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:08\",\"modified\":\"2025/01/01 16:19:51\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n\n    private static int N, M;\n    private static int[][] FIELDS;\n    private static List<BLANK> BLANKS;\n    private static List<Virus> VIRUSES;\n    private static int RESULT;\n\n    private static void input() {\n        N = inputProcessor.nextInt();\n        M = inputProcessor.nextInt();\n        RESULT = 0;\n\n        FIELDS = new int[N + 1][M + 1];\n        BLANKS = new ArrayList<>();\n        VIRUSES = new ArrayList<>();\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= M; j++) {\n                int v = inputProcessor.nextInt();\n                FIELDS[i][j] = v;\n\n                if (v == 0) { // 빈칸\n                    BLANKS.add(new BLANK(i, j));\n                } else if (v == 2) { // 바이러스\n                    VIRUSES.add(new Virus(i, j));\n                }\n            }\n        }\n    }\n\n    private static class BLANK {\n        private final int x;\n        private final int y;\n\n        public BLANK(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static class Virus {\n        private final int x;\n        private final int y;\n\n        public Virus(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static void pro() {\n        createWall(0, 0);\n        sb.append(RESULT);\n    }\n\n    private static void createWall(int count, int idx) {\n        if (count == 3) {\n            boolean[][] virus = spread();\n            int safety = 0;\n            for (int i = 1; i <= N; i++) {\n                for (int j = 1; j <= M; j++) {\n                    if (FIELDS[i][j] == 0 && !virus[i][j]) {\n                        safety += 1;\n                    }\n                }\n            }\n\n            RESULT = Math.max(RESULT, safety);\n            return;\n        }\n\n        if (idx >= BLANKS.size()) return;\n\n        BLANK cur = BLANKS.get(idx);\n        FIELDS[cur.x][cur.y] = 1;\n        createWall(count + 1, idx + 1);\n\n        FIELDS[cur.x][cur.y] = 0;\n        createWall(count, idx + 1);\n    }\n\n    private static boolean[][] spread() {\n        boolean[][] visited = new boolean[N + 1][M + 1];\n        for (Virus v : VIRUSES) {\n            if (visited[v.x][v.y]) continue;\n            \n            dfs(v.x, v.y, visited);\n        }\n\n        return visited;\n    }\n\n    private static void dfs(int x, int y, boolean[][] visited) {\n        visited[x][y] = true;\n\n        for (int i = 0; i < 4; i++) {\n            int dx = DIR[i][0] + x;\n            int dy = DIR[i][1] + y;\n\n            if (dx < 1 || dy < 1 || dx > N || dy > M) continue;\n            if (visited[dx][dy]) continue;\n            if (FIELDS[dx][dy] != 0) continue;\n\n            dfs(dx, dy, visited);\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }"],[49,"\n\nNOTE TITLE: [[16.연구소]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:08\",\"modified\":\"2025/01/01 16:19:51\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[47,"\n\nNOTE TITLE: [[16.연구소]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:08\",\"modified\":\"2025/01/01 16:19:51\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/14502\n\n### 시간 복잡도 \n- 풀이 참고\n\n### 풀이\n- **완전 탐색**과 **그래프 탐색** 사용\n- 최대 `8 * 8` 지도에서 \n\t- 벽을 3개 세우는 조합은 `64C3`\n\t- 바이러스 전파 : BFS/DFS든 `O(V + E)`\n\t- 안전 지역 카운팅 : `O(NM)`"],[46,"\n\nNOTE TITLE: [[17.경쟁적 전염]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:12\",\"modified\":\"2025/01/01 16:34:31\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18405\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이\n- 격자형 그래프 탐색 문제 \n- 단, 번호가 낮은 순으로 바이러스가 전파되야 하므로 `우선 순위 큐`를 사용\n\n### 제출 코드\n```java hl:88-94\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, k, s, x, y;\n    private static int[][] maps;\n    \n    private static void input() {\n        n = inputProcessor.nextInt();\n        k = inputProcessor.nextInt(); // k 이하의 자연수로만 주어짐\n\n        maps = new int[n + 1][n + 1];\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                maps[i][j] = inputProcessor.nextInt();\n            }\n        }\n\n\t\t// s초 뒤에 (x,y)에 존재하는 바이러스 종류를 출력\n        s = inputProcessor.nextInt(); \n        x = inputProcessor.nextInt();\n        y = inputProcessor.nextInt();\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n\n    private static void pro() {\n        Queue<Virus> que = new PriorityQueue<>();\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                if(maps[i][j] != 0) {\n                    que.add(new Virus(maps[i][j], i, j, 0));\n                }\n            }\n        }\n\n        while(!que.isEmpty()) {\n            Virus cur = que.poll();\n\n            if(cur.time == s) {\n                break;\n            }\n\n            for(int i = 0; i < 4; i++) {\n                int dx = cur.x + DIR[i][0];\n                int dy = cur.y + DIR[i][1];\n\n                if(dx < 1 || dy < 1 || dx > n || dy > n) continue;\n                if(maps[dx][dy] != 0) continue;\n\n                maps[dx][dy] = maps[cur.x][cur.y];\n                que.add(new Virus(cur.no, dx, dy, cur.time + 1));\n            }\n        }\n\n        // 결과 출력, 없으면 0\n        sb.append(maps[x][y]);\n    }\n\n    private static class Virus implements Comparable<Virus> {\n        private final int no;\n        private final int x;\n        private final int y;\n        private final int time;\n\n        public Virus(int no, int x, int y, int time) {\n            this.no = no;\n            this.x = x;\n            this.y = y;\n            this.time = time;\n        }\n\n        public int compareTo(Virus o) {\n            if(this.time != o.time) {\n                return this.time - o.time;\n            }\n\n            return this.no - o.no;\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[45,"\n\nNOTE TITLE: [[18.괄호 변환]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:16\",\"modified\":\"2025/01/02 10:52:58\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60058\n\n### 시간 복잡도 \n\n### 풀이\n- 백트래킹 (완전 탐색) 사용\n- 요구사항대로 그대로 구현하면 되는 문제\n- `\"균형 잡힌 괄호 문자열\" != \"올바른 괄호 문자열\"`\n\t- `균형 잡힌 괄호 문자열` : `{java}parentheses` 합게가 `0` 이 되는 구간 \n\n### 제출 코드\n```java\nimport java.io.*;\n\nclass Solution {\n    public String solution(String p) {\n        return rec(p);\n    }\n    \n    private String rec(String w) {\n        if(w.equals(\"\")) return w;\n        \n        int idx = 0;\n        int parentheses = 0;\n        for(char c : w.toCharArray()) {\n            if(c == '(') parentheses += 1;\n            else parentheses -= 1;\n            \n            if(parentheses == 0) {\n                break;\n            }\n            \n            idx += 1;\n        }\n        \n        String u = w.substring(0, idx + 1);\n        String v = rec(w.substring(idx + 1));\n        \n        // 문자열 u가 올바른 괄호 문자열이라면\n        if(check(u)) {\n            return u + v;\n        } \n        \n        // 문자열 u가 올바른 괄호 문자열이 아니라면\n        return convertText(u, v);\n    }\n    \n    private boolean check(String u) {\n        if(u.isEmpty()) return true;\n        \n        int count = 0;\n        for(char c : u.toCharArray()) {\n            if(c == '(') count += 1;\n            else if(--count < 0) return false;\n        }\n        \n        return true;\n    }\n    \n    private String convertText(String u, String v) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"(\")\n            .append(v)\n            .append(\")\");\n    \n        for(int i = 1; i < u.length() - 1; i++) {\n            char c = u.charAt(i);\n            sb.append(c == '(' ? \")\" : \"(\");\n        }\n        \n        return sb.toString();\n    }\n}\n```"],[44,"\n\nNOTE TITLE: [[19.연산자 끼워 넣기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:20\",\"modified\":\"2025/01/01 22:03:17\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/14888\n\n### 시간 복잡도 \n- `O(4^(N - 1))`\n\t- 최대 수열의 길이가 11이므로 `O(4^10)`으로 풀이 가능\n\t- `4^10 = 1,048,576`\n\n### 풀이\n- DFS (깊이 우선 탐색)\n- 초기값과 다음 인덱스 번호를 재귀호출 하여 풀이\n\t- `{java}int[] selected` 와 같은 추가 배열을 사용하지 않아도 되므로 간결함\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n   private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n, min, max;\n    private static int[] nums, operator;\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        nums = new int[n + 1];\n        for(int i = 1; i <= n; i++) {\n            nums[i] = inputProcessor.nextInt();\n        }\n\n        operator = new int[5];\n        for(int i = 1; i <= 4; i++) {\n            operator[i] = inputProcessor.nextInt();\n        }\n\n        min = Integer.MAX_VALUE;\n        max = Integer.MIN_VALUE;\n    }\n\n    private static void pro() {\n        int[] selected = new int[n - 1];\n        rec(2, nums[1]);\n\n        sb.append(max).append(\"\\n\").append(min);\n    }\n\n    private static void rec(int idx, int value) {\n        if(idx == n + 1) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n            return;\n        }\n\n        // 덧셈\n        if(operator[1] > 0) {\n            operator[1] -= 1;\n            rec(idx + 1, value + nums[idx]);\n            operator[1] += 1;\n        }\n\n        // 뺄셈\n        if(operator[2] > 0) {\n            operator[2] -= 1;\n            rec(idx + 1, value - nums[idx]);\n            operator[2] += 1;\n        }\n\n        // 곱셈\n        if(operator[3] > 0) {\n            operator[3] -= 1;\n            rec(idx + 1, value * nums[idx]);\n            operator[3] += 1;\n        }\n\n        // 나눗셈\n        if(operator[4] > 0) {\n            operator[4] -= 1;\n            rec(idx + 1, value / nums[idx]);\n            operator[4] += 1;\n        }\n    }\n\n    private static int calculate(int v1, int op, int v2) {\n        if(op == 1) {\n            return v1 + v2;\n        } else if(op == 2) {\n            return v1 - v2;\n        } else if(op == 3) {\n            return v1 * v2;\n        } else if(op == 4) {\n            return v2 == 0 ? 0 : (v1 / v2);\n        }\n\n        return 0;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[42,"\n\nNOTE TITLE: [[20.감시 피하기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:24\",\"modified\":\"2025/01/01 22:32:07\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n     private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N;\n    private static String[][] school;\n    private static List<Blank> blanks;\n    private static List<Teacher> teachers;\n    private static boolean result;\n\n    private static void input() {\n        N = inputProcessor.nextInt();\n        school = new String[N + 1][N + 1];\n\n        blanks = new ArrayList<>();\n        teachers = new ArrayList<>();\n        for (int i = 1; i <= N; i++) {\n            for (int j = 1; j <= N; j++) {\n                String v = inputProcessor.next();\n                school[i][j] = v;\n\n                if (\"T\".equals(v)) {\n                    teachers.add(new Teacher(i, j, -1));\n                } else if (\"X\".equals(v)) {\n                    blanks.add(new Blank(i, j));\n                }\n            }\n        }\n    }\n\n    private static class Blank {\n        private final int x;\n        private final int y;\n\n        public Blank(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    private static class Teacher {\n        private final int x;\n        private final int y;\n        private final int dir;\n\n        public Teacher(int x, int y, int dir) {\n            this.x = x;\n            this.y = y;\n            this.dir = dir;\n        }\n    }\n\n    private static void pro() {\n        createDummy(0, 0);\n        sb.append(result ? \"YES\" : \"NO\");\n    }\n\n    private static void createDummy(int idx, int cnt) {\n        if (result) return;\n        if (cnt == 3) {\n            result = survive();\n            return;\n        }\n\n        if (idx >= blanks.size()) return;\n\n        Blank blank = blanks.get(idx);\n        school[blank.x][blank.y] = \"O\";\n        createDummy(idx + 1, cnt + 1);\n\n        school[blank.x][blank.y] = \"X\";\n        createDummy(idx + 1, cnt);\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n\n    private static boolean survive() {\n        Deque<Teacher> queue = new ArrayDeque<>();\n        for (Teacher t : teachers) {\n            for (int i = 0; i < 4; i++) {\n                queue.add(new Teacher(t.x, t.y, i));\n            }\n        }\n\n        while (!queue.isEmpty()) {\n            Teacher cur = queue.poll();\n            int x = cur.x;\n            int y = cur.y;\n            int i = cur.dir;\n\n            int dx = x + DIR[i][0];\n            int dy = y + DIR[i][1];\n\n            if (dx < 1 || dy < 1 || dx > N || dy > N) continue;\n            if (\"S\".equals(school[dx][dy])) return false;\n            if (\"O\".equals(school[dx][dy])) continue;\n\n            queue.add(new Teacher(dx, dy, i));\n        }\n\n        return true;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";"],[43,"\n\nNOTE TITLE: [[20.감시 피하기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:24\",\"modified\":\"2025/01/01 22:32:07\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[41,"\n\nNOTE TITLE: [[20.감시 피하기]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:24\",\"modified\":\"2025/01/01 22:32:07\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/18428\n\n### 시간 복잡도 \n- 벽을 3개 세우는 조합 : `O(36C3)`\n- 선생님이 탐색하는 시간복잡도 : `O(V + E)`\n\t- V = 최대 36개, E는 `4(상하좌우) * 36`\n\n### 풀이\n- 백트래킹, BFS\n- 초기화 시 빈공간(`X`)과 선생님(`T`) 좌표 정보를 기록한다\n- 백트래킹으로 벽을 3개 세우고, BFS 수행하여 선생님이 상하좌우 이동하여 학생(`S`)를 찾는지 확인\n\t- 학생을 찾는 경우 **false** 반환\n\t- 학생을 못 찾는 경우 **true** 반화"],[39,"\n\nNOTE TITLE: [[21.인구 이동]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:27\",\"modified\":\"2025/01/01 22:58:54\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N, L, R;\n    private static int[][] country;\n    \n    private static void input() {\n        N = inputProcessor.nextInt();\n        L = inputProcessor.nextInt();\n        R = inputProcessor.nextInt();\n\n        country = new int[N + 1][N + 1];\n        for(int i = 1; i <= N; i++) {\n            for(int j = 1; j <= N; j++) {\n                country[i][j] = inputProcessor.nextInt();\n            }\n        }\n    }\n\n    private static void pro() {\n        int result = 0;\n        while(true) {\n            int groupNo = 0;\n            int[][] groups = new int[N + 1][N + 1];\n            for(int i = 1; i <= N; i++) {\n                for(int j = 1; j <= N; j++) {\n                    if(groups[i][j] == 0) {\n                        groupNo += 1;\n                        bfs(i, j, groupNo, groups);\n                    }\n                }\n            }\n\n            if(groupNo == N * N) break;\n\n            result += 1;\n        }\n\n        // 결과 출력\n        sb.append(result);\n    }\n\n    private static final int[][] DIR = {\n            {1, 0},\n            {0, 1},\n            {-1, 0},\n            {0, -1}\n    };\n    \n    private static void bfs(int startX, int startY, int groupNo, int[][] groups) {\n        Deque<int[]> que = new ArrayDeque<>();\n        que.add(new int[] {startX, startY});\n\n        groups[startX][startY] = groupNo;\n\n        List<int[]> union = new ArrayList<>();\n        union.add(new int[] {startX, startY});\n\n        int sum = country[startX][startY];\n        while(!que.isEmpty()) {\n            int[] cur = que.poll();\n            int x = cur[0];\n            int y = cur[1];\n\n            for(int i = 0; i < 4; i++) {\n                int dx = x + DIR[i][0];\n                int dy = y + DIR[i][1];\n\n                if(dx < 1 || dy < 1 || dx > N || dy > N) continue;\n                if(groups[dx][dy] != 0) continue;\n\n                int diff = Math.abs(country[x][y] - country[dx][dy]);\n                if(L <= diff && diff <= R) {\n                    int[] next = new int[] {dx, dy};\n                    que.add(next);\n\n                    union.add(next);\n                    sum += country[dx][dy];\n                    groups[dx][dy] = groupNo;\n                }\n            }\n        }\n\n        if(union.size() == 1) return;\n\n        int avg = sum / union.size();\n        for(int[] u : union) {\n            country[u[0]][u[1]] = avg;\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }"],[40,"\n\nNOTE TITLE: [[21.인구 이동]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:27\",\"modified\":\"2025/01/01 22:58:54\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n\n```"],[38,"\n\nNOTE TITLE: [[21.인구 이동]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:27\",\"modified\":\"2025/01/01 22:58:54\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/16234\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이\n- BFS (깊이 우선 탐색)\n- 문제 요구사항과 같이 인구 차이가 `L`이상 `R` 이하 인 경우 두 나라는 공유하는 국경선을 하루 연다 (**연합**)\n- `groupNo` 가 `N * N` 과 동일하면 종료하고, 그 전까지는 그룹별로 평균을 구해 값을 갱신한다\n- `BFS` 탐색시\n\t- `{java}List<int[]> union` : 연합 좌표 정보 기록 \n\t- `{java} int sum` : 연합 총 인구 수 합산"],[35,"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) ### 제출 코드\n```java hl:8-10,36-41,116-140\nimport java.util.*;"],[36,"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) class Solution {\n    public int solution(int[][] board) {\n        int row = board.length;\n        int col = board[0].length;\n        int[][] newBoard = new int[row + 2][col + 2];\n        for(int i = 0; i <= row + 1; i++) {\n            Arrays.fill(newBoard[i], 1);\n        }\n        \n        for(int i = 1; i <= row; i++) {\n            for(int j = 1; j <= col; j++) {\n                newBoard[i][j] = board[i - 1][j - 1];\n            }\n        }\n        \n        Deque<Robot> que = new ArrayDeque<>();\n        Robot start = new Robot(1, 1, 1, 2, 0);\n        que.add(start);\n        \n        Set<Robot> visited = new HashSet<>();\n        visited.add(start);\n        \n        int answer = -1;\n        while(!que.isEmpty()) {\n            Robot cur = que.poll();\n            \n            if(cur.isFinish(row, col)) {\n                answer = cur.dist;\n                break; \n            }\n            \n            List<Robot> nexts = findNexts(cur, newBoard);\n            for(Robot next : nexts) {         \n                boolean isPossible = true;\n                for(Robot v : visited) {\n                    if(v.visited(next)) {\n                        isPossible = false;\n                        break;\n                    }\n                }\n                \n                if(isPossible) {\n                  que.add(next);\n                  visited.add(next);\n                }\n            }\n        }\n        \n        return answer;\n    }\n    \n    private static class Robot {\n        private final int x1;\n        private final int y1;\n        private final int x2;\n        private final int y2;\n        private final int dist;\n        \n        public Robot(int x1, int y1, int x2, int y2, int dist) {\n            this.x1 = x1;\n            this.y1 = y1;\n            this.x2 = x2;\n            this.y2 = y2;\n            this.dist = dist;\n        }\n        \n        public boolean isFinish(int x, int y) {\n            return (x1 == x && y1 == y)\n                || (x2 == x && y2 == y);\n        }\n       \n        public boolean visited(Robot o) {\n            return this.x1 == o.x1\n                && this.y1 == o.y1\n                && this.x2 == o.x2\n                && this.y2 == o.y2;\n        }\n        \n        public boolean isHosizontal() {\n            return this.x1 == this.x2;\n        }\n        \n        public boolean isVertical() {\n            return this.y1 == this.y2;\n        }\n    }\n    \n    private final int[][] DIR = {\n        {1, 0},\n        {0, 1},\n        {-1, 0},\n        {0, -1}\n    };\n    \n    private List<Robot> findNexts(Robot robot, int[][] maps) {\n        List<Robot> result = new ArrayList<>();\n        \n        int x1 = robot.x1;\n        int y1 = robot.y1;\n        int x2 = robot.x2;\n        int y2 = robot.y2;\n        int dist = robot.dist;\n        for(int i = 0; i < 4; i++) {\n            int dx1 = x1 + DIR[i][0];\n            int dy1 = y1 + DIR[i][1];\n            int dx2 = x2 + DIR[i][0];\n            int dy2 = y2 + DIR[i][1];\n            \n            if(maps[dx1][dy1] == 1 || maps[dx2][dy2] == 1) continue;\n            \n            result.add(new Robot(dx1, dy1, dx2, dy2, dist + 1));\n        }\n        \n        if(robot.isHosizontal()) { // 수평 상태 (x축이 같으면)\n            // 위, 아래로 회전 가능(4가지 경우)\n            if(maps[x1 - 1][y1] == 0 && maps[x2 - 1][y2] == 0) {\n                result.add(new Robot(x1 - 1, y1, x1, y1, dist + 1));\n                result.add(new Robot(x2 - 1, y2, x2, y2, dist + 1));\n            }\n            \n            if(maps[x1 + 1][y1] == 0 && maps[x2 + 1][y2] == 0) {\n                result.add(new Robot(x1, y1, x1 + 1, y1, dist + 1));\n                result.add(new Robot(x2, y2, x2 + 1, y2, dist + 1));\n            }\n        }\n        \n        if(robot.isVertical()) { // 수직 상태 (y축이 같으면)\n            // 왼쪽, 오른쪽 회전 가능 (4가지 경우)\n            if(maps[x1][y1 - 1] == 0 && maps[x2][y2 - 1] == 0) {\n                result.add(new Robot(x1, y1 - 1, x1, y1, dist + 1));\n                result.add(new Robot(x2, y2 - 1, x2, y2, dist + 1));"],[37,"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n(cont'd) result.add(new Robot(x1, y1 - 1, x1, y1, dist + 1));\n                result.add(new Robot(x2, y2 - 1, x2, y2, dist + 1));\n            }\n            \n            if(maps[x1][y1 + 1] == 0 && maps[x2][y2 + 1] == 0) {\n                result.add(new Robot(x1, y1, x1, y1 + 1, dist + 1));\n                result.add(new Robot(x2, y2, x2, y2 + 1, dist + 1));\n            }\n        }\n        \n        return result;\n    }\n}\n```"],[34,"\n\nNOTE TITLE: [[22.블록 이동하기 (🔺)]]\n\nMETADATA:{\"created\":\"2025/01/01 15:57:33\",\"modified\":\"2025/01/02 12:09:35\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60063\n\n### 시간 복잡도 \n- `O(V + E)`\n\n### 풀이\n- BFS\n- 로봇이 움직일 수 있는 경우는 최대 `12`가지\n\t- 상하좌우 : `4`가지\n\t- 수평 상태인 경우 : `4`가지 (`{java}x1 == x2`)\n\t- 수직 상태인 경우 : `4`가지 (`{java}y1 == y2`)\n- **회전 관련**\n\t- 로봇은 `수평`, `수직`  상태 중 하나를 가진다\n\t- 로봇 상태마다 4가지 회전 경우의 수를 가짐\n\t- 회전 경로에 하나라도 `1`이면 둘 다 회전하지 못함 - `(B)` 이미지  \n\t- 회전 위치를 구할 때 단순히 `(x, y)` 좌표 기준으로 행과 열에 `+1, -1` 해주는게 편함\n\n![[스크린샷 2025-01-02 오후 12.02.23.png]]\n\n\n**실수1.** 범위 조건 검사를 쉽게 하기 위해 테두리를 `1`로 채운 기존 데이터를 채운 신규 보드를 생성\n데이터 초기화시 `0 ~ (row + 1)` 범위를 순회하면서 전체를 1로 채우고, 기존 보드의 데이터를 채운다\n```text\n[1, 1, 1, 1, 1, 1, 1]\n[1, 0, 0, 0, 1, 1, 1]\n[1, 0, 0, 0, 1, 0, 1]\n[1, 0, 1, 0, 1, 1, 1]\n[1, 1, 1, 0, 0, 1, 1]\n[1, 0, 0, 0, 0, 0, 1]\n[1, 1, 1, 1, 1, 1, 1]\n```\n\n**실수2**. 중복 방문 여부를 처리하기 위해 `Set`을 사용했으나 equals, hashCode 재정의하지 않는 경우 확인하는 방법을 생각하지 못함\n```java\nboolean isPossible = true;\nfor(Robot v : visited) {\n\tif(v.visited(next)) {\n\t\tisPossible = false;\n\t\tbreak;\n\t}\n}\n```\n\n**실수3**. 로봇의 상태가 `수직`, `수평`인 경우를 고려하지 못하여 <u>회전 가능한 경로를 일부 누락</u>함\n```java\n# 제출 코드를 리팩토링\nint[] nums = new int[] {-1, 1};\nif(robot.isHosizontal()) {  // 수평 상태\n\t// 위, 아래로 회전(4가지 경우)\n\tfor(int i = 0; i < 2; i++) {\n\t   if(maps[x1 + nums[i]][y1] == 0 && maps[x2 + nums[i]][y2] == 0) {\n\t\t result.add(new Robot(x1 + nums[i], y1, x1, y1, dist + 1));\n\t\t result.add(new Robot(x2 + nums[i], y2, x2, y2, dist + 1));   \n\t   }\n\t}\n}\n\nif(robot.isVertical()) { // 수직 상태\n    // 왼쪽, 오른쪽으로 회전(4가지 경우)\n\tfor(int i = 0; i < 2; i++) {\n\t   if(maps[x1][y1 + nums[i]] == 0 && maps[x2][y2 + nums[i]] == 0) {\n\t\t result.add(new Robot(x1, y1 + nums[i], x1, y1, dist + 1));\n\t\t result.add(new Robot(x2, y2 + nums[i], x2, y2, dist + 1));   \n\t   }\n\t}\n}\n```"],[33,"\n\nNOTE TITLE: [[23.국영수]]\n\nMETADATA:{\"created\":\"2024/12/31 13:55:58\",\"modified\":\"2024/12/31 15:07:56\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/10825\n\n### 시간 복잡도\n`O(NlogN)`\n\n### 풀이\n요구사항 대로 Comparable 인터페이스 구현하여 정렬 후 출력\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static List<Student> students;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        students = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            String name = inputProcessor.next();\n            int ko = inputProcessor.nextInt();\n            int eng = inputProcessor.nextInt();\n            int math = inputProcessor.nextInt();\n\n            students.add(new Student(name, ko, eng, math));\n        }\n    }\n\n    private static class Student implements Comparable<Student>{\n        private final String name;\n        private final int ko;\n        private final int eng;\n        private final int math;\n\n        public Student(String name, int ko, int eng, int math) {\n            this.name = name;\n            this.ko = ko;\n            this.eng = eng;\n            this.math = math;\n        }\n\n        public int compareTo(Student o) {\n            if(this.ko != o.ko) {\n                return o.ko - this.ko;\n            } else if(this.eng != o.eng) {\n                return this.eng - o.eng;\n            } else if (this.math != o.math) {\n                return o.math - this.math;\n            }\n\n            return this.name.compareTo(o.name);\n        }\n    }\n\n    private static void pro() {\n        Collections.sort(students);\n\n        for(Student student : students) {\n            sb.append(student.name).append(\"\\n\");\n        }\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[32,"\n\nNOTE TITLE: [[24.안테나]]\n\nMETADATA:{\"created\":\"2024/12/31 14:07:47\",\"modified\":\"2024/12/31 15:07:52\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/18310\n\n### 시간 복잡도 \n`O(NlogN)`\n\n### 풀이\n- n이 최대 20만이기 때문에 2중 for문으로 풀이할 경우 **시간초과**\n- 정렬 후 *중간 위치에 있는 집*이 가장 거리의 총합이 짧음\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[] house;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        house = new int[n];\n        for(int i = 0; i < n; i++) {\n            house[i] = inputProcessor.nextInt();\n        }\n    }\n\n    private static void pro() {\n        Arrays.sort(house);\n\n        int mid = (n - 1) / 2;\n        sb.append(house[mid]);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw \n        = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[31,"\n\nNOTE TITLE: [[25.실패율]]\n\nMETADATA:{\"created\":\"2024/12/31 14:35:40\",\"modified\":\"2024/12/31 15:07:47\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/42889\n\n### 시간 복잡도\n- `O(NlogN)`\n- 정렬 시간 복잡도가 가장 큼\n\n### 풀이\n- int[] stoped = 플레이어가 멈춘 스테이지별로 카운트 누적\n- 플레이어 수 = stages.length\n- 실패율 = 스테이지에 도달 했으나 클리어 하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어의 수\n\t- 스테이지에 도달한 플레이어 수 = 전체 플레이어 수 - 현재 스테이지 클리어 하지 못한 플레이어 수\n- 실패율이 **double 타입**이므로 if 조건문으로 내림차순 정의\n\n### 제출 코드\n```java hl:7,13,16\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] solution(int N, int[] stages) {\n        \n        int[] stoped = new int[N + 2]; // 마지막 스테이지 클리어 경우 고려\n        for(int s : stages) {\n            stoped[s] += 1;\n        }\n        \n        List<Stage> list = new ArrayList<>();\n        int players = stages.length; // 전체 플레이어 수\n        for(int i = 1; i <= N; i++) {\n            int stop = stoped[i];\n            double failRate = (double) stop / players;\n            \n            list.add(new Stage(i, failRate));\n            players -= stop;\n            \n        }\n        \n        Collections.sort(list);\n        \n        int[] answer = new int[N];\n        for(int i = 0; i < list.size(); i++) {\n            answer[i] = list.get(i).no;\n        }\n        \n        return answer;\n    }\n    \n    private static class Stage implements Comparable<Stage>{\n        private final int no;\n        private final double failRate;\n        \n        public Stage(int no, double failRate) {\n            this.no = no;\n            this.failRate = failRate;\n        }\n\n        public int compareTo(Stage o) {\n            if(this.failRate < o.failRate) {\n                return 1;\n            } else if(this.failRate > o.failRate) {\n                return -1;\n            } else if(this.failRate == o.failRate) {\n                return 0;\n            }\n            \n            return this.no - o.no; \n        }\n    }\n}\n```"],[30,"\n\nNOTE TITLE: [[26.카드 정렬하기]]\n\nMETADATA:{\"created\":\"2024/12/31 15:04:51\",\"modified\":\"2024/12/31 15:18:51\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/1715\n\n### 시간 복잡도 \n- `O(NlogN)`\n### 풀이 \n- *항상 가장 작은 크기의 두 카드 묶음을 합쳤을 때 최적의 해를 보장한다*\n\t- 그리디 알고리즘으로 분류 가능\n- `우선 순위 큐` 사용\n\t- Integer는 기본적으로 **오름차순 정렬**\n\t- 가장 작은 두 수를 뽑아서 합산 \n\t- `result` 에 누적 후 다시 큐에 넣음\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[] data;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        data = new int[n];\n        for(int i = 0; i < n; i++) {\n            data[i] = inputProcessor.nextInt();\n        }\n    }\n\n    private static void pro() {\n        Queue<Integer> pq = new PriorityQueue<>();\n        for(int i = 0; i < n; i++) {\n            pq.add(data[i]);\n        }\n\n        int result = 0;\n        while(pq.size() > 1)) {\n            int v1 = pq.poll();\n            int v2 = pq.poll();\n\n            int sum = v1 + v2;\n            result += sum;\n            pq.add(sum);\n        }\n\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[29,"\n\nNOTE TITLE: [[27.정렬된 배열에서 특정 수의 개수 구하기]]\n\nMETADATA:{\"created\":\"2024/12/31 15:19:15\",\"modified\":\"2024/12/31 15:37:59\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \n- Zoho 인터뷰 기출 문제\n### 시간 복잡도\n- `O(NlogN)`\n- 정렬의 시간복잡도가 가장 크다 \n- 이진 탐색의 경우 `O(logN)`의 시간복잡도를 가진다\n\n### 풀이\n- 이진 탐색을 사용해서 lowerBoud, upperBound의 차이를 구하는 문제 \n\t- `lowerBound` :  x가 되는 첫번째 인덱스\n\t- `upperBound` : x보다 큰 첫번째 수의 인덱스\n\n입출력 예시\n```text\n입력1\n7 2 \n1 1 2 2 2 2 3\n\n출력1\n4\n  \n입력2 \n7 4\n1 1 2 2 2 2 3\n\n출력2 \n-1\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n, x;  \n\tprivate static int[] data;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt(); // 원소 개수  \n\t    x = inputProcessor.nextInt(); // 찾는 수  \n\t  \n\t    data = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        data[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(data);  \n\t  \n\t    int left = lowerBound(x);  \n\t    int right = upperBound(x);  \n\t    int result = right - left;  \n\t  \n\t    sb.append(result == 0 ? -1 : result);  \n\t}  \n\t  \n\tprivate static int lowerBound(int target) {  \n\t    int L = 0;  \n\t    int R = n;  \n\t  \n\t    while(L < R) {  \n\t        int mid = (L + R) / 2;  \n\t  \n\t        if(data[mid] < target) {  \n\t            L = mid + 1;  \n\t        } else {  \n\t            R = mid;  \n\t        }  \n\t    }  \n\t  \n\t    return R;  \n\t}  \n\t  \n\tprivate static int upperBound(int target) {  \n\t    int L = 0;  \n\t    int R = n;  \n\t  \n\t    while(L < R) {  \n\t        int mid = (L + R) / 2;  \n\t  \n\t        if(target < data[mid]) {  \n\t            R = mid;  \n\t        } else {  \n\t            L = mid + 1;  \n\t        }  \n\t    }  \n\t  \n\t    return R;  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n}\n```"],[28,"\n\nNOTE TITLE: [[28.고정점 찾기]]\n\nMETADATA:{\"created\":\"2024/12/31 15:43:40\",\"modified\":\"2024/12/31 15:50:55\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n`Amazon 인터뷰`\n\n### 시간 복잡도\n- `O(NlogN)`\n\t- 정렬 시간 복잡도가 가장 크다\n\t- 이진 탐색은 `O(logN)` 시간 복잡도 걸림\n\n### 풀이\n- 이진 탐색 사용하여 풀이 \n- `고정점` = 인덱스와 값이 동일한 점\n\t- `{java}data[mid] < mid` : 중간점이 가르키는 위치 값이 작은 경우 오른쪽을 탐색 (`{java}L = mid + 1`)\n\t-  반대의 경우 왼쪽을 탐색 (`{java}R = mid - 1`)\n\n입출력 예시\n```text\n입력\n5\n-15 -6 1 3 7 \n\n출력\n3\n\n  \n입력\n7\n-15 -4 2 8 9 13 15\n\n출력\n2\n\n  \n입력\n7\n-15 -4 3 8 9 13 15\n\n출력\n-1\n```\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] data;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t  \n\t    data = new int[n];  \n\t    for(int i = 0; i < n; i++) {  \n\t        data[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    Arrays.sort(data);  \n\t  \n\t    int L = 0;  \n\t    int R = data.length - 1;  \n\t    int result = -1;  \n\t    while(L <= R) {  \n\t        int mid = (L + R) / 2;  \n\t  \n\t        if(data[mid] == mid) {  \n\t            result = mid;  \n\t            break;  \n\t        }  \n\t  \n\t        if(data[mid] < mid) {  \n\t            L = mid + 1;  \n\t        } else {  \n\t            R = mid - 1;  \n\t        }  \n\t    }  \n\t  \n\t    sb.append(result);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw \n\t    = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n\n}\n```"],[27,"\n\nNOTE TITLE: [[29.공유기 설치]]\n\nMETADATA:{\"created\":\"2024/12/31 15:49:29\",\"modified\":\"2024/12/31 16:02:47\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://www.acmicpc.net/problem/2110\n\n### 시간 복잡도\n- `O(NlogN)`\n\t- 정렬이 가장 오래 걸림 \n\t- 매개변수 탐색 `O(logN)` + 그리디 알고리즘 `O(N)`\n\n### 풀이 \n- 매개변수 탐색(이진 탐색)과 그리디 문제\n\t- `d만큼 거리를 둘 때 c개 이상의 공유기를 설치 가능한가? 이때 최대 d는 얼마인가`\n\t-  첫번째 집에 공유기를 무조건 설치하고 시작 \n\t\t- 다음 집과의 거리 차이가 d 이상인 경우 공유기를 설치하고 포인터 이동\n\t\t- `{java}c <= count` 이상인 경우 오른쪽 구간 탐색하여 최대 값을 구한다\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int N, C;\n    private static int[] DATA;\n\n    private static void input() {\n        N = inputProcessor.nextInt(); // 집의 개수\n        C = inputProcessor.nextInt();\n\n        DATA = new int[N + 1];\n        for(int i = 1; i <= N; i++) {\n            DATA[i] = inputProcessor.nextInt();\n        }\n    }\n\n    private static void pro() {\n        Arrays.sort(DATA, 1, N + 1);\n\n        int result = 0;\n        int L = 1;\n        int R = DATA[N] + 1;\n\n        while(L <= R) {\n            int d = (L + R) / 2;\n\n            if(isPossible(d, C)) {\n                result = d;\n                L = d + 1;\n            } else {\n                R = d - 1;\n            }\n        }\n\n        sb.append(result);\n    }\n\n    private static boolean isPossible(int d, int c) {\n        int count = 1;\n        int prev = DATA[1];\n        for(int i = 2; i <= N; i++) {\n            int cur = DATA[i];\n            int diff = cur - prev;\n\n            if(diff < d) continue;\n\n            count += 1;\n            prev = cur;\n        }\n        \n        return count >= c;\n    }\n\n    private static void output() {\n        try (BufferedWriter bw \n        = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n\n```"],[26,"\n\nNOTE TITLE: [[30.가사 검색]]\n\nMETADATA:{\"created\":\"2024/12/31 16:03:29\",\"modified\":\"2024/12/31 17:44:13\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크 \nhttps://school.programmers.co.kr/learn/courses/30/lessons/60060\n\n### 시간 복잡도 \n- `O(NlogN)`\n\t-  queries의 길이가 10만(최대)이고, words가 10만(최대)일때 \n\t  `O(100,000log100,000)` 시간 복잡도 가짐\n\n### 풀이 \n- `words` 길이 별로 리스트에 저장\n\t- LinkedList 처음 사용했었는데, 요소 추가에는 유리하지만 인덱스 조회시 0 ~ idx 까지 순차 조회하여 **시간초과** 발생 (주의)\n\t- ArrayList 사용할 경우 인덱스 접근 시간 복잡도가 *O(1)*\n- 길이별 정방향과 역방향 문자열을 리스트에 저장\n\t- `{java}StringBuilder` 클래스에 `{java}reverse().toString()` 사용하면 간편하게 역방향 문자 구함\n\t\t- 이때 초기화 주의 ➡ `{java}setLength(0)`\n\n<font color=\"#7f7f7f\">참고. 정렬된 결과</font>\n```text\n{5=[frame, frodo, front, frost, kakao], 6=[frozen]}  \n{5=[emarf, oakak, odorf, tnorf, tsorf], 6=[nezorf]}\n```\n\n- quries에서 question mark(`?`)로 시작할 경우 reverse를 사용하고, 반대의 경우 forward를 사용\n\t- 이때 query 문자열 길이로 조회\n\t- 리스트가 비어 있는 경우 `0`을 반환\n- 이진탐색을 수행한다\n\t- question mark(`?`)를 각각 `a`와 `z`로 치환하여 범위를 구한다\n- 예로 `????o` 의 경우\n\t- `o????`로 역방향 변환\n\t-  그리고 `?` 마크를 시작점 조회시 `a` 로 종료점 조회시 `z` 로 변환하여 이진 탐색을 수행한다\n\t- `oaaaa` 의 경우 o로 시작하는 문자열 중 가장 첫 번째이다\n\t\t- **left** : `oakak` 와 만나게 되는 경우 **음수** 값을 나타내게 된다\n\t\t\t- 반면 `emarf` 보다 정렬 순위가 높으므로 *양수* 값을 나타내게 된다\n\t- `ozzzz` 의 경우 o로 시작하는 문자열 중 가장 마지막 문자열이 된다\n\t\t- **right** : `odorf` 와 비교하면 `ozzzz` 가 순위가 높아 양수 값을 가지게 된다\n\t\t\t-  반면 `tnorf` 보다 우선순위가 낮으므로 **음수** 값을 나타내게 된다 \n\n### 제출 코드\n```java hl:54-55\nimport java.util.*;\nimport java.io.*;\n\nclass Solution {\n    private static StringBuilder sb = new StringBuilder();\n    private List<List<String>> forward;\n    private List<List<String>> reverse;\n    \n    public int[] solution(String[] words, String[] queries) {\n        forward = new ArrayList<>();\n        reverse = new ArrayList<>();\n        for(int i = 0; i <= 10_000; i++) {\n            forward.add(new ArrayList<>());\n            reverse.add(new ArrayList<>());\n        }\n\n        for(String w : words) {\n            int len = w.length();\n            forward.get(len).add(w);\n            reverse.get(len).add(reverseFrom(w));\n        }\n\n        for(int i = 1; i <= 10_000; i++) {\n            if(forward.get(i).isEmpty() \n            || reverse.get(i).isEmpty()) continue;\n\n            Collections.sort(forward.get(i));\n            Collections.sort(reverse.get(i));\n        }\n\n        int[] answer = new int[queries.length];\n        for(int i = 0; i < queries.length; i++) {\n            String query = queries[i];\n            int len = query.length();\n            if(query.startsWith(\"?\")) {\n                answer[i] = countByRange(reverse.get(len), reverseFrom(query));\n            } else {\n                answer[i] = countByRange(forward.get(len), query);\n            }\n        }\n        \n        return answer;\n    }\n    \n    private static String reverseFrom(String word) {\n        String result = sb.append(word).reverse().toString();\n        sb.setLength(0);\n        return result;\n    }\n\n    private static int countByRange(List<String> words, String query) {\n        if(words.isEmpty()) return 0;\n\n        int left = binarySearch(words, query.replaceAll(\"\\\\?\", \"a\"));\n        int right = binarySearch(words, query.replaceAll(\"\\\\?\", \"z\"));\n\n        return right - left;\n    }\n\n    private static int binarySearch(List<String> words, String query) {\n        int L = 0;\n        int R = words.size();\n\n        while(L < R) {\n            int mid = (L + R) / 2;\n\n            if(query.compareTo(words.get(mid)) < 0) {\n                R = mid;\n            } else {\n                L = mid + 1;\n            }\n        }\n\n        return R;\n    }\n}\n```"],[25,"\n\nNOTE TITLE: [[31.금광]]\n\nMETADATA:{\"created\":\"2025/01/01 11:04:25\",\"modified\":\"2025/01/01 11:07:53\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\n- Flipkart 인터뷰\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이 \n- 동적 프로그래밍\n- **점화식** : `{java} dp[row][col] += max(leftUp, max(left, leftDown)` \n\t- `row = 1` 인 경우 `leftUp = 0`\n\t- `row = n` 인 경우 `leftDown = 0`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n, m;  \n\tprivate static int[][] dp;  \n\t  \n\tprivate static void input() {  \n\t    int T = inputProcessor.nextInt();  \n\t    while(T > 0) {  \n\t        n = inputProcessor.nextInt(); // 행  \n\t        m = inputProcessor.nextInt(); // 열  \n\t  \n\t        dp = new int[n + 1][m + 1];  \n\t        for(int i = 1; i <= n; i++) {  \n\t            for(int j = 1; j <= m; j++) {  \n\t                dp[i][j] = inputProcessor.nextInt();  \n\t            }  \n\t        }  \n\t  \n\t        pro();  \n\t  \n\t        T -= 1;  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    // 열을 증가 시키면서 이전 열에서 최대값을 구해서 더함  \n\t    for(int col = 2; col <= m; col++) {  \n\t        for(int row = 1; row <= n; row++) {  \n\t            int leftUp = 0;  \n\t            if(row != 1) {  \n\t                leftUp = dp[row - 1][col - 1];  \n\t            }  \n\t  \n\t            int left = dp[row][col - 1];  \n\t            \n\t            int leftDown = 0;  \n\t            if(row != n) {  \n\t                leftDown = dp[row + 1][col - 1];  \n\t            }  \n\t  \n\t            dp[row][col] \n\t            += Math.max(leftUp, Math.max(left, leftDown));  \n\t        }  \n\t    }  \n\t  \n\t  \n\t    int result = 0;  \n\t    for(int i = 1; i <= n; i++) {  \n\t        // 각 행별로 마지막 열에 있는 값 중 최대를 구함  \n\t        result = Math.max(result, dp[i][m]); \n\t    }  \n\t  \n\t    sb.append(result).append(\"\\n\");  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n\n}\n```"],[24,"\n\nNOTE TITLE: [[32.정수 삼각형]]\n\nMETADATA:{\"created\":\"2025/01/01 11:08:31\",\"modified\":\"2025/01/01 11:23:28\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/1932\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 동적 프로그래밍 (bottom-up 방식)\n- `dp[1][1]` 초기화 후 두번째 행 부터 대각선 방향으로 큰 값을 구해 합산하여 결과 구함\n\t- `j == 1` 인 경우 `left = 0` , `right = dp[i - 1][j]`\n\t- `j == n` 인 경우 `left = dp[i - 1][j - 1]` , `right = 0`\n\t-  그외 `j`의 경우 `left = dp[i - 1][j - 1]`, `right = dp[i - 1][j]`\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[][] triangle;\n    private static void input() {\n        n = inputProcessor.nextInt(); // 삼각형의 크기\n        triangle = new int[n + 1][n + 1];\n\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= i; j++) {\n                triangle[i][j] = inputProcessor.nextInt();\n            }\n        }\n    }\n\n    private static void pro() {\n        int[][] dp = new int[n + 1][n + 1];\n        dp[1][1] = triangle[1][1];\n\n        for(int i = 2; i <= n; i++) {\n            for(int j = 1; j <= i; j++) {\n                int left = 0;\n                int right = 0;\n                if(j == 1) {\n                    right = dp[i - 1][j];\n                } else if(j == n) {\n                    left = dp[i - 1][j - 1];\n                } else { // 중간\n                    left = dp[i - 1][j - 1];\n                    right = dp[i - 1][j];\n                }\n\n                dp[i][j] = triangle[i][j] + Math.max(left, right);\n            }\n        }\n\n        int result = 0;\n        for(int i = 1; i <= n; i++) {\n            result = Math.max(result, dp[n][i]);\n        }\n\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[23,"\n\nNOTE TITLE: [[33.퇴사]]\n\nMETADATA:{\"created\":\"2025/01/01 11:12:15\",\"modified\":\"2025/01/01 11:47:08\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/14501\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 동적 프로그래밍 \n- 역방향으로 n ~ 1 까지 감소하면서 dp 테이블 갱신\n- `dp[i] = i 번째 날부터 마지막 날까지 낼 수 있는 최대 이익`\n- **점화식** : `{java} dp[i] = max(maxValue, p[i] + dp[i + t[i]])` \n\t- `maxValue` : 현재까지의 최대 상담 금액에 해당하는 변수\n- `int[] dp = new int[n + 2]`를 하는 이유는 n + 1일 날 퇴사를 하기 때문에 퇴사일까지 상담 완료하는 경우를 고려하여 초기화 0을 해둠\n- `day > n + 1` 인 경우 퇴사일까지 상담 완료를 못하므로 `maxValue` 최대치를 기록해준다\n\t- 처음엔 `0`이지만 중간에 `maxValue`가 갱신되는 경우 생각해보기\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n    private static StringBuilder sb = new StringBuilder();\n    private static InputProcessor inputProcessor = new InputProcessor();\n\n    public static void main(String[] args) {\n        input();\n        pro();\n        output();\n    }\n\n    private static int n;\n    private static int[][] schedule;\n\n    private static void input() {\n        n = inputProcessor.nextInt();\n\n        schedule = new int[n + 1][2]; // 0 : T, 1 : P\n        for(int i = 1; i <= n; i++) {\n            int t = inputProcessor.nextInt();\n            int p = inputProcessor.nextInt();\n\n            schedule[i][0] = t;\n            schedule[i][1] = p;\n        }\n    }\n\n    private static void pro() {\n        int[] dp = new int[n + 2]; // n + 1 퇴사일에 상담 종료되는것 고려\n\n        int maxCost = 0;\n        for(int i = n; i >= 1; i--) {\n            int day = i + schedule[i][0];\n            if(day <= n + 1) {\n                dp[i] = Math.max(maxCost, dp[day] + schedule[i][1]);\n                maxCost = dp[i];\n            } else {\n                dp[i] = maxCost;\n            }\n        }\n\n        int result = 0;\n        for(int i = 1; i <= n; i++) {\n            if(result < dp[i]) {\n                result = dp[i];\n            }\n        }\n\n        sb.append(result);\n    }\n\n    private static void output() {\n        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {\n            bw.write(sb.toString());\n            bw.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class InputProcessor {\n        private BufferedReader br;\n        private StringTokenizer st;\n\n        public InputProcessor() {\n            this.br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            return st.nextToken();\n        }\n\n        public String nextLine() {\n            String result = \"\";\n\n            try {\n                result = br.readLine();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            return result;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n    \n}\n```"],[22,"\n\nNOTE TITLE: [[34.병사 배치하기]]\n\nMETADATA:{\"created\":\"2025/01/01 11:12:20\",\"modified\":\"2025/01/01 12:36:22\"}\n\nNOTE BLOCK CONTENT:\n\n### 문제 링크\nhttps://www.acmicpc.net/problem/18353\n\n### 시간 복잡도 \n- `O(N)`\n\n### 풀이\n- 동적 프로그래밍\n- 가장 긴 부분 수열로 문제를 역으로 바꿔서 풀이\n- **점화식** : `{java} dp[i] = max(dp[i], dp[j] + 1) (이때 data[j] < data[i]인 경우)`\n\n\n입력 데이터를 역순으로 나열하고, dp 테이블을 1로 초기화 한다 (1 = 자기자신 뜻함)\n\n|     | 1   | 2   | 3   | 4   | 5   | 6   | 7   |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| 전투력 | 4   | 2   | 5   | 8   | 4   | 11  | 15  |\n| dp  | 1   | 1   | 1   | 1   | 1   | 1   | 1   |\n\n3번 병사의 경우 본인보다 전투력이 낮은 병사가 1, 2번이 있으므로 2(최대)가 된다\n\n|     | 1   | 2   | 3     | 4   | 5   | 6   | 7   |\n| --- | --- | --- | ----- | --- | --- | --- | --- |\n| 전투력 | 4   | 2   | 5     | 8   | 4   | 11  | 15  |\n| dp  | 1   | 1   | **2** | 1   | 1   | 1   | 1   |\n\n4번 병사의 경우 본인 보다 전투력이 낮은 병사가 3(최대)이 된다\n\n|     | 1   | 2   | 3   | 4     | 5   | 6   | 7   |\n| --- | --- | --- | --- | ----- | --- | --- | --- |\n| 전투력 | 4   | 2   | 5   | 8     | 4   | 11  | 15  |\n| dp  | 1   | 1   | 2   | **3** | 1   | 1   | 1   |\n\n현재 본인의 전투력보다 낮은 병사의 `dp 테이블 값 + 1` 하면서 최대값을 구하면 가장 긴 오름차순 부분 수열을 구할 수 있다. 결과는 열외해야 하는 병사 수를 구하므로, 전체 병사 수에서 빼주면 원하는 값을 구할 수 있다\n\n|     | 1   | 2   | 3   | 4   | 5   | 6   | 7     |\n| --- | --- | --- | --- | --- | --- | --- | ----- |\n| 전투력 | 4   | 2   | 5   | 8   | 4   | 11  | 15    |\n| dp  | 1   | 1   | 2   | 3   | 2   | 4   | **5** |\n\n### 제출 코드\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    \n\tprivate static StringBuilder sb = new StringBuilder();  \n\tprivate static InputProcessor inputProcessor = new InputProcessor();  \n\t  \n\tpublic static void main(String[] args) {  \n\t    input();  \n\t    pro();  \n\t    output();  \n\t}  \n\t  \n\tprivate static int n;  \n\tprivate static int[] data;  \n\t  \n\tprivate static void input() {  \n\t    n = inputProcessor.nextInt();  \n\t  \n\t    data = new int[n + 1];  \n\t    for(int i = n; i >= 1; i--) {  \n\t        data[i] = inputProcessor.nextInt();  \n\t    }  \n\t}  \n\t  \n\tprivate static void pro() {  \n\t    int[] dp = new int[n + 1];  \n\t  \n\t    // 가장 긴 오름차순 수열을 구한다  \n\t    dp[1] = 1;  \n\t    for(int i = 2; i <= n; i++) {  \n\t        dp[i] = 1;  \n\t        for(int j = i - 1; j >= 1; j--) {  \n\t            if(data[j] < data[i]) {  \n\t                dp[i] = Math.max(dp[i], dp[j] + 1);  \n\t            }  \n\t        }  \n\t    }  \n\t  \n\t    // 결과 = 전체 병사 수 - 가장 긴 오름차순 수열  \n\t    int max = 0;  \n\t    for(int i = 1; i <= n; i++) {  \n\t        max = Math.max(max, dp[i]);  \n\t    }  \n\t  \n\t    sb.append(n - max);  \n\t}  \n\t  \n\tprivate static void output() {  \n\t    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))) {  \n\t        bw.write(sb.toString());  \n\t        bw.flush();  \n\t    } catch (IOException e) {  \n\t        throw new RuntimeException(e);  \n\t    }  \n\t}  \n\t  \n\tprivate static class InputProcessor {  \n\t    private BufferedReader br;  \n\t    private StringTokenizer st;  \n\t  \n\t    public InputProcessor() {  \n\t        this.br = new BufferedReader(new InputStreamReader(System.in));  \n\t    }  \n\t  \n\t    public String next() {  \n\t        while (st == null || !st.hasMoreElements()) {  \n\t            try {  \n\t                st = new StringTokenizer(br.readLine());  \n\t            } catch (IOException e) {  \n\t                throw new RuntimeException(e);  \n\t            }  \n\t        }  \n\t  \n\t        return st.nextToken();  \n\t    }  \n\t  \n\t    public String nextLine() {  \n\t        String result = \"\";  \n\t  \n\t        try {  \n\t            result = br.readLine();  \n\t        } catch (IOException e) {  \n\t            throw new RuntimeException(e);  \n\t        }  \n\t  \n\t        return result;  \n\t    }  \n\t  \n\t    public int nextInt() {  \n\t        return Integer.parseInt(next());  \n\t    }  \n\t  \n\t    public long nextLong() {  \n\t        return Long.parseLong(next());  \n\t    }  \n\t}\n    \n}\n```"],[2,"\n\nNOTE TITLE: [[kanban dashboard]]\n\nMETADATA:{\"kanban-plugin\":\"board\",\"created\":\"2024/12/31 12:37:38\",\"modified\":\"2025/01/03 12:38:25\"}\n\nNOTE BLOCK CONTENT:\n\n---\n\nkanban-plugin: board\n\n---\n\n## Ch11. 그리디 문제\n\n- [x] [[01. 모험가 길드 (🔺)]]\n- [x] [[02.곱하기 혹은 더하기]]\n- [x] [[03.문자열 뒤집기]]\n- [x] [[04.만들 수 없는 금액 (💩)]]\n- [x] [[05.볼링공 고르기]]\n- [x] [[06.무지의 먹방라이브]]\n\n\n## Ch12. 구현 문제\n\n- [x] [[07.럭키 스트레이트]]\n- [x] [[08.문자열 재정렬]]\n- [x] [[09.문자열 압축]]\n- [x] [[10.자물쇠와 열쇠]]\n- [x] [[11.뱀]]\n- [x] [[12.기둥과 보 설치]]\n- [x] [[13.치킨배달]]\n- [x] [[14.외벽점검 (🔺)]]\n\n\n## Ch13. DFS/BFS 문제\n\n- [x] [[15.특정 거리의 도시 찾기]]\n- [x] [[16.연구소]]\n- [x] [[17.경쟁적 전염]]\n- [x] [[18.괄호 변환]]\n- [x] [[19.연산자 끼워 넣기]]\n- [x] [[20.감시 피하기]]\n- [x] [[21.인구 이동]]\n- [x] [[22.블록 이동하기 (🔺)]]\n\n\n## Ch14. 정렬 문제\n\n- [x] [[23.국영수]]\n- [x] [[24.안테나]]\n- [x] [[25.실패율]]\n- [x] [[26.카드 정렬하기]]\n\n\n## Ch15. 이진 탐색 문제\n\n- [x] [[27.정렬된 배열에서 특정 수의 개수 구하기]]\n- [x] [[28.고정점 찾기]]\n- [x] [[29.공유기 설치]]\n- [x] [[30.가사 검색]]\n\n\n## Ch16. 다이나믹 프로그래밍 문제\n\n- [x] [[31.금광]]\n- [x] [[32.정수 삼각형]]\n- [x] [[33.퇴사]]\n- [x] [[34.병사 배치하기]]\n- [x] [[35.못생긴 수]]\n- [x] [[36.편집 거리]]\n\n\n## Ch17. 최단 경로 문제\n\n- [x] [[37.플로이드]]\n- [x] [[38.정확한 순위]]\n- [x] [[39.화성 탐사]]\n- [x] [[40.숨바꼭질]]\n\n\n## Ch18. 그래프 이론 문제\n\n- [x] [[41.여행계획]]\n- [x] [[42.탑승구(🔺)]]\n- [x] [[43.어두운길]]\n- [x] [[44.행성터널]]\n- [x] [[45.최종순위]]\n\n\n\n\n%% kanban:settings\n```\n{\"kanban-plugin\":\"board\",\"list-collapse\":[false,false,false,false,false,false,false,false],\"show-checkboxes\":true,\"hide-card-count\":false}\n```\n%%"]],"type":"string"},"embeddingModel":{"docs":{"1":0,"2":1,"22":21,"23":22,"24":23,"25":24,"26":25,"27":26,"28":27,"29":28,"30":29,"31":30,"32":31,"33":32,"34":33,"35":34,"36":35,"37":36,"38":37,"39":38,"40":39,"41":40,"42":41,"43":42,"44":43,"45":44,"46":45,"47":46,"48":47,"49":48,"50":49,"51":50,"52":51,"53":52,"54":53,"55":54,"56":55,"57":56,"58":57,"59":58,"60":59,"61":60,"62":61,"63":62,"64":63,"65":64,"66":65,"67":66,"68":67,"69":68,"70":69},"orderedDocs":[[1,"embed-multilingual-light-v3.0"],[2,"embed-multilingual-light-v3.0"],[22,"embed-multilingual-light-v3.0"],[23,"embed-multilingual-light-v3.0"],[24,"embed-multilingual-light-v3.0"],[25,"embed-multilingual-light-v3.0"],[26,"embed-multilingual-light-v3.0"],[27,"embed-multilingual-light-v3.0"],[28,"embed-multilingual-light-v3.0"],[29,"embed-multilingual-light-v3.0"],[30,"embed-multilingual-light-v3.0"],[31,"embed-multilingual-light-v3.0"],[32,"embed-multilingual-light-v3.0"],[33,"embed-multilingual-light-v3.0"],[34,"embed-multilingual-light-v3.0"],[35,"embed-multilingual-light-v3.0"],[36,"embed-multilingual-light-v3.0"],[37,"embed-multilingual-light-v3.0"],[38,"embed-multilingual-light-v3.0"],[39,"embed-multilingual-light-v3.0"],[40,"embed-multilingual-light-v3.0"],[41,"embed-multilingual-light-v3.0"],[42,"embed-multilingual-light-v3.0"],[43,"embed-multilingual-light-v3.0"],[44,"embed-multilingual-light-v3.0"],[45,"embed-multilingual-light-v3.0"],[46,"embed-multilingual-light-v3.0"],[47,"embed-multilingual-light-v3.0"],[48,"embed-multilingual-light-v3.0"],[49,"embed-multilingual-light-v3.0"],[50,"embed-multilingual-light-v3.0"],[51,"embed-multilingual-light-v3.0"],[52,"embed-multilingual-light-v3.0"],[53,"embed-multilingual-light-v3.0"],[54,"embed-multilingual-light-v3.0"],[55,"embed-multilingual-light-v3.0"],[56,"embed-multilingual-light-v3.0"],[57,"embed-multilingual-light-v3.0"],[58,"embed-multilingual-light-v3.0"],[59,"embed-multilingual-light-v3.0"],[60,"embed-multilingual-light-v3.0"],[61,"embed-multilingual-light-v3.0"],[62,"embed-multilingual-light-v3.0"],[63,"embed-multilingual-light-v3.0"],[64,"embed-multilingual-light-v3.0"],[65,"embed-multilingual-light-v3.0"],[66,"embed-multilingual-light-v3.0"],[67,"embed-multilingual-light-v3.0"],[68,"embed-multilingual-light-v3.0"],[69,"embed-multilingual-light-v3.0"],[70,"embed-multilingual-light-v3.0"]],"type":"string"},"created_at":{"docs":{"1":0,"2":1,"22":21,"23":22,"24":23,"25":24,"26":25,"27":26,"28":27,"29":28,"30":29,"31":30,"32":31,"33":32,"34":33,"35":34,"36":35,"37":36,"38":37,"39":38,"40":39,"41":40,"42":41,"43":42,"44":43,"45":44,"46":45,"47":46,"48":47,"49":48,"50":49,"51":50,"52":51,"53":52,"54":53,"55":54,"56":55,"57":56,"58":57,"59":58,"60":59,"61":60,"62":61,"63":62,"64":63,"65":64,"66":65,"67":66,"68":67,"69":68,"70":69},"orderedDocs":[[1,1735875660515],[2,1735875660518],[22,1735875660535],[23,1735875660536],[24,1735875660536],[25,1735875660537],[26,1735875660537],[27,1735875660538],[28,1735875660538],[29,1735875660539],[30,1735875660539],[31,1735875660540],[32,1735875660540],[33,1735875660541],[34,1735875660541],[35,1735875660542],[36,1735875660542],[37,1735875660543],[38,1735875660543],[39,1735875660543],[40,1735875660543],[41,1735875660544],[42,1735875660544],[43,1735875660544],[44,1735875660545],[45,1735875660545],[46,1735875660546],[47,1735875660546],[48,1735875660546],[49,1735875660547],[50,1735875660547],[51,1735875660547],[52,1735875660548],[53,1735875660548],[54,1735875660548],[55,1735875660549],[56,1735875660549],[57,1735875660549],[58,1735875660549],[59,1735875660550],[60,1735875660551],[61,1735875660551],[62,1735875660552],[63,1735875660552],[64,1735875660553],[65,1735875660850],[66,1735875660851],[67,1735875660852],[68,1735875660853],[69,1735875660854],[70,1735875660855]],"type":"number"},"ctime":{"docs":{"1":0,"2":1,"22":29,"23":28,"24":27,"25":26,"26":10,"27":9,"28":8,"29":7,"30":6,"31":5,"32":4,"33":3,"34":47,"35":48,"36":49,"37":50,"38":44,"39":45,"40":46,"41":41,"42":42,"43":43,"44":40,"45":39,"46":38,"47":35,"48":36,"49":37,"50":34,"51":69,"52":67,"53":68,"54":62,"55":63,"56":64,"57":65,"58":66,"59":60,"60":61,"61":59,"62":58,"63":57,"64":56,"65":53,"66":52,"67":55,"68":54,"69":51,"70":2},"orderedDocs":[[1,1735564737074],[2,1735616258786],[70,1735616310157],[33,1735620958896],[32,1735621667549],[31,1735623340904],[30,1735625091752],[29,1735625955495],[28,1735627420522],[27,1735627769037],[26,1735628609785],[25,1735697065046],[24,1735697311596],[23,1735697535581],[22,1735697540141],[50,1735714479219],[47,1735714628696],[48,1735714628696],[49,1735714628696],[46,1735714632485],[45,1735714636919],[44,1735714640509],[41,1735714644214],[42,1735714644214],[43,1735714644214],[38,1735714647765],[39,1735714647765],[40,1735714647765],[34,1735714653012],[35,1735714653012],[36,1735714653012],[37,1735714653012],[69,1735791380171],[66,1735793343392],[65,1735793908666],[68,1735793916686],[67,1735793918844],[64,1735794011359],[63,1735794015962],[62,1735794019049],[61,1735794022227],[59,1735794025749],[60,1735794025749],[54,1735794028811],[55,1735794028811],[56,1735794028811],[57,1735794028811],[58,1735794028811],[52,1735794032355],[53,1735794032355],[51,1735794036137]],"type":"number"},"mtime":{"docs":{"1":0,"2":68,"22":27,"23":26,"24":25,"25":24,"26":8,"27":7,"28":6,"29":5,"30":4,"31":1,"32":2,"33":3,"34":45,"35":46,"36":47,"37":48,"38":41,"39":42,"40":43,"41":38,"42":39,"43":40,"44":37,"45":44,"46":36,"47":33,"48":34,"49":35,"50":32,"51":64,"52":55,"53":56,"54":59,"55":60,"56":61,"57":62,"58":63,"59":57,"60":58,"61":54,"62":65,"63":53,"64":52,"65":51,"66":50,"67":67,"68":66,"69":49,"70":69},"orderedDocs":[[1,1735564737074],[31,1735625267385],[32,1735625272996],[33,1735625276702],[30,1735625931582],[29,1735627079511],[28,1735627855984],[27,1735628567838],[26,1735634653849],[25,1735697273079],[24,1735698208027],[23,1735699628835],[22,1735702582359],[50,1735714598239],[47,1735715991619],[48,1735715991619],[49,1735715991619],[46,1735716871955],[44,1735736597522],[41,1735738327318],[42,1735738327318],[43,1735738327318],[38,1735739934088],[39,1735739934088],[40,1735739934088],[45,1735782778984],[34,1735787375865],[35,1735787375865],[36,1735787375865],[37,1735787375865],[69,1735791515138],[66,1735793800446],[65,1735800397329],[64,1735803616412],[63,1735804109360],[61,1735806986404],[52,1735808082787],[53,1735808082787],[59,1735814718226],[60,1735814718226],[54,1735818986940],[55,1735818986940],[56,1735818986940],[57,1735818986940],[58,1735818986940],[51,1735825130515],[62,1735867952775],[68,1735872568537],[67,1735874821570],[2,1735875505797],[70,1735875569790]],"type":"number"},"extension":{"docs":{"1":0,"2":1,"22":21,"23":22,"24":23,"25":24,"26":25,"27":26,"28":27,"29":28,"30":29,"31":30,"32":31,"33":32,"34":33,"35":34,"36":35,"37":36,"38":37,"39":38,"40":39,"41":40,"42":41,"43":42,"44":43,"45":44,"46":45,"47":46,"48":47,"49":48,"50":49,"51":50,"52":51,"53":52,"54":53,"55":54,"56":55,"57":56,"58":57,"59":58,"60":59,"61":60,"62":61,"63":62,"64":63,"65":64,"66":65,"67":66,"68":67,"69":68,"70":69},"orderedDocs":[[1,"md"],[2,"md"],[22,"md"],[23,"md"],[24,"md"],[25,"md"],[26,"md"],[27,"md"],[28,"md"],[29,"md"],[30,"md"],[31,"md"],[32,"md"],[33,"md"],[34,"md"],[35,"md"],[36,"md"],[37,"md"],[38,"md"],[39,"md"],[40,"md"],[41,"md"],[42,"md"],[43,"md"],[44,"md"],[45,"md"],[46,"md"],[47,"md"],[48,"md"],[49,"md"],[50,"md"],[51,"md"],[52,"md"],[53,"md"],[54,"md"],[55,"md"],[56,"md"],[57,"md"],[58,"md"],[59,"md"],[60,"md"],[61,"md"],[62,"md"],[63,"md"],[64,"md"],[65,"md"],[66,"md"],[67,"md"],[68,"md"],[69,"md"],[70,"md"]],"type":"string"}},"enabled":true,"isSorted":true},"language":"english","schema":{"id":"string","title":"string","path":"string","content":"string","embedding":"vector[384]","embeddingModel":"string","created_at":"number","ctime":"number","mtime":"number","tags":"string[]","extension":"string"}}