테스트를 왜 하는가?
- 테스트는 귀찮은 작업이다 
- 그런데 왜 작성해야 하는가

// 방해요소 
- "시간"
- 눈앞에 요구사항에 매몰되서 기능 구현만 하고 끝나는 
- 케이스 리스트업 후 문서 작성  한정된 시간 내에서 올바른 테스트를 작성 
  > 많은 연습
- 한정된 시간안에서 도구를 많이 사용해봐야 자유자제로 효율적으로 

"타협하지 않는 마음"이 가장 중요 
- 가까이 보면 느리지만, 멀리보면 가장 빠르다
- 지금 테스트를 작성하는게 미래의 시간을 아낄 수 있다는 걸 알고 해야 함


[섹션1] 테스트는 왜 필요한가 ? 
//프로젝트 수행시 이미지 찍음 
- 커버 할 수 없는 영역 발생 
- 경험과 감에 의존 
- 늦은 피드백
- 유지보수 어려움
- 소프트웨어 신뢰 하락 

테스트를 통해 얻고자 하는거 
- 빠른 피드백 
- 자동화 
- 안정감

그래서 테스트를 하면서 
- 빠른 피드백 (정상 동작하는지)
- 자동화 (기계가 검증)
- s/w 안정감 때문에 테스트 코드를 작성해야 함

테스트 코드를 작성하지 않는다면 
- 변화가 생기는 매 순간마다 발생할 수 있는 모든 case를 고려해야함
- 변화가 생기는 매 순간마다 모든 팀원이 동일한 고민을 해야 함
- 빠르게 변화나는  s/w의 안전성을 보장할 수 없다 

테스트 코드가 병목이 된다면
- 프로덕션 코드의 안정성을 제공하기 힘듦
- 테스트 코드 자체가 유지보수하기 어려운 새로운 짐이 된다.
- 잘못된 검증이 이뤄질 가능성이 높아짐 

올바른 테스트 코드는 ?
- 자동화 테스트로 빠른 시간 안에 버그를 발견할 수 있고, 수동 테스트에 드는 비용을 크게 절약할 수 있다. 
- 소프트웨어의 빠른 변화를 지원한다 
- 팀원들의 집단 지성을 팀 차원의 이익으로 승격시킨다 
- 가까이 보면 느리지만, 멀리보면 가장 빠르다



[섹션 2]

* 롬북 사용시 
설정(ctrl + alt + s) > processors 검색 > Enable annotation processing 체크 해줘야 사용가능

초간단 카페 키오스크 시스템 만들기
요구사항 
- 주문 목록에 음료 추가/삭제 기능
- 주문 목록 전체 지우기
- 주문 목록 총 금액 계산하기
- 주문 생성하기


수동 테스트(콘솔 출력하여 사람이 확인) vs 자동화 테스트(junit)
- 코드 : https://github.com/wbluke/practical-testing/tree/lesson2-4
- JUnit5* : https://junit.org/junit5
- AssertJ : https://joel-costigliola.github.io/assertj/index.html

단위 테스트란 
- 작은 코드 단위(클래스 or 메서드)를 독립적으로 검증하는 테스트 
- 검증 속도가 빠르고, 안정적이다

JUnit5
- 단위 테스트를 위한 테스트 프레임워크 
- XUnit - Kent Beck 
  - JUnit(Java), NUnit(.NET), SUint(Smalltalk), ..
  
AssertJ
- 테스트 코드 작성을 원할하게 돕는 테스트 라이브러리
- 풍부한 API, 메서드 체이닝 지원

[테스트 케이스 세분화하기]
* 추가 요구사항
  - 한 종류의 음료 여러 잔을 한번에 담는 기능 
    // 음료 수량을 추가하여 주문 받고 싶다
    
> 질문하기 : 암묵적이거나 아직 드러나지 않은 요구사항이 있는가? 

두 가지 경우를 고려/도출 할 수 있어야 함 ***
(1) 해피 케이스 // 앞에 요구사항 그대로
(2) 예외 케이스 // 요구사항에 들어나지 않은 암묵적인 경우, 수량이 0이나 -1인 경우 어떻게 처리할 것인가
>> 경계값**(중요) 테스트 -> 범위(이상, 이하, 초과, 미만), 구간, 날짜 등

assertThatThrownBy(상황).isInstanceOf(발생할 에러).hasMessage(에러 메시지 확인)

[테스트 하기 어려운 영역 분리하기]
* 추가 요구사항 
 - 가게 운영시간(10:00 ~ 22:00) 외에는 주문을 생성할 수 없다
 
 - createOrder 테스트를 했는데 , 시간을 변경하면
 production 코드에서는 매개변수로 던져주고, 테스트 
 
 테스트 하기 어려운 영역을 구분하고 분리하기
 - LocalDateTime을 파라미터로 분리해서 넘겨주도록 함 
 - "어떤 시간이 주어졌을때 시간 범위 안에  들어오는게 중요"
 - 외부로 분리할 수록 테스트 가능한 코드는 많아진다..  // 이해가 덜 되네 **
 
테스트 하기 어려운 영역**
1) 관측할때마다 다른 값에 의존하는 코드 
   => 현재 날짜/시간, 랜덤값, 전역변수/함수, 사용자 입력 등
2) 외부 세계에 영향을 주는 코드 
   => 표준 출력, 메시지 발송, 데이터베이스에 기록하기 등
   
참고) 순수 함수(pure functions) 
- 같은 입력에는 항상 같은 결과
- 외부 세상과 단절된 형태
- 테스트 하기 쉬운 코드

=================

키워드 정리 
- 단위 테스트 
- 수동/자동화 테스트
- Junit5, AssertJ 
- 해피케이스, 예외케이스
- 경계값 테스트
- 테스트 하기 쉬운/어려운 영역(<-> 순수함수)

*찾아보기 lombok (사용 가이드)
- @Date, @Setter, @AllArgsConstructor 지양
- 양방향 연관관계 시 @ToString 순환 참조 문제

================================================================================================

TDD (Test Driven Development) 
- 프로덕션 코드보다 테스트 코드를 먼저 작성하여 
테스트가 구현 과정을 주도하도록 하는 방법론

*절차
1) RED : 실패하는 테스트 작성
2) GREEN : 테스트 통과 최소한의 코딩
3) REFACTOR : 구현 코드 개선, 테스트 통과 유지

예) CafeKisok 에서 전체 가격 계산 메소드를 TDD로 재구현 해봄

기존에 선 기능 구현, 후 테스트 작성 
- 테스트 자체의 누락 가능성
- 특정 테스트 케이스만 검증할 가능성 (해피 케이스)
- 잘못된 구현을 다소 늦게 발견할 가능성  // 예외 케이스 누락되어 늦게 발견 ..
  
TDD 선 테스트 작성 후 기능 구현
예) TDD로 생각하면 createOrder , 외부로 테스트 하기 어려운 영역을 분리 하도록 할 수 있다
- 복잡도가 낮은, 테스트 가능한 코드로 구현할 수 있게 한다.
  => 유연하며 유지보수가 쉬운
- 쉽게 발견하기 어려운 엣지(Edge) 케이스를 놓치지 않게 해준다. 
- 구현에 대한 빠른 피드백을 받을 수 있다.
- 과감한 리팩토링이 가능해진다.


**TDD가 사고, 관점의 변화를 일으킨다
- 구현부가 중요하고 테스트 덜 중요했다면, TDD는 테스트와 상호작용하면서 구현부를 만들도록함 
- **'클라이언트'관점에서의 '피드백'을 주는 Test Driven

=================

섹션 3 키워드 정리 
- TDD
- 레드 그린 리팩토링 사이클

[찾아보기]
- 애자일(Agile) 방법론  Vs 폭포수 방법론 (한단계 완료되야 다음단계로 넘어가는 방법론)
	애자일 성명서 : http://agilemanifesto.org/
- 익스트림 프로그래밍 (XP, eXtreme Programming) => TDD 나오게 됨
- 스크럼(Scrum), 칸반(kanban)

================================================================================================

[섹션4. 테스트는 []다]
- 테스트는 '문서'다

문서 ? 
- 프로덕션 기능을 설명하는 테스트 코드 문서 
- 다양한 테스트 케이스를 통해 프로덕션 코드를 이해하는 시각과 관점을 보완 
- 어느 한 사람이 과거에 경험했던 고민의 결과물을 팀 차원으로 승격시켜서, 
    모두의 자산으로 공유할 수 있다.


@DisplayName
- JUnit 5 부터 추가
- Junit 4의 경우 한글명으로 언더바(_)사용해서 표기 가능 (팀 컨벤션)
- 인텔리제이에서 설정에서 DisplayName 표기하는 방법을 설명해줌 

@DisplayName을 섬세하게
- 명사의 나열보다 문장으로 - A이면 B이다, A이면 B가 아니고 C다 
- "~ 테스트" 지양하기
- 테스트 행위에 대한 결과까지 기술하기

예) 특정 시간 이전에 주문을 생성하면 '실패한다'. 
=> '영업 시작 시간' 이전에는 주문을 생성할 수 없다. 
// 도메인 용어를 사용하여 한층 추상화된 내용을 담기 => 도메인 용어로 명확하게 작성 하도록 함
// 메서드 자체의 관점보다 도메인 '정책' 관점으로 
// 테스트의 현상을 중점으로 기술하지 말 것


=================


BDD (Behavior Driven Development) 
- TDD에서 파생된 개발 방법
- 함수 단위의 테스트에 집중하기보다, 시나리오에 기반한 '테스트 케이스(TC)' 자체에 집중하여 테스트
- 개발자가 아닌 사람이 봐도 이해할 수 있을 정도의 추상화 수준(레벨)을 권장
- Given/When/Then

1) Given : 시나리오 진행에 필요한 모든 준비 과정 (객체, 값, 상태 설정)
	어떤 환경에서
2) When : 시나리오 행동 진행
	어떤 행동을 진행했을 때
3) Then : 시나리오 진행에 대한 결과 명시, 검증
	어떤 상태 변화가 일어난다 
=> DisplayName과 함께 명확하게 작성가능  (장점)

*팁 - live template 에 등록  (Java)

@org.junit.jupiter.api.DisplayName("")
@org.junit.jupiter.api.Test
void test() {
    // given
    
    // when 
    
    // then
    
}	

=================
섹션 4 키워드 정리 
- @DisplayName - 도메인 정책, 용어를 사용한 명확한 문장 표현 
- Given/When/Then - 주어진 환경, 행동, 상태 변환 
- TDD vs BDD

찾아보기 
- JUnit vs SPOCK (groovy언어로 테스트 하는 언어, BDD로 탄생)
 // 장단점 비교 해보기


'언어가 사고를 제한한다.'

================================================================================================
[섹션 5]

요구사항 
- 키오스크 주문을 위한 상품 후보 리스트 조회하기
- 상품의 판매 상태 : 판매중, 판매보류, 판매중지 
  => 판매중, 판매보류인 상태의 상품을 화면에 보여준다
- id, 상품번호, 상품 타입, 판매 상태, 상품이름, 가격  
  
  
BaseEntity 추상 클래스 생성 후 *Appliction에 @EnableJpaAuditing 선언 해줘야 사용가능
- 생성일, 수정일 필드 공통 관리 위해


application.yml에서 
- profile 분리가 중료 
- jpa.defer-datasource-initialization: true  # hibernate 초기화 이후에 data.sql을 실행 시켜 달라는 의미 => 이걸 안하면 hibernate 초기화전에 sql 실행해서 에러남
  동일 레벨에 data.sql 실행 시켜줌 
  - 초기 개발할때만 사용함 
  - 테스트 상에서는 사용하지 않음 
    sql:
      init:
        mode: never

문제1) 파일명이 틀렸음 
문제2) 테이블이 생성 했는데 없고, insert문도 실행 안됨
	https://kamang-it.tistory.com/entry/H2%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0%EB%AA%A8%EB%93%9C-%ED%8F%AC%ED%8A%B8
	https://jeongkyun-it.tistory.com/184
	https://javanitto.tistory.com/37
	https://o7planning.org/11895/install-h2-database-and-use-h2-console
	https://herojoon-dev.tistory.com/141
	
서버 포트와 동일한 localhost:8080/h2-console접속하면 확인가능
BaseEntity의 경우 JPA 통해서 입력될시에만 tracking 발생함
- In embedded mode, an application opens a database from within the same JVM using JDBC. This is the fastest and easiest connection mode.
기본적으로 JVM 안에 디비가 생성됨(임베디드 모드에서) >> 어플리케이션과 동일한 포트로 path만 추가하여 접속가능 ** 

https://howtodoinjava.com/spring-boot2/h2-database-example/

=================================================
Repository 테스트
- 스프링 통합 테스트 어노테이션을 사용하지만 단위 테스트 느낌이 남 

DataJpaTest SpringBootTest 
- DataJapTest가 좀 더 가벼움. JPA관련된 것만 서버 띄우므로
- 근데 강사분은 SpringBootTest를 선호 한다 함

@ActiveProfiles("test") // test profile로 실행하겠다
=================================================
[Business Layer 테스트 (1)]

**Persistence Layer 
- Data Access의 역할 
- 비즈니스 가공 로직이 포함되어서는 안된다. (중요!) 
  Data에 대한 CRUD에만 집중한 레이어 
  
**Business Layer 
- 비즈니스 로직을 구현하는 역할 
- Persistence Layer 와의 상호작용(Data를 읽오 쓰는 행위)ㅇ르 통해 비즈니스 로직을 전개시킨다. 
- '트랜잭션'**을 보장해야 한다(*작업 단위의 원자성을 가짐)


비지니스 레이어는 Persistence Layer 포함하여 Service Test 수행한다 ! 


요구사항 
- 상품 번호 리스트를 받아 주문 생성하기 
- 주문은 주문 상태, 주문 등록 시간을 가짐
- 주문의 총 금액을 계산할 수 있어야 한다. 

주문 쪽에서만 상품 정보를 알면 될 거같다 // 주문 Order, 상품 Product (반대는 의미 x)
Order와 OrderProduct의 양방향 관계만 설정함

OrderService에 대해 TDD 수행

Order 생성자에 대해 단위 테스트 생성

//순서 상관없음 Assertion
containsExactlyInAnyOrder

//순서 중요 Assertion
containsExactly(Tuple.tuple(), Tuple.tuple());

// ENUM타입 비교시 값 자체로 비교 해줌 isEqualTo도 되는듯? Assertion
isEqualByComparingTo()


 public Order(List<Product> products, LocalDateTime registeredDateTime) { // 단위 테스트수행 OrderTest
        this.orderStatus = OrderStatus.INIT;
        this.totalPrice = calculateTotalPrice(products);

        // handling 어려우므로 아래와 같이 인자 받도록 변경
        // this.registeredDateTime = LocalDateTime.now();

        this.registeredDateTime = registeredDateTime;

    }
    
    
    서비스에서 now 넣으면 또 어려워지니 컨트롤러까지 쭉 뺌 
    ctrl + alt + p = introduce parameter // 파라미터 추출, 단축키가 안먹네
    
    
ctrl + alt + v =  introduce variable 함수 매개변수를 지역변수로 추출 =>: OrderController 에 createOrder  

**********@ActiveProfiles("test") ???? 왜 했었지 persistence 테스트 다시 보기
********* OrderProduct 에 대해서 조금 이해 안됨 .. 굳이 중간 테이블이 필요한가(Order와 Product의)

OrderServiceTest시 에러 발생 (2개 테스트가
java.lang.IllegalStateException: Duplicate key 001 (attempted merging values sample.cafekiosk.spring.domain.product.Product@1529d534 and sample.cafekiosk.spring.domain.product.Product@3c5cb013)

2번 테스트에 저장한 매서드가 1번 메서드에 영향 중 --> given에서 데이터 초기화시 중복..
    // alt + insert
    @AfterEach
    void tearDown() { // 각 테스트 별로 테스트 후 데이터 삭제
        orderProductRepository.deleteAllInBatch();
        productRepository.deleteAllInBatch();
        orderRepository.deleteAllInBatch();
    }
    
*차이점 
1) OrderServiceTest는 clean을 안해서 전체 테스트 실패  => @SpringBootTest에는 트랜잭션이 없으므로 롤백이 되지 않음.. 

@SpringBootTest
@Transcational  할 경우 롤백은 되지만 문제 발생가능 -> 다음 강의 (3)에서 설명예정

2) Repository 테스트는 통과 (ProductRepositoryTest) => **@DataJpaTest 어노테이션 확인하면 *트랜잭션이 걸려있음 !! 그래서 자동 롤백
-- Began transaction (1) for test context
//테스트 1 수행
-- Rolled back transaction for test

==============

*인텔리제이에서 제공하는 http 테스트
1) POST 요청 테스트는 *.http 파일 생성 => http 폴더 생성 후 order.http 신규 생성

### 주문 신규 생성 (order.http)
POST localhost:8080/api/v1/orders/new
Content-Type: application/json        -- 해더

{ -- POST 이기 때문에 request body 로 정보 전달 가능
  "productNumbers": [
    "001",
    "002"
  ]
}

### 판매 할 수 있는 상품 조회 (product.http)
GET localhost:8080/api/v1/products/selling


2) application실행 후 *.http 파일에서 실행 버튼 누르면 호출함 

================================================================
[Business Layer 테스트(3)]

추가 요구사항 
- 주문 생성시 재고 확인 및 개수 차감 후 생성하기 
- 재고는 상품번호를 가진다.
- 재고와 관련있는 상품 타입은 병 음료, 베이커리 이다. (HANDMADE는 상관없음) 


OrderServiceTest 
Stock Entity -> StockRepository -> OrderService.createOrder
-> ProductType에 static boolean 함수 생성 -> ProductType 함수 테스트

StockRepositoryTest

// 서비스 테스트, Repository테스트, enum 함수 테스트


isFalse();
isZero();
isTrue();

// junit assertions 예외 테스트
assertThatThrownBy() 


같은 상황이지만, 발생하는 상황이 다르니 서비스와 메서드 별로 보장을 따로 함
1) OrderService 주문 생성 로직 수행하다가 재고 차감 시도시 isQuantityLessThan 호출하는 경우 
2) Stock 자체의 경우 밖의 서비스는 모르고, 단위 테스트 이므로 수량 차감시 올바른 수량 차감을 수행 해줘야 함 -- deductQuantity 
그래서 예외 핸들링 방향이 다르므로 2가지 상황이 나옴

* 테스트 최상단에 @Transcational 있을 경우
creatOrderWithStock() 테스트에 대해 트랜잭션 커밋 시점에 달라진 부분(더티채킹) 해서 스톡 재고 update 처리되서 정상 동작함

// @Transacational 제거 후 수동 삭제 처리할 경우 '실패' 뜸 (중요!!, jpa 더티 채킹 되려면 트랜잭션 처리 필요)
=> stock에 대한 update 쿼리가 더티 체킹 처리되지 않아서 , stock 데이터 조회시 틀렸다함
=> 당연히 롤백도 안됨 => OrderService에 @Transacational 달면 동작함 
=> 트랜잭션 종료시점에 인스턴스 비교해서 더티 체킹 해서 update 됨

서비스에 Transacational 없이 Test에 어노테이션 붙이면 
45분 *************** 다시 보기
-- tearDown 지우고, Test에 @Transacational 삭제
-- 기존에 Service에 Transcational이 없어도 insert 나간 이유는 ??
   CrudRepository interface 구현첸인 SimpleJpaRepository에 보면 기본으로 사용하는 
save(), delete() ... 메서드에 @Transcational 이 걸려있음


** 재고 감소는 쉬운 문제가 아님 (스스로 찾아보기)
==> 동시성 고민이 필요함
==> optimistic lock/ pessimistic lock / .. 과 같은 lock 개념을 사용해서 처리함 ***
==========================================================================

[Presentation Layer 테스트(1)]
- 외부 세계의 요청을 가장 먼저 받는 계층 
- 파라미터에 대한 최소한의 검증을 수행한다

*Controller Layer 테스트 할때는 하위 계층은 Mocking 처리해서 확인
- Mock : 가짜, 대역
- MockMvc : 테스트 할 때 의존 관계가 문제되는데, 가짜 객체를 사용해서 스프링 MVC동작을 재현할 수 있는 테스트 프레임워크 사용함 

* 추가 요구사항 (가정)
- 관리자 페이지에서 신규 상품을 등록할 수 있다. 
- 상품명, 상품타입, 판매 상태, 가격 등을 입력받는다.


//createNextProductNumber() 에서 
return String.format("%03d", nextProductNumberInt); // 9 -> 009 , 10 -> 010, 9999 -> 9999 , 세 자리 수를 맞추기 위해 왼쪽에서 0으로 채워주고 넘을 경우 그대로 출력


ProductService.createProduct의 경우 '동시성 이슈' 발생 가능 
- 상품을 여러명 동시에 등록하는 경우
- 증가하는 번호 부여 할 때 동시성 이슈 발생하면 how ? 
	- DB에서 unique index걸고 재시도 하는 로직 추가 가능 ( 3회 이상 재시도 등등 )
	- 시스템에서 알아서 재시도해서 통과하게 하는 방법1
	- 크리티컬한 케이스의 경우 정책*을 다르게 UUID로 가거나 (방법2)
	
Service테스트에서 *********************************************
@Transcational(readOnly = true)	의 경우 읽기 전용 Transaction이 열림 
=> CUD 작업이 동작안하고 오직 R(조회)만 가능
=> JPA에서 CUD 스냅샷 저장, 변경감지 X 해도 되서 성능 향상 효과 있음 
=> CQRS : Command(CUD) / Query(Read) 서비스에 대한 책임을 분리하자 (중요**)
   - 실서비스의 경우 Read가 압도적으로 많음 
   
현업에서는 DB도 read, write 용으로 엔드포인트 나눠 씀 ************ 이런것도 있구나
- master, slave 엔드포인트
- writer용 DB : master @Transcational(readOnly = false)
- read용 DB : slave (읽기 전용)  @Transcational(readOnly = true)

따라서 readOnly에따라 구분할 수 있도록 신경을 쓰자 (중요하다)	
- Tip) Service 클래스 상단에 @Transactional(readOnly = true) 걸고, CUD필요한 method는
따로 @Transactional을 걸도록 한다 !!! ****************************
	
==========================================================================
[Presentation Layer 테스트(2)]
1) 
ProductControllerTest 신규 생성 
	@WebMvcTest = controller 관련 bean만 올려주는 좀 더 가벼운 테스트(@SpringbootTest = 전체 bean 올림)


@WebMvcTest(controllers = ProductControllerTest.class)
class ProductControllerTest {

    @Autowired
    private MockMvc mockMvc;
}


2) spring boot starter에 다 들어가 있음
Mockito 라이브러리 -> interface Mock -> @MockBean
https://site.mockito.org/

- ProductController에서는 ProductService 가 bean 올라와야 하는데 
@MockBean 처리 안해주면 에러 발생 
- post의 경우 http body에 데이터 넣어서 전달하게 되는데 json으로 직력화/역직렬화 수행됨
- 그래서 컨트롤러 테스트시 파라미터 전달 위해 직렬화/역직렬화 ObjectMapper 의존성 추가 후 사용

에러1)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jpaAuditingHandler': Cannot resolve reference to bean 'jpaMappingContext' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jpaMappingContext': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: JPA metamodel must not be empty!


-> BaseEntity 에서 auditing 기능 사용해서 web MVC로 올렸는데 관련 빈을 못 만들어서 에러 출력  
-> JpaAuditingConfig 클래스 만들어서 @EnableJpaAuditing 추가하여 사용하도록 수정(메인 파일에 있는 동일 어노테이션 삭제)


에러2) 404에러
- controller에 @RequestBody 빠짐
- post 요청시 objectMapper가 역직렬화 도와줌 
=> string json을 ProductCreateRequest로 mapping 해줄떄 기본 생성자 사용
- 호출 url 오타 
- @WebMvcTest(controllers = ProductController.class) 클래스 잘못 표기



* 컨트롤러는 파라미터 validation 확인하는게 주요 기능 중 하나이다
build.gradle
	implementation 'org.springframework.boot:spring-boot-starter-validation'

@NotNull
@NotBlank  // string
@Positive  // 양수

@Valid 는 받는 컨트롤러 매개변수에 붙이기 ( 이 object를 검증하겠다는 의미 , spring 3.0은 패키지 다르고 기능 동일)

*) 백엔드에 응답 줄때 규격이 있으면 좋다 (더 추가적인 메타 정보 전달하기 좋다(?))
ApiResponse 공통 규격 클래스 생성 // 협업하는 프론트쪽과 규격을 정하면 좋음
static method 생성하여 controller return 하도록 처리


*) ApiControllerAdvice 클래스 생성하여 공통 에러 처리
@RestControllerAdvice
public class ApiControllerAdvice {

    @ExceptionHandler(BindException.class) // @Valid 에 걸리면 BindException 발생함
    public ApiResponse<Object> bindException(BindException e) {
        return ApiResponse.of(
                HttpStatus.BAD_REQUEST,
                e.getBindingResult().getAllErrors().get(0).getDefaultMessage()
                // 메시지의 경우 @NotNull과 같은 validation 어노테이션 인자에 message 속성에 작성가능
        );
    }
}
 
*) 상품 요청에 예외에 대한 테스트를 작성한다 (400 에러 기대, 4개)
@RestControllerAdvice // rest controller advice가 따로 있다
public class ApiControllerAdvice {

    @ResponseStatus(HttpStatus.BAD_REQUEST) // 요게 있어야  MockHttpServletResponse  response 를 400 처리 해줌 => 없는 경우 header에 status 200되어서 테스트 에러 **
    @ExceptionHandler(BindException.class)
    public ApiResponse<Object> bindException(BindException e) {
        return ApiResponse.of(
                HttpStatus.BAD_REQUEST, // 규격 내용만 
                e.getBindingResult().getAllErrors().get(0).getDefaultMessage()
        );
    }
}

// validatiaon 관련
1) validation annotation 차이 구분
@NotNull : Null이 아니여야 한다, String 기준 "" , '', ''
@NotEmpty : "", ''
@NotBlank : 공백도 안됨
@Positive

2) validation에 대한 책임 분리
예) 상품 이름은 20자 제한 있을때 @Max(20)이 있는데.. controller에서 책임지는게 맞는가 고민해보기 
=> 도메인 정책을 구분하는 시야 필요, 
=> (강사 왈***) String에 대한 최소한의 기본 조건만 하고 controller 단에서 하고, 길이 제한 같은 경우 Service Layer나 생성자와 같은 안쪽 레이어에서 검증하는게 맞다고 생각 *****

//** OrderControllerTest 만들때 bean을 만드는데 의존 관계 서비스가 없으므로 아래와 같이 처리 필요
@MockBean
private OrderService orderService;


// ** 마지막 리팩토링 
OrderController에 createOrder에서 OrderCreateRequest를  service로 그대로 보내서 사용하는데 
- 두 레이어간 dto를 통해 의존이 생겨 있는 상태, 나중에 모듈 분리할 경우 문제 발생 
- 서비스가 컨트롤러를 알고 있는 상태 (하위가 상위를 모르는게 좋다)
-- dto조차 레이어별로 분리해서 사용하는구나
=> (강사 왈**)그래서 서비스용 dto를 따로 만들어서 사용한다함
=> 서비스 커질 수록 이런 dto 분리가 부담이고 귀찮을 수 있지만, 
   채널이 여러개(키오스크, 채널 등등) 되면 service에 dto가 채널 수만큼 늘어나니 , 영향 받지 않도록 service dto 를 만들어서 관리하는게 의존성, 책임 분리 측면에서 좋다.

===================================================================
섹션5. 키워드 정리 
- Layered Architecture -- 작은 시스템이라면
  단점) Order Entity(도메인) 객체를 보면 JPA와 강결합이 되어 있는 상태
- Hexagonal Architecture (알아보기*) -- 시스템이 커지고, 멀티모듈이 많아진다면 헥사고날을 
  adapter와 port 통해 domain model과 외부 객체가 의사소통 가능 
  DI 확장한다면 추상된 인터페이스를 두고 
   데이터 엑세스, 구현 JPA repository 구현체를 runtime 시점에 따로 준다면 .. (?)

- 단위 테스트 vs 통합 테스트 
- IoC, DI, AOP 
- ORM, 패러다임의 불일치, Hibernate
- Spring Data JPA

- QueryDSL - 타입체크, 동적쿼리 (알아보기*) 
  // 이게 jpa에 필수라고??
  // 쿼리 작성 시점에 타입 체크가 됨, 컴파일 단계에서 에러 찾을 수 있음 
  // (강력한 장점) 동적 쿼리 
     > 검색 항목에 따라 조건문이 더러워지는데 
     > where문에 조건 주고, null 제외한 나머지로 조건문 동적 생성 가능 
     
- @SpringBootTest vs @DataJpaTest 
- @SpringBootTest vs @WebMvcTest
- @Transactional(readOnly = true)

- Optimistic Lock, Pessimistic Lock (알아보기*, 동시성 이슈)
- CQRS (알아보기*)

- @RestControllerAdvice, @ExceptionHandler      // 커스텀 에러처리?? 
- Spring bean validation  // Contoller에서는 최소한으로 하고, Domain || Service 레이어 검증필요할 경우 분리할 수 있도록 하자
  - @NotNull, @NotEmpty, @NotBlank, ...
- @WebMvcTest
- @ObjectMapper
- Mock, Mockito, @MockBean
  

===========================================================
[섹션6. Mock를 마주하는 자세]

*Mockito로 Stubbing 하기

추가 요구사항
관리자 > 주문 관리 > 일일 매출 통계 (날짜 선택, 메일 입력하고 결과 발송) 


OrderStatisticsService 신규 service 생성 
enum OrderStatus
Order Entity에서 생성일 필드로 조회 (엄밀히 따지면 주문완료 필드가 따로 필요한데, 일단 넘어감) 

MailService // 실제 기능은 아니고, 임의 메일 발송 행위를 하는 서비스 생성
MailSendClient // 실제 메일 발송 위임한 component
MailSendHistory // 메일 이력관리 Entity
MailSendHistoryRepository 생성

결제완료 주문을 만들기 위해 Order Entity에 Builder 추가
==>> Order Entity Builder 추가하면서 리팩토링하는데 어렵네.. 

***테스트 돌릴 때마다 메일 쏴지도록 할 수도 있지만 
시간/비용 그리고 번거로움 .. 그래서 mocking 사용하여 메일 기능 구현****
= Mock 가짜 객체가 어떤 행동에 대한 어떤 행동했으면 좋겠다고 지정가능

mailSendClient.sendEmail에 현재 에러 발생하는데 아래 stubbing 하니 행위에 대한 가짜 행위 정의 되서 통과되네 (신기 = stubbing)

    @MockBean
    private MailSendClient mailSendClient; // Mockito 하기 위한 Bean 선언

 // stubbing
        Mockito.when(mailSendClient.sendEmail(any(String.class), any(String.class), any(String.class), any(String.class)))
                .thenReturn(true); // any(String.class) String 값 아무거나 상관없음
                
(참고**) 메일 발송시 트랜잭션 안쓰는게 좋다 -> 네트워크를 타는 메일 발송은 긴 시간이 걸리니 커넥션 자원 차지 하지 않게 하고 하는게 좋다
====================================================================================================
[섹션 6-2 Test Double]

- Stunt Double 에서 차용된 용어 (영화에서 스턴트맨 사용하는 경우)
- Test Double에 대한 마틴 파울러 좋은 글 
https://martinfowler.com/articles/mocksArentStubs.html

Test Double의 5가지 종류 
- Dummy : 아무것도 하지 않는 깡통 객체 
- Fake : 단순한 형태로 동일한 기능을 수행하나, 프로덕션에서  쓰기에는 부족한 객체
	(ex. FakeRepository)
- Stub : 테스트에서 요청한 것에 대해 미리 준비한 결과를 제공하는 객체
	그 외에는 응답하지 않는다. 
- Spy : stub이면서 호출된 내용을 기록하여 보여 줄 수 있는 객체 
	일부는 실제 객체처럼 동작시키고 일부만 Stubbing 할 수 있다.
- Mock : 행위에 대한 기대를 명세하고, 그에 따라 동작하도록 만들어진 객체

Mock != Stub 이다 
- Stub 은 상태 검증 (State Verification) // 메소드 호출 시 상태값 검증
- Mock 은 행위 검증(Behavior Verification) // 행위를 검증 

Test Double에 대한 정의와 샘플 코드 나와 있음 (Mock != Stub)
https://martinfowler.com/articles/mocksArentStubs.html


====================================================================================================

[섹션 6-3 @Mock, @Spy, @InjectMock]

- OrderStatisticsServiceTest 에서 Mockito를 사용하여 테스트 수행 (sendMail)
- 이때 통합테스트 @SpringBootTest 를 통해 spring bean을 올려서 작업 했는데 
  Spring Bean 사용하지 않고
   순수 Mockito로만 테스트 수행 
  
 MailServiceTest생성 
 - 기존 MailService에서는 spring boot 올려서 bean 주입 받은 걸 사용했지만 Mockito로 임의 생성하여 주입하는 방식 함
 
 save시 mock객체는 아래의 DEFAULT 리턴값을 넘겨주는 정책이 정해져 잇음 
 -> JPA save시 객체가 리턴도는데 null, 만약 대상이 int면 0 리턴
     public static final Answer<Object> RETURNS_DEFAULTS = Answers.RETURNS_DEFAULTS;


** 테스트 시작시 Mockito를 사용하여 Mocktio 객체를 만들거야라고 선언
방법1)
@ExtendWith(MockitoExtension.class) // @Mock 과 한쌍
class MailServiceTest {

    @Mock
    private MailSendClient mailSendClient;

    @Mock
    private MailSendHistoryRepository mailSendHistoryRepository;
	
      @DisplayName("메일 전송 테스트")
    @Test
    void sendMail() {
        // given (MailService 에서 주입 받는 객체를 순수 Mockito 객체로 생성
	// @Mock 으로 선언했기 때문에 필요 없어짐
        //MailSendClient mailSendClient = Mockito.mock(MailSendClient.class);
        //MailSendHistoryRepository mailSendHistoryRepository = Mockito.mock(MailSendHistoryRepository.class);

	// 여기 @Mock 주입
        MailService mailService = new MailService(mailSendClient, mailSendHistoryRepository);
}


방법2)

@ExtendWith(MockitoExtension.class)
class MailServiceTest {

    @Mock
    private MailSendClient mailSendClient;

    @Mock
    private MailSendHistoryRepository mailSendHistoryRepository;

    @InjectMocks // 해당 서비스 생성자에 @Mock을 주입을 대신 해줌
    private MailService mailService; 

    // 순수 Mockito Test
    @DisplayName("메일 전송 테스트")
    @Test
    void sendMail() {
        // given (MailService 에서 주입 받는 객체를 순수 Mockito 객체로 생성
        //MailSendClient mailSendClient = Mockito.mock(MailSendClient.class);
        //MailSendHistoryRepository mailSendHistoryRepository = Mockito.mock(MailSendHistoryRepository.class);

	//@InjectMocks 통해서 없어도 됨
        //MailService mailService = new MailService(mailSendClient, mailSendHistoryRepository);


@Spy --- 쓰는 빈도는 많지 않다함 (주로 @Mock을 쓰고, 필요시에 @Spy 사용한다함)
- MailSendClient @Component에 기능이 많다고 가정하자
  MailService에 sendMail에서 MailSendClient의 기능을 여러개 호출할 때 *
  mailSendClient에 sendEmail만 Stubbing하고 나머지 기능은 원래대로 동작하길 원함 
  => 이때 사용하는게 @Spy
  
 (변경전)
    @Mock // ** 이것과 아래 stubbing 수정 
    private MailSendClient mailSendClient;

    @Mock
    private MailSendHistoryRepository mailSendHistoryRepository;

    @InjectMocks
    private MailService mailService;

    // 순수 Mockito Test
    @DisplayName("메일 전송 테스트")
    @Test
    void sendMail() {
        // given (MailService 에서 주입 받는 객체를 순수 Mockito 객체로 생성
        // stubbing ** 수정 
        Mockito.when(mailSendClient.sendEmail(anyString(), anyString(), anyString(), anyString()))
                .thenReturn(true); // any(String.class) String 값 아무거나 상관없음
                
(변경후) 
    @Spy // ***
    private MailSendClient mailSendClient;

    @Mock
    private MailSendHistoryRepository mailSendHistoryRepository;

    @InjectMocks
    private MailService mailService;

    // 순수 Mockito Test
    @DisplayName("메일 전송 테스트")
    @Test
    void sendMail() {
        // stubbing
        doReturn(true)
                .when(mailSendClient)
                .sendEmail(anyString(), anyString(), anyString(), anyString());
           
           
          ====================================================================================================     
          
6-4. BDDMockito 
- 행동 주도 

MailServiceTest에서 @mock 테스트시 
given 부분에 when이 있으니 뭔가 이상하여 탄생 

  // @Mock stubbing
//        Mockito.when(mailSendClient.sendEmail(anyString(), anyString(), anyString(), anyString()))
//                .thenReturn(true); // any(String.class) String 값 아무거나 상관없음
        BDDMockito.given(mailSendClient.sendEmail(anyString(), anyString(), anyString(), anyString()))
                .willReturn(true);

>> BDDMockito들어가면 Mockito를 상속받아서 사용하고 있으므로, 동작은 동일하고 표현 형태만 다를 뿐
   // 기능은 동일하고 이름만 변경
                
====================================================================================================     

6-5 Classicist vs Mockist
- Mockist : 모든 것을 Mocking 처리해서 잘라서 테스트를 간단히 하자
- Classicist : Mocking 다 해버리는 것보다, 실제 객체로 협업 하는 걸 보장하기 위해 실제 객체로 하자
		>> 실제 객체로 테스트하다가 꼭 필요한 경우에만 Mocking하자
// 강사는 Classicist 쪽이라네 

언제 Mocking을 써야하는가?
- 외부의 시스템 연계할 때 계(?) 기준으로 Mocking해야 한다. // classicist 입장

생각해보기*
실제 프로덕션 코드에서 
런타임 시점에 일어날 일을
정확하게 Stubbing했다고 단언할 수 있는가?
=> 통합테스트, 실제 객체를 불러와서 테스트하는게 훨씬 낫다. (꼭 필요한 경우에만 Mocking하자)	
		
          
====================================================================================================     

6-6. 키워드 정리 
- Test Double, Stubbing 
	- dummy, fake, stub, spy, mock 
- @MockBean, @Spy, @SpyBean,  // 기능중에 스파이가 있다
  @Mock, @InjectMock // 스프링없이 사용할 때 
- BDDMockito  // BDD스타일로 Mockito 사용하게 해주는 Mocking 객체다. 이걸 사용해서 given when then 
- Classicist VS. Mockist

====================================================================================================     

[섹션 7. 더 나은 테스트를 작성하기 위한 구체적 조언] -- 

7-1 한 문단에 한 주제!

ProductTypeTest
- if 두가지 이상의 케이스를 구분 하겠다 
=> 분기문/반복문이 결국 논리구조가 들어가서 이해를 해야하기 때문에
테스트가 지향하는 걸 방해하기 때문에 지양하는게 좋다

  
한 가지 테스트에서는 한 가지 목적
= @DisplayName을 한문장으로 표현가능한가

==> 심플하게 케이스를 나눠서 테스트 코드 작성하는게 낫다


7-2 완벽하게 제어하기
- 테스트 환경 조성시 모든 조건 제어 가능해야 한다 ( "완벽하게 제어 가능한가?")
- Mocking 처리해서 외부 시스템이 정상동작할거야 , 장애시 어떤 동작을 할거야 등 
  제어 가능한 영역을 구분하여 Mocking 처리 // MailSendClient (?)
- OrderTest에서 createOrder에서도 registeredDateTime 변수를 선언하고 


CafeKioskTest 확인
- 현재 시간과 같은 제어 어려운 거는 상위로 올리고, 테스트 시에는 원하는 시간 고정 주입해서 제어*
   
    public Order createOrder() {
        LocalDateTime now = LocalDateTime.now(); // 테스트 하기 어려운 부분
        LocalTime currentTime = now.toLocalTime();

        if(currentTime.isBefore(SHOP_OPEN_TIME) || currentTime.isAfter(SHOP_CLOSE_TIME)) {
            throw new IllegalArgumentException("주문 시간이 아닙니다. 관리자에게 문의하세요");
        }

        return new Order(now, beverages);
    }

    public Order createOrder(LocalDateTime now) { // 파라미터로 분리하여 테스트 가능해짐 **
        LocalTime currentTime = now.toLocalTime();

        if(currentTime.isBefore(SHOP_OPEN_TIME) || currentTime.isAfter(SHOP_CLOSE_TIME)) {
            throw new IllegalArgumentException("주문 시간이 아닙니다. 관리자에게 문의하세요");
        }

        return new Order(now, beverages);
    }
    
    
7-3. 테스트 환경의 독립성을 보장하자 
- deductQuantity >> OrderServiceTest 에서, todo 
  주문생성 테스트시 재고 관련 상품인데 재고가 부족한 상품으로 주문 생성하려는 경우 예외 발생하는 테스트
  
  createOrder 테스트인데 *.deductQuntity 라는 
  문1) 맥락을 이해하기 위한 허들이 생성됨, 논리적의 사고 들어감 // given절을 구성하는데 한번에 이해 안됨
  문2) 해당 기능에 문제가 생겼을 때 when, then이 아닌 given절 생성이 *.deductQuantity에서 에러 발생하면 
      유추하기 어려운 상황 발생 가능 

권장      
- 순수 빌더나 생성자 기반으로 생성 하기       
- 팩터리 메소드 지양하기 (팩토리 또한 의도를 가지고 만든거기 떄문에)
  
  

